{
  "address": "0x7E5e9afA561F219587144738625B61f25DEB53bF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_cardinality",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "drawId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winningRandomNumber",
          "type": "uint256"
        }
      ],
      "name": "DrawSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "ManagerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipOffered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_CARDINALITY",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "draws",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "winningRandomNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawId",
              "type": "uint32"
            }
          ],
          "internalType": "struct DrawLib.Draw[256]",
          "name": "",
          "type": "tuple[256]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "drawId",
          "type": "uint32"
        }
      ],
      "name": "getDraw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "winningRandomNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawId",
              "type": "uint32"
            }
          ],
          "internalType": "struct DrawLib.Draw",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "drawIds",
          "type": "uint32[]"
        }
      ],
      "name": "getDraws",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "winningRandomNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawId",
              "type": "uint32"
            }
          ],
          "internalType": "struct DrawLib.Draw[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNewestDraw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "winningRandomNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawId",
              "type": "uint32"
            }
          ],
          "internalType": "struct DrawLib.Draw",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOldestDraw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "winningRandomNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawId",
              "type": "uint32"
            }
          ],
          "internalType": "struct DrawLib.Draw",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "winningRandomNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawId",
              "type": "uint32"
            }
          ],
          "internalType": "struct DrawLib.Draw",
          "name": "_draw",
          "type": "tuple"
        }
      ],
      "name": "pushDraw",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "winningRandomNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawId",
              "type": "uint32"
            }
          ],
          "internalType": "struct DrawLib.Draw",
          "name": "_newDraw",
          "type": "tuple"
        }
      ],
      "name": "setDraw",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec07a723a01c01ad8e90e6d366c281496f93b7611e5a4d92ea15f29ecf008f37",
  "receipt": {
    "to": null,
    "from": "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "contractAddress": "0x7E5e9afA561F219587144738625B61f25DEB53bF",
    "transactionIndex": 1,
    "gasUsed": "1239400",
    "logsBloom": "0x
    "blockHash": "0x19a951674c22777b75ef1785f1a38b8f3a097ad6bab6dbb8b104d5075ff6dbe1",
    "transactionHash": "0xec07a723a01c01ad8e90e6d366c281496f93b7611e5a4d92ea15f29ecf008f37",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 19219328,
        "transactionHash": "0xec07a723a01c01ad8e90e6d366c281496f93b7611e5a4d92ea15f29ecf008f37",
        "address": "0x7E5e9afA561F219587144738625B61f25DEB53bF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x19a951674c22777b75ef1785f1a38b8f3a097ad6bab6dbb8b104d5075ff6dbe1"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 19219328,
        "transactionHash": "0xec07a723a01c01ad8e90e6d366c281496f93b7611e5a4d92ea15f29ecf008f37",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000d35aee6343000000000000000000000000000000000000000000000000000008ee34d1b20460000000000000000000000000000000000000000000000000000112b361be064000000000000000000000000000000000000000000000000000081ad9e34ec1600000000000000000000000000000000000000000000000000001e60e502149400",
        "logIndex": 3,
        "blockHash": "0x19a951674c22777b75ef1785f1a38b8f3a097ad6bab6dbb8b104d5075ff6dbe1"
      }
    ],
    "blockNumber": 19219328,
    "cumulativeGasUsed": "1260400",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    8
  ],
  "solcInputHash": "c10ecf7ed4019ef1b5b277259dc2440b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_cardinality\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningRandomNumber\",\"type\":\"uint256\"}],\"name\":\"DrawSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CARDINALITY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draws\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"winningRandomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"}],\"internalType\":\"struct DrawLib.Draw[256]\",\"name\":\"\",\"type\":\"tuple[256]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"}],\"name\":\"getDraw\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"winningRandomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"}],\"internalType\":\"struct DrawLib.Draw\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"drawIds\",\"type\":\"uint32[]\"}],\"name\":\"getDraws\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"winningRandomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"}],\"internalType\":\"struct DrawLib.Draw[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewestDraw\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"winningRandomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"}],\"internalType\":\"struct DrawLib.Draw\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOldestDraw\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"winningRandomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"}],\"internalType\":\"struct DrawLib.Draw\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"winningRandomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"}],\"internalType\":\"struct DrawLib.Draw\",\"name\":\"_draw\",\"type\":\"tuple\"}],\"name\":\"pushDraw\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"winningRandomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"}],\"internalType\":\"struct DrawLib.Draw\",\"name\":\"_newDraw\",\"type\":\"tuple\"}],\"name\":\"setDraw\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"PoolTogether Inc Team\",\"kind\":\"dev\",\"methods\":{\"claimOwnership()\":{\"details\":\"This function is only callable by the `_pendingOwner`.\"},\"draws()\":{\"details\":\"Return all draws from the draws ring buffer.\",\"returns\":{\"_0\":\"Draws array\"}},\"getDraw(uint32)\":{\"details\":\"Read a Draw using the Draw.drawId to calculate position in the draws ring buffer.\",\"params\":{\"drawId\":\"Draw.drawId\"},\"returns\":{\"_0\":\"DrawLib.Draw\"}},\"getDraws(uint32[])\":{\"details\":\"Read multiple Draws using each Draw.drawId to calculate position in the draws ring buffer.\",\"params\":{\"drawIds\":\"Array of Draw.drawIds\"},\"returns\":{\"_0\":\"DrawLib.Draw[]\"}},\"getNewestDraw()\":{\"details\":\"Uses the nextDrawIndex to calculate the most recently added Draw.\",\"returns\":{\"_0\":\"DrawLib.Draw\"}},\"getOldestDraw()\":{\"details\":\"Finds the oldest Draw by comparing and/or diffing totalDraws with the cardinality.\",\"returns\":{\"_0\":\"DrawLib.Draw\"}},\"manager()\":{\"returns\":{\"_0\":\"Current `_manager` address.\"}},\"pendingOwner()\":{\"returns\":{\"_0\":\"Current `_pendingOwner` address.\"}},\"pushDraw((uint256,uint32,uint32))\":{\"details\":\"Push new draw onto draws history via authorized manager or owner.\",\"params\":{\"_draw\":\"DrawLib.Draw\"},\"returns\":{\"_0\":\"Draw.drawId\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDraw((uint256,uint32,uint32))\":{\"details\":\"Updating a Draw should be used sparingly and only in the event an incorrect Draw parameter has been stored.\",\"params\":{\"_newDraw\":\"DrawLib.Draw\"},\"returns\":{\"_0\":\"Draw.drawId\"}},\"setManager(address)\":{\"details\":\"Throws if called by any account other than the owner.\",\"params\":{\"_newManager\":\"New _manager address.\"},\"returns\":{\"_0\":\"Boolean to indicate if the operation was successful or not.\"}},\"transferOwnership(address)\":{\"params\":{\"_newOwner\":\"Address to transfer ownership to.\"}}},\"stateVariables\":{\"MAX_CARDINALITY\":{\"details\":\"Once the number of draws created matches the cardinality, previous draws will be overwritten.\"}},\"title\":\"PoolTogether V4 DrawHistory\",\"version\":1},\"userdoc\":{\"events\":{\"DrawSet(uint32,uint32,uint256)\":{\"notice\":\"Emit when a new draw has been created.\"}},\"kind\":\"user\",\"methods\":{\"MAX_CARDINALITY()\":{\"notice\":\"Draws ring buffer length.\"},\"claimOwnership()\":{\"notice\":\"Allows the `_pendingOwner` address to finalize the transfer.\"},\"constructor\":{\"notice\":\"Deploy DrawHistory smart contract.\"},\"draws()\":{\"notice\":\"Read all draws.\"},\"getDraw(uint32)\":{\"notice\":\"Read a Draw from the draws ring buffer.\"},\"getDraws(uint32[])\":{\"notice\":\"Read multiple Draws from the draws ring buffer.\"},\"getNewestDraw()\":{\"notice\":\"Read newest Draw from the draws ring buffer.\"},\"getOldestDraw()\":{\"notice\":\"Read oldest Draw from the draws ring buffer.\"},\"manager()\":{\"notice\":\"Gets current `_manager`.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"notice\":\"Gets current `_pendingOwner`.\"},\"pushDraw((uint256,uint32,uint32))\":{\"notice\":\"Push Draw onto draws ring buffer history.\"},\"renounceOwnership()\":{\"notice\":\"Renounce ownership of the contract.\"},\"setDraw((uint256,uint32,uint32))\":{\"notice\":\"Set existing Draw in draws ring buffer with new parameters.\"},\"setManager(address)\":{\"notice\":\"Set or change of manager.\"},\"transferOwnership(address)\":{\"notice\":\"Allows current owner to set the `_pendingOwner` address.\"}},\"notice\":\"The DrawHistory keeps a historical record of Draws created/pushed by DrawBeacon(s). Once a DrawBeacon (on mainnet) completes a RNG request, a new Draw will be added to the DrawHistory draws ring buffer. A DrawHistory will store a limited number of Draws before beginning to overwrite (managed via the cardinality) previous Draws. All mainnet DrawHistory(s) are updated directly from a DrawBeacon, but non-mainnet DrawHistory(s) (Matic, Optimism, Arbitrum, etc...) will receive a cross-chain message, duplicating the mainnet Draw configuration - enabling a prize savings liquidity network.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooltogether/v4-core/contracts/DrawHistory.sol\":\"DrawHistory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Abstract manageable contract that can be inherited by other contracts\\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\\n * there is an owner and a manager that can be granted exclusive access to specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyManager`, which can be applied to your functions to restrict their use to\\n * the manager.\\n */\\nabstract contract Manageable is Ownable {\\n    address private _manager;\\n\\n    /**\\n     * @dev Emitted when `_manager` has been changed.\\n     * @param previousManager previous `_manager` address.\\n     * @param newManager new `_manager` address.\\n     */\\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Gets current `_manager`.\\n     * @return Current `_manager` address.\\n     */\\n    function manager() public view virtual returns (address) {\\n        return _manager;\\n    }\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @dev Throws if called by any account other than the owner.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function setManager(address _newManager) external onlyOwner returns (bool) {\\n        return _setManager(_newManager);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function _setManager(address _newManager) private returns (bool) {\\n        address _previousManager = _manager;\\n\\n        require(_newManager != _previousManager, \\\"Manageable/existing-manager-address\\\");\\n\\n        _manager = _newManager;\\n\\n        emit ManagerTransferred(_previousManager, _newManager);\\n        return true;\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        require(manager() == msg.sender, \\\"Manageable/caller-not-manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager or the owner.\\n     */\\n    modifier onlyManagerOrOwner() {\\n        require(manager() == msg.sender || owner() == msg.sender, \\\"Manageable/caller-not-manager-or-owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdd8ac008df192c6aa4df83e7037ab090970fda38e1f9fd712bc0ab5e0485fc04\",\"license\":\"GPL-3.0\"},\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Abstract ownable contract that can be inherited by other contracts\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @dev Emitted when `_pendingOwner` has been changed.\\n     * @param pendingOwner new `_pendingOwner` address.\\n     */\\n    event OwnershipOffered(address indexed pendingOwner);\\n\\n    /**\\n     * @dev Emitted when `_owner` has been changed.\\n     * @param previousOwner previous `_owner` address.\\n     * @param newOwner new `_owner` address.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initializes the contract setting `_initialOwner` as the initial owner.\\n     * @param _initialOwner Initial owner of the contract.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Gets current `_pendingOwner`.\\n     * @return Current `_pendingOwner` address.\\n     */\\n    function pendingOwner() external view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Renounce ownership of the contract.\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n    * @notice Allows current owner to set the `_pendingOwner` address.\\n    * @param _newOwner Address to transfer ownership to.\\n    */\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable/pendingOwner-not-zero-address\\\");\\n\\n        _pendingOwner = _newOwner;\\n\\n        emit OwnershipOffered(_newOwner);\\n    }\\n\\n    /**\\n    * @notice Allows the `_pendingOwner` address to finalize the transfer.\\n    * @dev This function is only callable by the `_pendingOwner`.\\n    */\\n    function claimOwnership() external onlyPendingOwner {\\n        _setOwner(_pendingOwner);\\n        _pendingOwner = address(0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Internal function to set the `_owner` of the contract.\\n     * @param _newOwner New `_owner` address.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable/caller-not-owner\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the `pendingOwner`.\\n    */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == _pendingOwner, \\\"Ownable/caller-not-pendingOwner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfd0fd374812c8af45f2633cc7cc4811ccb7bad0a3902a43aded35939eb4a00d1\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/DrawHistory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\n\\nimport \\\"./interfaces/IDrawHistory.sol\\\";\\nimport \\\"./libraries/DrawLib.sol\\\";\\nimport \\\"./libraries/DrawRingBuffer.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 DrawHistory\\n  * @author PoolTogether Inc Team\\n  * @notice The DrawHistory keeps a historical record of Draws created/pushed by DrawBeacon(s).\\n            Once a DrawBeacon (on mainnet) completes a RNG request, a new Draw will be added\\n            to the DrawHistory draws ring buffer. A DrawHistory will store a limited number\\n            of Draws before beginning to overwrite (managed via the cardinality) previous Draws.\\n            All mainnet DrawHistory(s) are updated directly from a DrawBeacon, but non-mainnet\\n            DrawHistory(s) (Matic, Optimism, Arbitrum, etc...) will receive a cross-chain message,\\n            duplicating the mainnet Draw configuration - enabling a prize savings liquidity network.\\n*/\\ncontract DrawHistory is IDrawHistory, Manageable {\\n  using DrawRingBuffer for DrawRingBuffer.Buffer;\\n\\n  /**\\n    * @notice Draws ring buffer length.\\n    * @dev    Once the number of draws created matches the cardinality, previous draws will be overwritten.\\n  */\\n  uint16 public constant MAX_CARDINALITY = 256;\\n\\n  /**\\n    * @notice Draws ring buffer array.\\n  */\\n  DrawLib.Draw[MAX_CARDINALITY] private _draws;\\n\\n  /**\\n   * @notice Holds ring buffer information\\n   */\\n  DrawRingBuffer.Buffer internal drawRingBuffer;\\n\\n  /* ============ Deploy ============ */\\n\\n  /**\\n    * @notice Deploy DrawHistory smart contract.\\n  */\\n  constructor(\\n    address _owner,\\n    uint8 _cardinality\\n  ) Ownable(_owner) {\\n    drawRingBuffer.cardinality = _cardinality;\\n  }\\n\\n  /* ============ External Functions ============ */\\n\\n  /**\\n    * @notice Read all draws.\\n    * @dev    Return all draws from the draws ring buffer.\\n    * @return Draws array\\n  */\\n  function draws() external view returns(DrawLib.Draw[MAX_CARDINALITY] memory) {\\n    return _draws;\\n  }\\n\\n  /**\\n    * @notice Read a Draw from the draws ring buffer.\\n    * @dev    Read a Draw using the Draw.drawId to calculate position in the draws ring buffer.\\n    * @param drawId Draw.drawId\\n    * @return DrawLib.Draw\\n  */\\n  function getDraw(uint32 drawId) external view override returns(DrawLib.Draw memory) {\\n    return _draws[_drawIdToDrawIndex(drawRingBuffer, drawId)];\\n  }\\n\\n  /**\\n    * @notice Read multiple Draws from the draws ring buffer.\\n    * @dev    Read multiple Draws using each Draw.drawId to calculate position in the draws ring buffer.\\n    * @param drawIds Array of Draw.drawIds\\n    * @return DrawLib.Draw[]\\n  */\\n  function getDraws(uint32[] calldata drawIds) external view override returns(DrawLib.Draw[] memory) {\\n    DrawLib.Draw[] memory draws = new DrawLib.Draw[](drawIds.length);\\n    DrawRingBuffer.Buffer memory buffer = drawRingBuffer;\\n    for (uint256 index = 0; index < drawIds.length; index++) {\\n      draws[index] = _draws[_drawIdToDrawIndex(buffer, drawIds[index])];\\n    }\\n    return draws;\\n  }\\n\\n  /**\\n    * @notice Read newest Draw from the draws ring buffer.\\n    * @dev    Uses the nextDrawIndex to calculate the most recently added Draw.\\n    * @return DrawLib.Draw\\n  */\\n  function getNewestDraw() external view returns (DrawLib.Draw memory) {\\n    return _getNewestDraw(drawRingBuffer);\\n  }\\n\\n  /**\\n    * @notice Read oldest Draw from the draws ring buffer.\\n    * @dev    Finds the oldest Draw by comparing and/or diffing totalDraws with the cardinality.\\n    * @return DrawLib.Draw\\n  */\\n  function getOldestDraw() external view returns (DrawLib.Draw memory) {\\n    // oldest draw should be next available index, otherwise it's at 0\\n    DrawRingBuffer.Buffer memory buffer = drawRingBuffer;\\n    DrawLib.Draw memory draw = _draws[buffer.nextIndex];\\n    if (draw.timestamp == 0) { // if draw is not init, then use draw at 0\\n      draw = _draws[0];\\n    }\\n    return draw;\\n  }\\n\\n  /**\\n    * @notice Push Draw onto draws ring buffer history.\\n    * @dev    Push new draw onto draws history via authorized manager or owner.\\n    * @param _draw DrawLib.Draw\\n    * @return Draw.drawId\\n  */\\n  function pushDraw(DrawLib.Draw memory _draw) external override onlyManagerOrOwner returns (uint32) {\\n    return _pushDraw(_draw);\\n  }\\n\\n  /**\\n    * @notice Set existing Draw in draws ring buffer with new parameters.\\n    * @dev    Updating a Draw should be used sparingly and only in the event an incorrect Draw parameter has been stored.\\n    * @param _newDraw   DrawLib.Draw\\n    * @return Draw.drawId\\n  */\\n  function setDraw(DrawLib.Draw memory _newDraw) external override onlyOwner returns (uint32) {\\n    DrawRingBuffer.Buffer memory buffer = drawRingBuffer;\\n    uint32 index = buffer.getIndex(_newDraw.drawId);\\n    _draws[index] = _newDraw;\\n    emit DrawSet(_newDraw.drawId, _newDraw.timestamp, _newDraw.winningRandomNumber);\\n    return _newDraw.drawId;\\n  }\\n\\n  /* ============ Internal Functions ============ */\\n\\n  /**\\n    * @notice Convert a Draw.drawId to a Draws ring buffer index pointer.\\n    * @dev    The getNewestDraw.drawId() is used to calculate a Draws ID delta position.\\n    * @param _drawId Draw.drawId\\n    * @return Draws ring buffer index pointer\\n  */\\n  function _drawIdToDrawIndex(DrawRingBuffer.Buffer memory _buffer, uint32 _drawId) internal view returns (uint32) {\\n    return _buffer.getIndex(_drawId);\\n  }\\n\\n  /**\\n    * @notice Read newest Draw from the draws ring buffer.\\n    * @dev    Uses the nextDrawIndex to calculate the most recently added Draw.\\n    * @param _buffer Draw ring buffer\\n    * @return DrawLib.Draw\\n  */\\n  function _getNewestDraw(DrawRingBuffer.Buffer memory _buffer) internal view returns (DrawLib.Draw memory) {\\n    return _draws[_buffer.getIndex(_buffer.lastDrawId)];\\n  }\\n\\n  /**\\n    * @notice Push Draw onto draws ring buffer history.\\n    * @dev    Push new draw onto draws history via authorized manager or owner.\\n    * @param _newDraw DrawLib.Draw\\n    * @return Draw.drawId\\n  */\\n  function _pushDraw(DrawLib.Draw memory _newDraw) internal returns (uint32) {\\n    DrawRingBuffer.Buffer memory _buffer = drawRingBuffer;\\n    _draws[_buffer.nextIndex] = _newDraw;\\n    drawRingBuffer = _buffer.push(_newDraw.drawId);\\n    emit DrawSet(_newDraw.drawId, _newDraw.timestamp, _newDraw.winningRandomNumber);\\n    return _newDraw.drawId;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd3e320201908d802140763372efce7523614c54384d307b49bce407e41875e7a\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/IDrawHistory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/DrawLib.sol\\\";\\n\\ninterface IDrawHistory {\\n  \\n  /**\\n    * @notice Emit when a new draw has been created.\\n    * @param drawId       Draw id\\n    * @param timestamp    Epoch timestamp when the draw is created.\\n    * @param winningRandomNumber Randomly generated number used to calculate draw winning numbers\\n  */\\n  event DrawSet (\\n    uint32 drawId,\\n    uint32 timestamp,\\n    uint256 winningRandomNumber\\n  );\\n\\n  function getDraws(uint32[] calldata drawIds) external view returns (DrawLib.Draw[] memory);\\n  function getDraw(uint32 drawId) external view returns (DrawLib.Draw memory);\\n  function pushDraw(DrawLib.Draw calldata draw) external returns(uint32);\\n  function setDraw(DrawLib.Draw calldata draw) external returns(uint32); // maybe return drawIndex\\n}\",\"keccak256\":\"0x13b05ac622ee31cf26fecf2bb9943537872991d0d8d1fe4d34c796f34556c606\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/DrawLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nlibrary DrawLib{\\n\\n    struct Draw {\\n        uint256 winningRandomNumber;\\n        uint32 timestamp;\\n        uint32 drawId;\\n    }\\n\\n    ///@notice Draw settings for the tsunami draw calculator\\n    ///@param bitRangeSize Decimal representation of bitRangeSize\\n    ///@param matchCardinality The bitRangeSize's to consider in the 256 random numbers. Must be > 1 and < 256/bitRangeSize\\n    ///@param numberOfPicks Number of picks this Draw has (may vary network to network)\\n    ///@param maxPicksPerUser Maximum number of picks a user can make in this Draw\\n    ///@param distributions Array of prize distribution percentages, expressed in fraction form with base 1e18. Max sum of these <= 1 Ether. ordering: index0: grandPrize, index1: runnerUp, etc.\\n    ///@param prize Total prize amount available in this draw calculator for this Draw (may vary from network to network)\\n    struct TsunamiDrawSettings {\\n        uint8 bitRangeSize;\\n        uint8 matchCardinality;\\n        uint32 drawStartTimestampOffset;\\n        uint32 drawEndTimestampOffset;\\n        uint32 maxPicksPerUser;\\n        uint136 numberOfPicks;\\n        uint32[] distributions;\\n        uint256 prize;\\n    }\\n}\",\"keccak256\":\"0xb216d3c74904241eb73621750a2d6d561b05bb95489af807c70140ef8579b73b\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/DrawRingBuffer.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\nimport \\\"./RingBuffer.sol\\\";\\n\\nlibrary DrawRingBuffer {\\n\\n  struct Buffer {\\n    uint32 lastDrawId;\\n    uint32 nextIndex;\\n    uint32 cardinality;\\n  }\\n\\n  function push(Buffer memory _buffer, uint32 _drawId) internal view returns (Buffer memory) {\\n    // since draws start at 0, we know we are uninitialized if nextIndex = 0 and lastDrawId = 0, since draws montonically increase\\n    bool bufferNotInitialized = _buffer.nextIndex == 0 && _buffer.lastDrawId == 0;\\n    require(bufferNotInitialized || _drawId == _buffer.lastDrawId + 1, \\\"DRB/must-be-contig\\\");\\n    return Buffer({\\n      lastDrawId: _drawId,\\n      nextIndex: uint32(RingBuffer.nextIndex(_buffer.nextIndex, _buffer.cardinality)),\\n      cardinality: _buffer.cardinality\\n    });\\n  }\\n\\n  function getIndex(Buffer memory _buffer, uint32 _drawId) internal view returns (uint32) {\\n    bool bufferNotInitialized = _buffer.nextIndex == 0 && _buffer.lastDrawId == 0;\\n    require(!bufferNotInitialized && _drawId <= _buffer.lastDrawId, \\\"DRB/future-draw\\\");\\n    uint32 indexOffset = _buffer.lastDrawId - _drawId;\\n    require(indexOffset < _buffer.cardinality, \\\"DRB/expired-draw\\\");\\n    uint32 mostRecent = uint32(RingBuffer.mostRecentIndex(_buffer.nextIndex, _buffer.cardinality));\\n    return uint32(RingBuffer.offset(mostRecent, indexOffset, _buffer.cardinality));\\n  }\\n}\\n\",\"keccak256\":\"0x47ade81b1a6cfa2267c288f1f6f710c22cdae88834b1f38ba4036b8859019b88\"},\"@pooltogether/v4-core/contracts/libraries/RingBuffer.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\nlibrary RingBuffer {\\n\\n  /// @notice Returns TWAB index.\\n  /// @dev `twabs` is a circular buffer of `MAX_CARDINALITY` size equal to 32. So the array goes from 0 to 31.\\n  /// @dev In order to navigate the circular buffer, we need to use the modulo operator.\\n  /// @dev For example, if `_index` is equal to 32, `_index % MAX_CARDINALITY` will return 0 and will point to the first element of the array.\\n  /// @param _index Index used to navigate through `twabs` circular buffer.\\n  function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n    return _index % _cardinality;\\n  }\\n\\n  function offset(uint256 _index, uint256 _amount, uint256 _cardinality) internal pure returns (uint256) {\\n    return (_index + _cardinality - _amount) % _cardinality;\\n  }\\n\\n  /// @notice Returns the index of the last recorded TWAB\\n  /// @param _nextAvailableIndex The next available twab index.  This will be recorded to next.\\n  /// @param _cardinality The cardinality of the TWAB history.\\n  /// @return The index of the last recorded TWAB\\n  function mostRecentIndex(uint256 _nextAvailableIndex, uint256 _cardinality) internal pure returns (uint256) {\\n    if (_cardinality == 0) {\\n      return 0;\\n    }\\n    return (_nextAvailableIndex + uint256(_cardinality) - 1) % _cardinality;\\n  }\\n\\n  function nextIndex(uint256 _currentIndex, uint256 _cardinality) internal pure returns (uint256) {\\n    return (_currentIndex + 1) % _cardinality;\\n  }\\n\\n}\",\"keccak256\":\"0xb055c8f88ea11a451d5950eaea35542833e581dbf075224af6adb40fc9dc4ddc\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516115ab3803806115ab83398101604081905261002f916100b6565b8161003981610066565b50610203805463ffffffff60401b191660ff92909216680100000000000000000291909117905550610102565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100c957600080fd5b82516001600160a01b03811681146100e057600080fd5b602084015190925060ff811681146100f757600080fd5b809150509250929050565b61149a806101116000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638200d87311610097578063d0bb78f311610066578063d0bb78f3146101e3578063d0ebdbe714610203578063e30c397814610226578063f2fde38b1461023757600080fd5b80638200d8731461018e57806383c34aaf146101aa5780638da5cb5b146101bd5780638ddc1680146101ce57600080fd5b8063481c6a75116100d3578063481c6a751461014f5780634e71e0c814610174578063648b1b4f1461017e578063715018a61461018657600080fd5b80630b752b2f146100fa5780630edb1d2e146101275780631f1dee361461013c575b600080fd5b61010d6101083660046111e1565b61024a565b60405163ffffffff90911681526020015b60405180910390f35b61012f6103c8565b60405161011e919061133b565b61010d61014a3660046111e1565b61042f565b6002546001600160a01b03165b6040516001600160a01b03909116815260200161011e565b61017c6104f3565b005b61012f610581565b61017c61066d565b61019761010081565b60405161ffff909116815260200161011e565b61012f6101b8366004611254565b6106e2565b6000546001600160a01b031661015c565b6101d661079f565b60405161011e919061126f565b6101f66101f136600461116c565b610816565b60405161011e91906112cd565b610216610211366004611143565b610988565b604051901515815260200161011e565b6001546001600160a01b031661015c565b61017c610245366004611143565b6109fc565b60003361025f6000546001600160a01b031690565b6001600160a01b0316146102ba5760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064015b60405180910390fd5b604080516060810182526102035463ffffffff80821683526401000000008204811660208401526801000000000000000090910481168284015291840151909160009161030a91849190610b3816565b90508360038263ffffffff16610100811061032757610327611438565b8251600291909102919091019081556020808301516001909201805460409485015163ffffffff9081166401000000000267ffffffffffffffff19909216948116949094171790558683015187820151885185519285168352931691810191909152918201527f84d11a3d380fed59352cfcc353d2ba7e54e5018af4dc6a7ef7f003b3432cfdc89060600160405180910390a150505060408101515b919050565b6040805160608101825260008082526020820181905291810191909152604080516060810182526102035463ffffffff808216835264010000000082048116602084015268010000000000000000909104169181019190915261042a90610c84565b905090565b6000336104446002546001600160a01b031690565b6001600160a01b031614806104725750336104676000546001600160a01b031690565b6001600160a01b0316145b6104e45760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201527f2d6f776e6572000000000000000000000000000000000000000000000000000060648201526084016102b1565b6104ed82610cb1565b92915050565b6001546001600160a01b0316331461054d5760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e65720060448201526064016102b1565b600154610562906001600160a01b0316610e24565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b6040805160608101825260008082526020820181905291810191909152604080516060810182526102035463ffffffff808216835264010000000082048116602084018190526801000000000000000090920416928201929092529060009060039061010081106105f4576105f4611438565b6040805160608101825260029290920292909201805482526001015463ffffffff80821660208401819052640100000000909204169282019290925291506104ed575060408051606081018252600354815260045463ffffffff8082166020840152640100000000909104169181019190915292915050565b336106806000546001600160a01b031690565b6001600160a01b0316146106d65760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016102b1565b6106e06000610e24565b565b6040805160608101825260008082526020820181905291810191909152604080516060810182526102035463ffffffff80821683526401000000008204811660208401526801000000000000000090910416918101919091526003906107489084610e81565b63ffffffff16610100811061075f5761075f611438565b6040805160608101825260029290920292909201805482526001015463ffffffff8082166020840152640100000000909104169181019190915292915050565b6107a76110ee565b60408051612000810190915260036101006000835b8282101561080d57604080516060810182526002840286018054825260019081015463ffffffff808216602080860191909152640100000000909204169383019390935290835290920191016107bc565b50505050905090565b606060008267ffffffffffffffff8111156108335761083361144e565b60405190808252806020026020018201604052801561087e57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816108515790505b50604080516060810182526102035463ffffffff808216835264010000000082048116602084015268010000000000000000909104169181019190915290915060005b8481101561097e5760036108fb838888858181106108e1576108e1611438565b90506020020160208101906108f69190611254565b610e81565b63ffffffff16610100811061091257610912611438565b6040805160608101825260029290920292909201805482526001015463ffffffff80821660208401526401000000009091041691810191909152835184908390811061096057610960611438565b60200260200101819052508080610976906113e5565b9150506108c1565b5090949350505050565b60003361099d6000546001600160a01b031690565b6001600160a01b0316146109f35760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016102b1565b6104ed82610e94565b33610a0f6000546001600160a01b031690565b6001600160a01b031614610a655760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016102b1565b6001600160a01b038116610ae15760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016102b1565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b600080836020015163ffffffff166000148015610b5a5750835163ffffffff16155b905080158015610b7a5750836000015163ffffffff168363ffffffff1611155b610bc65760405162461bcd60e51b815260206004820152600f60248201527f4452422f6675747572652d64726177000000000000000000000000000000000060448201526064016102b1565b8351600090610bd69085906113c0565b9050846040015163ffffffff168163ffffffff1610610c375760405162461bcd60e51b815260206004820152601060248201527f4452422f657870697265642d647261770000000000000000000000000000000060448201526064016102b1565b6000610c57866020015163ffffffff16876040015163ffffffff16610f80565b9050610c7a8163ffffffff168363ffffffff16886040015163ffffffff16610fb0565b9695505050505050565b60408051606081018252600080825260208201819052918101919091528151600390610748908490610b38565b604080516060810182526102035463ffffffff8082168352640100000000820481166020840181905268010000000000000000909204169282019290925260009183906003906101008110610d0857610d08611438565b82516002919091029190910190815560208201516001909101805460409384015163ffffffff9081166401000000000267ffffffffffffffff199092169381169390931717905590840151610d6091839190610fda16565b8051610203805460208085015160409586015163ffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff9282166401000000000267ffffffffffffffff199095169682169690961793909317169390931790915585830151868301518751855192841683529216928101929092528183015290517f84d11a3d380fed59352cfcc353d2ba7e54e5018af4dc6a7ef7f003b3432cfdc89181900360600190a150506040015190565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610e8d8383610b38565b9392505050565b6002546000906001600160a01b03908116908316811415610f1d5760405162461bcd60e51b815260206004820152602360248201527f4d616e61676561626c652f6578697374696e672d6d616e616765722d6164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016102b1565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691821790925560405190918316907f9cb45c728de594dab506a1f1a8554e24c8eeaf983618d5ec5dd7bc6f3c49feee90600090a350600192915050565b600081610f8f575060006104ed565b816001610f9c8286611369565b610fa691906113a9565b610e8d9190611400565b60008183610fbe8287611369565b610fc891906113a9565b610fd29190611400565b949350505050565b60408051606081018252600080825260208201819052918101919091526000836020015163ffffffff1660001480156110185750835163ffffffff16155b9050808061103d5750835161102e906001611381565b63ffffffff168363ffffffff16145b6110895760405162461bcd60e51b815260206004820152601260248201527f4452422f6d7573742d62652d636f6e746967000000000000000000000000000060448201526064016102b1565b60405180606001604052808463ffffffff1681526020016110be866020015163ffffffff16876040015163ffffffff166110e0565b63ffffffff168152602001856040015163ffffffff1681525091505092915050565b600081610fa6846001611369565b604051806120000160405280610100905b60408051606081018252600080825260208083018290529282015282526000199092019101816110ff5790505090565b803563ffffffff811681146103c357600080fd5b60006020828403121561115557600080fd5b81356001600160a01b0381168114610e8d57600080fd5b6000806020838503121561117f57600080fd5b823567ffffffffffffffff8082111561119757600080fd5b818501915085601f8301126111ab57600080fd5b8135818111156111ba57600080fd5b8660208260051b85010111156111cf57600080fd5b60209290920196919550909350505050565b6000606082840312156111f357600080fd5b6040516060810181811067ffffffffffffffff8211171561122457634e487b7160e01b600052604160045260246000fd5b604052823581526112376020840161112f565b60208201526112486040840161112f565b60408201529392505050565b60006020828403121561126657600080fd5b610e8d8261112f565b6160008101818360005b6101008110156112c4576112ae8383518051825260208082015163ffffffff9081169184019190915260409182015116910152565b6060929092019160209190910190600101611279565b50505092915050565b6020808252825182820181905260009190848201906040850190845b8181101561132f5761131c8385518051825260208082015163ffffffff9081169184019190915260409182015116910152565b92840192606092909201916001016112e9565b50909695505050505050565b606081016104ed82848051825260208082015163ffffffff9081169184019190915260409182015116910152565b6000821982111561137c5761137c611422565b500190565b600063ffffffff8083168185168083038211156113a0576113a0611422565b01949350505050565b6000828210156113bb576113bb611422565b500390565b600063ffffffff838116908316818110156113dd576113dd611422565b039392505050565b60006000198214156113f9576113f9611422565b5060010190565b60008261141d57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212206a570031f489a246fc14937a521b8396ccffc87010d53bc0f5c3403b31ce329b64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638200d87311610097578063d0bb78f311610066578063d0bb78f3146101e3578063d0ebdbe714610203578063e30c397814610226578063f2fde38b1461023757600080fd5b80638200d8731461018e57806383c34aaf146101aa5780638da5cb5b146101bd5780638ddc1680146101ce57600080fd5b8063481c6a75116100d3578063481c6a751461014f5780634e71e0c814610174578063648b1b4f1461017e578063715018a61461018657600080fd5b80630b752b2f146100fa5780630edb1d2e146101275780631f1dee361461013c575b600080fd5b61010d6101083660046111e1565b61024a565b60405163ffffffff90911681526020015b60405180910390f35b61012f6103c8565b60405161011e919061133b565b61010d61014a3660046111e1565b61042f565b6002546001600160a01b03165b6040516001600160a01b03909116815260200161011e565b61017c6104f3565b005b61012f610581565b61017c61066d565b61019761010081565b60405161ffff909116815260200161011e565b61012f6101b8366004611254565b6106e2565b6000546001600160a01b031661015c565b6101d661079f565b60405161011e919061126f565b6101f66101f136600461116c565b610816565b60405161011e91906112cd565b610216610211366004611143565b610988565b604051901515815260200161011e565b6001546001600160a01b031661015c565b61017c610245366004611143565b6109fc565b60003361025f6000546001600160a01b031690565b6001600160a01b0316146102ba5760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064015b60405180910390fd5b604080516060810182526102035463ffffffff80821683526401000000008204811660208401526801000000000000000090910481168284015291840151909160009161030a91849190610b3816565b90508360038263ffffffff16610100811061032757610327611438565b8251600291909102919091019081556020808301516001909201805460409485015163ffffffff9081166401000000000267ffffffffffffffff19909216948116949094171790558683015187820151885185519285168352931691810191909152918201527f84d11a3d380fed59352cfcc353d2ba7e54e5018af4dc6a7ef7f003b3432cfdc89060600160405180910390a150505060408101515b919050565b6040805160608101825260008082526020820181905291810191909152604080516060810182526102035463ffffffff808216835264010000000082048116602084015268010000000000000000909104169181019190915261042a90610c84565b905090565b6000336104446002546001600160a01b031690565b6001600160a01b031614806104725750336104676000546001600160a01b031690565b6001600160a01b0316145b6104e45760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201527f2d6f776e6572000000000000000000000000000000000000000000000000000060648201526084016102b1565b6104ed82610cb1565b92915050565b6001546001600160a01b0316331461054d5760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e65720060448201526064016102b1565b600154610562906001600160a01b0316610e24565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b6040805160608101825260008082526020820181905291810191909152604080516060810182526102035463ffffffff808216835264010000000082048116602084018190526801000000000000000090920416928201929092529060009060039061010081106105f4576105f4611438565b6040805160608101825260029290920292909201805482526001015463ffffffff80821660208401819052640100000000909204169282019290925291506104ed575060408051606081018252600354815260045463ffffffff8082166020840152640100000000909104169181019190915292915050565b336106806000546001600160a01b031690565b6001600160a01b0316146106d65760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016102b1565b6106e06000610e24565b565b6040805160608101825260008082526020820181905291810191909152604080516060810182526102035463ffffffff80821683526401000000008204811660208401526801000000000000000090910416918101919091526003906107489084610e81565b63ffffffff16610100811061075f5761075f611438565b6040805160608101825260029290920292909201805482526001015463ffffffff8082166020840152640100000000909104169181019190915292915050565b6107a76110ee565b60408051612000810190915260036101006000835b8282101561080d57604080516060810182526002840286018054825260019081015463ffffffff808216602080860191909152640100000000909204169383019390935290835290920191016107bc565b50505050905090565b606060008267ffffffffffffffff8111156108335761083361144e565b60405190808252806020026020018201604052801561087e57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816108515790505b50604080516060810182526102035463ffffffff808216835264010000000082048116602084015268010000000000000000909104169181019190915290915060005b8481101561097e5760036108fb838888858181106108e1576108e1611438565b90506020020160208101906108f69190611254565b610e81565b63ffffffff16610100811061091257610912611438565b6040805160608101825260029290920292909201805482526001015463ffffffff80821660208401526401000000009091041691810191909152835184908390811061096057610960611438565b60200260200101819052508080610976906113e5565b9150506108c1565b5090949350505050565b60003361099d6000546001600160a01b031690565b6001600160a01b0316146109f35760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016102b1565b6104ed82610e94565b33610a0f6000546001600160a01b031690565b6001600160a01b031614610a655760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064016102b1565b6001600160a01b038116610ae15760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016102b1565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b600080836020015163ffffffff166000148015610b5a5750835163ffffffff16155b905080158015610b7a5750836000015163ffffffff168363ffffffff1611155b610bc65760405162461bcd60e51b815260206004820152600f60248201527f4452422f6675747572652d64726177000000000000000000000000000000000060448201526064016102b1565b8351600090610bd69085906113c0565b9050846040015163ffffffff168163ffffffff1610610c375760405162461bcd60e51b815260206004820152601060248201527f4452422f657870697265642d647261770000000000000000000000000000000060448201526064016102b1565b6000610c57866020015163ffffffff16876040015163ffffffff16610f80565b9050610c7a8163ffffffff168363ffffffff16886040015163ffffffff16610fb0565b9695505050505050565b60408051606081018252600080825260208201819052918101919091528151600390610748908490610b38565b604080516060810182526102035463ffffffff8082168352640100000000820481166020840181905268010000000000000000909204169282019290925260009183906003906101008110610d0857610d08611438565b82516002919091029190910190815560208201516001909101805460409384015163ffffffff9081166401000000000267ffffffffffffffff199092169381169390931717905590840151610d6091839190610fda16565b8051610203805460208085015160409586015163ffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff9282166401000000000267ffffffffffffffff199095169682169690961793909317169390931790915585830151868301518751855192841683529216928101929092528183015290517f84d11a3d380fed59352cfcc353d2ba7e54e5018af4dc6a7ef7f003b3432cfdc89181900360600190a150506040015190565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610e8d8383610b38565b9392505050565b6002546000906001600160a01b03908116908316811415610f1d5760405162461bcd60e51b815260206004820152602360248201527f4d616e61676561626c652f6578697374696e672d6d616e616765722d6164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016102b1565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691821790925560405190918316907f9cb45c728de594dab506a1f1a8554e24c8eeaf983618d5ec5dd7bc6f3c49feee90600090a350600192915050565b600081610f8f575060006104ed565b816001610f9c8286611369565b610fa691906113a9565b610e8d9190611400565b60008183610fbe8287611369565b610fc891906113a9565b610fd29190611400565b949350505050565b60408051606081018252600080825260208201819052918101919091526000836020015163ffffffff1660001480156110185750835163ffffffff16155b9050808061103d5750835161102e906001611381565b63ffffffff168363ffffffff16145b6110895760405162461bcd60e51b815260206004820152601260248201527f4452422f6d7573742d62652d636f6e746967000000000000000000000000000060448201526064016102b1565b60405180606001604052808463ffffffff1681526020016110be866020015163ffffffff16876040015163ffffffff166110e0565b63ffffffff168152602001856040015163ffffffff1681525091505092915050565b600081610fa6846001611369565b604051806120000160405280610100905b60408051606081018252600080825260208083018290529282015282526000199092019101816110ff5790505090565b803563ffffffff811681146103c357600080fd5b60006020828403121561115557600080fd5b81356001600160a01b0381168114610e8d57600080fd5b6000806020838503121561117f57600080fd5b823567ffffffffffffffff8082111561119757600080fd5b818501915085601f8301126111ab57600080fd5b8135818111156111ba57600080fd5b8660208260051b85010111156111cf57600080fd5b60209290920196919550909350505050565b6000606082840312156111f357600080fd5b6040516060810181811067ffffffffffffffff8211171561122457634e487b7160e01b600052604160045260246000fd5b604052823581526112376020840161112f565b60208201526112486040840161112f565b60408201529392505050565b60006020828403121561126657600080fd5b610e8d8261112f565b6160008101818360005b6101008110156112c4576112ae8383518051825260208082015163ffffffff9081169184019190915260409182015116910152565b6060929092019160209190910190600101611279565b50505092915050565b6020808252825182820181905260009190848201906040850190845b8181101561132f5761131c8385518051825260208082015163ffffffff9081169184019190915260409182015116910152565b92840192606092909201916001016112e9565b50909695505050505050565b606081016104ed82848051825260208082015163ffffffff9081169184019190915260409182015116910152565b6000821982111561137c5761137c611422565b500190565b600063ffffffff8083168185168083038211156113a0576113a0611422565b01949350505050565b6000828210156113bb576113bb611422565b500390565b600063ffffffff838116908316818110156113dd576113dd611422565b039392505050565b60006000198214156113f9576113f9611422565b5060010190565b60008261141d57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212206a570031f489a246fc14937a521b8396ccffc87010d53bc0f5c3403b31ce329b64736f6c63430008060033",
  "devdoc": {
    "author": "PoolTogether Inc Team",
    "kind": "dev",
    "methods": {
      "claimOwnership()": {
        "details": "This function is only callable by the `_pendingOwner`."
      },
      "draws()": {
        "details": "Return all draws from the draws ring buffer.",
        "returns": {
          "_0": "Draws array"
        }
      },
      "getDraw(uint32)": {
        "details": "Read a Draw using the Draw.drawId to calculate position in the draws ring buffer.",
        "params": {
          "drawId": "Draw.drawId"
        },
        "returns": {
          "_0": "DrawLib.Draw"
        }
      },
      "getDraws(uint32[])": {
        "details": "Read multiple Draws using each Draw.drawId to calculate position in the draws ring buffer.",
        "params": {
          "drawIds": "Array of Draw.drawIds"
        },
        "returns": {
          "_0": "DrawLib.Draw[]"
        }
      },
      "getNewestDraw()": {
        "details": "Uses the nextDrawIndex to calculate the most recently added Draw.",
        "returns": {
          "_0": "DrawLib.Draw"
        }
      },
      "getOldestDraw()": {
        "details": "Finds the oldest Draw by comparing and/or diffing totalDraws with the cardinality.",
        "returns": {
          "_0": "DrawLib.Draw"
        }
      },
      "manager()": {
        "returns": {
          "_0": "Current `_manager` address."
        }
      },
      "pendingOwner()": {
        "returns": {
          "_0": "Current `_pendingOwner` address."
        }
      },
      "pushDraw((uint256,uint32,uint32))": {
        "details": "Push new draw onto draws history via authorized manager or owner.",
        "params": {
          "_draw": "DrawLib.Draw"
        },
        "returns": {
          "_0": "Draw.drawId"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDraw((uint256,uint32,uint32))": {
        "details": "Updating a Draw should be used sparingly and only in the event an incorrect Draw parameter has been stored.",
        "params": {
          "_newDraw": "DrawLib.Draw"
        },
        "returns": {
          "_0": "Draw.drawId"
        }
      },
      "setManager(address)": {
        "details": "Throws if called by any account other than the owner.",
        "params": {
          "_newManager": "New _manager address."
        },
        "returns": {
          "_0": "Boolean to indicate if the operation was successful or not."
        }
      },
      "transferOwnership(address)": {
        "params": {
          "_newOwner": "Address to transfer ownership to."
        }
      }
    },
    "stateVariables": {
      "MAX_CARDINALITY": {
        "details": "Once the number of draws created matches the cardinality, previous draws will be overwritten."
      }
    },
    "title": "PoolTogether V4 DrawHistory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DrawSet(uint32,uint32,uint256)": {
        "notice": "Emit when a new draw has been created."
      }
    },
    "kind": "user",
    "methods": {
      "MAX_CARDINALITY()": {
        "notice": "Draws ring buffer length."
      },
      "claimOwnership()": {
        "notice": "Allows the `_pendingOwner` address to finalize the transfer."
      },
      "constructor": {
        "notice": "Deploy DrawHistory smart contract."
      },
      "draws()": {
        "notice": "Read all draws."
      },
      "getDraw(uint32)": {
        "notice": "Read a Draw from the draws ring buffer."
      },
      "getDraws(uint32[])": {
        "notice": "Read multiple Draws from the draws ring buffer."
      },
      "getNewestDraw()": {
        "notice": "Read newest Draw from the draws ring buffer."
      },
      "getOldestDraw()": {
        "notice": "Read oldest Draw from the draws ring buffer."
      },
      "manager()": {
        "notice": "Gets current `_manager`."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "notice": "Gets current `_pendingOwner`."
      },
      "pushDraw((uint256,uint32,uint32))": {
        "notice": "Push Draw onto draws ring buffer history."
      },
      "renounceOwnership()": {
        "notice": "Renounce ownership of the contract."
      },
      "setDraw((uint256,uint32,uint32))": {
        "notice": "Set existing Draw in draws ring buffer with new parameters."
      },
      "setManager(address)": {
        "notice": "Set or change of manager."
      },
      "transferOwnership(address)": {
        "notice": "Allows current owner to set the `_pendingOwner` address."
      }
    },
    "notice": "The DrawHistory keeps a historical record of Draws created/pushed by DrawBeacon(s). Once a DrawBeacon (on mainnet) completes a RNG request, a new Draw will be added to the DrawHistory draws ring buffer. A DrawHistory will store a limited number of Draws before beginning to overwrite (managed via the cardinality) previous Draws. All mainnet DrawHistory(s) are updated directly from a DrawBeacon, but non-mainnet DrawHistory(s) (Matic, Optimism, Arbitrum, etc...) will receive a cross-chain message, duplicating the mainnet Draw configuration - enabling a prize savings liquidity network.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3466,
        "contract": "@pooltogether/v4-core/contracts/DrawHistory.sol:DrawHistory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3468,
        "contract": "@pooltogether/v4-core/contracts/DrawHistory.sol:DrawHistory",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3364,
        "contract": "@pooltogether/v4-core/contracts/DrawHistory.sol:DrawHistory",
        "label": "_manager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5049,
        "contract": "@pooltogether/v4-core/contracts/DrawHistory.sol:DrawHistory",
        "label": "_draws",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Draw)8957_storage)256_storage"
      },
      {
        "astId": 5053,
        "contract": "@pooltogether/v4-core/contracts/DrawHistory.sol:DrawHistory",
        "label": "drawRingBuffer",
        "offset": 0,
        "slot": "515",
        "type": "t_struct(Buffer)8986_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Draw)8957_storage)256_storage": {
        "base": "t_struct(Draw)8957_storage",
        "encoding": "inplace",
        "label": "struct DrawLib.Draw[256]",
        "numberOfBytes": "16384"
      },
      "t_struct(Buffer)8986_storage": {
        "encoding": "inplace",
        "label": "struct DrawRingBuffer.Buffer",
        "members": [
          {
            "astId": 8981,
            "contract": "@pooltogether/v4-core/contracts/DrawHistory.sol:DrawHistory",
            "label": "lastDrawId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8983,
            "contract": "@pooltogether/v4-core/contracts/DrawHistory.sol:DrawHistory",
            "label": "nextIndex",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8985,
            "contract": "@pooltogether/v4-core/contracts/DrawHistory.sol:DrawHistory",
            "label": "cardinality",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Draw)8957_storage": {
        "encoding": "inplace",
        "label": "struct DrawLib.Draw",
        "members": [
          {
            "astId": 8952,
            "contract": "@pooltogether/v4-core/contracts/DrawHistory.sol:DrawHistory",
            "label": "winningRandomNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8954,
            "contract": "@pooltogether/v4-core/contracts/DrawHistory.sol:DrawHistory",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 8956,
            "contract": "@pooltogether/v4-core/contracts/DrawHistory.sol:DrawHistory",
            "label": "drawId",
            "offset": 4,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}