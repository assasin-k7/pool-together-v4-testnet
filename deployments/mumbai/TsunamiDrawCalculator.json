{
  "address": "0x4CBe91F97b67d2a06bE5f149025C33729eA51E95",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract ITicket",
          "name": "_ticket",
          "type": "address"
        },
        {
          "internalType": "contract IDrawHistory",
          "name": "_drawHistory",
          "type": "address"
        },
        {
          "internalType": "contract TsunamiDrawSettingsHistory",
          "name": "_tsunamiDrawSettingsHistory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ClaimableDraw",
          "name": "claimableDraw",
          "type": "address"
        }
      ],
      "name": "ClaimableDrawSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ITicket",
          "name": "ticket",
          "type": "address"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IDrawHistory",
          "name": "drawHistory",
          "type": "address"
        }
      ],
      "name": "DrawHistorySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipOffered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "_drawIds",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes",
          "name": "_pickIndicesForDraws",
          "type": "bytes"
        }
      ],
      "name": "calculate",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_pickIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint32",
          "name": "_drawId",
          "type": "uint32"
        }
      ],
      "name": "checkPrizeDistributionIndicesForDrawId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "distributionIndex",
              "type": "uint8"
            }
          ],
          "internalType": "struct TsunamiDrawCalculator.PickPrize[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDrawHistory",
      "outputs": [
        {
          "internalType": "contract IDrawHistory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "_drawIds",
          "type": "uint32[]"
        }
      ],
      "name": "getNormalizedBalancesForDrawIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTsunamiDrawSettingsHistory",
      "outputs": [
        {
          "internalType": "contract TsunamiDrawSettingsHistory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDrawHistory",
          "name": "_drawHistory",
          "type": "address"
        }
      ],
      "name": "setDrawHistory",
      "outputs": [
        {
          "internalType": "contract IDrawHistory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x718b3dc9dea6f4833e53fecf84bff077f736b6a9408a1e87536905422b57ad88",
  "receipt": {
    "to": null,
    "from": "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "contractAddress": "0x4CBe91F97b67d2a06bE5f149025C33729eA51E95",
    "transactionIndex": 1,
    "gasUsed": "2025828",
    "logsBloom": "0x00402000000000000080000000000000000000000000000000800000000000000000004000000000002000000000000000018020000000000000000008000000000000000000000000000000000000800001000081000000004100000000000000000000020000000000000000000800000000000010000080000000000000400000000000000004000000000000000000000000000000800000000000000000200000000000000000008000000000000000000000000000000000000000024000000000000000000001000000000100000100000000000000100000000020000000000000010000000000000004000000000000000000000000000000100000",
    "blockHash": "0xacdf071c795e10f5ee44d7b7a264dc9c8effff78eb1c2999d43f8ea717d86e09",
    "transactionHash": "0x718b3dc9dea6f4833e53fecf84bff077f736b6a9408a1e87536905422b57ad88",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 19221458,
        "transactionHash": "0x718b3dc9dea6f4833e53fecf84bff077f736b6a9408a1e87536905422b57ad88",
        "address": "0x4CBe91F97b67d2a06bE5f149025C33729eA51E95",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xacdf071c795e10f5ee44d7b7a264dc9c8effff78eb1c2999d43f8ea717d86e09"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 19221458,
        "transactionHash": "0x718b3dc9dea6f4833e53fecf84bff077f736b6a9408a1e87536905422b57ad88",
        "address": "0x4CBe91F97b67d2a06bE5f149025C33729eA51E95",
        "topics": [
          "0xba0e8f3a74973e2a13826a827919baef53ee4eb218c95ac51cd17e62e7457e66",
          "0x000000000000000000000000603799b6b16d11367cd95edc29794ad8ea723c51"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xacdf071c795e10f5ee44d7b7a264dc9c8effff78eb1c2999d43f8ea717d86e09"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 19221458,
        "transactionHash": "0x718b3dc9dea6f4833e53fecf84bff077f736b6a9408a1e87536905422b57ad88",
        "address": "0x4CBe91F97b67d2a06bE5f149025C33729eA51E95",
        "topics": [
          "0xf40fcec21964ffb566044d083b4073f29f7f7929110ea19e1b3ebe375d89055e",
          "0x000000000000000000000000e4a150e8b2c7c8cc45e55798181762ef89200e6f"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xacdf071c795e10f5ee44d7b7a264dc9c8effff78eb1c2999d43f8ea717d86e09"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 19221458,
        "transactionHash": "0x718b3dc9dea6f4833e53fecf84bff077f736b6a9408a1e87536905422b57ad88",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000015977082f2b80000000000000000000000000000000000000000000000000007ffcb2a19491e00000000000000000000000000000000000000000000000000000927567096d60000000000000000000000000000000000000000000000000007ea33b996566600000000000000000000000000000000000000000000000000001ebec6f3898e00",
        "logIndex": 5,
        "blockHash": "0xacdf071c795e10f5ee44d7b7a264dc9c8effff78eb1c2999d43f8ea717d86e09"
      }
    ],
    "blockNumber": 19221458,
    "cumulativeGasUsed": "2046828",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "0xe4A150E8b2c7C8Cc45E55798181762Ef89200E6f",
    "0x603799B6b16d11367cD95EdC29794ad8ea723c51",
    "0xD73118a8F0aE0D7eC379e7cbD192836f37fF3562"
  ],
  "solcInputHash": "c10ecf7ed4019ef1b5b277259dc2440b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract ITicket\",\"name\":\"_ticket\",\"type\":\"address\"},{\"internalType\":\"contract IDrawHistory\",\"name\":\"_drawHistory\",\"type\":\"address\"},{\"internalType\":\"contract TsunamiDrawSettingsHistory\",\"name\":\"_tsunamiDrawSettingsHistory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ClaimableDraw\",\"name\":\"claimableDraw\",\"type\":\"address\"}],\"name\":\"ClaimableDrawSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITicket\",\"name\":\"ticket\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IDrawHistory\",\"name\":\"drawHistory\",\"type\":\"address\"}],\"name\":\"DrawHistorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_drawIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"_pickIndicesForDraws\",\"type\":\"bytes\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_pickIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32\",\"name\":\"_drawId\",\"type\":\"uint32\"}],\"name\":\"checkPrizeDistributionIndicesForDrawId\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"distributionIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct TsunamiDrawCalculator.PickPrize[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDrawHistory\",\"outputs\":[{\"internalType\":\"contract IDrawHistory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_drawIds\",\"type\":\"uint32[]\"}],\"name\":\"getNormalizedBalancesForDrawIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTsunamiDrawSettingsHistory\",\"outputs\":[{\"internalType\":\"contract TsunamiDrawSettingsHistory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDrawHistory\",\"name\":\"_drawHistory\",\"type\":\"address\"}],\"name\":\"setDrawHistory\",\"outputs\":[{\"internalType\":\"contract IDrawHistory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DrawHistorySet(address)\":{\"params\":{\"drawHistory\":\"DrawHistory address\"}}},\"kind\":\"dev\",\"methods\":{\"calculate(address,uint32[],bytes)\":{\"params\":{\"_drawIds\":\"draw array for which to calculate prize amounts for\",\"_pickIndicesForDraws\":\"The encoded pick indices for all Draws. Expected to be just indices of winning claims. Populated values must be less than totalUserPicks.\",\"_user\":\"User for which to calcualte prize amount\"},\"returns\":{\"_0\":\"An array of amount of prizes awardable\"}},\"checkPrizeDistributionIndicesForDrawId(address,uint256[],uint32)\":{\"params\":{\"_drawId\":\"The draw for which to calculate the distribution indices\",\"_pickIndices\":\"The users pick indices for a draw\",\"_user\":\"The user for which to calculate the distribution indices\"}},\"claimOwnership()\":{\"details\":\"This function is only callable by the `_pendingOwner`.\"},\"constructor\":{\"params\":{\"_drawHistory\":\"The address of the draw history to push draws to\",\"_owner\":\"Address of the TsunamiDrawCalculator owner\",\"_ticket\":\"Ticket associated with this DrawCalculator\",\"_tsunamiDrawSettingsHistory\":\"TsunamiDrawSettingsHistory address\"}},\"getDrawHistory()\":{\"returns\":{\"_0\":\"IDrawHistory\"}},\"getNormalizedBalancesForDrawIds(address,uint32[])\":{\"params\":{\"_drawIds\":\"The drawsId to consider\",\"_user\":\"The users address\"},\"returns\":{\"_0\":\"Array of balances\"}},\"getTsunamiDrawSettingsHistory()\":{\"returns\":{\"_0\":\"IDrawHistory\"}},\"pendingOwner()\":{\"returns\":{\"_0\":\"Current `_pendingOwner` address.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDrawHistory(address)\":{\"params\":{\"_drawHistory\":\"DrawHistory address\"},\"returns\":{\"_0\":\"New DrawHistory address\"}},\"transferOwnership(address)\":{\"params\":{\"_newOwner\":\"Address to transfer ownership to.\"}}},\"title\":\"TsunamiDrawCalculator is an implementation of an IDrawCalculator\",\"version\":1},\"userdoc\":{\"events\":{\"ClaimableDrawSet(address)\":{\"notice\":\"Emitted when the claimableDraw is set/updated\"},\"Deployed(address)\":{\"notice\":\"Emitted when the contract is initialized\"},\"DrawHistorySet(address)\":{\"notice\":\"Emitted when a global DrawHistory variable is set.\"}},\"kind\":\"user\",\"methods\":{\"calculate(address,uint32[],bytes)\":{\"notice\":\"Calulates the prize amount for a user for Multiple Draws. Typically called by a ClaimableDraw.\"},\"checkPrizeDistributionIndicesForDrawId(address,uint256[],uint32)\":{\"notice\":\"Returns the distribution index for a users pickIndices for a draw\"},\"claimOwnership()\":{\"notice\":\"Allows the `_pendingOwner` address to finalize the transfer.\"},\"constructor\":{\"notice\":\"Constructor for TsunamiDrawCalculator\"},\"getDrawHistory()\":{\"notice\":\"Read global DrawHistory variable.\"},\"getNormalizedBalancesForDrawIds(address,uint32[])\":{\"notice\":\"Returns a users balances expressed as a fraction of the total supply over time.\"},\"getTsunamiDrawSettingsHistory()\":{\"notice\":\"Read global DrawHistory variable.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"notice\":\"Gets current `_pendingOwner`.\"},\"renounceOwnership()\":{\"notice\":\"Renounce ownership of the contract.\"},\"setDrawHistory(address)\":{\"notice\":\"Set global DrawHistory reference.\"},\"transferOwnership(address)\":{\"notice\":\"Allows current owner to set the `_pendingOwner` address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooltogether/v4-core/contracts/TsunamiDrawCalculator.sol\":\"TsunamiDrawCalculator\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Abstract manageable contract that can be inherited by other contracts\\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\\n * there is an owner and a manager that can be granted exclusive access to specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyManager`, which can be applied to your functions to restrict their use to\\n * the manager.\\n */\\nabstract contract Manageable is Ownable {\\n    address private _manager;\\n\\n    /**\\n     * @dev Emitted when `_manager` has been changed.\\n     * @param previousManager previous `_manager` address.\\n     * @param newManager new `_manager` address.\\n     */\\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Gets current `_manager`.\\n     * @return Current `_manager` address.\\n     */\\n    function manager() public view virtual returns (address) {\\n        return _manager;\\n    }\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @dev Throws if called by any account other than the owner.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function setManager(address _newManager) external onlyOwner returns (bool) {\\n        return _setManager(_newManager);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function _setManager(address _newManager) private returns (bool) {\\n        address _previousManager = _manager;\\n\\n        require(_newManager != _previousManager, \\\"Manageable/existing-manager-address\\\");\\n\\n        _manager = _newManager;\\n\\n        emit ManagerTransferred(_previousManager, _newManager);\\n        return true;\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        require(manager() == msg.sender, \\\"Manageable/caller-not-manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager or the owner.\\n     */\\n    modifier onlyManagerOrOwner() {\\n        require(manager() == msg.sender || owner() == msg.sender, \\\"Manageable/caller-not-manager-or-owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdd8ac008df192c6aa4df83e7037ab090970fda38e1f9fd712bc0ab5e0485fc04\",\"license\":\"GPL-3.0\"},\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Abstract ownable contract that can be inherited by other contracts\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @dev Emitted when `_pendingOwner` has been changed.\\n     * @param pendingOwner new `_pendingOwner` address.\\n     */\\n    event OwnershipOffered(address indexed pendingOwner);\\n\\n    /**\\n     * @dev Emitted when `_owner` has been changed.\\n     * @param previousOwner previous `_owner` address.\\n     * @param newOwner new `_owner` address.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initializes the contract setting `_initialOwner` as the initial owner.\\n     * @param _initialOwner Initial owner of the contract.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Gets current `_pendingOwner`.\\n     * @return Current `_pendingOwner` address.\\n     */\\n    function pendingOwner() external view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Renounce ownership of the contract.\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n    * @notice Allows current owner to set the `_pendingOwner` address.\\n    * @param _newOwner Address to transfer ownership to.\\n    */\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable/pendingOwner-not-zero-address\\\");\\n\\n        _pendingOwner = _newOwner;\\n\\n        emit OwnershipOffered(_newOwner);\\n    }\\n\\n    /**\\n    * @notice Allows the `_pendingOwner` address to finalize the transfer.\\n    * @dev This function is only callable by the `_pendingOwner`.\\n    */\\n    function claimOwnership() external onlyPendingOwner {\\n        _setOwner(_pendingOwner);\\n        _pendingOwner = address(0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Internal function to set the `_owner` of the contract.\\n     * @param _newOwner New `_owner` address.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable/caller-not-owner\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the `pendingOwner`.\\n    */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == _pendingOwner, \\\"Ownable/caller-not-pendingOwner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfd0fd374812c8af45f2633cc7cc4811ccb7bad0a3902a43aded35939eb4a00d1\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/ClaimableDraw.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IClaimableDraw.sol\\\";\\nimport \\\"./interfaces/IDrawCalculator.sol\\\";\\nimport \\\"./libraries/DrawLib.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 ClaimableDraw\\n  * @author PoolTogether Inc Team\\n  * @notice The ClaimableDraw distributes claimable draw prizes to users via a pull model.\\n            Managing the regularly captured PrizePool interest, a ClaimableDraw is the\\n            entrypoint for users to submit Draw.drawId(s) and winning pick indices.\\n            Communicating with a DrawCalculator, the ClaimableDraw will determine the maximum\\n            prize payout and transfer those tokens directly to a user address. \\n*/\\ncontract ClaimableDraw is IClaimableDraw, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  /* ============ Global Variables ============ */\\n\\n  /// @notice The Draw Calculator to use\\n  IDrawCalculator internal drawCalculator;\\n\\n  /// @notice Token address\\n  IERC20 internal immutable token;\\n\\n  /// @notice Maps users => drawId => paid out balance\\n  mapping(address => mapping(uint256 => uint256)) internal userDrawPayouts;\\n\\n  /* ============ Initialize ============ */\\n\\n  /**\\n    * @notice Initialize ClaimableDraw smart contract.\\n    * @param _owner           Address of the ClaimableDraw owner\\n    * @param _token           Token address\\n    * @param _drawCalculator DrawCalculator address\\n  */\\n  constructor(\\n    address _owner,\\n    IERC20 _token,\\n    IDrawCalculator _drawCalculator\\n  ) Ownable(_owner) {\\n    _setDrawCalculator(_drawCalculator);\\n    require(address(_token) != address(0), \\\"ClaimableDraw/token-not-zero-address\\\" );\\n    token = _token;\\n    emit TokenSet(_token);\\n  }\\n\\n  /* ============ External View Functions ============ */\\n\\n  /**\\n    * @notice Read DrawCalculator\\n    * @return IDrawCalculator\\n  */\\n  function getDrawCalculator() external override view returns (IDrawCalculator) {\\n    return drawCalculator;\\n  }\\n\\n  /**\\n    * @notice Get the amount that a user has already been paid out for a draw\\n    * @param user   User address\\n    * @param drawId Draw ID\\n  */\\n  function getDrawPayoutBalanceOf(address user, uint32 drawId) external override view returns (uint256) {\\n    return _getDrawPayoutBalanceOf(user, drawId);\\n  }\\n\\n  /**\\n    * @notice Read global Ticket variable.\\n    * @return IERC20\\n  */\\n  function getToken() external override view returns (IERC20) {\\n    return token;\\n  }\\n\\n  function _getDrawPayoutBalanceOf(address _user, uint32 _drawId) internal view returns (uint256) {\\n    return userDrawPayouts[_user][_drawId];\\n  }\\n\\n  function _setDrawPayoutBalanceOf(address _user, uint32 _drawId, uint256 _payout) internal {\\n    userDrawPayouts[_user][_drawId] = _payout;\\n  }\\n\\n  /* ============ External Functions ============ */\\n\\n  /**\\n    * @notice Claim a user token payouts via a collection of draw ids and pick indices.\\n    * @param _user             Address of user to claim awards for. Does NOT need to be msg.sender\\n    * @param _drawIds          Draw IDs from global DrawHistory reference\\n    * @param _data             The data to pass to the draw calculator.\\n    * @return Actual claim payout.  If the user has previously claimed a draw, this may be less.\\n  */\\n  function claim(address _user, uint32[] calldata _drawIds, bytes calldata _data) external override returns (uint256) {\\n    uint256 totalPayout;\\n\\n    uint256[] memory drawPayouts = drawCalculator.calculate(_user, _drawIds, _data);  // CALL\\n    for (uint256 payoutIndex = 0; payoutIndex < drawPayouts.length; payoutIndex++) {\\n      uint32 drawId = _drawIds[payoutIndex];\\n      uint256 payout = drawPayouts[payoutIndex];\\n      uint256 oldPayout = _getDrawPayoutBalanceOf(_user, drawId);\\n      uint256 payoutDiff = 0;\\n      if (payout > oldPayout) {\\n        payoutDiff = payout - oldPayout;\\n        _setDrawPayoutBalanceOf(_user, drawId, payout);\\n      }\\n      // helpfully short-circuit, in case the user screwed something up.\\n      require(payoutDiff > 0, \\\"ClaimableDraw/zero-payout\\\");\\n      totalPayout += payoutDiff;\\n      emit ClaimedDraw(_user, drawId, payoutDiff);\\n    }\\n\\n    _awardPayout(_user, totalPayout);\\n\\n    return totalPayout;\\n  }\\n\\n  /**\\n    * @notice Sets DrawCalculator reference for individual draw id.\\n    * @param _newCalculator  DrawCalculator address\\n    * @return New DrawCalculator address\\n  */\\n  function setDrawCalculator(IDrawCalculator _newCalculator) external override onlyOwner returns (IDrawCalculator) {\\n    _setDrawCalculator(_newCalculator);\\n    return _newCalculator;\\n  }\\n\\n  /**\\n    * @notice Sets DrawCalculator reference for individual draw id.\\n    * @param _newCalculator  DrawCalculator address\\n  */\\n  function _setDrawCalculator(IDrawCalculator _newCalculator) internal {\\n    require(address(_newCalculator) != address(0), \\\"ClaimableDraw/calc-not-zero\\\");\\n    drawCalculator = _newCalculator;\\n    emit DrawCalculatorSet(_newCalculator);\\n  }\\n\\n  /**\\n    * @notice Transfer claimed draw(s) total payout to user.\\n    * @param _to      User address\\n    * @param _amount  Transfer amount\\n  */\\n  function _awardPayout(address _to, uint256 _amount) internal {\\n    token.safeTransfer(_to, _amount);\\n  }\\n\\n  /**\\n    * @notice Transfer ERC20 tokens out of this contract.\\n    * @dev    This function is only callable by the owner.\\n    * @param _erc20Token ERC20 token to transfer.\\n    * @param _to Recipient of the tokens.\\n    * @param _amount Amount of tokens to transfer.\\n    * @return true if operation is successful.\\n  */\\n  function withdrawERC20(IERC20 _erc20Token, address _to, uint256 _amount) external override onlyOwner returns (bool) {\\n    require(_to != address(0), \\\"ClaimableDraw/recipient-not-zero-address\\\");\\n    require(address(_erc20Token) != address(0), \\\"ClaimableDraw/ERC20-not-zero-address\\\");\\n    _erc20Token.safeTransfer(_to, _amount);\\n    emit ERC20Withdrawn(_erc20Token, _to, _amount);\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x80ab52495aada4db4aac4a07fb9e2f012a3cf0b281a1922d567f1b0d8ab390ba\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/TsunamiDrawCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IDrawCalculator.sol\\\";\\nimport \\\"./interfaces/ITicket.sol\\\";\\nimport \\\"./interfaces/IDrawHistory.sol\\\";\\nimport \\\"./ClaimableDraw.sol\\\";\\nimport \\\"./libraries/DrawLib.sol\\\";\\nimport \\\"./libraries/DrawRingBuffer.sol\\\";\\nimport \\\"./TsunamiDrawSettingsHistory.sol\\\";\\n\\n///@title TsunamiDrawCalculator is an implementation of an IDrawCalculator\\ncontract TsunamiDrawCalculator is IDrawCalculator, Ownable {\\n\\n  /**\\n    * @notice Emitted when a global DrawHistory variable is set.\\n    * @param drawHistory DrawHistory address\\n  */\\n  event DrawHistorySet (\\n    IDrawHistory indexed drawHistory\\n  );\\n\\n  /**\\n    * @notice Holds information about whether a pick won or not\\n    * @param won Boolean to indicate whether the pick won or not. True iff the pick won.\\n    * @param distributionIndex Index of the pick\\n  */\\n  struct PickPrize {\\n    bool won;\\n    uint8 distributionIndex;\\n  }\\n\\n  /// @notice DrawHistory address\\n  IDrawHistory internal drawHistory;\\n\\n  /// @notice Ticket associated with DrawCalculator\\n  ITicket immutable ticket;\\n\\n  /// @notice The stored history of draw settings.  Stored as ring buffer.\\n  TsunamiDrawSettingsHistory immutable tsunamiDrawSettingsHistory;\\n\\n  /* ============ Constructor ============ */\\n\\n  /// @notice Constructor for TsunamiDrawCalculator\\n  /// @param _owner Address of the TsunamiDrawCalculator owner\\n  /// @param _ticket Ticket associated with this DrawCalculator\\n  /// @param _drawHistory The address of the draw history to push draws to\\n  /// @param _tsunamiDrawSettingsHistory TsunamiDrawSettingsHistory address\\n  constructor(\\n    address _owner,\\n    ITicket _ticket,\\n    IDrawHistory _drawHistory,\\n    TsunamiDrawSettingsHistory _tsunamiDrawSettingsHistory\\n  ) Ownable(_owner) {\\n    require(address(_ticket) != address(0), \\\"DrawCalc/ticket-not-zero\\\");\\n    require(address(_tsunamiDrawSettingsHistory) != address(0), \\\"DrawCalc/tdsh-not-zero\\\");\\n    _setDrawHistory(_drawHistory);\\n    tsunamiDrawSettingsHistory = _tsunamiDrawSettingsHistory;\\n    ticket = _ticket;\\n\\n    emit Deployed(_ticket);\\n  }\\n\\n  /* ============ External Functions ============ */\\n\\n  ///@notice Calulates the prize amount for a user for Multiple Draws. Typically called by a ClaimableDraw.\\n  ///@param _user User for which to calcualte prize amount\\n  ///@param _drawIds draw array for which to calculate prize amounts for\\n  ///@param _pickIndicesForDraws The encoded pick indices for all Draws. Expected to be just indices of winning claims. Populated values must be less than totalUserPicks.\\n  ///@return An array of amount of prizes awardable\\n  function calculate(address _user, uint32[] calldata _drawIds, bytes calldata _pickIndicesForDraws)\\n    external override view returns (uint256[] memory)\\n  {\\n    uint256[][] memory pickIndices = abi.decode(_pickIndicesForDraws, (uint256 [][]));\\n    require(pickIndices.length == _drawIds.length, \\\"DrawCalc/invalid-pick-indices-length\\\");\\n\\n    DrawLib.Draw[] memory draws = drawHistory.getDraws(_drawIds);\\n    DrawLib.TsunamiDrawSettings[] memory _drawSettings = tsunamiDrawSettingsHistory.getDrawSettings(_drawIds);\\n    uint256[] memory userBalances = _getNormalizedBalancesAt(_user, draws, _drawSettings);\\n    bytes32 _userRandomNumber = keccak256(abi.encodePacked(_user)); // hash the users address\\n\\n    return _calculatePrizesAwardable(userBalances, _userRandomNumber, draws, pickIndices, _drawSettings);\\n  }\\n\\n  /**\\n    * @notice Read global DrawHistory variable.\\n    * @return IDrawHistory\\n  */\\n  function getDrawHistory() external view returns (IDrawHistory) {\\n    return drawHistory;\\n  }\\n\\n  /**\\n    * @notice Read global DrawHistory variable.\\n    * @return IDrawHistory\\n  */\\n  function getTsunamiDrawSettingsHistory() external view returns (TsunamiDrawSettingsHistory) {\\n    return tsunamiDrawSettingsHistory;\\n  }\\n\\n  /**\\n    * @notice Set global DrawHistory reference.\\n    * @param _drawHistory DrawHistory address\\n    * @return New DrawHistory address\\n  */\\n  function setDrawHistory(IDrawHistory _drawHistory) external onlyOwner returns (IDrawHistory) {\\n    _setDrawHistory(_drawHistory);\\n    return _drawHistory;\\n  }\\n\\n  /**\\n    * @notice Returns a users balances expressed as a fraction of the total supply over time.\\n    * @param _user The users address\\n    * @param _drawIds The drawsId to consider\\n    * @return Array of balances\\n  */\\n  function getNormalizedBalancesForDrawIds(address _user, uint32[] calldata _drawIds) external view returns (uint256[] memory) {\\n    DrawLib.Draw[] memory _draws = drawHistory.getDraws(_drawIds);\\n    DrawLib.TsunamiDrawSettings[] memory _drawSettings = tsunamiDrawSettingsHistory.getDrawSettings(_drawIds);\\n    return _getNormalizedBalancesAt(_user, _draws, _drawSettings);\\n  }\\n\\n  ///@notice Returns the distribution index for a users pickIndices for a draw\\n  ///@param _user The user for which to calculate the distribution indices\\n  ///@param _pickIndices The users pick indices for a draw\\n  ///@param _drawId The draw for which to calculate the distribution indices\\n  function checkPrizeDistributionIndicesForDrawId(address _user, uint256[] calldata _pickIndices, uint32 _drawId) \\n    external view returns(PickPrize[] memory)\\n  {\\n    uint32[] memory drawIds = new uint32[](1);\\n    drawIds[0] = _drawId;\\n\\n    DrawLib.Draw[] memory _draws = drawHistory.getDraws(drawIds);\\n    \\n    DrawLib.TsunamiDrawSettings[] memory _drawSettings = tsunamiDrawSettingsHistory.getDrawSettings(drawIds);\\n    \\n    uint256[] memory userBalances = _getNormalizedBalancesAt(_user, _draws, _drawSettings);\\n    uint256 totalUserPicks = _calculateNumberOfUserPicks(_drawSettings[0], userBalances[0]);\\n\\n    uint256[] memory masks =  _createBitMasks(_drawSettings[0]);\\n    PickPrize[] memory pickPrizes = new PickPrize[](_pickIndices.length);\\n\\n    bytes32 _userRandomNumber = keccak256(abi.encodePacked(_user)); // hash the users address\\n\\n    for(uint256 i = 0; i < _pickIndices.length; i++){\\n      uint256 randomNumberThisPick = uint256(keccak256(abi.encode(_userRandomNumber, _pickIndices[i])));\\n      require(_pickIndices[i] < totalUserPicks, \\\"DrawCalc/insufficient-user-picks\\\");\\n      uint256 distributionIndex =  _calculateDistributionIndex(randomNumberThisPick, _draws[0].winningRandomNumber, masks);\\n\\n      pickPrizes[i] = PickPrize({\\n        won: distributionIndex < _drawSettings[0].distributions.length && _drawSettings[0].distributions[distributionIndex] > 0, \\n        distributionIndex: uint8(distributionIndex)\\n      });\\n    }\\n    return pickPrizes;\\n  }\\n\\n  /* ============ Internal Functions ============ */\\n\\n  /**\\n    * @notice Set global DrawHistory reference.\\n    * @param _drawHistory DrawHistory address\\n  */\\n  function _setDrawHistory(IDrawHistory _drawHistory) internal {\\n    require(address(_drawHistory) != address(0), \\\"DrawCalc/dh-not-zero\\\");\\n    drawHistory = _drawHistory;\\n    emit DrawHistorySet(_drawHistory);\\n  }\\n\\n  ///@notice Calculates the prizes awardable foe each Draw passed. Called by calculate()\\n  ///@param _normalizedUserBalances Number of picks the user has for each Draw\\n  ///@param _userRandomNumber Random number of the user to consider over draws\\n  ///@param _draws Draws\\n  ///@param _pickIndicesForDraws Pick indices for each Draw\\n  ///@param _drawSettings TsunamiDrawCalculatorSettings for each Draw\\n  function _calculatePrizesAwardable(uint256[] memory _normalizedUserBalances, bytes32 _userRandomNumber,\\n    DrawLib.Draw[] memory _draws, uint256[][] memory _pickIndicesForDraws, DrawLib.TsunamiDrawSettings[] memory _drawSettings)\\n    internal view returns (uint256[] memory)\\n   {\\n    uint256[] memory prizesAwardable = new uint256[](_normalizedUserBalances.length);\\n    // calculate prizes awardable for each Draw passed\\n    for (uint32 drawIndex = 0; drawIndex < _draws.length; drawIndex++) {\\n      uint256 totalUserPicks = _calculateNumberOfUserPicks(_drawSettings[drawIndex], _normalizedUserBalances[drawIndex]);\\n      prizesAwardable[drawIndex] = _calculate(_draws[drawIndex].winningRandomNumber, totalUserPicks, _userRandomNumber, _pickIndicesForDraws[drawIndex], _drawSettings[drawIndex]);\\n    }\\n    return prizesAwardable;\\n  }\\n\\n  ///@notice Calculates the number of picks a user gets for a Draw, considering the normalized user balance and the draw settings\\n  ///@dev Divided by 1e18 since the normalized user balance is stored as a base 18 number\\n  ///@param _drawSettings The TsunamiDrawCalculatorSettings to consider\\n  ///@param _normalizedUserBalance The normalized user balances to consider\\n  function _calculateNumberOfUserPicks(DrawLib.TsunamiDrawSettings memory _drawSettings, uint256 _normalizedUserBalance) internal view returns (uint256) {\\n    return (_normalizedUserBalance * _drawSettings.numberOfPicks) / 1 ether;\\n  }\\n\\n  ///@notice Calculates the normalized balance of a user against the total supply for timestamps\\n  ///@param _user The user to consider\\n  ///@param _draws The draws we are looking at\\n  ///@param _drawSettings The draw settings to consider (needed for draw timstamp offsets)\\n  ///@return An array of normalized balances\\n  function _getNormalizedBalancesAt(address _user, DrawLib.Draw[] memory _draws, DrawLib.TsunamiDrawSettings[] memory _drawSettings) internal view returns (uint256[] memory) {\\n    uint32[] memory _timestampsWithStartCutoffTimes = new uint32[](_draws.length);\\n    uint32[] memory _timestampsWithEndCutoffTimes = new uint32[](_draws.length);\\n\\n    // generate timestamps with draw cutoff offsets included\\n    for (uint32 i = 0; i < _draws.length; i++) {\\n      _timestampsWithStartCutoffTimes[i] = _draws[i].timestamp - _drawSettings[i].drawStartTimestampOffset;\\n      _timestampsWithEndCutoffTimes[i] = _draws[i].timestamp - _drawSettings[i].drawEndTimestampOffset;\\n    }\\n\\n    uint256[] memory balances = ticket.getAverageBalancesBetween(_user, _timestampsWithStartCutoffTimes, _timestampsWithEndCutoffTimes);\\n    uint256[] memory totalSupplies = ticket.getAverageTotalSuppliesBetween(_timestampsWithStartCutoffTimes, _timestampsWithEndCutoffTimes);\\n\\n    uint256[] memory normalizedBalances = new uint256[](_draws.length);\\n\\n    // divide balances by total supplies (normalize)\\n    for (uint256 i = 0; i < _draws.length; i++) {\\n      require(totalSupplies[i] > 0, \\\"DrawCalc/total-supply-zero\\\");\\n      normalizedBalances[i] = balances[i] * 1 ether / totalSupplies[i];\\n    }\\n\\n    return normalizedBalances;\\n  }\\n\\n\\n  ///@notice calculates the prize amount per Draw per users pick\\n  ///@param _winningRandomNumber The Draw's winningRandomNumber\\n  ///@param totalUserPicks The number of picks the user gets for the Draw\\n  ///@param _userRandomNumber the users randomNumber for that draw\\n  ///@param _picks The users picks for that draw\\n  ///@param _drawSettings Params with the associated draw\\n  ///@return prize (if any) per Draw claim\\n  function _calculate(uint256 _winningRandomNumber, uint256 totalUserPicks, bytes32 _userRandomNumber, uint256[] memory _picks, DrawLib.TsunamiDrawSettings memory _drawSettings)\\n    internal view returns (uint256)\\n  {\\n\\n    uint256[] memory prizeCounts =  new uint256[](_drawSettings.distributions.length);\\n    uint256[] memory masks =  _createBitMasks(_drawSettings);\\n    uint256 picksLength = _picks.length;\\n\\n    require(picksLength <= _drawSettings.maxPicksPerUser, \\\"DrawCalc/exceeds-max-user-picks\\\");\\n\\n    // for each pick find number of matching numbers and calculate prize distribution index\\n    for(uint256 index  = 0; index < picksLength; index++){\\n      // hash the user random number with the pick index\\n      uint256 randomNumberThisPick = uint256(keccak256(abi.encode(_userRandomNumber, _picks[index])));\\n      require(_picks[index] < totalUserPicks, \\\"DrawCalc/insufficient-user-picks\\\");\\n\\n      uint256 distributionIndex =  _calculateDistributionIndex(randomNumberThisPick, _winningRandomNumber, masks);\\n\\n      if(distributionIndex < _drawSettings.distributions.length) { // there is prize for this distribution index\\n        prizeCounts[distributionIndex]++;\\n      }\\n    }\\n\\n    // now calculate prizeFraction given prize counts\\n    uint256 prizeFraction = 0;\\n    for(uint256 prizeCountIndex = 0; prizeCountIndex < _drawSettings.distributions.length; prizeCountIndex++) {\\n      if(prizeCounts[prizeCountIndex] > 0) {\\n        prizeFraction += _calculatePrizeDistributionFraction(_drawSettings, prizeCountIndex) * prizeCounts[prizeCountIndex];\\n      }\\n    }\\n    // return the absolute amount of prize awardable\\n    return (prizeFraction * _drawSettings.prize) / 1e9; // div by 1e9 as prize distributions are base 1e9\\n  }\\n\\n  ///@notice Calculates the distribution index given the random numbers and masks\\n  ///@param _randomNumberThisPick users random number for this Pick\\n  ///@param _winningRandomNumber The winning number for this draw\\n  ///@param _masks The pre-calculate bitmasks for the drawSettings\\n  ///@return The position within the prize distribution array (0 = top prize, 1 = runner-up prize, etc)\\n  function _calculateDistributionIndex(uint256 _randomNumberThisPick, uint256 _winningRandomNumber, uint256[] memory _masks)\\n    internal pure returns (uint256)\\n  {\\n\\n    uint256 numberOfMatches = 0;\\n    uint256 masksLength = _masks.length;\\n\\n    for(uint256 matchIndex = 0; matchIndex < masksLength; matchIndex++) {\\n      uint256 mask = _masks[matchIndex];\\n      if((_randomNumberThisPick & mask) != (_winningRandomNumber & mask)){\\n        // there are no more sequential matches since this comparison is not a match\\n        return masksLength - numberOfMatches;\\n      }\\n      // else there was a match\\n      numberOfMatches++;\\n    }\\n    return masksLength - numberOfMatches;\\n  }\\n\\n\\n  ///@notice helper function to create bitmasks equal to the matchCardinality\\n  ///@param _drawSettings The TsunamiDrawCalculatorSettings to use to calculate the masks\\n  ///@return An array of bitmasks\\n  function _createBitMasks(DrawLib.TsunamiDrawSettings memory _drawSettings)\\n    internal pure returns (uint256[] memory)\\n  {\\n    uint256[] memory masks = new uint256[](_drawSettings.matchCardinality);\\n\\n    uint256 _bitRangeMaskValue = (2 ** _drawSettings.bitRangeSize) - 1; // get a decimal representation of bitRangeSize\\n\\n    for(uint256 maskIndex = 0; maskIndex < _drawSettings.matchCardinality; maskIndex++){\\n      uint16 _matchIndexOffset = uint16(maskIndex * _drawSettings.bitRangeSize);\\n      masks[maskIndex] = _bitRangeMaskValue << _matchIndexOffset;\\n    }\\n\\n    return masks;\\n  }\\n\\n  ///@notice Calculates the expected prize fraction per TsunamiDrawCalculatorSettings and prizeDistributionIndex\\n  ///@param _drawSettings TsunamiDrawCalculatorSettings struct for Draw\\n  ///@param _prizeDistributionIndex Index of the prize distribution array to calculate\\n  ///@return returns the fraction of the total prize (base 1e18)\\n  function _calculatePrizeDistributionFraction(DrawLib.TsunamiDrawSettings memory _drawSettings, uint256 _prizeDistributionIndex) internal pure returns (uint256)\\n  {\\n    uint256 prizeDistribution = _drawSettings.distributions[_prizeDistributionIndex];\\n    uint256 numberOfPrizesForIndex = _numberOfPrizesForIndex(_drawSettings.bitRangeSize, _prizeDistributionIndex);\\n    return prizeDistribution / numberOfPrizesForIndex;\\n  }\\n\\n  ///@notice Calculates the number of prizes for a given prizeDistributionIndex\\n  ///@param _bitRangeSize TsunamiDrawCalculatorSettings struct for Draw\\n  ///@param _prizeDistributionIndex Index of the prize distribution array to calculate\\n  ///@return returns the fraction of the total prize (base 1e18)\\n  function _numberOfPrizesForIndex(uint8 _bitRangeSize, uint256 _prizeDistributionIndex) internal pure returns (uint256) {\\n    uint256 bitRangeDecimal = 2 ** uint256(_bitRangeSize);\\n    uint256 numberOfPrizesForIndex = bitRangeDecimal ** _prizeDistributionIndex;\\n\\n    if(_prizeDistributionIndex > 0){\\n      numberOfPrizesForIndex -= bitRangeDecimal ** (_prizeDistributionIndex - 1);\\n    }\\n    return numberOfPrizesForIndex;\\n  }\\n}\\n\",\"keccak256\":\"0x3b8aeb43024803a2fec33b600ec88759fa72e8260cb1fa90b5f1d344552aafb9\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\n\\nimport \\\"./libraries/DrawLib.sol\\\";\\nimport \\\"./libraries/DrawRingBuffer.sol\\\";\\nimport \\\"./interfaces/ITsunamiDrawSettingsHistory.sol\\\";\\n\\n///@title TsunamiDrawSettingsHistory\\ncontract TsunamiDrawSettingsHistory is ITsunamiDrawSettingsHistory, Manageable {\\n  using DrawRingBuffer for DrawRingBuffer.Buffer;\\n\\n  uint256 constant MAX_CARDINALITY = 256;\\n\\n  event Deployed(uint8 cardinality);\\n\\n  ///@notice Emitted when the DrawParams are set/updated\\n  event DrawSettingsSet(uint32 indexed drawId, DrawLib.TsunamiDrawSettings drawSettings);\\n\\n  /// @notice The stored history of draw settings.  Stored as ring buffer.\\n  DrawLib.TsunamiDrawSettings[MAX_CARDINALITY] drawSettings;\\n\\n  /// @notice Ring buffer data\\n  DrawRingBuffer.Buffer internal drawSettingsRingBuffer;\\n\\n  /* ============ Constructor ============ */\\n\\n  /// @notice Constructor for TsunamiDrawSettingsHistory\\n  /// @param _owner Address of the TsunamiDrawSettingsHistory owner\\n  /// @param _cardinality Cardinality of the `drawSettingsRingBuffer`\\n\\n  constructor(\\n    address _owner,\\n    uint8 _cardinality\\n  ) Ownable(_owner) {\\n    drawSettingsRingBuffer.cardinality = _cardinality;\\n\\n    emit Deployed(_cardinality);\\n  }\\n\\n  ///@notice Sets TsunamiDrawSettingsHistorySettings for a draw id. only callable by the owner or manager\\n  ///@param _drawId The id of the Draw\\n  ///@param _drawSettings The TsunamiDrawSettingsHistorySettings to set\\n  function pushDrawSettings(uint32 _drawId, DrawLib.TsunamiDrawSettings calldata _drawSettings) external override onlyManagerOrOwner\\n    returns (bool)\\n  {\\n    return _pushDrawSettings(_drawId, _drawSettings);\\n  }\\n\\n  ///@notice Gets the TsunamiDrawSettingsHistorySettings for a draw id\\n  ///@param _drawId The id of the Draw\\n  function getDrawSetting(uint32 _drawId) external override view returns(DrawLib.TsunamiDrawSettings memory)\\n  {\\n    return _getDrawSettings(drawSettingsRingBuffer, _drawId);\\n  }\\n\\n  ///@notice Gets the TsunamiDrawSettingsHistorySettings for a draw id\\n  ///@param _drawIds The draw ids to get the settings for\\n  function getDrawSettings(uint32[] calldata _drawIds) external override view returns(DrawLib.TsunamiDrawSettings[] memory)\\n  {\\n    DrawRingBuffer.Buffer memory buffer = drawSettingsRingBuffer;\\n    DrawLib.TsunamiDrawSettings[] memory _drawSettings = new DrawLib.TsunamiDrawSettings[](_drawIds.length);\\n    for (uint256 i = 0; i < _drawIds.length; i++) {\\n      _drawSettings[i] = _getDrawSettings(buffer, _drawIds[i]);\\n    }\\n    return _drawSettings;\\n  }\\n\\n  /**\\n    * @notice Read newest Draw from the draws ring buffer.\\n    * @dev    Uses the nextDrawIndex to calculate the most recently added Draw.\\n    * @return DrawLib.TsunamiDrawSettings\\n  */\\n  function getNewestDrawSettings() external override view returns (DrawLib.TsunamiDrawSettings memory) {\\n    DrawRingBuffer.Buffer memory buffer = drawSettingsRingBuffer;\\n    return drawSettings[buffer.getIndex(buffer.lastDrawId)];\\n  }\\n\\n  /**\\n    * @notice Read oldest Draw from the draws ring buffer.\\n    * @dev    Finds the oldest Draw by comparing and/or diffing totalDraws with the cardinality.\\n    * @return DrawLib.TsunamiDrawSettings\\n  */\\n  function getOldestDrawSettings() external override view returns (DrawLib.TsunamiDrawSettings memory) {\\n    // oldest draw should be next available index, otherwise it's at 0\\n    DrawRingBuffer.Buffer memory buffer = drawSettingsRingBuffer;\\n    DrawLib.TsunamiDrawSettings memory drawSet = drawSettings[buffer.nextIndex];\\n    if (drawSet.matchCardinality == 0) { // if draw is not init, then use draw at 0\\n      drawSet = drawSettings[0];\\n    }\\n    return drawSet;\\n  }\\n\\n  /**\\n    * @notice Set existing Draw in draws ring buffer with new parameters.\\n    * @dev    Updating a Draw should be used sparingly and only in the event an incorrect Draw parameter has been stored.\\n    * @return Draw.drawId\\n  */\\n  function setDrawSetting(uint32 _drawId, DrawLib.TsunamiDrawSettings calldata _drawSettings) external override onlyOwner returns (uint32) {\\n    DrawRingBuffer.Buffer memory buffer = drawSettingsRingBuffer;\\n    uint32 index = buffer.getIndex(_drawId);\\n    drawSettings[index] = _drawSettings;\\n    emit DrawSettingsSet(_drawId, _drawSettings);\\n    return _drawId;\\n  }\\n\\n  ///@notice Set the DrawCalculators TsunamiDrawSettingsHistorySettings\\n  ///@dev Distributions must be expressed with Ether decimals (1e18)\\n  ///@param _drawId The id of the Draw\\n  ///@param _drawSettings TsunamiDrawSettingsHistorySettings struct to set\\n  function _pushDrawSettings(uint32 _drawId, DrawLib.TsunamiDrawSettings calldata _drawSettings) internal\\n    returns (bool)\\n  {\\n    uint256 distributionsLength = _drawSettings.distributions.length;\\n\\n    require(_drawSettings.matchCardinality >= distributionsLength, \\\"DrawCalc/matchCardinality-gte-distributions\\\");\\n    require(_drawSettings.bitRangeSize <= 256 / _drawSettings.matchCardinality, \\\"DrawCalc/bitRangeSize-too-large\\\");\\n    require(_drawSettings.bitRangeSize > 0, \\\"DrawCalc/bitRangeSize-gt-0\\\");\\n    require(_drawSettings.numberOfPicks > 0, \\\"DrawCalc/numberOfPicks-gt-0\\\");\\n    require(_drawSettings.maxPicksPerUser > 0, \\\"DrawCalc/maxPicksPerUser-gt-0\\\");\\n\\n    // ensure that the distributions are not gt 100%\\n    uint256 sumTotalDistributions = 0;\\n    for(uint256 index = 0; index < distributionsLength; index++){\\n      sumTotalDistributions += _drawSettings.distributions[index];\\n    }\\n\\n    require(sumTotalDistributions <= 1e9, \\\"DrawCalc/distributions-gt-100%\\\");\\n\\n    DrawRingBuffer.Buffer memory _drawSettingsRingBuffer = drawSettingsRingBuffer;\\n    drawSettings[_drawSettingsRingBuffer.nextIndex] = _drawSettings;\\n    drawSettingsRingBuffer = drawSettingsRingBuffer.push(_drawId);\\n\\n    emit DrawSettingsSet(_drawId, _drawSettings);\\n    return true;\\n  }\\n\\n  function _getDrawSettings(\\n    DrawRingBuffer.Buffer memory _drawSettingsRingBuffer,\\n    uint32 drawId\\n  ) internal view returns (DrawLib.TsunamiDrawSettings memory) {\\n    return drawSettings[_drawSettingsRingBuffer.getIndex(drawId)];\\n  }\\n}\\n\",\"keccak256\":\"0x28f73c10f51d1fafe51ca230dcf6b8a17a89e34f3be1f12fd01d1e1f621bc880\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/IClaimableDraw.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IDrawHistory.sol\\\";\\nimport \\\"./IDrawCalculator.sol\\\";\\nimport \\\"../libraries/DrawLib.sol\\\";\\n\\ninterface IClaimableDraw {\\n\\n  /**\\n    * @notice Emitted when a user has claimed N draw payouts.\\n    * @param user        User address receiving draw claim payouts\\n    * @param drawId      Draw id that was paid out\\n    * @param payout Payout for draw\\n  */\\n  event ClaimedDraw (\\n    address indexed user,\\n    uint32 indexed drawId,\\n    uint256 payout\\n  );\\n\\n  /**\\n    * @notice Emitted when a DrawCalculator is set\\n    * @param calculator DrawCalculator address\\n  */\\n  event DrawCalculatorSet (\\n    IDrawCalculator indexed calculator\\n  );\\n\\n  /**\\n    * @notice Emitted when a global Ticket variable is set.\\n    * @param token Token address\\n  */\\n  event TokenSet (\\n    IERC20 indexed token\\n  );\\n\\n  /**\\n    * @notice Emitted when ERC20 tokens are withdrawn from the claimable draw.\\n    * @param token ERC20 token transferred.\\n    * @param to Address that received funds.\\n    * @param amount Amount of tokens transferred.\\n  */\\n  event ERC20Withdrawn(\\n    IERC20 indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  function claim(address _user, uint32[] calldata _drawIds, bytes calldata _data) external returns (uint256);\\n  function getDrawCalculator() external view returns (IDrawCalculator);\\n  function getDrawPayoutBalanceOf(address user, uint32 drawId) external view returns (uint256);\\n  function getToken() external view returns (IERC20);\\n  function setDrawCalculator(IDrawCalculator _newCalculator) external returns(IDrawCalculator);\\n  function withdrawERC20(IERC20 _erc20Token, address _to, uint256 _amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf500f8800e41f64616220cd14f98989a73f1cc4286cf07c046f1e9c95bb2844f\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/IDrawCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITicket.sol\\\";\\nimport \\\"../ClaimableDraw.sol\\\";\\nimport \\\"../libraries/DrawLib.sol\\\";\\n\\ninterface IDrawCalculator {\\n\\n  ///@notice Emitted when the contract is initialized\\n  event Deployed(ITicket indexed ticket);\\n\\n  ///@notice Emitted when the claimableDraw is set/updated\\n  event ClaimableDrawSet(ClaimableDraw indexed claimableDraw);\\n\\n  function calculate(address user, uint32[] calldata drawIds, bytes calldata data)\\n    external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x1846f7dc3345079eced9502623569249ce35cdf9cb0fdc2d5c765ebfdcfa99b2\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/IDrawHistory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/DrawLib.sol\\\";\\n\\ninterface IDrawHistory {\\n  \\n  /**\\n    * @notice Emit when a new draw has been created.\\n    * @param drawId       Draw id\\n    * @param timestamp    Epoch timestamp when the draw is created.\\n    * @param winningRandomNumber Randomly generated number used to calculate draw winning numbers\\n  */\\n  event DrawSet (\\n    uint32 drawId,\\n    uint32 timestamp,\\n    uint256 winningRandomNumber\\n  );\\n\\n  function getDraws(uint32[] calldata drawIds) external view returns (DrawLib.Draw[] memory);\\n  function getDraw(uint32 drawId) external view returns (DrawLib.Draw memory);\\n  function pushDraw(DrawLib.Draw calldata draw) external returns(uint32);\\n  function setDraw(DrawLib.Draw calldata draw) external returns(uint32); // maybe return drawIndex\\n}\",\"keccak256\":\"0x13b05ac622ee31cf26fecf2bb9943537872991d0d8d1fe4d34c796f34556c606\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/ITicket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/TwabLibrary.sol\\\";\\n\\ninterface ITicket {\\n\\n  event Delegated(\\n    address indexed user,\\n    address indexed delegate\\n  );\\n\\n  /// @notice Emitted when ticket is initialized.\\n  /// @param name Ticket name (eg: PoolTogether Dai Ticket (Compound)).\\n  /// @param symbol Ticket symbol (eg: PcDAI).\\n  /// @param decimals Ticket decimals.\\n  /// @param controller Token controller address.\\n  event TicketInitialized(\\n    string name,\\n    string symbol,\\n    uint8 decimals,\\n    address controller\\n  );\\n\\n  /// @notice Emitted when a new TWAB has been recorded.\\n  /// @param ticketHolder The Ticket holder address.\\n  /// @param user The recipient of the ticket power (may be the same as the ticketHolder)\\n  /// @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\\n  event NewUserTwab(\\n    address indexed ticketHolder,\\n    address indexed user,\\n    TwabLibrary.Twab newTwab\\n  );\\n\\n  /// @notice Emitted when a new total supply TWAB has been recorded.\\n  /// @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\\n  event NewTotalSupplyTwab(\\n    TwabLibrary.Twab newTotalSupplyTwab\\n  );\\n  \\n  function getBalanceAt(address user, uint256 timestamp) external view returns(uint256);\\n  function getBalancesAt(address user, uint32[] calldata timestamp) external view returns(uint256[] memory);\\n  function getAverageBalanceBetween(address user, uint256 startTime, uint256 endTime) external view returns (uint256);\\n  function getAverageBalancesBetween(address user, uint32[] calldata startTimes, uint32[] calldata endTimes) external view returns (uint256[] memory);\\n  function getTotalSupply(uint32 timestamp) external view returns(uint256);\\n  function getTotalSupplies(uint32[] calldata timestamp) external view returns(uint256[] memory);\\n  function getAverageTotalSuppliesBetween(uint32[] calldata startTimes, uint32[] calldata endTimes) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0x0069a2efee2c7a919570c0a5a466803b5e50a8d79842a9def29e5ca8b6ba10ab\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/ITsunamiDrawSettingsHistory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/DrawLib.sol\\\";\\n\\ninterface ITsunamiDrawSettingsHistory {\\n\\n  /**\\n    * @notice Emit when a new draw has been created.\\n    * @param drawId       Draw id\\n    * @param timestamp    Epoch timestamp when the draw is created.\\n    * @param winningRandomNumber Randomly generated number used to calculate draw winning numbers\\n  */\\n  event DrawSet (\\n    uint32 drawId,\\n    uint32 timestamp,\\n    uint256 winningRandomNumber\\n  );\\n\\n  function getDrawSettings(uint32[] calldata drawIds) external view returns (DrawLib.TsunamiDrawSettings[] memory);\\n  function getDrawSetting(uint32 drawId) external view returns (DrawLib.TsunamiDrawSettings memory);\\n  function pushDrawSettings(uint32 drawId, DrawLib.TsunamiDrawSettings calldata draw) external returns(bool);\\n  function setDrawSetting(uint32 drawId, DrawLib.TsunamiDrawSettings calldata draw) external returns(uint32); // maybe return drawIndex\\n  function getNewestDrawSettings() external view returns (DrawLib.TsunamiDrawSettings memory);\\n  function getOldestDrawSettings() external view returns (DrawLib.TsunamiDrawSettings memory);\\n}\",\"keccak256\":\"0xd88c3e40125acf0aac71172400bfca5693212c11b61075671cf1da1dd8961eca\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/DrawLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nlibrary DrawLib{\\n\\n    struct Draw {\\n        uint256 winningRandomNumber;\\n        uint32 timestamp;\\n        uint32 drawId;\\n    }\\n\\n    ///@notice Draw settings for the tsunami draw calculator\\n    ///@param bitRangeSize Decimal representation of bitRangeSize\\n    ///@param matchCardinality The bitRangeSize's to consider in the 256 random numbers. Must be > 1 and < 256/bitRangeSize\\n    ///@param numberOfPicks Number of picks this Draw has (may vary network to network)\\n    ///@param maxPicksPerUser Maximum number of picks a user can make in this Draw\\n    ///@param distributions Array of prize distribution percentages, expressed in fraction form with base 1e18. Max sum of these <= 1 Ether. ordering: index0: grandPrize, index1: runnerUp, etc.\\n    ///@param prize Total prize amount available in this draw calculator for this Draw (may vary from network to network)\\n    struct TsunamiDrawSettings {\\n        uint8 bitRangeSize;\\n        uint8 matchCardinality;\\n        uint32 drawStartTimestampOffset;\\n        uint32 drawEndTimestampOffset;\\n        uint32 maxPicksPerUser;\\n        uint136 numberOfPicks;\\n        uint32[] distributions;\\n        uint256 prize;\\n    }\\n}\",\"keccak256\":\"0xb216d3c74904241eb73621750a2d6d561b05bb95489af807c70140ef8579b73b\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/DrawRingBuffer.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\nimport \\\"./RingBuffer.sol\\\";\\n\\nlibrary DrawRingBuffer {\\n\\n  struct Buffer {\\n    uint32 lastDrawId;\\n    uint32 nextIndex;\\n    uint32 cardinality;\\n  }\\n\\n  function push(Buffer memory _buffer, uint32 _drawId) internal view returns (Buffer memory) {\\n    // since draws start at 0, we know we are uninitialized if nextIndex = 0 and lastDrawId = 0, since draws montonically increase\\n    bool bufferNotInitialized = _buffer.nextIndex == 0 && _buffer.lastDrawId == 0;\\n    require(bufferNotInitialized || _drawId == _buffer.lastDrawId + 1, \\\"DRB/must-be-contig\\\");\\n    return Buffer({\\n      lastDrawId: _drawId,\\n      nextIndex: uint32(RingBuffer.nextIndex(_buffer.nextIndex, _buffer.cardinality)),\\n      cardinality: _buffer.cardinality\\n    });\\n  }\\n\\n  function getIndex(Buffer memory _buffer, uint32 _drawId) internal view returns (uint32) {\\n    bool bufferNotInitialized = _buffer.nextIndex == 0 && _buffer.lastDrawId == 0;\\n    require(!bufferNotInitialized && _drawId <= _buffer.lastDrawId, \\\"DRB/future-draw\\\");\\n    uint32 indexOffset = _buffer.lastDrawId - _drawId;\\n    require(indexOffset < _buffer.cardinality, \\\"DRB/expired-draw\\\");\\n    uint32 mostRecent = uint32(RingBuffer.mostRecentIndex(_buffer.nextIndex, _buffer.cardinality));\\n    return uint32(RingBuffer.offset(mostRecent, indexOffset, _buffer.cardinality));\\n  }\\n}\\n\",\"keccak256\":\"0x47ade81b1a6cfa2267c288f1f6f710c22cdae88834b1f38ba4036b8859019b88\"},\"@pooltogether/v4-core/contracts/libraries/OverflowSafeComparator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/// @title OverflowSafeComparator library to share comparator functions between contracts\\n/// @author PoolTogether Inc.\\nlibrary OverflowSafeComparator {\\n  /// @notice 32-bit timestamps comparator.\\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n  /// @param _b Timestamp to compare against `_a`.\\n  /// @param _timestamp A timestamp truncated to 32 bits.\\n  /// @return bool Whether `_a` is chronologically < `_b`.\\n  function lt(\\n      uint32 _a,\\n      uint32 _b,\\n      uint32 _timestamp\\n  ) internal pure returns (bool) {\\n      // No need to adjust if there hasn't been an overflow\\n      if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\\n\\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n      return aAdjusted < bAdjusted;\\n  }\\n\\n  /// @notice 32-bit timestamps comparator.\\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n  /// @param _b Timestamp to compare against `_a`.\\n  /// @param _timestamp A timestamp truncated to 32 bits.\\n  /// @return bool Whether `_a` is chronologically <= `_b`.\\n  function lte(\\n      uint32 _a,\\n      uint32 _b,\\n      uint32 _timestamp\\n  ) internal pure returns (bool) {\\n      // No need to adjust if there hasn't been an overflow\\n      if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\\n\\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n      return aAdjusted <= bAdjusted;\\n  }\\n\\n  function checkedSub(\\n      uint32 _a,\\n      uint32 _b,\\n      uint32 _timestamp\\n  ) internal pure returns (uint32) {\\n      // No need to adjust if there hasn't been an overflow\\n      if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\\n\\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n      return uint32(aAdjusted - bAdjusted);\\n  }\\n}\\n\",\"keccak256\":\"0xde8b2a91634534f6e24bf470d87304176b828231d18dbde45f23c972bc173d3c\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/RingBuffer.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\nlibrary RingBuffer {\\n\\n  /// @notice Returns TWAB index.\\n  /// @dev `twabs` is a circular buffer of `MAX_CARDINALITY` size equal to 32. So the array goes from 0 to 31.\\n  /// @dev In order to navigate the circular buffer, we need to use the modulo operator.\\n  /// @dev For example, if `_index` is equal to 32, `_index % MAX_CARDINALITY` will return 0 and will point to the first element of the array.\\n  /// @param _index Index used to navigate through `twabs` circular buffer.\\n  function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n    return _index % _cardinality;\\n  }\\n\\n  function offset(uint256 _index, uint256 _amount, uint256 _cardinality) internal pure returns (uint256) {\\n    return (_index + _cardinality - _amount) % _cardinality;\\n  }\\n\\n  /// @notice Returns the index of the last recorded TWAB\\n  /// @param _nextAvailableIndex The next available twab index.  This will be recorded to next.\\n  /// @param _cardinality The cardinality of the TWAB history.\\n  /// @return The index of the last recorded TWAB\\n  function mostRecentIndex(uint256 _nextAvailableIndex, uint256 _cardinality) internal pure returns (uint256) {\\n    if (_cardinality == 0) {\\n      return 0;\\n    }\\n    return (_nextAvailableIndex + uint256(_cardinality) - 1) % _cardinality;\\n  }\\n\\n  function nextIndex(uint256 _currentIndex, uint256 _cardinality) internal pure returns (uint256) {\\n    return (_currentIndex + 1) % _cardinality;\\n  }\\n\\n}\",\"keccak256\":\"0xb055c8f88ea11a451d5950eaea35542833e581dbf075224af6adb40fc9dc4ddc\"},\"@pooltogether/v4-core/contracts/libraries/TwabLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./OverflowSafeComparator.sol\\\";\\nimport \\\"./RingBuffer.sol\\\";\\n\\n/// @title Time-Weighted Average Balance Library\\n/// @notice This library allows you to efficiently track a user's historic balance.  You can get a\\n/// @author PoolTogether Inc.\\nlibrary TwabLibrary {\\n  using OverflowSafeComparator for uint32;\\n  using SafeCast for uint256;\\n\\n  /// @notice The maximum number of twab entries\\n  uint16 public constant MAX_CARDINALITY = 65535;\\n\\n  /// @notice Time Weighted Average Balance (TWAB).\\n  /// @param amount `amount` at `timestamp`.\\n  /// @param timestamp Recorded `timestamp`.\\n  struct Twab {\\n    uint224 amount;\\n    uint32 timestamp;\\n  }\\n\\n  /// @notice Ensures the passed cardinality is a minimum of 1\\n  /// @param _cardinality The cardinality to ensure a floor of 1\\n  /// @return Returns 1 if the given cardinality is zero, otherwise return the cardinality\\n  function _minCardinality(uint16 _cardinality) internal pure returns (uint16) {\\n    return _cardinality > 0 ? _cardinality : 1;\\n  }\\n\\n  /// @notice Retrieves TWAB balance.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function getBalanceAt(\\n    uint16 _cardinality,\\n    uint16 _nextTwabIndex,\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _balance,\\n    uint32 _target,\\n    uint32 _time\\n  ) internal view returns (uint256) {\\n    uint16 cardinality = _minCardinality(_cardinality);\\n    uint16 recentIndex = uint16(RingBuffer.mostRecentIndex(_nextTwabIndex, cardinality));\\n    return getBalanceAt(_twabs, _target, _balance, recentIndex, cardinality, _time);\\n  }\\n\\n  /// @notice Calculates the average balance held by an Account for a given time frame.\\n  /// @param _startTime The start time of the time frame.\\n  /// @param _endTime The end time of the time frame.\\n  /// @param _time The current time\\n  /// @return The average balance that the user held during the time frame.\\n  function getAverageBalanceBetween(\\n    uint16 _cardinality,\\n    uint16 _nextTwabIndex,\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _balance,\\n    uint32 _startTime,\\n    uint32 _endTime,\\n    uint32 _time\\n  ) internal view returns (uint256) {\\n    uint16 card = _minCardinality(_cardinality);\\n    uint16 recentIndex = uint16(RingBuffer.mostRecentIndex(_nextTwabIndex, card));\\n    return getAverageBalanceBetween(\\n      _twabs,\\n      _balance,\\n      recentIndex,\\n      _startTime,\\n      _endTime,\\n      card,\\n      _time\\n    );\\n  }\\n\\n  /// @notice Decreases an account's balance and records a new twab.\\n  /// @param _balance The balance held since the last update\\n  /// @param _time The current time\\n  /// @param _ttl The time-to-live for TWABs. This is essentially how long twabs are kept around.  History is not available longer than the time-to-live.\\n  /// @return nextTwabIndex\\n  /// @return cardinality\\n  /// @return twab The user's latest TWAB\\n  /// @return isNew Whether the TWAB is new\\n  function update(\\n    uint224 _balance,\\n    uint16 _nextTwabIndex,\\n    uint16 _cardinality,\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint32 _time,\\n    uint32 _ttl\\n  ) internal returns (uint16 nextTwabIndex, uint16 cardinality, Twab memory twab, bool isNew) {\\n    (nextTwabIndex, cardinality, twab, isNew) = nextTwabWithExpiry(\\n      _twabs,\\n      _balance,\\n      _nextTwabIndex,\\n      _cardinality,\\n      _time,\\n      _ttl\\n    );\\n  }\\n\\n  /// @dev A struct that just used internally to bypass the stack variable limitation\\n  struct AvgHelper {\\n    uint16 twabIndex;\\n    uint16 oldestTwabIndex;\\n    uint32 startTime;\\n    uint32 endTime;\\n    uint16 cardinality;\\n  }\\n\\n  /// @notice Fetches TWABs `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\\n  /// The result may be the same TWAB, or adjacent TWABs.\\n  /// @dev The answer must be contained in the array, used when the target is located within the stored TWAB.\\n  /// boundaries: older than the most recent TWAB and younger, or the same age as, the oldest TWAB.\\n  /// @param _twabs List of TWABs to search through.\\n  /// @param _twabIndex Index of the TWAB to start searching from.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  /// @return beforeOrAt TWAB recorded before, or at, the target.\\n  /// @return atOrAfter TWAB recorded at, or after, the target.\\n  function binarySearch(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint16 _twabIndex,\\n    uint16 _oldestTwabIndex,\\n    uint32 _target,\\n    uint16 _cardinality,\\n    uint32 _time\\n  ) internal view returns (Twab memory beforeOrAt, Twab memory atOrAfter) {\\n    uint256 leftSide = _oldestTwabIndex; // Oldest TWAB\\n    uint256 rightSide = _twabIndex < leftSide ? leftSide + _cardinality - 1 : _twabIndex;\\n    uint256 currentIndex;\\n\\n    while (true) {\\n      currentIndex = (leftSide + rightSide) / 2;\\n      beforeOrAt = _twabs[uint16(RingBuffer.wrap(currentIndex, _cardinality))];\\n      uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\\n\\n      // We've landed on an uninitialized timestamp, keep searching higher (more recently)\\n      if (beforeOrAtTimestamp == 0) {\\n        leftSide = currentIndex + 1;\\n        continue;\\n      }\\n\\n      atOrAfter = _twabs[uint16(RingBuffer.nextIndex(currentIndex, _cardinality))];\\n\\n      bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\\n\\n      // Check if we've found the corresponding TWAB\\n      if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\\n        break;\\n      }\\n\\n      // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower\\n      if (!targetAtOrAfter) rightSide = currentIndex - 1;\\n\\n      // Otherwise, we keep searching higher\\n      else leftSide = currentIndex + 1;\\n    }\\n  }\\n\\n  /// @notice Calculates the TWAB for a given timestamp.  It interpolates as necessary.\\n  /// @param _twabs The TWAB history\\n  function calculateTwab(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    Twab memory newestTwab,\\n    Twab memory oldestTwab,\\n    uint16 _twabIndex,\\n    uint16 _oldestTwabIndex,\\n    uint32 targetTimestamp,\\n    uint224 _currentBalance,\\n    uint16 _cardinality,\\n    uint32 _time\\n  ) internal view returns (Twab memory) {\\n    // If `targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\\n    if (newestTwab.timestamp.lt(targetTimestamp, _time)) {\\n      return Twab({\\n        amount: newestTwab.amount + _currentBalance*(targetTimestamp - newestTwab.timestamp),\\n        timestamp: targetTimestamp\\n      });\\n    }\\n\\n    if (newestTwab.timestamp == targetTimestamp) {\\n      return newestTwab;\\n    }\\n\\n    if (oldestTwab.timestamp == targetTimestamp) {\\n      return oldestTwab;\\n    }\\n\\n    // If `targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\\n    if (targetTimestamp.lt(oldestTwab.timestamp, _time)) {\\n      return Twab({\\n        amount: 0,\\n        timestamp: targetTimestamp\\n      });\\n    }\\n\\n    // Otherwise, both timestamps must be surrounded by twabs.\\n    (\\n      Twab memory beforeOrAtStart,\\n      Twab memory afterOrAtStart\\n    ) = binarySearch(_twabs, _twabIndex, _oldestTwabIndex, targetTimestamp, _cardinality, _time);\\n\\n    uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) / (afterOrAtStart.timestamp - beforeOrAtStart.timestamp);\\n    uint224 amount = beforeOrAtStart.amount + heldBalance * (targetTimestamp - beforeOrAtStart.timestamp);\\n\\n    return Twab({\\n      amount: amount,\\n      timestamp: targetTimestamp\\n    });\\n  }\\n\\n  function getAverageBalanceBetween(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _currentBalance,\\n    uint16 _twabIndex,\\n    uint32 _startTime,\\n    uint32 _endTime,\\n    uint16 _cardinality,\\n    uint32 _time\\n  ) internal view returns (uint256) {\\n    require(_endTime > _startTime, \\\"TWAB/startTime-gt-than-endTime\\\");\\n\\n    // Find oldest Twab\\n    uint16 oldestTwabIndex = uint16(RingBuffer.nextIndex(_twabIndex, _cardinality));\\n    Twab memory oldestTwab = _twabs[oldestTwabIndex];\\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n    if (oldestTwab.timestamp == 0) {\\n      oldestTwabIndex = 0;\\n      oldestTwab = _twabs[0];\\n    }\\n\\n    return _getAverageBalanceBetween(\\n      _twabs,\\n      _currentBalance,\\n      AvgHelper({\\n        twabIndex: _twabIndex,\\n        oldestTwabIndex: oldestTwabIndex,\\n        startTime: _startTime,\\n        endTime: _endTime,\\n        cardinality: _cardinality\\n      }),\\n      oldestTwab,\\n      _time\\n    );\\n  }\\n\\n  function _getAverageBalanceBetween(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _currentBalance,\\n    AvgHelper memory helper,\\n    Twab memory _oldestTwab,\\n    uint32 _time\\n  ) private view returns (uint256) {\\n    uint32 endTime = helper.endTime > _time ? _time : helper.endTime;\\n\\n    Twab memory newestTwab = _twabs[helper.twabIndex];\\n\\n    Twab memory startTwab = calculateTwab(\\n      _twabs, newestTwab, _oldestTwab, helper.twabIndex, helper.oldestTwabIndex, helper.startTime, _currentBalance, helper.cardinality, _time\\n    );\\n    Twab memory endTwab = calculateTwab(\\n      _twabs, newestTwab, _oldestTwab, helper.twabIndex, helper.oldestTwabIndex, endTime, _currentBalance, helper.cardinality, _time\\n    );\\n\\n    // Difference in amount / time\\n    return (endTwab.amount - startTwab.amount) / (endTwab.timestamp - startTwab.timestamp);\\n  }\\n\\n  /// @notice Retrieves amount at `_target` timestamp\\n  /// @param _twabs List of TWABs to search through.\\n  /// @param _currentBalance Most recent amount recorded.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  /// @param _twabIndex Most recent TWAB index recorded.\\n  /// @return uint256 TWAB amount at `_target`.\\n  function getBalanceAt(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint32 _target,\\n    uint256 _currentBalance,\\n    uint16 _twabIndex,\\n    uint16 _cardinality,\\n    uint32 _time\\n  ) internal view returns (uint256) {\\n    uint32 targetTimestamp = _target > _time ? _time : _target;\\n\\n    Twab memory afterOrAt;\\n    Twab memory beforeOrAt = _twabs[_twabIndex];\\n\\n    // If `targetTimestamp` is chronologically after the newest TWAB, we can simply return the current balance\\n    if (beforeOrAt.timestamp.lte(targetTimestamp, _time)) {\\n      return _currentBalance;\\n    }\\n\\n    // Now, set before to the oldest TWAB\\n    uint16 oldestTwabIndex = uint16(RingBuffer.nextIndex(_twabIndex, _cardinality));\\n    beforeOrAt = _twabs[oldestTwabIndex];\\n\\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n    if (beforeOrAt.timestamp == 0) {\\n      oldestTwabIndex = 0;\\n      beforeOrAt = _twabs[0];\\n    }\\n\\n    // If `targetTimestamp` is chronologically before the oldest TWAB, we can early return\\n    if (targetTimestamp.lt(beforeOrAt.timestamp, _time)) {\\n      return 0;\\n    }\\n\\n    // Otherwise, we perform the `binarySearch`\\n    (beforeOrAt, afterOrAt) = binarySearch(_twabs, _twabIndex, oldestTwabIndex, _target, _cardinality, _time);\\n\\n    // Difference in amount / time\\n    uint224 differenceInAmount = afterOrAt.amount - beforeOrAt.amount;\\n    uint32 differenceInTime = afterOrAt.timestamp - beforeOrAt.timestamp;\\n\\n    return differenceInAmount / differenceInTime;\\n  }\\n\\n  /// @notice Records a new TWAB.\\n  /// @param _currentBalance Current `amount`.\\n  /// @return New TWAB that was recorded.\\n  function nextTwab(\\n    Twab memory _currentTwab,\\n    uint256 _currentBalance,\\n    uint32 _time\\n  ) internal pure returns (Twab memory) {\\n    // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\\n    return Twab({\\n      amount: (uint256(_currentTwab.amount) + (_currentBalance * (_time.checkedSub(_currentTwab.timestamp, _time)))).toUint224(),\\n      timestamp: _time\\n    });\\n  }\\n\\n  function calculateNextWithExpiry(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint16 _nextTwabIndex,\\n    uint16 _cardinality,\\n    uint32 _time,\\n    uint32 _ttl\\n  ) internal view returns (uint16 nextAvailableTwabIndex, uint16 nextCardinality) {\\n    uint16 cardinality = _cardinality > 0 ? _cardinality : 1;\\n/*\\n    TTL: 100\\n\\n    Example 1:\\n      next twab timestamp: 100\\n\\n      existing twab timestamps:\\n      0: 10\\n      1: 90\\n\\n      we should not eliminate 0 or else the history will be 10 seconds long\\n\\n    Example 2:\\n\\n      next twab timestamp: 105\\n\\n      existing twab timestamps\\n      0: 1\\n      1: 5\\n\\n      We can eliminate 0, because the history will be 100 seconds long\\n\\n    Q: when do we eliminate the oldest twab?\\n    A: when current time - second oldest twab >= time to live\\n    */\\n\\n    Twab memory secondOldestTwab;\\n    // if there are two or more records (cardinality is always one greater than # of records)\\n    if (cardinality > 2) {\\n      // get the second oldest twab\\n      secondOldestTwab = _twabs[uint16(RingBuffer.nextIndex(_nextTwabIndex, cardinality))];\\n    }\\n\\n    nextCardinality = cardinality;\\n    if (secondOldestTwab.timestamp == 0 || _time.checkedSub(secondOldestTwab.timestamp, _time) < _ttl) {\\n      nextCardinality = cardinality < MAX_CARDINALITY ? cardinality + 1 : MAX_CARDINALITY;\\n    }\\n\\n    nextAvailableTwabIndex = uint16(RingBuffer.nextIndex(_nextTwabIndex, nextCardinality));\\n  }\\n\\n  function nextTwabWithExpiry(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _balance,\\n    uint16 _nextTwabIndex,\\n    uint16 _cardinality,\\n    uint32 _time,\\n    uint32 _maxLifetime\\n  ) internal returns (uint16 nextAvailableTwabIndex, uint16 nextCardinality, Twab memory twab, bool isNew) {\\n    Twab memory newestTwab = _twabs[uint16(RingBuffer.mostRecentIndex(_nextTwabIndex, _cardinality))];\\n\\n    // if we're in the same block, return\\n    if (newestTwab.timestamp == _time) {\\n      return (_nextTwabIndex, _cardinality, newestTwab, false);\\n    }\\n\\n    (nextAvailableTwabIndex, nextCardinality) = calculateNextWithExpiry(_twabs, _nextTwabIndex, _cardinality, _time, _maxLifetime);\\n\\n    Twab memory newTwab = nextTwab(\\n      newestTwab,\\n      _balance,\\n      _time\\n    );\\n\\n    _twabs[_nextTwabIndex] = newTwab;\\n\\n    return (nextAvailableTwabIndex, nextCardinality, newTwab, true);\\n  }\\n}\\n\",\"keccak256\":\"0x9aa5005e0435bf6e5f5ea714b895747442837a760a12bf6894f176d7140aec88\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620025b7380380620025b783398101604081905262000034916200024a565b83620000408162000158565b506001600160a01b0383166200009d5760405162461bcd60e51b815260206004820152601860248201527f4472617743616c632f7469636b65742d6e6f742d7a65726f000000000000000060448201526064015b60405180910390fd5b6001600160a01b038116620000f55760405162461bcd60e51b815260206004820152601660248201527f4472617743616c632f746473682d6e6f742d7a65726f00000000000000000000604482015260640162000094565b6200010082620001a8565b6001600160601b0319606082811b821660a05284901b166080526040516001600160a01b038416907ff40fcec21964ffb566044d083b4073f29f7f7929110ea19e1b3ebe375d89055e90600090a250505050620002cb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116620002005760405162461bcd60e51b815260206004820152601460248201527f4472617743616c632f64682d6e6f742d7a65726f000000000000000000000000604482015260640162000094565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fba0e8f3a74973e2a13826a827919baef53ee4eb218c95ac51cd17e62e7457e6690600090a250565b600080600080608085870312156200026157600080fd5b84516200026e81620002b2565b60208601519094506200028181620002b2565b60408601519093506200029481620002b2565b6060860151909250620002a781620002b2565b939692955090935050565b6001600160a01b0381168114620002c857600080fd5b50565b60805160601c60a05160601c6122a46200031360003960008181610187015281816103e5015281816105b30152610795015260008181610f2c0152610fbf01526122a46000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063aaca392e11610081578063cfb40cd31161005b578063cfb40cd314610185578063e30c3978146101ab578063f2fde38b146101bc57600080fd5b8063aaca392e14610141578063b10820de14610154578063bb3ed1611461016557600080fd5b8063715018a6116100b2578063715018a6146101085780638045fbcf146101105780638da5cb5b1461013057600080fd5b80634e71e0c8146100ce5780635ea5c74e146100d8575b600080fd5b6100d66101cf565b005b6100eb6100e63660046118b4565b610262565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d66102de565b61012361011e366004611939565b610353565b6040516100ff9190611ed5565b6000546001600160a01b03166100eb565b61012361014f36600461198e565b61049e565b6002546001600160a01b03166100eb565b6101786101733660046118d1565b6106bb565b6040516100ff9190611e81565b7f00000000000000000000000000000000000000000000000000000000000000006100eb565b6001546001600160a01b03166100eb565b6100d66101ca3660046118b4565b610b03565b6001546001600160a01b0316331461022e5760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e65720060448201526064015b60405180910390fd5b600154610243906001600160a01b0316610c3f565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000336102776000546001600160a01b031690565b6001600160a01b0316146102cd5760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610225565b6102d682610c9c565b50805b919050565b336102f16000546001600160a01b031690565b6001600160a01b0316146103475760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610225565b6103516000610c3f565b565b60025460405163d0bb78f360e01b81526060916000916001600160a01b039091169063d0bb78f39061038b9087908790600401611f19565b60006040518083038186803b1580156103a357600080fd5b505afa1580156103b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103df9190810190611b4d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639fde0ae786866040518363ffffffff1660e01b8152600401610431929190611f19565b60006040518083038186803b15801561044957600080fd5b505afa15801561045d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104859190810190611c22565b9050610492868383610d49565b925050505b9392505050565b606060006104ae83850185611a3b565b805190915085146105265760405162461bcd60e51b8152602060048201526024808201527f4472617743616c632f696e76616c69642d7069636b2d696e64696365732d6c6560448201527f6e677468000000000000000000000000000000000000000000000000000000006064820152608401610225565b60025460405163d0bb78f360e01b81526000916001600160a01b03169063d0bb78f390610559908a908a90600401611f19565b60006040518083038186803b15801561057157600080fd5b505afa158015610585573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ad9190810190611b4d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639fde0ae789896040518363ffffffff1660e01b81526004016105ff929190611f19565b60006040518083038186803b15801561061757600080fd5b505afa15801561062b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106539190810190611c22565b905060006106628a8484610d49565b6040516bffffffffffffffffffffffff1960608d901b1660208201529091506000906034016040516020818303038152906040528051906020012090506106ac82828688876111ab565b9b9a5050505050505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106106f5576106f5612218565b63ffffffff9092166020928302919091019091015260025460405163d0bb78f360e01b81526000916001600160a01b03169063d0bb78f39061073b908590600401611f59565b60006040518083038186803b15801561075357600080fd5b505afa158015610767573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078f9190810190611b4d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639fde0ae7846040518263ffffffff1660e01b81526004016107df9190611f59565b60006040518083038186803b1580156107f757600080fd5b505afa15801561080b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108339190810190611c22565b90506000610842898484610d49565b905060006108848360008151811061085c5761085c612218565b60200260200101518360008151811061087757610877612218565b60200260200101516112f5565b905060006108ab8460008151811061089e5761089e612218565b6020026020010151611336565b905060008967ffffffffffffffff8111156108c8576108c861222e565b60405190808252806020026020018201604052801561090d57816020015b60408051808201909152600080825260208201528152602001906001900390816108e65790505b506040516bffffffffffffffffffffffff1960608f901b16602082015290915060009060340160405160208183030381529060405280519060200120905060005b8b811015610af1576000828e8e8481811061096b5761096b612218565b9050602002013560405160200161098c929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c9050858e8e848181106109ba576109ba612218565b9050602002013510610a0e5760405162461bcd60e51b815260206004820181905260248201527f4472617743616c632f696e73756666696369656e742d757365722d7069636b736044820152606401610225565b6000610a39828b600081518110610a2757610a27612218565b6020026020010151600001518861140e565b905060405180604001604052808a600081518110610a5957610a59612218565b602002602001015160c001515183108015610ab1575060008b600081518110610a8457610a84612218565b602002602001015160c001518481518110610aa157610aa1612218565b602002602001015163ffffffff16115b151581526020018260ff16815250858481518110610ad157610ad1612218565b602002602001018190525050508080610ae9906121c3565b91505061094e565b50909c9b505050505050505050505050565b33610b166000546001600160a01b031690565b6001600160a01b031614610b6c5760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610225565b6001600160a01b038116610be85760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610225565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116610cf25760405162461bcd60e51b815260206004820152601460248201527f4472617743616c632f64682d6e6f742d7a65726f0000000000000000000000006044820152606401610225565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fba0e8f3a74973e2a13826a827919baef53ee4eb218c95ac51cd17e62e7457e6690600090a250565b60606000835167ffffffffffffffff811115610d6757610d6761222e565b604051908082528060200260200182016040528015610d90578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610daf57610daf61222e565b604051908082528060200260200182016040528015610dd8578160200160208202803683370190505b50905060005b85518163ffffffff161015610ef857848163ffffffff1681518110610e0557610e05612218565b602002602001015160400151868263ffffffff1681518110610e2957610e29612218565b602002602001015160200151610e3f919061219e565b838263ffffffff1681518110610e5757610e57612218565b63ffffffff9283166020918202929092010152855186918316908110610e7f57610e7f612218565b602002602001015160600151868263ffffffff1681518110610ea357610ea3612218565b602002602001015160200151610eb9919061219e565b828263ffffffff1681518110610ed157610ed1612218565b63ffffffff9092166020928302919091019091015280610ef0816121de565b915050610dde565b506040517f6cdd0be20000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636cdd0be290610f65908a9087908790600401611e43565b60006040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fb99190810190611d6a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637966cd6785856040518363ffffffff1660e01b815260040161100b929190611f6c565b60006040518083038186803b15801561102357600080fd5b505afa158015611037573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105f9190810190611d6a565b90506000875167ffffffffffffffff81111561107d5761107d61222e565b6040519080825280602002602001820160405280156110a6578160200160208202803683370190505b50905060005b885181101561119e5760008382815181106110c9576110c9612218565b60200260200101511161111e5760405162461bcd60e51b815260206004820152601a60248201527f4472617743616c632f746f74616c2d737570706c792d7a65726f0000000000006044820152606401610225565b82818151811061113057611130612218565b602002602001015184828151811061114a5761114a612218565b6020026020010151670de0b6b3a76400006111659190612168565b61116f919061204b565b82828151811061118157611181612218565b602090810291909101015280611196816121c3565b9150506110ac565b5098975050505050505050565b60606000865167ffffffffffffffff8111156111c9576111c961222e565b6040519080825280602002602001820160405280156111f2578160200160208202803683370190505b50905060005b85518163ffffffff1610156112ea576000611244858363ffffffff168151811061122457611224612218565b60200260200101518a8463ffffffff168151811061087757610877612218565b90506112b4878363ffffffff168151811061126157611261612218565b602002602001015160000151828a898663ffffffff168151811061128757611287612218565b6020026020010151898763ffffffff16815181106112a7576112a7612218565b6020026020010151611489565b838363ffffffff16815181106112cc576112cc612218565b602090810291909101015250806112e2816121de565b9150506111f8565b509695505050505050565b6000670de0b6b3a76400008360a0015170ffffffffffffffffffffffffffffffffff16836113239190612168565b61132d919061204b565b90505b92915050565b60606000826020015160ff1667ffffffffffffffff81111561135a5761135a61222e565b604051908082528060200260200182016040528015611383578160200160208202803683370190505b509050600060018460000151600261139b91906120bc565b6113a59190612187565b905060005b846020015160ff168110156114055784516000906113cb9060ff1683612168565b90508061ffff1683901b8483815181106113e7576113e7612218565b602090810291909101015250806113fd816121c3565b9150506113aa565b50909392505050565b80516000908190815b8181101561147e57600085828151811061143357611433612218565b602002602001015190508087168189161461145d576114528484612187565b945050505050610497565b83611467816121c3565b945050508080611476906121c3565b915050611417565b506104928282612187565b6000808260c001515167ffffffffffffffff8111156114aa576114aa61222e565b6040519080825280602002602001820160405280156114d3578160200160208202803683370190505b50905060006114e184611336565b855160808601519192509063ffffffff168111156115415760405162461bcd60e51b815260206004820152601f60248201527f4472617743616c632f657863656564732d6d61782d757365722d7069636b73006044820152606401610225565b60005b818110156116625760008888838151811061156157611561612218565b6020026020010151604051602001611583929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c9050898883815181106115b1576115b1612218565b6020026020010151106116065760405162461bcd60e51b815260206004820181905260248201527f4472617743616c632f696e73756666696369656e742d757365722d7069636b736044820152606401610225565b6000611613828d8761140e565b90508760c001515181101561164d5785818151811061163457611634612218565b602002602001018051809190611649906121c3565b9052505b5050808061165a906121c3565b915050611544565b506000805b8660c00151518110156116e357600085828151811061168857611688612218565b602002602001015111156116d1578481815181106116a8576116a8612218565b60200260200101516116ba8883611711565b6116c49190612168565b6116ce9083612033565b91505b806116db816121c3565b915050611667565b50633b9aca008660e00151826116f99190612168565b611703919061204b565b9a9950505050505050505050565b6000808360c00151838151811061172a5761172a612218565b602002602001015163ffffffff169050600061174a85600001518561175f565b9050611756818361204b565b95945050505050565b60008061177060ff851660026120b0565b9050600061177e84836120b0565b905083156117a857611791600185612187565b61179b90836120b0565b6117a59082612187565b90505b949350505050565b60008083601f8401126117c257600080fd5b50813567ffffffffffffffff8111156117da57600080fd5b6020830191508360208260051b85010111156117f557600080fd5b9250929050565b600082601f83011261180d57600080fd5b8151602061182261181d8361200f565b611fde565b80838252828201915082860187848660051b890101111561184257600080fd5b60005b8581101561186a5781516118588161225c565b84529284019290840190600101611845565b5090979650505050505050565b805170ffffffffffffffffffffffffffffffffff811681146102d957600080fd5b80516102d98161225c565b805160ff811681146102d957600080fd5b6000602082840312156118c657600080fd5b813561049781612244565b600080600080606085870312156118e757600080fd5b84356118f281612244565b9350602085013567ffffffffffffffff81111561190e57600080fd5b61191a878288016117b0565b909450925050604085013561192e8161225c565b939692955090935050565b60008060006040848603121561194e57600080fd5b833561195981612244565b9250602084013567ffffffffffffffff81111561197557600080fd5b611981868287016117b0565b9497909650939450505050565b6000806000806000606086880312156119a657600080fd5b85356119b181612244565b9450602086013567ffffffffffffffff808211156119ce57600080fd5b6119da89838a016117b0565b909650945060408801359150808211156119f357600080fd5b818801915088601f830112611a0757600080fd5b813581811115611a1657600080fd5b896020828501011115611a2857600080fd5b9699959850939650602001949392505050565b60006020808385031215611a4e57600080fd5b823567ffffffffffffffff80821115611a6657600080fd5b818501915085601f830112611a7a57600080fd5b8135611a8861181d8261200f565b80828252858201915085850189878560051b8801011115611aa857600080fd5b60005b84811015611b3e57813586811115611ac257600080fd5b8701603f81018c13611ad357600080fd5b88810135611ae361181d8261200f565b808282528b82019150604084018f60408560051b8701011115611b0557600080fd5b600094505b83851015611b28578035835260019490940193918c01918c01611b0a565b5087525050509287019290870190600101611aab565b50909998505050505050505050565b60006020808385031215611b6057600080fd5b825167ffffffffffffffff811115611b7757600080fd5b8301601f81018513611b8857600080fd5b8051611b9661181d8261200f565b818152838101908385016060808502860187018a1015611bb557600080fd5b60009550855b85811015611c135781838c031215611bd1578687fd5b611bd9611f91565b8351815288840151611bea8161225c565b818a0152604084810151611bfd8161225c565b9082015285529387019391810191600101611bbb565b50919998505050505050505050565b60006020808385031215611c3557600080fd5b825167ffffffffffffffff80821115611c4d57600080fd5b818501915085601f830112611c6157600080fd5b8151611c6f61181d8261200f565b80828252858201915085850189878560051b8801011115611c8f57600080fd5b60005b84811015611b3e57815186811115611ca957600080fd5b8701610100818d03601f1901811315611cc157600080fd5b611cc9611fba565b611cd48b84016118a3565b8152611ce2604084016118a3565b8b820152611cf260608401611898565b6040820152611d0360808401611898565b6060820152611d1460a08401611898565b6080820152611d2560c08401611877565b60a082015260e083015189811115611d3c57600080fd5b611d4a8f8d838701016117fc565b60c08301525091015160e082015284529287019290870190600101611c92565b60006020808385031215611d7d57600080fd5b825167ffffffffffffffff811115611d9457600080fd5b8301601f81018513611da557600080fd5b8051611db361181d8261200f565b80828252848201915084840188868560051b8701011115611dd357600080fd5b600094505b83851015611df6578051835260019490940193918501918501611dd8565b50979650505050505050565b600081518084526020808501945080840160005b83811015611e3857815163ffffffff1687529582019590820190600101611e16565b509495945050505050565b6001600160a01b0384168152606060208201526000611e656060830185611e02565b8281036040840152611e778185611e02565b9695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015611ec857815180511515855286015160ff16868501529284019290850190600101611e9e565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611f0d57835183529284019291840191600101611ef1565b50909695505050505050565b60208082528181018390526000908460408401835b868110156112ea578235611f418161225c565b63ffffffff1682529183019190830190600101611f2e565b60208152600061132d6020830184611e02565b604081526000611f7f6040830185611e02565b82810360208401526117568185611e02565b6040516060810167ffffffffffffffff81118282101715611fb457611fb461222e565b60405290565b604051610100810167ffffffffffffffff81118282101715611fb457611fb461222e565b604051601f8201601f1916810167ffffffffffffffff811182821017156120075761200761222e565b604052919050565b600067ffffffffffffffff8211156120295761202961222e565b5060051b60200190565b6000821982111561204657612046612202565b500190565b60008261206857634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156120a857816000190482111561208e5761208e612202565b8085161561209b57918102915b93841c9390800290612072565b509250929050565b600061132d83836120c7565b600061132d60ff8416835b6000826120d657506001611330565b816120e357506000611330565b81600181146120f957600281146121035761211f565b6001915050611330565b60ff84111561211457612114612202565b50506001821b611330565b5060208310610133831016604e8410600b8410161715612142575081810a611330565b61214c838361206d565b806000190482111561216057612160612202565b029392505050565b600081600019048311821515161561218257612182612202565b500290565b60008282101561219957612199612202565b500390565b600063ffffffff838116908316818110156121bb576121bb612202565b039392505050565b60006000198214156121d7576121d7612202565b5060010190565b600063ffffffff808316818114156121f8576121f8612202565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461225957600080fd5b50565b63ffffffff8116811461225957600080fdfea2646970667358221220e4e12afe8fe57328248a379ed1d16fe56942af628dcdbd9266ab4b7b788a9b4a64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c8063aaca392e11610081578063cfb40cd31161005b578063cfb40cd314610185578063e30c3978146101ab578063f2fde38b146101bc57600080fd5b8063aaca392e14610141578063b10820de14610154578063bb3ed1611461016557600080fd5b8063715018a6116100b2578063715018a6146101085780638045fbcf146101105780638da5cb5b1461013057600080fd5b80634e71e0c8146100ce5780635ea5c74e146100d8575b600080fd5b6100d66101cf565b005b6100eb6100e63660046118b4565b610262565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d66102de565b61012361011e366004611939565b610353565b6040516100ff9190611ed5565b6000546001600160a01b03166100eb565b61012361014f36600461198e565b61049e565b6002546001600160a01b03166100eb565b6101786101733660046118d1565b6106bb565b6040516100ff9190611e81565b7f00000000000000000000000000000000000000000000000000000000000000006100eb565b6001546001600160a01b03166100eb565b6100d66101ca3660046118b4565b610b03565b6001546001600160a01b0316331461022e5760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e65720060448201526064015b60405180910390fd5b600154610243906001600160a01b0316610c3f565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000336102776000546001600160a01b031690565b6001600160a01b0316146102cd5760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610225565b6102d682610c9c565b50805b919050565b336102f16000546001600160a01b031690565b6001600160a01b0316146103475760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610225565b6103516000610c3f565b565b60025460405163d0bb78f360e01b81526060916000916001600160a01b039091169063d0bb78f39061038b9087908790600401611f19565b60006040518083038186803b1580156103a357600080fd5b505afa1580156103b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103df9190810190611b4d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639fde0ae786866040518363ffffffff1660e01b8152600401610431929190611f19565b60006040518083038186803b15801561044957600080fd5b505afa15801561045d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104859190810190611c22565b9050610492868383610d49565b925050505b9392505050565b606060006104ae83850185611a3b565b805190915085146105265760405162461bcd60e51b8152602060048201526024808201527f4472617743616c632f696e76616c69642d7069636b2d696e64696365732d6c6560448201527f6e677468000000000000000000000000000000000000000000000000000000006064820152608401610225565b60025460405163d0bb78f360e01b81526000916001600160a01b03169063d0bb78f390610559908a908a90600401611f19565b60006040518083038186803b15801561057157600080fd5b505afa158015610585573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ad9190810190611b4d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639fde0ae789896040518363ffffffff1660e01b81526004016105ff929190611f19565b60006040518083038186803b15801561061757600080fd5b505afa15801561062b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106539190810190611c22565b905060006106628a8484610d49565b6040516bffffffffffffffffffffffff1960608d901b1660208201529091506000906034016040516020818303038152906040528051906020012090506106ac82828688876111ab565b9b9a5050505050505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106106f5576106f5612218565b63ffffffff9092166020928302919091019091015260025460405163d0bb78f360e01b81526000916001600160a01b03169063d0bb78f39061073b908590600401611f59565b60006040518083038186803b15801561075357600080fd5b505afa158015610767573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078f9190810190611b4d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639fde0ae7846040518263ffffffff1660e01b81526004016107df9190611f59565b60006040518083038186803b1580156107f757600080fd5b505afa15801561080b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108339190810190611c22565b90506000610842898484610d49565b905060006108848360008151811061085c5761085c612218565b60200260200101518360008151811061087757610877612218565b60200260200101516112f5565b905060006108ab8460008151811061089e5761089e612218565b6020026020010151611336565b905060008967ffffffffffffffff8111156108c8576108c861222e565b60405190808252806020026020018201604052801561090d57816020015b60408051808201909152600080825260208201528152602001906001900390816108e65790505b506040516bffffffffffffffffffffffff1960608f901b16602082015290915060009060340160405160208183030381529060405280519060200120905060005b8b811015610af1576000828e8e8481811061096b5761096b612218565b9050602002013560405160200161098c929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c9050858e8e848181106109ba576109ba612218565b9050602002013510610a0e5760405162461bcd60e51b815260206004820181905260248201527f4472617743616c632f696e73756666696369656e742d757365722d7069636b736044820152606401610225565b6000610a39828b600081518110610a2757610a27612218565b6020026020010151600001518861140e565b905060405180604001604052808a600081518110610a5957610a59612218565b602002602001015160c001515183108015610ab1575060008b600081518110610a8457610a84612218565b602002602001015160c001518481518110610aa157610aa1612218565b602002602001015163ffffffff16115b151581526020018260ff16815250858481518110610ad157610ad1612218565b602002602001018190525050508080610ae9906121c3565b91505061094e565b50909c9b505050505050505050505050565b33610b166000546001600160a01b031690565b6001600160a01b031614610b6c5760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610225565b6001600160a01b038116610be85760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610225565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116610cf25760405162461bcd60e51b815260206004820152601460248201527f4472617743616c632f64682d6e6f742d7a65726f0000000000000000000000006044820152606401610225565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fba0e8f3a74973e2a13826a827919baef53ee4eb218c95ac51cd17e62e7457e6690600090a250565b60606000835167ffffffffffffffff811115610d6757610d6761222e565b604051908082528060200260200182016040528015610d90578160200160208202803683370190505b5090506000845167ffffffffffffffff811115610daf57610daf61222e565b604051908082528060200260200182016040528015610dd8578160200160208202803683370190505b50905060005b85518163ffffffff161015610ef857848163ffffffff1681518110610e0557610e05612218565b602002602001015160400151868263ffffffff1681518110610e2957610e29612218565b602002602001015160200151610e3f919061219e565b838263ffffffff1681518110610e5757610e57612218565b63ffffffff9283166020918202929092010152855186918316908110610e7f57610e7f612218565b602002602001015160600151868263ffffffff1681518110610ea357610ea3612218565b602002602001015160200151610eb9919061219e565b828263ffffffff1681518110610ed157610ed1612218565b63ffffffff9092166020928302919091019091015280610ef0816121de565b915050610dde565b506040517f6cdd0be20000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636cdd0be290610f65908a9087908790600401611e43565b60006040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fb99190810190611d6a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637966cd6785856040518363ffffffff1660e01b815260040161100b929190611f6c565b60006040518083038186803b15801561102357600080fd5b505afa158015611037573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105f9190810190611d6a565b90506000875167ffffffffffffffff81111561107d5761107d61222e565b6040519080825280602002602001820160405280156110a6578160200160208202803683370190505b50905060005b885181101561119e5760008382815181106110c9576110c9612218565b60200260200101511161111e5760405162461bcd60e51b815260206004820152601a60248201527f4472617743616c632f746f74616c2d737570706c792d7a65726f0000000000006044820152606401610225565b82818151811061113057611130612218565b602002602001015184828151811061114a5761114a612218565b6020026020010151670de0b6b3a76400006111659190612168565b61116f919061204b565b82828151811061118157611181612218565b602090810291909101015280611196816121c3565b9150506110ac565b5098975050505050505050565b60606000865167ffffffffffffffff8111156111c9576111c961222e565b6040519080825280602002602001820160405280156111f2578160200160208202803683370190505b50905060005b85518163ffffffff1610156112ea576000611244858363ffffffff168151811061122457611224612218565b60200260200101518a8463ffffffff168151811061087757610877612218565b90506112b4878363ffffffff168151811061126157611261612218565b602002602001015160000151828a898663ffffffff168151811061128757611287612218565b6020026020010151898763ffffffff16815181106112a7576112a7612218565b6020026020010151611489565b838363ffffffff16815181106112cc576112cc612218565b602090810291909101015250806112e2816121de565b9150506111f8565b509695505050505050565b6000670de0b6b3a76400008360a0015170ffffffffffffffffffffffffffffffffff16836113239190612168565b61132d919061204b565b90505b92915050565b60606000826020015160ff1667ffffffffffffffff81111561135a5761135a61222e565b604051908082528060200260200182016040528015611383578160200160208202803683370190505b509050600060018460000151600261139b91906120bc565b6113a59190612187565b905060005b846020015160ff168110156114055784516000906113cb9060ff1683612168565b90508061ffff1683901b8483815181106113e7576113e7612218565b602090810291909101015250806113fd816121c3565b9150506113aa565b50909392505050565b80516000908190815b8181101561147e57600085828151811061143357611433612218565b602002602001015190508087168189161461145d576114528484612187565b945050505050610497565b83611467816121c3565b945050508080611476906121c3565b915050611417565b506104928282612187565b6000808260c001515167ffffffffffffffff8111156114aa576114aa61222e565b6040519080825280602002602001820160405280156114d3578160200160208202803683370190505b50905060006114e184611336565b855160808601519192509063ffffffff168111156115415760405162461bcd60e51b815260206004820152601f60248201527f4472617743616c632f657863656564732d6d61782d757365722d7069636b73006044820152606401610225565b60005b818110156116625760008888838151811061156157611561612218565b6020026020010151604051602001611583929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c9050898883815181106115b1576115b1612218565b6020026020010151106116065760405162461bcd60e51b815260206004820181905260248201527f4472617743616c632f696e73756666696369656e742d757365722d7069636b736044820152606401610225565b6000611613828d8761140e565b90508760c001515181101561164d5785818151811061163457611634612218565b602002602001018051809190611649906121c3565b9052505b5050808061165a906121c3565b915050611544565b506000805b8660c00151518110156116e357600085828151811061168857611688612218565b602002602001015111156116d1578481815181106116a8576116a8612218565b60200260200101516116ba8883611711565b6116c49190612168565b6116ce9083612033565b91505b806116db816121c3565b915050611667565b50633b9aca008660e00151826116f99190612168565b611703919061204b565b9a9950505050505050505050565b6000808360c00151838151811061172a5761172a612218565b602002602001015163ffffffff169050600061174a85600001518561175f565b9050611756818361204b565b95945050505050565b60008061177060ff851660026120b0565b9050600061177e84836120b0565b905083156117a857611791600185612187565b61179b90836120b0565b6117a59082612187565b90505b949350505050565b60008083601f8401126117c257600080fd5b50813567ffffffffffffffff8111156117da57600080fd5b6020830191508360208260051b85010111156117f557600080fd5b9250929050565b600082601f83011261180d57600080fd5b8151602061182261181d8361200f565b611fde565b80838252828201915082860187848660051b890101111561184257600080fd5b60005b8581101561186a5781516118588161225c565b84529284019290840190600101611845565b5090979650505050505050565b805170ffffffffffffffffffffffffffffffffff811681146102d957600080fd5b80516102d98161225c565b805160ff811681146102d957600080fd5b6000602082840312156118c657600080fd5b813561049781612244565b600080600080606085870312156118e757600080fd5b84356118f281612244565b9350602085013567ffffffffffffffff81111561190e57600080fd5b61191a878288016117b0565b909450925050604085013561192e8161225c565b939692955090935050565b60008060006040848603121561194e57600080fd5b833561195981612244565b9250602084013567ffffffffffffffff81111561197557600080fd5b611981868287016117b0565b9497909650939450505050565b6000806000806000606086880312156119a657600080fd5b85356119b181612244565b9450602086013567ffffffffffffffff808211156119ce57600080fd5b6119da89838a016117b0565b909650945060408801359150808211156119f357600080fd5b818801915088601f830112611a0757600080fd5b813581811115611a1657600080fd5b896020828501011115611a2857600080fd5b9699959850939650602001949392505050565b60006020808385031215611a4e57600080fd5b823567ffffffffffffffff80821115611a6657600080fd5b818501915085601f830112611a7a57600080fd5b8135611a8861181d8261200f565b80828252858201915085850189878560051b8801011115611aa857600080fd5b60005b84811015611b3e57813586811115611ac257600080fd5b8701603f81018c13611ad357600080fd5b88810135611ae361181d8261200f565b808282528b82019150604084018f60408560051b8701011115611b0557600080fd5b600094505b83851015611b28578035835260019490940193918c01918c01611b0a565b5087525050509287019290870190600101611aab565b50909998505050505050505050565b60006020808385031215611b6057600080fd5b825167ffffffffffffffff811115611b7757600080fd5b8301601f81018513611b8857600080fd5b8051611b9661181d8261200f565b818152838101908385016060808502860187018a1015611bb557600080fd5b60009550855b85811015611c135781838c031215611bd1578687fd5b611bd9611f91565b8351815288840151611bea8161225c565b818a0152604084810151611bfd8161225c565b9082015285529387019391810191600101611bbb565b50919998505050505050505050565b60006020808385031215611c3557600080fd5b825167ffffffffffffffff80821115611c4d57600080fd5b818501915085601f830112611c6157600080fd5b8151611c6f61181d8261200f565b80828252858201915085850189878560051b8801011115611c8f57600080fd5b60005b84811015611b3e57815186811115611ca957600080fd5b8701610100818d03601f1901811315611cc157600080fd5b611cc9611fba565b611cd48b84016118a3565b8152611ce2604084016118a3565b8b820152611cf260608401611898565b6040820152611d0360808401611898565b6060820152611d1460a08401611898565b6080820152611d2560c08401611877565b60a082015260e083015189811115611d3c57600080fd5b611d4a8f8d838701016117fc565b60c08301525091015160e082015284529287019290870190600101611c92565b60006020808385031215611d7d57600080fd5b825167ffffffffffffffff811115611d9457600080fd5b8301601f81018513611da557600080fd5b8051611db361181d8261200f565b80828252848201915084840188868560051b8701011115611dd357600080fd5b600094505b83851015611df6578051835260019490940193918501918501611dd8565b50979650505050505050565b600081518084526020808501945080840160005b83811015611e3857815163ffffffff1687529582019590820190600101611e16565b509495945050505050565b6001600160a01b0384168152606060208201526000611e656060830185611e02565b8281036040840152611e778185611e02565b9695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015611ec857815180511515855286015160ff16868501529284019290850190600101611e9e565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611f0d57835183529284019291840191600101611ef1565b50909695505050505050565b60208082528181018390526000908460408401835b868110156112ea578235611f418161225c565b63ffffffff1682529183019190830190600101611f2e565b60208152600061132d6020830184611e02565b604081526000611f7f6040830185611e02565b82810360208401526117568185611e02565b6040516060810167ffffffffffffffff81118282101715611fb457611fb461222e565b60405290565b604051610100810167ffffffffffffffff81118282101715611fb457611fb461222e565b604051601f8201601f1916810167ffffffffffffffff811182821017156120075761200761222e565b604052919050565b600067ffffffffffffffff8211156120295761202961222e565b5060051b60200190565b6000821982111561204657612046612202565b500190565b60008261206857634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156120a857816000190482111561208e5761208e612202565b8085161561209b57918102915b93841c9390800290612072565b509250929050565b600061132d83836120c7565b600061132d60ff8416835b6000826120d657506001611330565b816120e357506000611330565b81600181146120f957600281146121035761211f565b6001915050611330565b60ff84111561211457612114612202565b50506001821b611330565b5060208310610133831016604e8410600b8410161715612142575081810a611330565b61214c838361206d565b806000190482111561216057612160612202565b029392505050565b600081600019048311821515161561218257612182612202565b500290565b60008282101561219957612199612202565b500390565b600063ffffffff838116908316818110156121bb576121bb612202565b039392505050565b60006000198214156121d7576121d7612202565b5060010190565b600063ffffffff808316818114156121f8576121f8612202565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461225957600080fd5b50565b63ffffffff8116811461225957600080fdfea2646970667358221220e4e12afe8fe57328248a379ed1d16fe56942af628dcdbd9266ab4b7b788a9b4a64736f6c63430008060033",
  "devdoc": {
    "events": {
      "DrawHistorySet(address)": {
        "params": {
          "drawHistory": "DrawHistory address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculate(address,uint32[],bytes)": {
        "params": {
          "_drawIds": "draw array for which to calculate prize amounts for",
          "_pickIndicesForDraws": "The encoded pick indices for all Draws. Expected to be just indices of winning claims. Populated values must be less than totalUserPicks.",
          "_user": "User for which to calcualte prize amount"
        },
        "returns": {
          "_0": "An array of amount of prizes awardable"
        }
      },
      "checkPrizeDistributionIndicesForDrawId(address,uint256[],uint32)": {
        "params": {
          "_drawId": "The draw for which to calculate the distribution indices",
          "_pickIndices": "The users pick indices for a draw",
          "_user": "The user for which to calculate the distribution indices"
        }
      },
      "claimOwnership()": {
        "details": "This function is only callable by the `_pendingOwner`."
      },
      "constructor": {
        "params": {
          "_drawHistory": "The address of the draw history to push draws to",
          "_owner": "Address of the TsunamiDrawCalculator owner",
          "_ticket": "Ticket associated with this DrawCalculator",
          "_tsunamiDrawSettingsHistory": "TsunamiDrawSettingsHistory address"
        }
      },
      "getDrawHistory()": {
        "returns": {
          "_0": "IDrawHistory"
        }
      },
      "getNormalizedBalancesForDrawIds(address,uint32[])": {
        "params": {
          "_drawIds": "The drawsId to consider",
          "_user": "The users address"
        },
        "returns": {
          "_0": "Array of balances"
        }
      },
      "getTsunamiDrawSettingsHistory()": {
        "returns": {
          "_0": "IDrawHistory"
        }
      },
      "pendingOwner()": {
        "returns": {
          "_0": "Current `_pendingOwner` address."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDrawHistory(address)": {
        "params": {
          "_drawHistory": "DrawHistory address"
        },
        "returns": {
          "_0": "New DrawHistory address"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "_newOwner": "Address to transfer ownership to."
        }
      }
    },
    "title": "TsunamiDrawCalculator is an implementation of an IDrawCalculator",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ClaimableDrawSet(address)": {
        "notice": "Emitted when the claimableDraw is set/updated"
      },
      "Deployed(address)": {
        "notice": "Emitted when the contract is initialized"
      },
      "DrawHistorySet(address)": {
        "notice": "Emitted when a global DrawHistory variable is set."
      }
    },
    "kind": "user",
    "methods": {
      "calculate(address,uint32[],bytes)": {
        "notice": "Calulates the prize amount for a user for Multiple Draws. Typically called by a ClaimableDraw."
      },
      "checkPrizeDistributionIndicesForDrawId(address,uint256[],uint32)": {
        "notice": "Returns the distribution index for a users pickIndices for a draw"
      },
      "claimOwnership()": {
        "notice": "Allows the `_pendingOwner` address to finalize the transfer."
      },
      "constructor": {
        "notice": "Constructor for TsunamiDrawCalculator"
      },
      "getDrawHistory()": {
        "notice": "Read global DrawHistory variable."
      },
      "getNormalizedBalancesForDrawIds(address,uint32[])": {
        "notice": "Returns a users balances expressed as a fraction of the total supply over time."
      },
      "getTsunamiDrawSettingsHistory()": {
        "notice": "Read global DrawHistory variable."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "notice": "Gets current `_pendingOwner`."
      },
      "renounceOwnership()": {
        "notice": "Renounce ownership of the contract."
      },
      "setDrawHistory(address)": {
        "notice": "Set global DrawHistory reference."
      },
      "transferOwnership(address)": {
        "notice": "Allows current owner to set the `_pendingOwner` address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3466,
        "contract": "@pooltogether/v4-core/contracts/TsunamiDrawCalculator.sol:TsunamiDrawCalculator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3468,
        "contract": "@pooltogether/v4-core/contracts/TsunamiDrawCalculator.sol:TsunamiDrawCalculator",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6670,
        "contract": "@pooltogether/v4-core/contracts/TsunamiDrawCalculator.sol:TsunamiDrawCalculator",
        "label": "drawHistory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDrawHistory)8549"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IDrawHistory)8549": {
        "encoding": "inplace",
        "label": "contract IDrawHistory",
        "numberOfBytes": "20"
      }
    }
  }
}