{
  "language": "Solidity",
  "sources": {
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/DrawBeacon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-core/contracts/DrawBeacon.sol';\n"
    },
    "@pooltogether/v4-core/contracts/DrawBeacon.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\";\nimport \"@pooltogether/fixed-point/contracts/FixedPoint.sol\";\nimport \"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\";\nimport \"./interfaces/IDrawBeacon.sol\";\nimport \"./interfaces/IDrawHistory.sol\";\nimport \"./libraries/DrawLib.sol\";\n\n/**\n  * @title  PoolTogether V4 DrawBeacon\n  * @author PoolTogether Inc Team\n  * @notice Manages RNG (random number generator) requests and pushing Draws onto DrawHistory.\n            The DrawBeacon has 3 major phases for requesting a random number: start, cancel and complete.\n            Once the complete phase is executed a new Draw (using nextDrawId) is pushed to the currently\n            set DrawHistory smart contracts. If the RNG service requires payment (i.e. ChainLink) the DrawBeacon\n            should have an available balance to cover the fees associated with random number generation.\n*/\ncontract DrawBeacon is IDrawBeacon,\n                       Ownable {\n\n  using SafeCast for uint256;\n  using SafeERC20 for IERC20;\n  using Address for address;\n  using ERC165Checker for address;\n\n  /* ============ Variables ============ */\n\n  /// @notice RNG contract interface\n  RNGInterface public rng;\n\n  /// @notice Current RNG Request\n  RngRequest internal rngRequest;\n\n  /// @notice DrawHistory address\n  IDrawHistory public drawHistory;\n\n  /**\n    * @notice RNG Request Timeout.  In fact, this is really a \"complete draw\" timeout.\n    * @dev If the rng completes the award can still be cancelled.\n   */\n  uint32 public rngTimeout;\n  // first four words of mem end here\n\n  /// @notice Seconds between beacon period request\n  uint32 public beaconPeriodSeconds;\n\n  /// @notice Epoch timestamp when beacon period can start\n  uint64 public beaconPeriodStartedAt;\n\n  /**\n    * @notice Next Draw ID to use when pushing a Draw onto DrawHistory\n    * @dev Starts at 1. This way we know that no Draw has been recorded at 0.\n  */\n  uint32 public nextDrawId;\n\n  /* ============ Structs ============ */\n\n  /**\n    * @notice RNG Request\n    * @param id          RNG request ID\n    * @param lockBlock   Block number that the RNG request is locked\n    * @param requestedAt Time when RNG is requested\n  */\n  struct RngRequest {\n    uint32 id;\n    uint32 lockBlock;\n    uint64 requestedAt;\n  }\n\n  /* ============ Events ============ */\n\n  /**\n    * @notice Emit when the DrawBeacon is initialized.\n    * @param drawHistory Address of the draw history to push draws to.\n    * @param rng Address of RNG service.\n    * @param nextDrawId Draw ID at which the DrawBeacon should start. Can't be inferior to 1.\n    * @param beaconPeriodStartedAt Timestamp when beacon period starts.\n    * @param beaconPeriodSeconds Minimum seconds between draw period.\n  */\n  event Deployed(\n    IDrawHistory indexed drawHistory,\n    RNGInterface indexed rng,\n    uint32 nextDrawId,\n    uint64 beaconPeriodStartedAt,\n    uint32 beaconPeriodSeconds\n  );\n\n  /* ============ Modifiers ============ */\n\n  modifier requireDrawNotInProgress() {\n    _requireDrawNotInProgress();\n    _;\n  }\n\n  modifier requireCanStartDraw() {\n    require(_isBeaconPeriodOver(), \"DrawBeacon/beacon-period-not-over\");\n    require(!isRngRequested(), \"DrawBeacon/rng-already-requested\");\n    _;\n  }\n\n  modifier requireCanCompleteRngRequest() {\n    require(isRngRequested(), \"DrawBeacon/rng-not-requested\");\n    require(isRngCompleted(), \"DrawBeacon/rng-not-complete\");\n    _;\n  }\n\n  /* ============ Constructor ============ */\n\n  /**\n    * @notice Deploy the DrawBeacon smart contract.\n    * @param _owner Address of the DrawBeacon owner\n    * @param _drawHistory The address of the draw history to push draws to\n    * @param _rng The RNG service to use\n    * @param _nextDrawId Draw ID at which the DrawBeacon should start. Can't be inferior to 1.\n    * @param _beaconPeriodStart The starting timestamp of the beacon period.\n    * @param _beaconPeriodSeconds The duration of the beacon period in seconds\n  */\n  constructor (\n    address _owner,\n    IDrawHistory _drawHistory,\n    RNGInterface _rng,\n    uint32 _nextDrawId,\n    uint64 _beaconPeriodStart,\n    uint32 _beaconPeriodSeconds\n  ) Ownable(_owner) {\n    require(_beaconPeriodStart > 0, \"DrawBeacon/beacon-period-greater-than-zero\");\n    require(address(_rng) != address(0), \"DrawBeacon/rng-not-zero\");\n    rng = _rng;\n\n    _setBeaconPeriodSeconds(_beaconPeriodSeconds);\n    beaconPeriodStartedAt = _beaconPeriodStart;\n\n    _setDrawHistory(_drawHistory);\n\n    // 30 min timeout\n    _setRngTimeout(1800);\n\n    require(_nextDrawId >= 1, \"DrawBeacon/next-draw-id-gte-one\");\n    nextDrawId = _nextDrawId;\n\n    emit Deployed(\n      _drawHistory,\n      _rng,\n      _nextDrawId,\n      _beaconPeriodStart,\n      _beaconPeriodSeconds\n    );\n\n    emit BeaconPeriodStarted(msg.sender, _beaconPeriodStart);\n  }\n\n  /* ============ Public Functions ============ */\n\n  /**\n    * @notice Returns whether the random number request has completed.\n    * @return True if a random number request has completed, false otherwise.\n   */\n  function isRngCompleted() public view override returns (bool) {\n    return rng.isRequestComplete(rngRequest.id);\n  }\n\n  /**\n    * @notice Returns whether a random number has been requested\n    * @return True if a random number has been requested, false otherwise.\n   */\n  function isRngRequested() public view override returns (bool) {\n    return rngRequest.id != 0;\n  }\n\n  /**\n    * @notice Returns whether the random number request has timed out.\n    * @return True if a random number request has timed out, false otherwise.\n   */\n  function isRngTimedOut() public view override returns (bool) {\n    if (rngRequest.requestedAt == 0) {\n      return false;\n    } else {\n      uint64 time = _currentTime();\n      return rngTimeout + rngRequest.requestedAt < time;\n    }\n  }\n\n  /* ============ External Functions ============ */\n\n  /// @inheritdoc IDrawBeacon\n  function canStartDraw() external view override returns (bool) {\n    return _isBeaconPeriodOver() && !isRngRequested();\n  }\n\n  /// @inheritdoc IDrawBeacon\n  function canCompleteDraw() external view override returns (bool) {\n    return isRngRequested() && isRngCompleted();\n  }\n\n  /// @inheritdoc IDrawBeacon\n  function calculateNextBeaconPeriodStartTime(uint256 currentTime) external view override returns (uint64) {\n    return _calculateNextBeaconPeriodStartTime(beaconPeriodStartedAt, beaconPeriodSeconds, uint64(currentTime));\n  }\n\n  /// @inheritdoc IDrawBeacon\n  function cancelDraw() external override {\n    require(isRngTimedOut(), \"DrawBeacon/rng-not-timedout\");\n    uint32 requestId = rngRequest.id;\n    uint32 lockBlock = rngRequest.lockBlock;\n    delete rngRequest;\n    emit DrawCancelled(msg.sender, requestId, lockBlock);\n  }\n\n  /// @inheritdoc IDrawBeacon\n  function completeDraw() external override requireCanCompleteRngRequest {\n    uint256 randomNumber = rng.randomNumber(rngRequest.id);\n    uint32 _nextDrawId = nextDrawId;\n    uint64 _beaconPeriodStartedAt = beaconPeriodStartedAt;\n    uint32 _beaconPeriodSeconds = beaconPeriodSeconds;\n    uint64 _time = _currentTime();\n\n    /**\n      * A new DrawLib.Draw contains minimal data regarding the state \"core\" draw state.\n      * Ultimately a Draw.drawId(s) is linked with DrawLib.PrizeDistribution(s) creating\n      * the complete draw prize payout model: prize tiers, payouts, pick indices, etc...\n      * A single Draw struct can have a ONE-TO-MANY relationship with PrizeDistribution settings.\n      * Minimizing the total random numbers required to fairly distribute protocol pool payouts.\n     */\n    DrawLib.Draw memory _draw = DrawLib.Draw({\n      winningRandomNumber: randomNumber,\n      drawId: _nextDrawId,\n      timestamp: _time,\n      beaconPeriodStartedAt: _beaconPeriodStartedAt,\n      beaconPeriodSeconds: _beaconPeriodSeconds\n    });\n\n    /**\n      * The DrawBeacon (deployed on L1) will have a Manager role authorized to push history onto DrawHistory.\n     */\n    drawHistory.pushDraw(_draw);\n    \n    // to avoid clock drift, we should calculate the start time based on the previous period start time.\n    _beaconPeriodStartedAt = _calculateNextBeaconPeriodStartTime(_beaconPeriodStartedAt, _beaconPeriodSeconds, _time);\n    beaconPeriodStartedAt = _beaconPeriodStartedAt;\n    nextDrawId = _nextDrawId + 1;\n\n\n    // Reset the rngReqeust state so Beacon period can start again.\n    delete rngRequest;\n\n    emit DrawCompleted(msg.sender, randomNumber);\n    emit BeaconPeriodStarted(msg.sender, _beaconPeriodStartedAt);\n  }\n\n  /// @inheritdoc IDrawBeacon\n  function beaconPeriodRemainingSeconds() external view override returns (uint32) {\n    return _beaconPeriodRemainingSeconds();\n  }\n\n  /// @inheritdoc IDrawBeacon\n  function beaconPeriodEndAt() external view override returns (uint64) {\n    return _beaconPeriodEndAt();\n  }\n\n  /// @inheritdoc IDrawBeacon\n  function getLastRngLockBlock() external view override returns (uint32) {\n    return rngRequest.lockBlock;\n  }\n\n  /// @inheritdoc IDrawBeacon\n  function getLastRngRequestId() external view override returns (uint32) {\n    return rngRequest.id;\n  }\n\n  /// @inheritdoc IDrawBeacon\n  function isBeaconPeriodOver() external view override returns (bool) {\n    return _isBeaconPeriodOver();\n  }\n\n  /// @inheritdoc IDrawBeacon\n  function setDrawHistory(IDrawHistory newDrawHistory) external override onlyOwner returns (IDrawHistory) {\n    return _setDrawHistory(newDrawHistory);\n  }\n\n   /// @inheritdoc IDrawBeacon\n  function startDraw() external override requireCanStartDraw {\n    (address feeToken, uint256 requestFee) = rng.getRequestFee();\n    if (feeToken != address(0) && requestFee > 0) {\n      IERC20(feeToken).safeApprove(address(rng), requestFee);\n    }\n\n    (uint32 requestId, uint32 lockBlock) = rng.requestRandomNumber();\n    rngRequest.id = requestId;\n    rngRequest.lockBlock = lockBlock;\n    rngRequest.requestedAt = _currentTime();\n\n    emit DrawStarted(msg.sender, requestId, lockBlock);\n  }\n\n  /// @inheritdoc IDrawBeacon\n  function setBeaconPeriodSeconds(uint32 _beaconPeriodSeconds) external override onlyOwner requireDrawNotInProgress {\n    _setBeaconPeriodSeconds (_beaconPeriodSeconds);\n  }\n\n  \n   /// @inheritdoc IDrawBeacon\n  function setRngTimeout(uint32 _rngTimeout) external override onlyOwner requireDrawNotInProgress {\n    _setRngTimeout(_rngTimeout);\n  }\n\n  /// @inheritdoc IDrawBeacon\n  function setRngService(RNGInterface rngService) external override onlyOwner requireDrawNotInProgress {\n    require(!isRngRequested(), \"DrawBeacon/rng-in-flight\");\n    rng = rngService;\n    emit RngServiceUpdated(rngService);\n  }\n\n  /* ============ Internal Functions ============ */\n\n  /**\n    * @notice Calculates when the next beacon period will start\n    * @param _beaconPeriodStartedAt The timestamp at which the beacon period started\n    * @param _beaconPeriodSeconds The duration of the beacon period in seconds\n    * @param _currentTime The timestamp to use as the current time\n    * @return The timestamp at which the next beacon period would start\n   */\n  function _calculateNextBeaconPeriodStartTime(uint64 _beaconPeriodStartedAt, uint32 _beaconPeriodSeconds, uint64 _currentTime) internal view returns (uint64) {\n    uint64 elapsedPeriods = (_currentTime - _beaconPeriodStartedAt) / _beaconPeriodSeconds;\n    return _beaconPeriodStartedAt + (elapsedPeriods * _beaconPeriodSeconds);\n  }\n\n  /**\n    * @notice returns the current time.  Used for testing.\n    * @return The current time (block.timestamp)\n   */\n  function _currentTime() internal virtual view returns (uint64) {\n    return uint64(block.timestamp);\n  }\n\n  /**\n    * @notice Returns the timestamp at which the beacon period ends\n    * @return The timestamp at which the beacon period ends\n   */\n  function _beaconPeriodEndAt() internal view returns (uint64) {\n    return beaconPeriodStartedAt + beaconPeriodSeconds;\n  }\n\n  /**\n    * @notice Returns the number of seconds remaining until the prize can be awarded.\n    * @return The number of seconds remaining until the prize can be awarded.\n   */\n  function _beaconPeriodRemainingSeconds() internal view returns (uint32) {\n    uint64 endAt = _beaconPeriodEndAt();\n    uint64 time = _currentTime();\n    if (endAt <= time) {\n      return 0;\n    }\n    return uint256(endAt - time).toUint32();\n  }\n\n  /**\n    * @notice Returns whether the beacon period is over.\n    * @return True if the beacon period is over, false otherwise\n   */\n  function _isBeaconPeriodOver() internal view returns (bool) {\n    uint64 time = _currentTime();\n    return _beaconPeriodEndAt() <= time;\n  }\n\n  /**\n    * @notice Check to see award is in progress.\n   */\n  function _requireDrawNotInProgress() internal view {\n    uint256 currentBlock = block.number;\n    require(rngRequest.lockBlock == 0 || currentBlock < rngRequest.lockBlock, \"DrawBeacon/rng-in-flight\");\n  }\n\n  /**\n    * @notice Set global DrawHistory variable.\n    * @dev    All subsequent Draw requests/completions will be pushed to the new DrawHistory.\n    * @param _newDrawHistory  DrawHistory address\n    * @return DrawHistory\n  */\n  function _setDrawHistory(IDrawHistory _newDrawHistory) internal returns (IDrawHistory) {\n    IDrawHistory _previousDrawHistory = drawHistory;\n    require(address(_newDrawHistory) != address(0), \"DrawBeacon/draw-history-not-zero-address\");\n    require(address(_newDrawHistory) != address(_previousDrawHistory), \"DrawBeacon/existing-draw-history-address\");\n    drawHistory = _newDrawHistory;\n    emit DrawHistoryTransferred(_previousDrawHistory, _newDrawHistory);\n    return _newDrawHistory;\n  }\n\n  /**\n    * @notice Sets the beacon period in seconds.\n    * @param _beaconPeriodSeconds The new beacon period in seconds.  Must be greater than zero.\n   */\n  function _setBeaconPeriodSeconds(uint32 _beaconPeriodSeconds) internal {\n    require(_beaconPeriodSeconds > 0, \"DrawBeacon/beacon-period-greater-than-zero\");\n    beaconPeriodSeconds = _beaconPeriodSeconds;\n\n    emit BeaconPeriodSecondsUpdated(_beaconPeriodSeconds);\n  }\n\n  /**\n    * @notice Sets the RNG request timeout in seconds.  This is the time that must elapsed before the RNG request can be cancelled and the pool unlocked.\n    * @param _rngTimeout The RNG request timeout in seconds.\n   */\n  function _setRngTimeout(uint32 _rngTimeout) internal {\n    require(_rngTimeout > 60, \"DrawBeacon/rng-timeout-gt-60-secs\");\n    rngTimeout = _rngTimeout;\n    emit RngTimeoutSet(_rngTimeout);\n  }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0;\n\n/// @title Random Number Generator Interface\n/// @notice Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\ninterface RNGInterface {\n\n  /// @notice Emitted when a new request for a random number has been submitted\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\n  /// @param sender The indexed address of the sender of the request\n  event RandomNumberRequested(uint32 indexed requestId, address indexed sender);\n\n  /// @notice Emitted when an existing request for a random number has been completed\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\n  /// @param randomNumber The random number produced by the 3rd-party service\n  event RandomNumberCompleted(uint32 indexed requestId, uint256 randomNumber);\n\n  /// @notice Gets the last request id used by the RNG service\n  /// @return requestId The last request id used in the last request\n  function getLastRequestId() external view returns (uint32 requestId);\n\n  /// @notice Gets the Fee for making a Request against an RNG service\n  /// @return feeToken The address of the token that is used to pay fees\n  /// @return requestFee The fee required to be paid to make a request\n  function getRequestFee() external view returns (address feeToken, uint256 requestFee);\n\n  /// @notice Sends a request for a random number to the 3rd-party service\n  /// @dev Some services will complete the request immediately, others may have a time-delay\n  /// @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\n  /// @return requestId The ID of the request used to get the results of the RNG service\n  /// @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.  The calling contract\n  /// should \"lock\" all activity until the result is available via the `requestId`\n  function requestRandomNumber() external returns (uint32 requestId, uint32 lockBlock);\n\n  /// @notice Checks if the request for randomness from the 3rd-party service has completed\n  /// @dev For time-delayed requests, this function is used to check/confirm completion\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return isCompleted True if the request has completed and a random number is available, false otherwise\n  function isRequestComplete(uint32 requestId) external view returns (bool isCompleted);\n\n  /// @notice Gets the random number produced by the 3rd-party service\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return randomNum The random number\n  function randomNumber(uint32 requestId) external returns (uint256 randomNum);\n}\n"
    },
    "@pooltogether/fixed-point/contracts/FixedPoint.sol": {
      "content": "/**\nCopyright 2020 PoolTogether Inc.\n\nThis file is part of PoolTogether.\n\nPoolTogether is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation under version 3 of the License.\n\nPoolTogether is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.4.0;\n\nimport \"./external/openzeppelin/OpenZeppelinSafeMath_V3_3_0.sol\";\n\n/**\n * @author Brendan Asselstine\n * @notice Provides basic fixed point math calculations.\n *\n * This library calculates integer fractions by scaling values by 1e18 then performing standard integer math.\n */\nlibrary FixedPoint {\n    using OpenZeppelinSafeMath_V3_3_0 for uint256;\n\n    // The scale to use for fixed point numbers.  Same as Ether for simplicity.\n    uint256 internal constant SCALE = 1e18;\n\n    /**\n        * Calculates a Fixed18 mantissa given the numerator and denominator\n        *\n        * The mantissa = (numerator * 1e18) / denominator\n        *\n        * @param numerator The mantissa numerator\n        * @param denominator The mantissa denominator\n        * @return The mantissa of the fraction\n        */\n    function calculateMantissa(uint256 numerator, uint256 denominator) internal pure returns (uint256) {\n        uint256 mantissa = numerator.mul(SCALE);\n        mantissa = mantissa.div(denominator);\n        return mantissa;\n    }\n\n    /**\n        * Multiplies a Fixed18 number by an integer.\n        *\n        * @param b The whole integer to multiply\n        * @param mantissa The Fixed18 number\n        * @return An integer that is the result of multiplying the params.\n        */\n    function multiplyUintByMantissa(uint256 b, uint256 mantissa) internal pure returns (uint256) {\n        uint256 result = mantissa.mul(b);\n        result = result.div(SCALE);\n        return result;\n    }\n\n    /**\n    * Divides an integer by a fixed point 18 mantissa\n    *\n    * @param dividend The integer to divide\n    * @param mantissa The fixed point 18 number to serve as the divisor\n    * @return An integer that is the result of dividing an integer by a fixed point 18 mantissa\n    */\n    function divideUintByMantissa(uint256 dividend, uint256 mantissa) internal pure returns (uint256) {\n        uint256 result = SCALE.mul(dividend);\n        result = result.div(mantissa);\n        return result;\n    }\n}\n"
    },
    "@pooltogether/owner-manager-contracts/contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\n/**\n * @title Abstract ownable contract that can be inherited by other contracts\n * @notice Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner is the deployer of the contract.\n *\n * The owner account is set through a two steps process.\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\n *\n * The manager account needs to be set using {setManager}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable {\n    address private _owner;\n    address private _pendingOwner;\n\n    /**\n     * @dev Emitted when `_pendingOwner` has been changed.\n     * @param pendingOwner new `_pendingOwner` address.\n     */\n    event OwnershipOffered(address indexed pendingOwner);\n\n    /**\n     * @dev Emitted when `_owner` has been changed.\n     * @param previousOwner previous `_owner` address.\n     * @param newOwner new `_owner` address.\n     */\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /* ============ Deploy ============ */\n\n    /**\n     * @notice Initializes the contract setting `_initialOwner` as the initial owner.\n     * @param _initialOwner Initial owner of the contract.\n     */\n    constructor(address _initialOwner) {\n        _setOwner(_initialOwner);\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @notice Gets current `_pendingOwner`.\n     * @return Current `_pendingOwner` address.\n     */\n    function pendingOwner() external view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @notice Renounce ownership of the contract.\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() external virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n    * @notice Allows current owner to set the `_pendingOwner` address.\n    * @param _newOwner Address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"Ownable/pendingOwner-not-zero-address\");\n\n        _pendingOwner = _newOwner;\n\n        emit OwnershipOffered(_newOwner);\n    }\n\n    /**\n    * @notice Allows the `_pendingOwner` address to finalize the transfer.\n    * @dev This function is only callable by the `_pendingOwner`.\n    */\n    function claimOwnership() external onlyPendingOwner {\n        _setOwner(_pendingOwner);\n        _pendingOwner = address(0);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Internal function to set the `_owner` of the contract.\n     * @param _newOwner New `_owner` address.\n     */\n    function _setOwner(address _newOwner) private {\n        address _oldOwner = _owner;\n        _owner = _newOwner;\n        emit OwnershipTransferred(_oldOwner, _newOwner);\n    }\n\n    /* ============ Modifier Functions ============ */\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable/caller-not-owner\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the `pendingOwner`.\n    */\n    modifier onlyPendingOwner() {\n        require(msg.sender == _pendingOwner, \"Ownable/caller-not-pendingOwner\");\n        _;\n    }\n}\n"
    },
    "@pooltogether/v4-core/contracts/interfaces/IDrawBeacon.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\";\nimport \"./IDrawHistory.sol\";\nimport \"../libraries/DrawLib.sol\";\n\ninterface IDrawBeacon {\n\n  /**\n    * @notice Emit when a new DrawHistory has been set.\n    * @param previousDrawHistory  The previous DrawHistory address\n    * @param newDrawHistory       The new DrawHistory address\n  */\n  event DrawHistoryTransferred(IDrawHistory indexed previousDrawHistory, IDrawHistory indexed newDrawHistory);\n\n  /**\n    * @notice Emit when a draw has opened.\n    * @param operator             User address responsible for opening draw\n    * @param startedAt Start timestamp\n  */\n  event BeaconPeriodStarted(\n    address indexed operator,\n    uint64 indexed startedAt\n  );\n\n  /**\n    * @notice Emit when a draw has started.\n    * @param operator      User address responsible for starting draw\n    * @param rngRequestId  draw id\n    * @param rngLockBlock  Block when draw becomes invalid\n  */\n  event DrawStarted(\n    address indexed operator,\n    uint32 indexed rngRequestId,\n    uint32 rngLockBlock\n  );\n\n  /**\n    * @notice Emit when a draw has been cancelled.\n    * @param operator      User address responsible for cancelling draw\n    * @param rngRequestId  draw id\n    * @param rngLockBlock  Block when draw becomes invalid\n  */\n  event DrawCancelled(\n    address indexed operator,\n    uint32 indexed rngRequestId,\n    uint32 rngLockBlock\n  );\n\n  /**\n    * @notice Emit when a draw has been completed.\n    * @param operator      User address responsible for completing draw\n    * @param randomNumber  Random number generated from draw\n  */\n  event DrawCompleted(\n    address indexed operator,\n    uint256 randomNumber\n  );\n\n  /**\n    * @notice Emit when a RNG service address is set.\n    * @param rngService  RNG service address\n  */\n  event RngServiceUpdated(\n    RNGInterface indexed rngService\n  );\n\n  /**\n    * @notice Emit when a draw timeout param is set.\n    * @param rngTimeout  draw timeout param in seconds\n  */\n  event RngTimeoutSet(\n    uint32 rngTimeout\n  );\n\n  /**\n    * @notice Emit when the drawPeriodSeconds is set.\n    * @param drawPeriodSeconds Time between draw\n  */\n  event BeaconPeriodSecondsUpdated(\n    uint32 drawPeriodSeconds\n  );\n\n  /**\n    * @notice Returns the number of seconds remaining until the beacon period can be complete.\n    * @return The number of seconds remaining until the beacon period can be complete.\n   */\n  function beaconPeriodRemainingSeconds() external view virtual returns (uint32);\n\n  /**\n    * @notice Returns the timestamp at which the beacon period ends\n    * @return The timestamp at which the beacon period ends.\n   */\n  function beaconPeriodEndAt() external view virtual returns (uint64);\n\n\n  /**\n    * @notice Returns whether an Draw request can be started.\n    * @return True if a Draw can be started, false otherwise.\n   */\n  function canStartDraw() external view virtual returns (bool);\n  \n  /**\n    * @notice Returns whether an Draw request can be completed.\n    * @return True if a Draw can be completed, false otherwise.\n   */\n  function canCompleteDraw() external view virtual returns (bool);\n  \n  /**\n    * @notice Calculates when the next beacon period will start.\n    * @param currentTime The timestamp to use as the current time\n    * @return The timestamp at which the next beacon period would start\n   */\n  function calculateNextBeaconPeriodStartTime(uint256 currentTime) external view virtual returns (uint64);\n  \n  /**\n    * @notice Can be called by anyone to cancel the draw request if the RNG has timed out.\n   */\n  function cancelDraw() external virtual;\n\n  /**\n    * @notice Completes the Draw (RNG) request and pushes a Draw onto DrawHistory.\n   */\n  function completeDraw() external virtual;\n  \n  /**\n    * @notice Returns the block number that the current RNG request has been locked to.\n    * @return The block number that the RNG request is locked to\n   */\n  function getLastRngLockBlock() external view returns (uint32);\n  /**\n    * @notice Returns the current RNG Request ID.\n    * @return The current Request ID\n   */\n  function getLastRngRequestId() external view returns (uint32);\n  /**\n    * @notice Returns whether the beacon period is over\n    * @return True if the beacon period is over, false otherwise\n   */\n  function isBeaconPeriodOver() external view returns (bool);\n\n  /**\n    * @notice Returns whether the random number request has completed.\n    * @return True if a random number request has completed, false otherwise.\n   */\n  function isRngCompleted() external view returns (bool);\n\n  /**\n    * @notice Returns whether a random number has been requested\n    * @return True if a random number has been requested, false otherwise.\n   */\n  function isRngRequested() external view returns (bool);\n\n  /**\n    * @notice Returns whether the random number request has timed out.\n    * @return True if a random number request has timed out, false otherwise.\n   */\n  function isRngTimedOut() external view returns (bool);\n  /**\n    * @notice Allows the owner to set the beacon period in seconds.\n    * @param beaconPeriodSeconds The new beacon period in seconds.  Must be greater than zero.\n   */\n  function setBeaconPeriodSeconds(uint32 beaconPeriodSeconds) external;\n  /**\n    * @notice Allows the owner to set the RNG request timeout in seconds. This is the time that must elapsed before the RNG request can be cancelled and the pool unlocked.\n    * @param _rngTimeout The RNG request timeout in seconds.\n   */\n  function setRngTimeout(uint32 _rngTimeout) external;\n  /**\n    * @notice Sets the RNG service that the Prize Strategy is connected to\n    * @param rngService The address of the new RNG service interface\n   */\n  function setRngService(RNGInterface rngService) external;\n  /**\n    * @notice Starts the Draw process by starting random number request. The previous beacon period must have ended.\n    * @dev The RNG-Request-Fee is expected to be held within this contract before calling this function\n   */\n  function startDraw() external virtual;\n  /**\n    * @notice Set global DrawHistory variable.\n    * @dev    All subsequent Draw requests/completions will be pushed to the new DrawHistory.\n    * @param newDrawHistory DrawHistory address\n    * @return DrawHistory\n  */\n  function setDrawHistory(IDrawHistory newDrawHistory) external virtual returns (IDrawHistory);\n}\n"
    },
    "@pooltogether/v4-core/contracts/interfaces/IDrawHistory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\n\nimport \"../libraries/DrawLib.sol\";\n\ninterface IDrawHistory {\n\n  /**\n    * @notice Emit when a new draw has been created.\n    * @param drawId Draw id\n    * @param draw The Draw struct\n  */\n  event DrawSet (\n    uint32 indexed drawId,\n    DrawLib.Draw draw\n  );\n\n  /**\n    * @notice Read a Draw from the draws ring buffer.\n    * @dev    Read a Draw using the Draw.drawId to calculate position in the draws ring buffer.\n    * @param drawId Draw.drawId\n    * @return DrawLib.Draw\n  */\n  function getDraw(uint32 drawId) external view returns (DrawLib.Draw memory);\n\n  /**\n    * @notice Read multiple Draws from the draws ring buffer.\n    * @dev    Read multiple Draws using each Draw.drawId to calculate position in the draws ring buffer.\n    * @param drawIds Array of Draw.drawIds\n    * @return DrawLib.Draw[]\n  */\n  function getDraws(uint32[] calldata drawIds) external view returns (DrawLib.Draw[] memory);\n  /**\n    * @notice Read newest Draw from the draws ring buffer.\n    * @dev    Uses the nextDrawIndex to calculate the most recently added Draw.\n    * @return DrawLib.Draw\n  */\n  function getNewestDraw() external view returns (DrawLib.Draw memory);\n  /**\n    * @notice Read oldest Draw from the draws ring buffer.\n    * @dev    Finds the oldest Draw by comparing and/or diffing totalDraws with the cardinality.\n    * @return DrawLib.Draw\n  */\n  function getOldestDraw() external view returns (DrawLib.Draw memory);\n\n  /**\n    * @notice Push Draw onto draws ring buffer history.\n    * @dev    Push new draw onto draws history via authorized manager or owner.\n    * @param draw DrawLib.Draw\n    * @return Draw.drawId\n  */\n  function pushDraw(DrawLib.Draw calldata draw) external returns(uint32);\n\n  /**\n    * @notice Set existing Draw in draws ring buffer with new parameters.\n    * @dev    Updating a Draw should be used sparingly and only in the event an incorrect Draw parameter has been stored.\n    * @param newDraw DrawLib.Draw\n    * @return Draw.drawId\n  */\n  function setDraw(DrawLib.Draw calldata newDraw) external returns(uint32);\n}"
    },
    "@pooltogether/v4-core/contracts/libraries/DrawLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nlibrary DrawLib{\n\n    struct Draw {\n        uint256 winningRandomNumber;\n        uint32 drawId;\n        uint64 timestamp;\n        uint64 beaconPeriodStartedAt;\n        uint32 beaconPeriodSeconds;\n    }\n\n    ///@notice Draw settings for the tsunami draw calculator\n    ///@param bitRangeSize Decimal representation of bitRangeSize\n    ///@param matchCardinality The bitRangeSize's to consider in the 256 random numbers. Must be > 1 and < 256/bitRangeSize\n    ///@param numberOfPicks Number of picks this Draw has (may vary network to network)\n    ///@param maxPicksPerUser Maximum number of picks a user can make in this Draw\n    ///@param distributions Array of prize distribution percentages, expressed in fraction form with base 1e18. Max sum of these <= 1 Ether. ordering: index0: grandPrize, index1: runnerUp, etc.\n    ///@param prize Total prize amount available in this draw calculator for this Draw (may vary from network to network)\n    struct PrizeDistribution {\n        uint8 bitRangeSize;\n        uint8 matchCardinality;\n        uint32 startOffsetTimestamp;\n        uint32 endOffsetTimestamp;\n        uint32 maxPicksPerUser;\n        uint136 numberOfPicks;\n        uint32[] distributions;\n        uint256 prize;\n    }\n}"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@pooltogether/fixed-point/contracts/external/openzeppelin/OpenZeppelinSafeMath_V3_3_0.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// NOTE: Copied from OpenZeppelin Contracts version 3.3.0\n\npragma solidity >=0.4.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary OpenZeppelinSafeMath_V3_3_0 {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@pooltogether/v4-core/contracts/DrawHistory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\nimport \"./interfaces/IDrawHistory.sol\";\nimport \"./libraries/DrawLib.sol\";\nimport \"./libraries/DrawRingBufferLib.sol\";\n\n/**\n  * @title  PoolTogether V4 DrawHistory\n  * @author PoolTogether Inc Team\n  * @notice The DrawHistory keeps a historical record of Draws created/pushed by DrawBeacon(s).\n            Once a DrawBeacon (on mainnet) completes a RNG request, a new Draw will be added\n            to the DrawHistory draws ring buffer. A DrawHistory will store a limited number\n            of Draws before beginning to overwrite (managed via the cardinality) previous Draws.\n            All mainnet DrawHistory(s) are updated directly from a DrawBeacon, but non-mainnet\n            DrawHistory(s) (Matic, Optimism, Arbitrum, etc...) will receive a cross-chain message,\n            duplicating the mainnet Draw configuration - enabling a prize savings liquidity network.\n*/\ncontract DrawHistory is IDrawHistory, Manageable {\n  using DrawRingBufferLib for DrawRingBufferLib.Buffer;\n\n  /// @notice Draws ring buffer max length.\n  uint16 public constant MAX_CARDINALITY = 256;\n\n  /// @notice Draws ring buffer array.\n  DrawLib.Draw[MAX_CARDINALITY] private _draws;\n\n  /// @notice Holds ring buffer information\n  DrawRingBufferLib.Buffer internal drawRingBuffer;\n\n  /* ============ Deploy ============ */\n\n  /**\n    * @notice Deploy DrawHistory smart contract.\n    * @param _owner Address of the owner of the DrawHistory.\n    * @param _cardinality Draw ring buffer cardinality.\n  */\n  constructor(\n    address _owner,\n    uint8 _cardinality\n  ) Ownable(_owner) {\n    drawRingBuffer.cardinality = _cardinality;\n  }\n\n  /* ============ External Functions ============ */\n\n  /// @inheritdoc IDrawHistory\n  function getDraw(uint32 drawId) external view override returns(DrawLib.Draw memory) {\n    return _draws[_drawIdToDrawIndex(drawRingBuffer, drawId)];\n  }\n\n  /// @inheritdoc IDrawHistory\n  function getDraws(uint32[] calldata drawIds) external view override returns(DrawLib.Draw[] memory) {\n    DrawLib.Draw[] memory draws = new DrawLib.Draw[](drawIds.length);\n    DrawRingBufferLib.Buffer memory buffer = drawRingBuffer;\n    for (uint256 index = 0; index < drawIds.length; index++) {\n      draws[index] = _draws[_drawIdToDrawIndex(buffer, drawIds[index])];\n    }\n    return draws;\n  }\n\n  /// @inheritdoc IDrawHistory\n  function getNewestDraw() external view override returns (DrawLib.Draw memory) {\n    return _getNewestDraw(drawRingBuffer);\n  }\n\n  /// @inheritdoc IDrawHistory\n  function getOldestDraw() external view override returns (DrawLib.Draw memory) {\n    // oldest draw should be next available index, otherwise it's at 0\n    DrawRingBufferLib.Buffer memory buffer = drawRingBuffer;\n    DrawLib.Draw memory draw = _draws[buffer.nextIndex];\n    if (draw.timestamp == 0) { // if draw is not init, then use draw at 0\n      draw = _draws[0];\n    }\n    return draw;\n  }\n\n  /// @inheritdoc IDrawHistory\n  function pushDraw(DrawLib.Draw memory _draw) external override onlyManagerOrOwner returns (uint32) {\n    return _pushDraw(_draw);\n  }\n\n  /// @inheritdoc IDrawHistory\n  function setDraw(DrawLib.Draw memory _newDraw) external override onlyOwner returns (uint32) {\n    DrawRingBufferLib.Buffer memory buffer = drawRingBuffer;\n    uint32 index = buffer.getIndex(_newDraw.drawId);\n    _draws[index] = _newDraw;\n    emit DrawSet(_newDraw.drawId, _newDraw);\n    return _newDraw.drawId;\n  }\n\n  /* ============ Internal Functions ============ */\n\n  /**\n    * @notice Convert a Draw.drawId to a Draws ring buffer index pointer.\n    * @dev    The getNewestDraw.drawId() is used to calculate a Draws ID delta position.\n    * @param _drawId Draw.drawId\n    * @return Draws ring buffer index pointer\n  */\n  function _drawIdToDrawIndex(DrawRingBufferLib.Buffer memory _buffer, uint32 _drawId) internal view returns (uint32) {\n    return _buffer.getIndex(_drawId);\n  }\n\n  /**\n    * @notice Read newest Draw from the draws ring buffer.\n    * @dev    Uses the lastDrawId to calculate the most recently added Draw.\n    * @param _buffer Draw ring buffer\n    * @return DrawLib.Draw\n  */\n  function _getNewestDraw(DrawRingBufferLib.Buffer memory _buffer) internal view returns (DrawLib.Draw memory) {\n    return _draws[_buffer.getIndex(_buffer.lastDrawId)];\n  }\n\n  /**\n    * @notice Push Draw onto draws ring buffer history.\n    * @dev    Push new draw onto draws list via authorized manager or owner.\n    * @param _newDraw DrawLib.Draw\n    * @return Draw.drawId\n  */\n  function _pushDraw(DrawLib.Draw memory _newDraw) internal returns (uint32) {\n    DrawRingBufferLib.Buffer memory _buffer = drawRingBuffer;\n    _draws[_buffer.nextIndex] = _newDraw;\n    drawRingBuffer = _buffer.push(_newDraw.drawId);\n    emit DrawSet(_newDraw.drawId, _newDraw);\n    return _newDraw.drawId;\n  }\n\n}\n"
    },
    "@pooltogether/owner-manager-contracts/contracts/Manageable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @title Abstract manageable contract that can be inherited by other contracts\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\n * there is an owner and a manager that can be granted exclusive access to specific functions.\n *\n * By default, the owner is the deployer of the contract.\n *\n * The owner account is set through a two steps process.\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\n *\n * The manager account needs to be set using {setManager}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyManager`, which can be applied to your functions to restrict their use to\n * the manager.\n */\nabstract contract Manageable is Ownable {\n    address private _manager;\n\n    /**\n     * @dev Emitted when `_manager` has been changed.\n     * @param previousManager previous `_manager` address.\n     * @param newManager new `_manager` address.\n     */\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Gets current `_manager`.\n     * @return Current `_manager` address.\n     */\n    function manager() public view virtual returns (address) {\n        return _manager;\n    }\n\n    /**\n     * @notice Set or change of manager.\n     * @dev Throws if called by any account other than the owner.\n     * @param _newManager New _manager address.\n     * @return Boolean to indicate if the operation was successful or not.\n     */\n    function setManager(address _newManager) external onlyOwner returns (bool) {\n        return _setManager(_newManager);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Set or change of manager.\n     * @param _newManager New _manager address.\n     * @return Boolean to indicate if the operation was successful or not.\n     */\n    function _setManager(address _newManager) private returns (bool) {\n        address _previousManager = _manager;\n\n        require(_newManager != _previousManager, \"Manageable/existing-manager-address\");\n\n        _manager = _newManager;\n\n        emit ManagerTransferred(_previousManager, _newManager);\n        return true;\n    }\n\n    /* ============ Modifier Functions ============ */\n\n    /**\n     * @dev Throws if called by any account other than the manager.\n     */\n    modifier onlyManager() {\n        require(manager() == msg.sender, \"Manageable/caller-not-manager\");\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the manager or the owner.\n     */\n    modifier onlyManagerOrOwner() {\n        require(manager() == msg.sender || owner() == msg.sender, \"Manageable/caller-not-manager-or-owner\");\n        _;\n    }\n}\n"
    },
    "@pooltogether/v4-core/contracts/libraries/DrawRingBufferLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"./RingBuffer.sol\";\n\n/// @title Library for creating and managing a draw ring buffer.\nlibrary DrawRingBufferLib {\n\n  /// @notice Draw buffer struct.\n  struct Buffer {\n    uint32 lastDrawId;\n    uint32 nextIndex;\n    uint32 cardinality;\n  }\n\n  /// @notice Helper function to know if the draw ring buffer has been initialized.\n  /// @dev since draws start at 1 and are monotonically increased, we know we are uninitialized if nextIndex = 0 and lastDrawId = 0.\n  /// @param _buffer The buffer to check.\n  function isInitialized(Buffer memory _buffer) internal pure returns (bool) {\n    return !(_buffer.nextIndex == 0 && _buffer.lastDrawId == 0);\n  }\n\n  /// @notice Push a draw to the buffer.\n  /// @param _buffer The buffer to push to.\n  /// @param _drawId The draw id to push.\n  /// @return The new buffer.\n  function push(Buffer memory _buffer, uint32 _drawId) internal view returns (Buffer memory) {\n    require(!isInitialized(_buffer) || _drawId == _buffer.lastDrawId + 1, \"DRB/must-be-contig\");\n    return Buffer({\n      lastDrawId: _drawId,\n      nextIndex: uint32(RingBuffer.nextIndex(_buffer.nextIndex, _buffer.cardinality)),\n      cardinality: _buffer.cardinality\n    });\n  }\n\n  /// @notice Get draw ring buffer index pointer.\n  /// @param _buffer The buffer to get the `nextIndex` from.\n  /// @param _drawId The draw id to get the index for.\n  /// @return The draw ring buffer index pointer.\n  function getIndex(Buffer memory _buffer, uint32 _drawId) internal view returns (uint32) {\n    require(isInitialized(_buffer) && _drawId <= _buffer.lastDrawId, \"DRB/future-draw\");\n\n    uint32 indexOffset = _buffer.lastDrawId - _drawId;\n    require(indexOffset < _buffer.cardinality, \"DRB/expired-draw\");\n\n    uint256 mostRecent = RingBuffer.mostRecentIndex(_buffer.nextIndex, _buffer.cardinality);\n\n    return uint32(RingBuffer.offset(uint32(mostRecent), indexOffset, _buffer.cardinality));\n  }\n}\n"
    },
    "@pooltogether/v4-core/contracts/libraries/RingBuffer.sol": {
      "content": "pragma solidity 0.8.6;\n\nlibrary RingBuffer {\n\n  /// @notice Returns TWAB index.\n  /// @dev `twabs` is a circular buffer of `MAX_CARDINALITY` size equal to 32. So the array goes from 0 to 31.\n  /// @dev In order to navigate the circular buffer, we need to use the modulo operator.\n  /// @dev For example, if `_index` is equal to 32, `_index % MAX_CARDINALITY` will return 0 and will point to the first element of the array.\n  /// @param _index Index used to navigate through `twabs` circular buffer.\n  function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\n    return _index % _cardinality;\n  }\n\n  function offset(uint256 _index, uint256 _amount, uint256 _cardinality) internal pure returns (uint256) {\n    return (_index + _cardinality - _amount) % _cardinality;\n  }\n\n  /// @notice Returns the index of the last recorded TWAB\n  /// @param _nextAvailableIndex The next available twab index.  This will be recorded to next.\n  /// @param _cardinality The cardinality of the TWAB history.\n  /// @return The index of the last recorded TWAB\n  function mostRecentIndex(uint256 _nextAvailableIndex, uint256 _cardinality) internal pure returns (uint256) {\n    if (_cardinality == 0) {\n      return 0;\n    }\n    return (_nextAvailableIndex + uint256(_cardinality) - 1) % _cardinality;\n  }\n\n  function nextIndex(uint256 _currentIndex, uint256 _cardinality) internal pure returns (uint256) {\n    return (_currentIndex + 1) % _cardinality;\n  }\n\n}"
    },
    "@pooltogether/v4-core/contracts/Reserve.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IReserve.sol\";\nimport \"./libraries/ObservationLib.sol\";\nimport \"./libraries/RingBuffer.sol\";\n\n/**\n  * @title  PoolTogether V4 Reserve\n  * @author PoolTogether Inc Team\n  * @notice The Reserve migrates allotments of token distributions.\n*/\ncontract Reserve is IReserve, Manageable {\n    using SafeERC20 for IERC20;\n    \n    /// @notice ERC20 token\n    IERC20 public immutable token;\n\n    /// @notice Total withdraw amount from reserve\n    uint224 public withdrawAccumulator;\n\n    /// @notice The maximum number of twab entries\n    uint24 internal constant MAX_CARDINALITY = 16777215; // 2**24\n\n    ObservationLib.Observation[MAX_CARDINALITY] internal reserveAccumulators;\n\n    uint24 internal cardinality;\n    \n    /* ============ Events ============ */\n\n    event Deployed(IERC20 indexed token);\n\n    /* ============ Constructor ============ */\n    \n    /** \n    * @notice Constructs Ticket with passed parameters.\n    * @param _owner Owner address\n    * @param _token ERC20 address\n  */\n    constructor(address _owner, IERC20 _token) Ownable(_owner) {\n        token = _token;\n        emit Deployed(_token);\n    }\n\n    /* ============ External Functions ============ */\n    \n    /// @inheritdoc IReserve\n    function checkpoint() external override {\n        _checkpoint();\n    }\n\n    /// @inheritdoc IReserve\n    function getToken() external view override returns (IERC20) {\n        return token;\n    }\n    \n    /// @inheritdoc IReserve\n    function getReserveAccumulatedBetween(uint32 _startTimestamp, uint32 _endTimestamp) external override view returns (uint224) {\n        require(_startTimestamp < _endTimestamp, \"Reserve/start-less-then-end\");\n        uint24 _cardinality = cardinality;\n\n        ObservationLib.Observation memory _newestObservation;\n        if (_cardinality > 0) {\n            _newestObservation = reserveAccumulators[_cardinality - 1];\n        }\n        ObservationLib.Observation memory _oldestObservation = reserveAccumulators[0]; \n\n        uint224 _start = _getReserveAccumulatedAt(\n            _newestObservation,\n            _oldestObservation,\n            _cardinality,\n            _startTimestamp\n        );\n\n        uint224 _end = _getReserveAccumulatedAt(\n            _newestObservation,\n            _oldestObservation,\n            _cardinality,\n            _endTimestamp\n        );\n\n        return _end - _start;\n    }\n\n    /// @inheritdoc IReserve\n    function withdrawTo(address _recipient, uint256 _amount) external override onlyManagerOrOwner {\n        _checkpoint();\n\n        token.safeTransfer(_recipient, _amount);\n        withdrawAccumulator += uint224(_amount);\n        \n        emit Withdrawn(_recipient, _amount);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n      * @notice Find optimal observation checkpoint using target timestamp\n      * @dev    Uses binary search if target timestamp is within ring buffer range.\n      * @param _newestObservation ObservationLib.Observation\n      * @param _oldestObservation ObservationLib.Observation\n      * @param _cardinality       RingBuffer Range\n      * @param timestamp          Timestamp target\n      *\n      * @return Optimal reserveAccumlator for timestamp.\n     */\n    function _getReserveAccumulatedAt(\n        ObservationLib.Observation memory _newestObservation,\n        ObservationLib.Observation memory _oldestObservation,\n        uint24 _cardinality,\n        uint32 timestamp\n    ) internal view returns (uint224) {\n        uint32 timeNow = uint32(block.timestamp);\n\n        // IF empty ring buffer exit early.\n        if (_cardinality == 0) return 0;\n\n        /**\n          * Ring Buffer Search Optimization\n          * Before performing binary search on the ring buffer check \n          * to see if timestamp is within range of [o T n] by comparing\n          * the target timestamp to the oldest/newest observation.timestamps\n          * IF the timestamp is out of the ring buffer range avoid starting\n          * a binary search, because we can return NULL or oldestObservation.amount\n        */\n\n        /**\n          * IF oldestObservation.timestamp is after timestamp: T[old ]\n          * the Reserve did NOT have a balance or the ring buffer\n          * no longer contains that timestamp checkpoint.\n         */\n        if(_oldestObservation.timestamp > timestamp) {\n            return 0;\n        }\n\n        /**\n          * IF newestObservation.timestamp is before timestamp: [ new]T\n          * return _newestObservation.amount since observation is\n          * contains the highest checkpointed reserveAccumulator.\n         */\n        if(_newestObservation.timestamp <= timestamp) {\n            return _newestObservation.amount;\n        }\n        \n        // IF the timestamp is witin range of ring buffer start/end: [new T old]\n        // FIND the closest observation to the left(or exact) of timestamp: [OT ]\n        (ObservationLib.Observation memory beforeOrAt, ObservationLib.Observation memory atOrAfter) = \n            ObservationLib.binarySearch(reserveAccumulators, _cardinality - 1, 0, timestamp, _cardinality, timeNow);\n        \n        // IF target timestamp is EXACT match for atOrAfter.timestamp observation return amount.\n        // NOT having an exact match with atOrAfter means values will contain accumulator value AFTER the searchable range.\n        if(atOrAfter.timestamp == timestamp) {\n            return atOrAfter.amount;\n        }\n\n        // ELSE return observation.totalDepositedAccumlator closest to LEFT of target timestamp.\n        else {\n            return beforeOrAt.amount;      \n        }\n    }\n\n    /// @notice Records the currently accrued reserve amount.\n    function _checkpoint() internal {\n        uint24 _cardinality = cardinality;\n        uint256 _balanceOfReserve = token.balanceOf(address(this));\n        uint224 _withdrawAccumulator = withdrawAccumulator; //sload\n        ObservationLib.Observation memory _newestObservation = _getNewestObservation(_cardinality);\n\n        /**\n          * IF tokens have been deposited into Reserve contract since the last checkpoint\n          * create a new Reserve balance checkpoint. The will will update multiple times in a single block.\n         */\n        if(_balanceOfReserve + _withdrawAccumulator > _newestObservation.amount) {\n            uint32 now = uint32(block.timestamp);\n            \n            // checkpointAccumulator = currentBalance + totalWithdraws\n            uint224 newReserveAccumulator = uint224(_balanceOfReserve) + _withdrawAccumulator;\n            \n            // IF _newestObservation IS NOT in the current block.\n            // CREATE observation in the accumulators ring buffer.\n            if(_newestObservation.timestamp != now) {\n                reserveAccumulators[_cardinality] = ObservationLib.Observation({\n                    amount: newReserveAccumulator, \n                    timestamp: now\n                });\n                cardinality++;\n            }\n            // ELSE IF _newestObservation IS in the current block.\n            // UPDATE the checkpoint previously created in block history.\n            else {\n                reserveAccumulators[_cardinality - 1] = ObservationLib.Observation({\n                    amount: newReserveAccumulator, \n                    timestamp: now\n                });\n            }\n            emit Checkpoint(newReserveAccumulator, _withdrawAccumulator);\n        }        \n    }   \n\n    /// @notice Retrieves the newest observation\n    function _getNewestObservation(uint24 _cardinality) internal view returns (ObservationLib.Observation memory _observation) {\n        if (_cardinality > 0) _observation = reserveAccumulators[_cardinality - 1]; \n    }\n\n\n}"
    },
    "@pooltogether/v4-core/contracts/interfaces/IReserve.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IReserve {\n  event Checkpoint(uint256 reserveAccumulated, uint256 withdrawAccumulated);\n  event Withdrawn(address indexed recipient, uint256 amount);\n\n  /**\n    * @notice Create observation checkpoint in ring bufferr.\n    * @dev    Calculates total desposited tokens since last checkpoint and creates new accumulator checkpoint.\n  */\n  function checkpoint() external;\n  \n  /**\n    * @notice Read global token value.\n    * @return IERC20\n  */\n  function getToken() external view returns (IERC20);\n\n  /**\n    * @notice Calculate token accumulation beween timestamp range.\n    * @dev    Search the ring buffer for two checkpoint observations and diffs accumulator amount. \n    * @param startTimestamp Account address \n    * @param endTimestamp   Transfer amount\n    */\n  function getReserveAccumulatedBetween(uint32 startTimestamp, uint32 endTimestamp) external returns (uint224);\n\n  /**\n    * @notice Transfer Reserve token balance to recipient address.\n    * @dev    Creates checkpoint before token transfer. Increments withdrawAccumulator with amount.\n    * @param recipient Account address \n    * @param amount    Transfer amount\n  */\n  function withdrawTo(address recipient, uint256 amount) external;\n}\n"
    },
    "@pooltogether/v4-core/contracts/libraries/ObservationLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport \"./OverflowSafeComparator.sol\";\nimport \"./RingBuffer.sol\";\n\n/// @title Time-Weighted Average Balance Library\n/// @notice This library allows you to efficiently track a user's historic balance.  You can get a\n/// @author PoolTogether Inc.\nlibrary ObservationLib {\n  using OverflowSafeComparator for uint32;\n  using SafeCast for uint256;\n\n  /// @notice The maximum number of twab entries\n  uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\n\n  /// @notice Time Weighted Average Balance (Observation).\n  /// @param amount `amount` at `timestamp`.\n  /// @param timestamp Recorded `timestamp`.\n  struct Observation {\n    uint224 amount;\n    uint32 timestamp;\n  }\n\n  /// @notice Fetches Observations `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\n  /// The result may be the same Observation, or adjacent Observations.\n  /// @dev The answer must be contained in the array, used when the target is located within the stored Observation.\n  /// boundaries: older than the most recent Observation and younger, or the same age as, the oldest Observation.\n  /// @param _observations List of Observations to search through.\n  /// @param _observationIndex Index of the Observation to start searching from.\n  /// @param _target Timestamp at which the reserved Observation should be for.\n  /// @return beforeOrAt Observation recorded before, or at, the target.\n  /// @return atOrAfter Observation recorded at, or after, the target.\n  function binarySearch(\n    Observation[MAX_CARDINALITY] storage _observations,\n    uint24 _observationIndex,\n    uint24 _oldestObservationIndex,\n    uint32 _target,\n    uint24 _cardinality,\n    uint32 _time\n  ) internal view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\n    uint256 leftSide = _oldestObservationIndex; // Oldest Observation\n    uint256 rightSide = _observationIndex < leftSide ? leftSide + _cardinality - 1 : _observationIndex;\n    uint256 currentIndex;\n\n    while (true) {\n      currentIndex = (leftSide + rightSide) / 2;\n      beforeOrAt = _observations[uint24(RingBuffer.wrap(currentIndex, _cardinality))];\n      uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\n\n      // We've landed on an uninitialized timestamp, keep searching higher (more recently)\n      if (beforeOrAtTimestamp == 0) {\n        leftSide = currentIndex + 1;\n        continue;\n      }\n\n      atOrAfter = _observations[uint24(RingBuffer.nextIndex(currentIndex, _cardinality))];\n\n      bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\n\n      // Check if we've found the corresponding Observation\n      if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\n        break;\n      }\n\n      // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower\n      if (!targetAtOrAfter) rightSide = currentIndex - 1;\n\n      // Otherwise, we keep searching higher\n      else leftSide = currentIndex + 1;\n    }\n  }\n\n}\n"
    },
    "@pooltogether/v4-core/contracts/libraries/OverflowSafeComparator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\n/// @title OverflowSafeComparator library to share comparator functions between contracts\n/// @author PoolTogether Inc.\nlibrary OverflowSafeComparator {\n  /// @notice 32-bit timestamps comparator.\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\n  /// @param _b Timestamp to compare against `_a`.\n  /// @param _timestamp A timestamp truncated to 32 bits.\n  /// @return bool Whether `_a` is chronologically < `_b`.\n  function lt(\n      uint32 _a,\n      uint32 _b,\n      uint32 _timestamp\n  ) internal pure returns (bool) {\n      // No need to adjust if there hasn't been an overflow\n      if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\n\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n      return aAdjusted < bAdjusted;\n  }\n\n  /// @notice 32-bit timestamps comparator.\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\n  /// @param _b Timestamp to compare against `_a`.\n  /// @param _timestamp A timestamp truncated to 32 bits.\n  /// @return bool Whether `_a` is chronologically <= `_b`.\n  function lte(\n      uint32 _a,\n      uint32 _b,\n      uint32 _timestamp\n  ) internal pure returns (bool) {\n      // No need to adjust if there hasn't been an overflow\n      if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\n\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n      return aAdjusted <= bAdjusted;\n  }\n\n  function checkedSub(\n      uint32 _a,\n      uint32 _b,\n      uint32 _timestamp\n  ) internal pure returns (uint32) {\n      // No need to adjust if there hasn't been an overflow\n      if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\n\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n      return uint32(aAdjusted - bAdjusted);\n  }\n}\n"
    },
    "@pooltogether/v4-core/contracts/Ticket.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport \"./libraries/OverflowSafeComparator.sol\";\nimport \"./libraries/TwabLib.sol\";\nimport \"./interfaces/ITicket.sol\";\nimport \"./ControlledToken.sol\";\n\n/**\n  * @title  PoolTogether V4 Ticket\n  * @author PoolTogether Inc Team\n  * @notice The Ticket extends the standard ERC20 and ControlledToken interfaces with time-weighed average balance functionality.\n            The TWAB (time-weighed average balance) enables contract-to-contract lookups of a user's average balance\n            between timestamps. The timestamp/balance checkpoints are stored in a ring buffer for each user Account.\n            Historical searches of a TWAB(s) are limited to the storage of these checkpoints. A user's average balance can\n            be delegated to an alternative address. When delegating the average weighted balance is added to the delegatee\n            TWAB lookup and removed from the delegaters TWAB lookup.\n*/\ncontract Ticket is ControlledToken, ITicket {\n\n  using SafeERC20 for IERC20;\n  using SafeCast for uint256;\n\n  /// @notice The minimum length of time a twab should exist.\n  /// @dev Once the twab ttl expires, its storage slot is recycled.\n  uint32 public constant TWAB_TIME_TO_LIVE = 24 weeks;\n  \n  /// @notice The maximum number of twab entries\n  uint16 public constant MAX_CARDINALITY = 65535;\n\n  /// @notice Record of token holders TWABs for each account.\n  mapping (address => TwabLib.Account) internal userTwabs;\n\n  /// @notice Record of tickets total supply and most recent TWAB index.\n  TwabLib.Account internal totalSupplyTwab;\n\n  /// @notice Mapping of delegates.  Each address can delegate their ticket power to another.\n  mapping(address => address) internal delegates;\n\n  /// @notice Each address's balance\n  mapping(address => uint256) internal balances;\n\n  /* ============ Constructor ============ */\n\n  /** \n    * @notice Constructs Ticket with passed parameters.\n    * @param _name ERC20 ticket token name.\n    * @param _symbol ERC20 ticket token symbol.\n    * @param decimals_ ERC20 ticket token decimals.\n    * @param _controller ERC20 ticket controller address (ie: Prize Pool address).\n  */\n  constructor (\n    string memory _name,\n    string memory _symbol,\n    uint8 decimals_,\n    address _controller\n  ) ControlledToken(\n    _name,\n    _symbol,\n    decimals_,\n    _controller\n  ){}\n\n  /* ============ External Functions ============ */\n\n  /// @inheritdoc ITicket\n  function getAccountDetails(address _user) external view override returns (TwabLib.AccountDetails memory) {\n    return userTwabs[_user].details;\n  }\n\n  /// @inheritdoc ITicket\n  function getTwab(address _user, uint16 _index) external view override returns (ObservationLib.Observation memory) {\n    return userTwabs[_user].twabs[_index];\n  }\n\n /// @inheritdoc ITicket\n  function getBalanceAt(address _user, uint256 _target) external override view returns (uint256) {\n    TwabLib.Account storage account = userTwabs[_user];\n    return TwabLib.getBalanceAt(account.twabs, account.details, uint32(_target), uint32(block.timestamp));\n  }\n\n/// @inheritdoc ITicket\n  function getAverageBalancesBetween(address user, uint32[] calldata startTimes, uint32[] calldata endTimes) external override view\n    returns (uint256[] memory)\n  {\n    return _getAverageBalancesBetween(userTwabs[user], startTimes, endTimes);\n  }\n\n  /// @inheritdoc ITicket\n  function getAverageTotalSuppliesBetween(uint32[] calldata startTimes, uint32[] calldata endTimes) external override view\n    returns (uint256[] memory)\n  {\n    return _getAverageBalancesBetween(totalSupplyTwab, startTimes, endTimes);\n  }\n\n  /// @inheritdoc ITicket\n  function getAverageBalanceBetween(address _user, uint256 _startTime, uint256 _endTime) external override view returns (uint256) {\n    TwabLib.Account storage account = userTwabs[_user];\n    return TwabLib.getAverageBalanceBetween(account.twabs, account.details, uint32(_startTime), uint32(_endTime), uint32(block.timestamp));\n  }\n\n  /// @inheritdoc ITicket\n  function getBalancesAt(address _user, uint32[] calldata _targets) external override view returns (uint256[] memory) {\n    uint256 length = _targets.length;\n    uint256[] memory balances = new uint256[](length);\n\n    TwabLib.Account storage twabContext = userTwabs[_user];\n    TwabLib.AccountDetails memory details = twabContext.details;\n\n    for(uint256 i = 0; i < length; i++) {\n      balances[i] = TwabLib.getBalanceAt(twabContext.twabs, details, _targets[i], uint32(block.timestamp));\n    }\n\n    return balances;\n  }\n\n  /// @inheritdoc ITicket\n  function getTotalSupplyAt(uint32 _target) external override view returns (uint256) {\n    return TwabLib.getBalanceAt(totalSupplyTwab.twabs, totalSupplyTwab.details, _target, uint32(block.timestamp));\n  }\n\n  /// @inheritdoc ITicket\n  function getTotalSuppliesAt(uint32[] calldata _targets) external override view returns (uint256[] memory) {\n    uint256 length = _targets.length;\n    uint256[] memory totalSupplies = new uint256[](length);\n\n    TwabLib.AccountDetails memory details = totalSupplyTwab.details;\n\n    for(uint256 i = 0; i < length; i++) {\n      totalSupplies[i] = TwabLib.getBalanceAt(totalSupplyTwab.twabs, details, _targets[i], uint32(block.timestamp));\n    }\n\n    return totalSupplies;\n  }\n  \n  /// @inheritdoc ITicket\n  function delegateOf(address _user) external view override returns (address) {\n    return delegates[_user];\n  }\n\n  /// @inheritdoc IERC20\n  function balanceOf(address _user) public view override returns (uint256) {\n    return _balanceOf(_user);\n  }\n\n  /// @inheritdoc IERC20\n  function totalSupply() public view virtual override returns (uint256) {\n    return totalSupplyTwab.details.balance;\n  }\n\n  /// @inheritdoc ITicket\n  function delegate(address to) external virtual override {\n    uint224 balance = uint224(_balanceOf(msg.sender));\n    address currentDelegate = delegates[msg.sender];\n\n    if (currentDelegate != address(0)) {\n      _decreaseUserTwab(msg.sender, currentDelegate, balance);\n    } else {\n      _decreaseUserTwab(msg.sender, msg.sender, balance);\n    }\n\n    if (to != address(0)) {\n      _increaseUserTwab(msg.sender, to, balance);\n    } else {\n      _increaseUserTwab(msg.sender, msg.sender, balance);\n    }\n\n    delegates[msg.sender] = to;\n\n    emit Delegated(msg.sender, to);\n  }\n\n  /* ============ Internal Functions ============ */\n\n  /// @notice Returns the ERC20 ticket token balance of a ticket holder.\n  /// @return uint256 `_user` ticket token balance.\n  function _balanceOf(address _user) internal view returns (uint256) {\n    return balances[_user];\n  }\n\n  function _getAverageBalancesBetween(\n    TwabLib.Account storage _account,\n    uint32[] calldata _startTimes,\n    uint32[] calldata _endTimes\n  ) internal view returns (uint256[] memory) {\n    require(_startTimes.length == _endTimes.length, \"Ticket/start-end-times-length-match\");\n    TwabLib.AccountDetails storage accountDetails = _account.details;\n    uint256[] memory averageBalances = new uint256[](_startTimes.length);\n\n    for (uint i = 0; i < _startTimes.length; i++) {\n      averageBalances[i] = TwabLib.getAverageBalanceBetween(_account.twabs, accountDetails, _startTimes[i], _endTimes[i], uint32(block.timestamp));\n    }\n\n    return averageBalances;\n  }\n\n  /// @notice Overridding of the `_transfer` function of the base ERC20 contract.\n  /// @dev `_sender` cannot be the zero address.\n  /// @dev `_recipient` cannot be the zero address.\n  /// @dev `_sender` must have a balance of at least `_amount`.\n  /// @param _sender Address of the `_sender`that will send `_amount` of tokens.\n  /// @param _recipient Address of the `_recipient`that will receive `_amount` of tokens.\n  /// @param _amount Amount of tokens to be transferred from `_sender` to `_recipient`.\n  function _transfer(\n    address _sender,\n    address _recipient,\n    uint256 _amount\n  ) internal override virtual {\n    require(_sender != address(0), \"ERC20: transfer from the zero address\");\n    require(_recipient != address(0), \"ERC20: transfer to the zero address\");\n\n    uint224 amount = uint224(_amount);\n\n    _beforeTokenTransfer(_sender, _recipient, _amount);\n\n    if (_sender != _recipient) {\n\n      // standard balance update\n      uint256 senderBalance = balances[_sender];\n      require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n      unchecked {\n          balances[_sender] = senderBalance - amount;\n      }\n      balances[_recipient] += amount;\n\n      // history update\n      address senderDelegate = delegates[_sender];\n      if (senderDelegate != address(0)) {\n        _decreaseUserTwab(_sender, senderDelegate, _amount);\n      } else {\n        _decreaseUserTwab(_sender, _sender, _amount);\n      }\n\n      // history update\n      address recipientDelegate = delegates[_recipient];\n      if (recipientDelegate != address(0)) {\n        _increaseUserTwab(_recipient, recipientDelegate, amount);\n      } else {\n        _increaseUserTwab(_recipient, _recipient, amount);\n      }\n\n    }\n\n    emit Transfer(_sender, _recipient, _amount);\n\n    _afterTokenTransfer(_sender, _recipient, _amount);\n  }\n\n  /// @notice Overridding of the `_mint` function of the base ERC20 contract.\n  /// @dev `_to` cannot be the zero address.\n  /// @param _to Address that will be minted `_amount` of tokens.\n  /// @param _amount Amount of tokens to be minted to `_to`.\n  function _mint(address _to, uint256 _amount) internal virtual override {\n    require(_to != address(0), \"ERC20: mint to the zero address\");\n\n    uint224 amount = _amount.toUint224();\n\n    _beforeTokenTransfer(address(0), _to, _amount);\n\n    balances[_to] += amount;\n\n    (\n      TwabLib.AccountDetails memory accountDetails,\n      ObservationLib.Observation memory totalSupply,\n      bool tsIsNew\n    ) = TwabLib.increaseBalance(totalSupplyTwab, amount, TWAB_TIME_TO_LIVE, uint32(block.timestamp));\n    totalSupplyTwab.details = accountDetails;\n    if (tsIsNew) {\n      emit NewTotalSupplyTwab(totalSupply);\n    }\n\n    address toDelegate = delegates[_to];\n    if (toDelegate != address(0)) {\n      _increaseUserTwab(_to, toDelegate, amount);\n    } else {\n      _increaseUserTwab(_to, _to, amount);\n    }\n\n    emit Transfer(address(0), _to, _amount);\n\n    _afterTokenTransfer(address(0), _to, _amount);\n  }\n\n  /// @notice Overridding of the `_burn` function of the base ERC20 contract.\n  /// @dev `_from` cannot be the zero address.\n  /// @dev `_from` must have at least `_amount` of tokens.\n  /// @param _from Address that will be burned `_amount` of tokens.\n  /// @param _amount Amount of tokens to be burnt from `_from`.\n  function _burn(address _from, uint256 _amount) internal virtual override {\n    require(_from != address(0), \"ERC20: burn from the zero address\");\n\n    uint224 amount = _amount.toUint224();\n\n    _beforeTokenTransfer(_from, address(0), _amount);\n\n    (\n      TwabLib.AccountDetails memory accountDetails,\n      ObservationLib.Observation memory tsTwab,\n      bool tsIsNew\n    ) = TwabLib.decreaseBalance(\n      totalSupplyTwab,\n      amount,\n      \"ERC20: burn amount exceeds balance\",\n      TWAB_TIME_TO_LIVE,\n      uint32(block.timestamp)\n    );\n    totalSupplyTwab.details = accountDetails;\n    if (tsIsNew) {\n      emit NewTotalSupplyTwab(tsTwab);\n    }\n\n    uint256 accountBalance = balances[_from];\n    require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n    unchecked {\n        balances[_from] = accountBalance - amount;\n    }\n\n    address fromDelegate = delegates[_from];\n    if (fromDelegate != address(0)) {\n      _decreaseUserTwab(_from, fromDelegate, amount);\n    } else {\n      _decreaseUserTwab(_from, _from, amount);\n    }\n\n    emit Transfer(_from, address(0), _amount);\n\n    _afterTokenTransfer(_from, address(0), _amount);\n  }\n\n  function _increaseUserTwab(\n    address _holder,\n    address _user,\n    uint256 _amount\n  ) internal {\n    TwabLib.Account storage _account = userTwabs[_user];\n    (\n      TwabLib.AccountDetails memory accountDetails,\n      ObservationLib.Observation memory twab,\n      bool isNew\n    ) = TwabLib.increaseBalance(_account, _amount, TWAB_TIME_TO_LIVE, uint32(block.timestamp));\n    _account.details = accountDetails;\n    if (isNew) {\n      emit NewUserTwab(_holder, _user, twab);\n    }\n  }\n\n  function _decreaseUserTwab(\n    address _holder,\n    address _user,\n    uint256 _amount\n  ) internal {\n    TwabLib.Account storage _account = userTwabs[_user];\n    (\n      TwabLib.AccountDetails memory accountDetails,\n      ObservationLib.Observation memory twab,\n      bool isNew\n    ) = TwabLib.decreaseBalance(_account, _amount, \"ERC20: burn amount exceeds balance\", TWAB_TIME_TO_LIVE, uint32(block.timestamp));\n    _account.details = accountDetails;\n    if (isNew) {\n      emit NewUserTwab(_holder, _user, twab);\n    }\n  }\n}\n"
    },
    "@pooltogether/v4-core/contracts/libraries/TwabLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0import \"./ExtendedSafeCast.sol\";\npragma solidity 0.8.6;\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"./ExtendedSafeCast.sol\";\nimport \"./OverflowSafeComparator.sol\";\nimport \"./RingBuffer.sol\";\nimport \"./ObservationLib.sol\";\n\n/// @title Time-Weighted Average Balance Library\n/// @notice This library allows you to efficiently track a user's historic balance.  You can get a\n/// @author PoolTogether Inc.\nlibrary TwabLib {\n   using OverflowSafeComparator for uint32;\n    using ExtendedSafeCast for uint256;\n\n  /// @notice The maximum number of twab entries\n  uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\n\n  /// @notice A struct containing details for an Account\n  /// @param balance The current balance for an Account\n  /// @param nextTwabIndex The next available index to store a new twab\n  /// @param cardinality The number of recorded twabs (plus one!)\n  struct AccountDetails {\n    uint208 balance;\n    uint24 nextTwabIndex;\n    uint24 cardinality;\n  }\n\n  /// @notice Combines account details with their twab history\n  /// @param details The account details\n  /// @param twabs The history of twabs for this account\n  struct Account {\n    AccountDetails details;\n    ObservationLib.Observation[MAX_CARDINALITY] twabs;\n  }\n\n  /// @notice Increases an account's balance and records a new twab.\n  /// @param _account The account whose balance will be increased\n  /// @param _amount The amount to increase the balance by\n  /// @param _ttl The time to live for twabs\n  /// @param _currentTime The current time\n  /// @return accountDetails The new AccountDetails\n  /// @return twab The user's latest TWAB\n  /// @return isNew Whether the TWAB is new\n  function increaseBalance(\n    Account storage _account,\n    uint256 _amount,\n    uint32 _ttl,\n    uint32 _currentTime\n  ) internal returns (AccountDetails memory accountDetails, ObservationLib.Observation memory twab, bool isNew) {\n    uint24 nextTwabIndex;\n    uint24 cardinality;\n    AccountDetails memory _accountDetails = _account.details;\n    (accountDetails, twab, isNew) = _nextTwabWithExpiry(_account.twabs, _accountDetails, _ttl, _currentTime);\n    accountDetails.balance = (_accountDetails.balance + _amount).toUint208();\n  }\n\n  /// @notice Decreases an account's balance and records a new twab.\n  /// @param _account The account whose balance will be decreased\n  /// @param _amount The amount to decrease the balance by\n  /// @param _revertMessage The revert message in the event of insufficient balance\n  /// @return accountDetails The new AccountDetails\n  /// @return twab The user's latest TWAB\n  /// @return isNew Whether the TWAB is new\n  function decreaseBalance(\n    Account storage _account,\n    uint256 _amount,\n    string memory _revertMessage,\n    uint32 _ttl,\n    uint32 _currentTime\n  ) internal returns (AccountDetails memory accountDetails, ObservationLib.Observation memory twab, bool isNew) {\n    uint24 nextTwabIndex;\n    uint24 cardinality;\n    AccountDetails memory _accountDetails = _account.details;\n    require(_accountDetails.balance >= _amount, _revertMessage);\n    (accountDetails, twab, isNew) = _nextTwabWithExpiry(_account.twabs, _accountDetails, _ttl, _currentTime);\n    accountDetails.balance = (_accountDetails.balance - _amount).toUint208();\n  }\n\n  /// @notice Calculates the average balance held by a user for a given time frame.\n  /// @param _startTime The start time of the time frame.\n  /// @param _endTime The end time of the time frame.\n  /// @return The average balance that the user held during the time frame.\n  function getAverageBalanceBetween(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _startTime,\n    uint32 _endTime,\n    uint32 _currentTime\n  ) internal view returns (uint256) {\n    uint32 endTime = _endTime > _currentTime ? _currentTime : _endTime;\n    return _getAverageBalanceBetween(_twabs, _accountDetails, _startTime, endTime, _currentTime);\n  }\n\n  function oldestTwab(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails\n  ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\n    index = _accountDetails.nextTwabIndex;\n    twab = _twabs[_accountDetails.nextTwabIndex];\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\n    if (twab.timestamp == 0) {\n      index = 0;\n      twab = _twabs[0];\n    }\n  }\n\n  function newestTwab(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails\n  ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\n    index = uint24(RingBuffer.mostRecentIndex(_accountDetails.nextTwabIndex, _accountDetails.cardinality));\n    twab = _twabs[index];\n  }\n\n  /// @notice Retrieves amount at `_target` timestamp\n  /// @param _twabs List of TWABs to search through.\n  /// @param _accountDetails Accounts details\n  /// @param _target Timestamp at which the reserved TWAB should be for.\n  /// @return uint256 TWAB amount at `_target`.\n  function getBalanceAt(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _target,\n    uint32 _currentTime\n  ) internal view returns (uint256) {\n    uint32 target = _target > _currentTime ? _currentTime : _target;\n    return _getBalanceAt(_twabs, _accountDetails, target, _currentTime);\n  }\n\n  /// @notice Calculates the average balance held by a user for a given time frame.\n  /// @param _startTime The start time of the time frame.\n  /// @param _endTime The end time of the time frame.\n  /// @return The average balance that the user held during the time frame.\n  function _getAverageBalanceBetween(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _startTime,\n    uint32 _endTime,\n    uint32 _currentTime\n  ) private view returns (uint256) {\n    (uint24 oldestTwabIndex, ObservationLib.Observation memory oldestTwab) = oldestTwab(_twabs, _accountDetails);\n    (uint24 newestTwabIndex, ObservationLib.Observation memory newestTwab) = newestTwab(_twabs, _accountDetails);\n\n    ObservationLib.Observation memory startTwab = _calculateTwab(\n      _twabs, _accountDetails, newestTwab, oldestTwab, newestTwabIndex, oldestTwabIndex, _startTime, _currentTime\n    );\n\n    ObservationLib.Observation memory endTwab = _calculateTwab(\n      _twabs, _accountDetails, newestTwab, oldestTwab, newestTwabIndex, oldestTwabIndex, _endTime, _currentTime\n    );\n\n    // Difference in amount / time\n    return (endTwab.amount - startTwab.amount) / (endTwab.timestamp - startTwab.timestamp);\n  }\n\n  /// @notice Retrieves amount at `_target` timestamp\n  /// @param _twabs List of TWABs to search through.\n  /// @param _accountDetails Accounts details\n  /// @param _target Timestamp at which the reserved TWAB should be for.\n  /// @return uint256 TWAB amount at `_target`.\n  function _getBalanceAt(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _target,\n    uint32 _currentTime\n  ) private view returns (uint256) {\n    uint24 newestTwabIndex;\n    ObservationLib.Observation memory afterOrAt;\n    ObservationLib.Observation memory beforeOrAt;\n    (newestTwabIndex, beforeOrAt) = newestTwab(_twabs, _accountDetails);\n\n    // If `_target` is chronologically after the newest TWAB, we can simply return the current balance\n    if (beforeOrAt.timestamp.lte(_target, _currentTime)) {\n      return _accountDetails.balance;\n    }\n\n    uint24 oldestTwabIndex;\n    // Now, set before to the oldest TWAB\n    (oldestTwabIndex, beforeOrAt) = oldestTwab(_twabs, _accountDetails);\n\n    // If `_target` is chronologically before the oldest TWAB, we can early return\n    if (_target.lt(beforeOrAt.timestamp, _currentTime)) {\n      return 0;\n    }\n\n    // Otherwise, we perform the `binarySearch`\n    (beforeOrAt, afterOrAt) = ObservationLib.binarySearch(\n      _twabs,\n      newestTwabIndex,\n      oldestTwabIndex,\n      _target,\n      _accountDetails.cardinality,\n      _currentTime\n    );\n\n    // Difference in amount / time\n    uint224 differenceInAmount = afterOrAt.amount - beforeOrAt.amount;\n    uint32 differenceInTime = afterOrAt.timestamp - beforeOrAt.timestamp;\n\n    return differenceInAmount / differenceInTime;\n  }\n\n  /// @notice Calculates the TWAB for a given timestamp.  It interpolates as necessary.\n  /// @param _twabs The TWAB history\n  function _calculateTwab(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    ObservationLib.Observation memory _newestTwab,\n    ObservationLib.Observation memory _oldestTwab,\n    uint24 _newestTwabIndex,\n    uint24 _oldestTwabIndex,\n    uint32 targetTimestamp,\n    uint32 _time\n  ) private view returns (ObservationLib.Observation memory) {\n    // If `targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\n    if (_newestTwab.timestamp.lt(targetTimestamp, _time)) {\n      return ObservationLib.Observation({\n        amount: _newestTwab.amount + _accountDetails.balance*(targetTimestamp - _newestTwab.timestamp),\n        timestamp: targetTimestamp\n      });\n    }\n\n    if (_newestTwab.timestamp == targetTimestamp) {\n      return _newestTwab;\n    }\n\n    if (_oldestTwab.timestamp == targetTimestamp) {\n      return _oldestTwab;\n    }\n\n    // If `targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\n    if (targetTimestamp.lt(_oldestTwab.timestamp, _time)) {\n      return ObservationLib.Observation({\n        amount: 0,\n        timestamp: targetTimestamp\n      });\n    }\n\n    // Otherwise, both timestamps must be surrounded by twabs.\n    (\n      ObservationLib.Observation memory beforeOrAtStart,\n      ObservationLib.Observation memory afterOrAtStart\n    ) = ObservationLib.binarySearch(_twabs, _newestTwabIndex, _oldestTwabIndex, targetTimestamp, _accountDetails.cardinality, _time);\n\n    uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) / (afterOrAtStart.timestamp - beforeOrAtStart.timestamp);\n    uint224 amount = beforeOrAtStart.amount + heldBalance * (targetTimestamp - beforeOrAtStart.timestamp);\n\n    return ObservationLib.Observation({\n      amount: amount,\n      timestamp: targetTimestamp\n    });\n  }\n\n  /// @notice Records a new TWAB.\n  /// @param _currentBalance Current `amount`.\n  /// @return New TWAB that was recorded.\n  function _nextTwab(\n    ObservationLib.Observation memory _currentTwab,\n    uint256 _currentBalance,\n    uint32 _time\n  ) private pure returns (ObservationLib.Observation memory) {\n    // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\n    return ObservationLib.Observation({\n      amount: (uint256(_currentTwab.amount) + (_currentBalance * (_time.checkedSub(_currentTwab.timestamp, _time)))).toUint208(),\n      timestamp: _time\n    });\n  }\n\n  function _calculateNextWithExpiry(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _ttl,\n    uint32 _time\n  ) private view returns (AccountDetails memory) {\n    uint24 cardinality = _accountDetails.cardinality > 0 ? _accountDetails.cardinality : 1;\n/*\n    TTL: 100\n    Example 1:\n      next twab timestamp: 100\n      existing twab timestamps:\n      0: 10\n      1: 90\n      we should not eliminate 0 or else the history will be 10 seconds long\n    Example 2:\n      next twab timestamp: 105\n      existing twab timestamps\n      0: 1\n      1: 5\n      We can eliminate 0, because the history will be 100 seconds long\n    Q: when do we eliminate the oldest twab?\n    A: when current time - second oldest twab >= time to live\n    */\n\n    ObservationLib.Observation memory secondOldestTwab;\n    // if there are two or more records (cardinality is always one greater than # of records)\n    if (cardinality > 2) {\n      // get the second oldest twab\n      (uint24 oldestTwabIndex,) = oldestTwab(_twabs, _accountDetails);\n      uint24 secondOldestTwabIndex = uint24(RingBuffer.nextIndex(oldestTwabIndex, cardinality));\n      secondOldestTwab = _twabs[secondOldestTwabIndex];\n    }\n\n    uint24 nextCardinality = cardinality;\n    if (secondOldestTwab.timestamp == 0 || _time.checkedSub(secondOldestTwab.timestamp, _time) < _ttl) {\n      nextCardinality = cardinality < MAX_CARDINALITY ? cardinality + 1 : MAX_CARDINALITY;\n    }\n\n    uint24 nextAvailableTwabIndex = uint24(RingBuffer.nextIndex(_accountDetails.nextTwabIndex, nextCardinality));\n\n    return AccountDetails({\n      balance: _accountDetails.balance,\n      nextTwabIndex: nextAvailableTwabIndex,\n      cardinality: nextCardinality\n    });\n  }\n\n  /// @notice Sets a new TWAB Observation at the next available index and returns the new account details.\n  /// @param _twabs The twabs array to insert into\n  /// @param _accountDetails The current account details\n  /// @param _ttl The time to live for twabs\n  /// @param _time The current time\n  /// @return accountDetails The new account details\n  /// @return twab The newest twab (may or may not be brand-new)\n  /// @return isNew Whether the newest twab was created by this call\n  function _nextTwabWithExpiry(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _ttl,\n    uint32 _time\n  ) private returns (AccountDetails memory accountDetails, ObservationLib.Observation memory twab, bool isNew) {\n    (, ObservationLib.Observation memory newestTwab) = newestTwab(_twabs, _accountDetails);\n    require(_time >= newestTwab.timestamp, \"TwabLib/twab-time-monotonic\");\n\n    // if we're in the same block, return\n    if (newestTwab.timestamp == _time) {\n      return (_accountDetails, newestTwab, false);\n    }\n\n    AccountDetails memory nextAccountDetails = _calculateNextWithExpiry(_twabs, _accountDetails, _ttl, _time);\n\n    ObservationLib.Observation memory newTwab = _nextTwab(\n      newestTwab,\n      _accountDetails.balance,\n      _time\n    );\n\n    _twabs[_accountDetails.nextTwabIndex] = newTwab;\n\n    return (nextAccountDetails, newTwab, true);\n  }\n}"
    },
    "@pooltogether/v4-core/contracts/interfaces/ITicket.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"../libraries/TwabLib.sol\";\ninterface ITicket {\n\n  /**  \n    * @notice A struct containing details for an Account\n    * @param balance The current balance for an Account\n    * @param nextTwabIndex The next available index to store a new twab\n    * @param cardinality The number of recorded twabs (plus one!)\n  */\n  struct AccountDetails {\n    uint224 balance;\n    uint16 nextTwabIndex;\n    uint16 cardinality;\n  }\n\n  /**  \n    * @notice Combines account details with their twab history\n    * @param details The account details\n    * @param twabs The history of twabs for this account\n  */\n  struct Account {\n    AccountDetails details;\n    ObservationLib.Observation[65535] twabs;\n  }\n\n  event Delegated(\n    address indexed user,\n    address indexed delegate\n  );\n\n  /** \n    * @notice Emitted when ticket is initialized.\n    * @param name Ticket name (eg: PoolTogether Dai Ticket (Compound)).\n    * @param symbol Ticket symbol (eg: PcDAI).\n    * @param decimals Ticket decimals.\n    * @param controller Token controller address.\n  */\n  event TicketInitialized(\n    string name,\n    string symbol,\n    uint8 decimals,\n    address controller\n  );\n\n  /** \n    * @notice Emitted when a new TWAB has been recorded.\n    * @param ticketHolder The Ticket holder address.\n    * @param user The recipient of the ticket power (may be the same as the ticketHolder)\n    * @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\n  */\n  event NewUserTwab(\n    address indexed ticketHolder,\n    address indexed user,\n    ObservationLib.Observation newTwab\n  );\n\n  /** \n    * @notice Emitted when a new total supply TWAB has been recorded.\n    * @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\n  */\n  event NewTotalSupplyTwab(\n    ObservationLib.Observation newTotalSupplyTwab\n  );\n\n   /** \n    * @notice ADD DOCS\n    * @param user Address\n  */\n  function delegateOf(address user) external view returns (address);\n\n  /**\n    * @notice Delegate time-weighted average balances to an alternative address.\n    * @dev    Transfers (including mints) trigger the storage of a TWAB in delegatee(s) account, instead of the\n              targetted sender and/or recipient address(s).\n    * @dev    \"to\" reset the delegatee use zero address (0x000.000) \n    * @param  to Receipient of delegated TWAB\n   */\n  function delegate(address to) external virtual;\n  \n  /** \n    * @notice Gets a users twab context.  This is a struct with their balance, next twab index, and cardinality.\n    * @param user The user for whom to fetch the TWAB context\n    * @return The TWAB context, which includes { balance, nextTwabIndex, cardinality }\n  */\n  function getAccountDetails(address user) external view returns (TwabLib.AccountDetails memory);\n  \n  /** \n    * @notice Gets the TWAB at a specific index for a user.\n    * @param user The user for whom to fetch the TWAB\n    * @param index The index of the TWAB to fetch\n    * @return The TWAB, which includes the twab amount and the timestamp.\n  */\n  function getTwab(address user, uint16 index) external view returns (ObservationLib.Observation memory);\n\n  /** \n    * @notice Retrieves `_user` TWAB balance.\n    * @param user Address of the user whose TWAB is being fetched.\n    * @param timestamp Timestamp at which the reserved TWAB should be for.\n  */\n  function getBalanceAt(address user, uint256 timestamp) external view returns(uint256);\n\n  /** \n    * @notice Retrieves `_user` TWAB balances.\n    * @param user Address of the user whose TWABs are being fetched.\n    * @param timestamps Timestamps at which the reserved TWABs should be for.\n    * @return uint256[] `_user` TWAB balances.\n  */\n  function getBalancesAt(address user, uint32[] calldata timestamps) external view returns(uint256[] memory);\n\n  /** \n    * @notice Calculates the average balance held by a user for a given time frame.\n    * @param user The user whose balance is checked\n    * @param startTime The start time of the time frame.\n    * @param endTime The end time of the time frame.\n    * @return The average balance that the user held during the time frame.\n  */\n  function getAverageBalanceBetween(address user, uint256 startTime, uint256 endTime) external view returns (uint256);\n\n  /** \n    * @notice Calculates the average balance held by a user for a given time frame.\n    * @param user The user whose balance is checked\n    * @param startTimes The start time of the time frame.\n    * @param endTimes The end time of the time frame.\n    * @return The average balance that the user held during the time frame.\n  */\n  function getAverageBalancesBetween(address user, uint32[] calldata startTimes, uint32[] calldata endTimes) external view returns (uint256[] memory);\n\n  /** \n    * @notice Calculates the average total supply balance for a set of a given time frame.\n    * @param timestamp Timestamp\n    * @return The\n  */\n  function getTotalSupplyAt(uint32 timestamp) external view returns(uint256);\n\n   /** \n    * @notice Calculates the average total supply balance for a set of a given time frame.\n    * @param timestamps Timestamp\n    * @return The\n  */\n  function getTotalSuppliesAt(uint32[] calldata timestamps) external view returns(uint256[] memory);\n\n  /** \n    * @notice Calculates the average total supply balance for a set of given time frames.\n    * @param startTimes Array of start times\n    * @param endTimes Array of end times\n    * @return The average total supplies held during the time frame.\n  */\n  function getAverageTotalSuppliesBetween(uint32[] calldata startTimes, uint32[] calldata endTimes) external view returns(uint256[] memory);\n\n}\n"
    },
    "@pooltogether/v4-core/contracts/ControlledToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./interfaces/IControlledToken.sol\";\n\n/**\n  * @title  PoolTogether V4 Controlled ERC20 Token\n  * @author PoolTogether Inc Team\n  * @notice  ERC20 Tokens with a controller for minting & burning\n*/\ncontract ControlledToken is ERC20Permit, IControlledToken {\n\n  /// @notice Interface to the contract responsible for controlling mint/burn\n  address public override controller;\n\n  /// @notice ERC20 controlled token decimals.\n  uint8 private immutable _decimals;\n\n  /// @notice Deploy the Controlled Token with Token Details and the Controller\n  /// @param _name The name of the Token\n  /// @param _symbol The symbol for the Token\n  /// @param decimals_ The number of decimals for the Token\n  /// @param _controller Address of the Controller contract for minting & burning\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    uint8 decimals_,\n    address _controller\n  )\n    ERC20Permit(\"PoolTogether ControlledToken\")\n    ERC20(_name, _symbol)\n  {\n    require(address(_controller) != address(0), \"ControlledToken/controller-not-zero-address\");\n    controller = _controller;\n\n    require(decimals_ > 0, \"ControlledToken/decimals-gt-zero\");\n    _decimals = decimals_;\n\n    emit Deployed(\n      _name,\n      _symbol,\n      decimals_,\n      _controller\n    );\n  }\n\n  /// @notice Allows the controller to mint tokens for a user account\n  /// @dev May be overridden to provide more granular control over minting\n  /// @param _user Address of the receiver of the minted tokens\n  /// @param _amount Amount of tokens to mint\n  function controllerMint(address _user, uint256 _amount) external virtual override onlyController {\n    _mint(_user, _amount);\n  }\n\n  /// @notice Allows the controller to burn tokens from a user account\n  /// @dev May be overridden to provide more granular control over burning\n  /// @param _user Address of the holder account to burn tokens from\n  /// @param _amount Amount of tokens to burn\n  function controllerBurn(address _user, uint256 _amount) external virtual override onlyController {\n    _burn(_user, _amount);\n  }\n\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\n  /// @dev May be overridden to provide more granular control over operator-burning\n  /// @param _operator Address of the operator performing the burn action via the controller contract\n  /// @param _user Address of the holder account to burn tokens from\n  /// @param _amount Amount of tokens to burn\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external virtual override onlyController {\n    if (_operator != _user) {\n      uint256 decreasedAllowance = allowance(_user, _operator) - _amount;\n      _approve(_user, _operator, decreasedAllowance);\n    }\n    _burn(_user, _amount);\n  }\n\n  /// @notice Returns the ERC20 controlled token decimals.\n  /// @dev This value should be equal to the decimals of the token used to deposit into the pool.\n  /// @return uint8 decimals.\n  function decimals() public view virtual override returns (uint8) {\n    return _decimals;\n  }\n\n  /// @dev Function modifier to ensure that the caller is the controller contract\n  modifier onlyController {\n    require(msg.sender == address(controller), \"ControlledToken/only-controller\");\n    _;\n  }\n}\n"
    },
    "@pooltogether/v4-core/contracts/libraries/ExtendedSafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.6;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary ExtendedSafeCast {\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@pooltogether/v4-core/contracts/interfaces/IControlledToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title Controlled ERC20 Token\n/// @notice ERC20 Tokens with a controller for minting & burning\ninterface IControlledToken is IERC20 {\n\n  /// @dev Emitted when an instance is initialized\n  event Deployed(\n    string name,\n    string symbol,\n    uint8 decimals,\n    address controller\n  );\n\n  /// @notice Interface to the contract responsible for controlling mint/burn\n  function controller() external view returns (address);\n\n  /// @notice Allows the controller to mint tokens for a user account\n  /// @dev May be overridden to provide more granular control over minting\n  /// @param user Address of the receiver of the minted tokens\n  /// @param amount Amount of tokens to mint\n  function controllerMint(address user, uint256 amount) external;\n\n  /// @notice Allows the controller to burn tokens from a user account\n  /// @dev May be overridden to provide more granular control over burning\n  /// @param user Address of the holder account to burn tokens from\n  /// @param amount Amount of tokens to burn\n  function controllerBurn(address user, uint256 amount) external;\n\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\n  /// @dev May be overridden to provide more granular control over operator-burning\n  /// @param operator Address of the operator performing the burn action via the controller contract\n  /// @param user Address of the holder account to burn tokens from\n  /// @param amount Amount of tokens to burn\n  function controllerBurnFrom(address operator, address user, uint256 amount) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@pooltogether/v4-periphery/contracts/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@pooltogether/v4-core/contracts/interfaces/IControlledToken.sol\";\n\ninterface IStrategy {\n\n  /**\n    * @notice Emit when a strategy captures award amount from PrizePool.\n    * @param totalPrizeCaptured  Total prize captured from the PrizePool\n  */\n  event Distributed(\n    uint256 totalPrizeCaptured\n  );\n\n  /**\n    * @notice Emit when an individual prize split is awarded.\n    * @param user          User address being awarded\n    * @param prizeAwarded  Awarded prize amount\n    * @param token         Token address\n  */\n  event PrizeSplitAwarded(\n    address indexed user,\n    uint256 prizeAwarded,\n    IControlledToken indexed token\n  );\n  \n  /**\n    * @notice Capture the award balance and distribute to prize splits.\n    * @dev    Permissionless function to initialize distribution of interst\n    * @return Prize captured from PrizePool\n  */\n  function distribute() external returns (uint256);\n}\n"
    },
    "@pooltogether/v4-periphery/contracts/interfaces/IPrizeFlush.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"./IReserve.sol\";\nimport \"./IStrategy.sol\";\n\ninterface IPrizeFlush {\n  // Events\n  event Flushed(address indexed recipient, uint256 amount);\n  event DestinationSet(address destination);\n  event StrategySet(IStrategy strategy);\n  event ReserveSet(IReserve reserve);\n\n  /// @notice Read global destination variable.\n  function getDestination() external view returns (address);\n  \n  /// @notice Read global reserve variable.\n  function getReserve() external view returns (IReserve);\n  \n  /// @notice Read global strategy variable.\n  function getStrategy() external view returns (IStrategy);\n\n  /// @notice Set global destination variable.\n  function setDestination(address _destination) external returns (address);\n  \n  /// @notice Set global reserve variable.\n  function setReserve(IReserve _reserve) external returns (IReserve);\n  \n  /// @notice Set global strategy variable.\n  function setStrategy(IStrategy _strategy) external returns (IStrategy);\n  \n  /**\n    * @notice Migrate interest from PrizePool to DrawPrizes in single transaction.\n    * @dev    Captures interest, checkpoint data and transfers tokens to final destination.\n   */\n  function flush() external returns (bool);\n}\n"
    },
    "@pooltogether/v4-periphery/contracts/interfaces/IReserve.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IReserve {\n  event Checkpoint(uint256 reserveAccumulated, uint256 withdrawAccumulated);\n  event Withdrawn(address indexed recipient, uint256 amount);\n\n  /**\n    * @notice Create observation checkpoint in ring bufferr.\n    * @dev    Calculates total desposited tokens since last checkpoint and creates new accumulator checkpoint.\n  */\n  function checkpoint() external;\n  \n  /**\n    * @notice Read global token value.\n    * @return IERC20\n  */\n  function getToken() external view returns (IERC20);\n\n  /**\n    * @notice Calculate token accumulation beween timestamp range.\n    * @dev    Search the ring buffer for two checkpoint observations and diffs accumulator amount. \n    * @param startTimestamp Account address \n    * @param endTimestamp   Transfer amount\n    */\n  function getReserveAccumulatedBetween(uint32 startTimestamp, uint32 endTimestamp) external returns (uint224);\n\n  /**\n    * @notice Transfer Reserve token balance to recipient address.\n    * @dev    Creates checkpoint before token transfer. Increments withdrawAccumulator with amount.\n    * @param recipient Account address \n    * @param amount    Transfer amount\n  */\n  function withdrawTo(address recipient, uint256 amount) external;\n}\n"
    },
    "@pooltogether/v4-periphery/contracts/PrizeFlush.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IPrizeFlush.sol\";\n\n/**\n  * @title  PoolTogether V4 PrizeFlush\n  * @author PoolTogether Inc Team\n  * @notice The PrizeFlush is a helper library to facilate interest distribution. \n*/\ncontract PrizeFlush is IPrizeFlush, Manageable {\n\n  /// @notice Static destination for captured interest\n  address   internal destination;\n  \n  /// @notice IReserve address \n  IReserve  internal reserve;\n  \n  /// @notice IStrategy address \n  IStrategy internal strategy;\n\n  /* ============ Events ============ */\n\n  /**\n    * @notice Emit when contract deployed.\n    * @param reserve IReserve\n    * @param strategy IStrategy\n    * \n   */\n  event Deployed(address destination, IReserve reserve, IStrategy strategy);\n\n  /* ============ Constructor ============ */    \n\n  /**\n    * @notice Set owner, reserve and strategy when deployed.\n    * @param _owner       address\n    * @param _destination address\n    * @param _strategy    IStrategy\n    * @param _reserve     IReserve\n    * \n   */\n  constructor(address _owner, address _destination, IStrategy _strategy, IReserve _reserve) Ownable(_owner) {\n    destination  = _destination;\n    strategy     = _strategy;\n    reserve      = _reserve;\n\n    // Emit Deploy State \n    emit Deployed(_destination, _reserve, _strategy);\n  }\n\n  /* ============ External Functions ============ */\n\n  /// @inheritdoc IPrizeFlush\n  function getDestination() external view override returns (address) {\n    return destination;\n  }\n  \n  /// @inheritdoc IPrizeFlush\n  function getReserve() external view override returns (IReserve) {\n    return reserve;\n  }\n\n  /// @inheritdoc IPrizeFlush\n  function getStrategy() external view override returns (IStrategy) {\n    return strategy;\n  }\n\n  /// @inheritdoc IPrizeFlush\n  function setDestination(address _destination) external onlyOwner override returns (address) {\n    require(_destination != address(0), \"Flush/destination-not-zero-address\");\n    destination = _destination;\n    emit DestinationSet(_destination);\n    return _destination;\n  }\n  \n  /// @inheritdoc IPrizeFlush\n  function setReserve(IReserve _reserve) external override onlyOwner returns (IReserve) {\n    require(address(_reserve) != address(0), \"Flush/reserve-not-zero-address\");\n    reserve = _reserve;\n    emit ReserveSet(_reserve);\n    return reserve;\n  }\n\n  /// @inheritdoc IPrizeFlush\n  function setStrategy(IStrategy _strategy) external override onlyOwner returns (IStrategy) {\n    require(address(_strategy) != address(0), \"Flush/strategy-not-zero-address\");\n    strategy = _strategy;\n    emit StrategySet(_strategy);\n    return _strategy;\n  }\n  \n  /// @inheritdoc IPrizeFlush\n  function flush() external override onlyManagerOrOwner returns (bool) {\n    strategy.distribute();\n\n    // After captured interest transferred to Strategy.PrizeSplits[]: [Reserve, Other]\n    // transfer the Reserve balance directly to the DrawPrizes (destination) address.\n    IReserve _reserve = reserve;\n    IERC20 _token     = _reserve.getToken();\n    uint256 _amount   = _token.balanceOf(address(_reserve));\n\n    if(_amount > 0) {\n      // Create checkpoint and transfers new total balance to DrawPrizes\n      _reserve.withdrawTo(destination, _token.balanceOf(address(_reserve)));\n\n      emit Flushed(destination, _amount);\n    }\n  }\n\n}"
    },
    "@pooltogether/v4-timelocks/contracts/L2TimelockTrigger.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\n\nimport \"@pooltogether/v4-core/contracts/interfaces/IPrizeDistributionHistory.sol\";\nimport \"./interfaces/IDrawCalculatorTimelock.sol\";\n\n/**\n  * @title  PoolTogether V4 L2TimelockTrigger\n  * @author PoolTogether Inc Team\n  * @notice L2TimelockTrigger(s) acts as an intermediary between multiple V4 smart contracts.\n            The L2TimelockTrigger is responsible for pushing Draws to a DrawHistory and routing\n            claim requests from a ClaimableDraw to a DrawCalculator. The primary objective is\n            to  include a \"cooldown\" period for all new Draws. Allowing the correction of a\n            malicously set Draw in the unfortunate event an Owner is compromised.\n*/\ncontract L2TimelockTrigger is Manageable {\n\n  /* ============ Events ============ */\n\n  /// @notice Emitted when the contract is deployed.\n  event Deployed(\n    IPrizeDistributionHistory indexed prizeDistributionHistory,\n    IDrawCalculatorTimelock indexed timelock\n  );\n\n  /* ============ Global Variables ============ */\n\n  /// @notice Internal PrizeDistributionHistory reference.\n  IPrizeDistributionHistory public immutable prizeDistributionHistory;\n\n  /// @notice Timelock struct reference.\n  IDrawCalculatorTimelock public timelock;\n\n  /* ============ Deploy ============ */\n\n  /**\n    * @notice Initialize L2TimelockTrigger smart contract.\n    * @param _owner                       Address of the L2TimelockTrigger owner.\n    * @param _prizeDistributionHistory PrizeDistributionHistory address\n    * @param _timelock           Elapsed seconds before new Draw is available\n  */\n  constructor (\n    address _owner,\n    IPrizeDistributionHistory _prizeDistributionHistory,\n    IDrawCalculatorTimelock _timelock\n  ) Ownable(_owner) {\n    prizeDistributionHistory = _prizeDistributionHistory;\n    timelock = _timelock;\n\n    emit Deployed(_prizeDistributionHistory, _timelock);\n  }\n\n  /**\n    * @notice Push Draw onto draws ring buffer history.\n    * @dev    Restricts new draws by forcing a push timelock.\n    * @param _drawId draw id\n    * @param _drawSetting Draw settings\n  */\n  function pushDrawSettings(uint32 _drawId, DrawLib.PrizeDistribution memory _drawSetting) external onlyManagerOrOwner {\n    timelock.lock(_drawId);\n    prizeDistributionHistory.pushDrawSettings(_drawId, _drawSetting);\n  }\n\n}\n"
    },
    "@pooltogether/v4-core/contracts/interfaces/IPrizeDistributionHistory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"../libraries/DrawLib.sol\";\n\ninterface IPrizeDistributionHistory {\n\n  /**\n    * @notice Emit when a new draw has been created.\n    * @param drawId       Draw id\n    * @param timestamp    Epoch timestamp when the draw is created.\n    * @param winningRandomNumber Randomly generated number used to calculate draw winning numbers\n  */\n  event DrawSet (\n    uint32 drawId,\n    uint32 timestamp,\n    uint256 winningRandomNumber\n  );\n\n  /**\n    * @notice Emitted when the DrawParams are set/updated\n    * @param drawId       Draw id\n    * @param drawSettings DrawLib.PrizeDistribution\n  */\n  event DrawSettingsSet(uint32 indexed drawId, DrawLib.PrizeDistribution drawSettings);\n\n\n  /**\n    * @notice Read newest DrawSettings from the draws ring buffer.\n    * @dev    Uses the nextDrawIndex to calculate the most recently added Draw.\n    * @return drawSettings DrawLib.PrizeDistribution\n    * @return drawId Draw.drawId\n  */\n  function getNewestDrawSettings() external view returns (DrawLib.PrizeDistribution memory drawSettings, uint32 drawId);\n\n  /**\n    * @notice Read oldest DrawSettings from the draws ring buffer.\n    * @dev    Finds the oldest Draw by buffer.nextIndex and buffer.lastDrawId\n    * @return drawSettings DrawLib.PrizeDistribution\n    * @return drawId Draw.drawId\n  */\n  function getOldestDrawSettings() external view returns (DrawLib.PrizeDistribution memory drawSettings, uint32 drawId);\n\n  /**\n    * @notice Gets array of PrizeDistributionHistorySettings for Draw.drawID(s)\n    * @param drawIds Draw.drawId\n   */\n  function getDrawSettings(uint32[] calldata drawIds) external view returns (DrawLib.PrizeDistribution[] memory);\n\n  /**\n    * @notice Gets the PrizeDistributionHistorySettings for a Draw.drawID\n    * @param drawId Draw.drawId\n   */\n  function getDrawSetting(uint32 drawId) external view returns (DrawLib.PrizeDistribution memory);\n\n  /**\n    * @notice Sets PrizeDistributionHistorySettings for a Draw.drawID.\n    * @dev    Only callable by the owner or manager\n    * @param drawId Draw.drawId\n    * @param draw   PrizeDistributionHistorySettings struct\n   */\n  function pushDrawSettings(uint32 drawId, DrawLib.PrizeDistribution calldata draw) external returns(bool);\n\n  /**\n    * @notice Set existing Draw in draws ring buffer with new parameters.\n    * @dev    Updating a Draw should be used sparingly and only in the event an incorrect Draw parameter has been stored.\n    * @return Draw.drawId\n  */\n  function setDrawSetting(uint32 drawId, DrawLib.PrizeDistribution calldata draw) external returns(uint32); // maybe return drawIndex\n  \n}"
    },
    "@pooltogether/v4-timelocks/contracts/interfaces/IDrawCalculatorTimelock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/v4-core/contracts/interfaces/IDrawCalculator.sol\";\n\ninterface IDrawCalculatorTimelock {\n\n  struct Timelock {\n    uint128 timestamp;\n    uint32 drawId;\n  }\n\n  event Deployed(\n    IDrawCalculator indexed drawCalculator,\n    uint32 timelockDuration\n  );\n\n  event TimelockSet(Timelock timelock);\n  event TimelockDurationSet(uint32 duration);\n\n  function calculate(address user, uint32[] calldata drawIds, bytes calldata data) external view returns (uint256[] memory);\n  function lock(uint32 drawId) external returns (bool);\n  function getDrawCalculator() external view returns (IDrawCalculator);\n  function getTimelock() external view returns (Timelock memory);\n  function getTimelockDuration() external view returns (uint32);\n  function setTimelock(Timelock memory _timelock) external;\n  function setTimelockDuration(uint32 _timelockDuration) external;\n  function hasElapsed() external view returns (bool);\n}\n"
    },
    "@pooltogether/v4-core/contracts/interfaces/IDrawCalculator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"./ITicket.sol\";\nimport \"./IDrawHistory.sol\";\nimport \"../PrizeDistributionHistory.sol\";\nimport \"../DrawPrizes.sol\";\nimport \"../libraries/DrawLib.sol\";\n\n/**\n  * @title  PoolTogether V4 DrawCalculator\n  * @author PoolTogether Inc Team\n  * @notice The DrawCalculator interface.\n*/\ninterface IDrawCalculator {\n\n  struct PickPrize {\n    bool won;\n    uint8 distributionIndex;\n  }\n\n  ///@notice Emitted when the contract is initialized\n  event Deployed(ITicket indexed ticket);\n\n  ///@notice Emitted when the claimableDraw is set/updated\n  event DrawPrizesSet(DrawPrizes indexed claimableDraw);\n\n  /**\n    * @notice Calulates the prize amount for a user for Multiple Draws. Typically called by a DrawPrizes.\n    * @param user User for which to calcualte prize amount\n    * @param drawIds draw array for which to calculate prize amounts for\n    * @param data The encoded pick indices for all Draws. Expected to be just indices of winning claims. Populated values must be less than totalUserPicks.\n    * @return List of awardable prizes ordered by linked drawId\n   */\n  function calculate(address user, uint32[] calldata drawIds, bytes calldata data) external view returns (uint256[] memory);\n\n  /**\n    * @notice Read global DrawHistory variable.\n    * @return IDrawHistory\n  */\n  function getDrawHistory() external view returns (IDrawHistory);\n\n  /**\n    * @notice Read global DrawHistory variable.\n    * @return IDrawHistory\n  */\n  function getPrizeDistributionHistory() external view returns (PrizeDistributionHistory);\n  /**\n    * @notice Set global DrawHistory reference.\n    * @param _drawHistory DrawHistory address\n    * @return New DrawHistory address\n  */\n  function setDrawHistory(IDrawHistory _drawHistory) external returns (IDrawHistory);\n  \n  /**\n    * @notice Returns a users balances expressed as a fraction of the total supply over time.\n    * @param _user The users address\n    * @param _drawIds The drawsId to consider\n    * @return Array of balances\n  */\n  function getNormalizedBalancesForDrawIds(address _user, uint32[] calldata _drawIds) external view returns (uint256[] memory);\n\n  /**\n    * @notice Returns a users balances expressed as a fraction of the total supply over time.\n    * @param _user The user for which to calculate the distribution indices\n    * @param _pickIndices The users pick indices for a draw\n    * @param _drawId The draw for which to calculate the distribution indices\n    * @return List of distributions for Draw.drawId\n  */\n  function checkPrizeDistributionIndicesForDrawId(address _user, uint256[] calldata _pickIndices, uint32 _drawId) external view returns(PickPrize[] memory);\n}\n"
    },
    "@pooltogether/v4-core/contracts/PrizeDistributionHistory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\nimport \"./libraries/DrawLib.sol\";\nimport \"./libraries/DrawRingBufferLib.sol\";\nimport \"./interfaces/IPrizeDistributionHistory.sol\";\n\n/**\n  * @title  PoolTogether V4 PrizeDistributionHistory\n  * @author PoolTogether Inc Team\n  * @notice The PrizeDistributionHistory stores individual DrawSettings for each Draw.drawId.\n            DrawSettings parameters like cardinality, bitRange, distributions, number of picks\n            and prize. The settings determine the specific distribution model for each individual \n            draw. Storage of the DrawSetting(s) is handled by ring buffer with a max cardinality\n            of 256 or roughly 5 years of history with a weekly draw cadence.\n*/\ncontract PrizeDistributionHistory is IPrizeDistributionHistory, Manageable {\n  using DrawRingBufferLib for DrawRingBufferLib.Buffer;\n\n  uint256 internal constant MAX_CARDINALITY = 256;\n\n  uint256 internal constant DISTRIUBTION_CEILING = 1e9;\n  event Deployed(uint8 cardinality);\n\n  /// @notice DrawSettings ring buffer history.\n  DrawLib.PrizeDistribution[MAX_CARDINALITY] internal _drawSettingsRingBuffer;\n\n  /// @notice Ring buffer data (nextIndex, lastDrawId, cardinality)\n  DrawRingBufferLib.Buffer internal drawSettingsRingBufferData;\n\n  /* ============ Constructor ============ */\n\n  /**\n    * @notice Constructor for PrizeDistributionHistory\n    * @param _owner Address of the PrizeDistributionHistory owner\n    * @param _cardinality Cardinality of the `drawSettingsRingBufferData`\n   */\n  constructor(\n    address _owner,\n    uint8 _cardinality\n  ) Ownable(_owner) {\n    drawSettingsRingBufferData.cardinality = _cardinality;\n    emit Deployed(_cardinality);\n  }\n\n  /* ============ External Functions ============ */\n\n  /// @inheritdoc IPrizeDistributionHistory\n  function getDrawSetting(uint32 _drawId) external override view returns(DrawLib.PrizeDistribution memory) {\n    return _getDrawSettings(drawSettingsRingBufferData, _drawId);\n  }\n\n  /// @inheritdoc IPrizeDistributionHistory\n  function getDrawSettings(uint32[] calldata _drawIds) external override view returns(DrawLib.PrizeDistribution[] memory) {\n    DrawRingBufferLib.Buffer memory buffer = drawSettingsRingBufferData;\n    DrawLib.PrizeDistribution[] memory _drawSettings = new DrawLib.PrizeDistribution[](_drawIds.length);\n    for (uint256 i = 0; i < _drawIds.length; i++) {\n      _drawSettings[i] = _getDrawSettings(buffer, _drawIds[i]);\n    }\n    return _drawSettings;\n  }\n\n  /// @inheritdoc IPrizeDistributionHistory\n  function getNewestDrawSettings() external override view returns (DrawLib.PrizeDistribution memory drawSettings, uint32 drawId) {\n    DrawRingBufferLib.Buffer memory buffer = drawSettingsRingBufferData;\n    return (_drawSettingsRingBuffer[buffer.getIndex(buffer.lastDrawId)], buffer.lastDrawId);\n  }\n\n  /// @inheritdoc IPrizeDistributionHistory\n  function getOldestDrawSettings() external override view returns (DrawLib.PrizeDistribution memory drawSettings, uint32 drawId) {\n    DrawRingBufferLib.Buffer memory buffer = drawSettingsRingBufferData;\n    drawSettings = _drawSettingsRingBuffer[buffer.nextIndex];\n    \n    // IF the next DrawSettings.bitRangeSize == 0 the ring buffer HAS NOT looped around.\n    // The DrawSettings at index 0 IS by defaut the oldest drawSettings.\n    if (buffer.lastDrawId == 0) {\n      drawId = 0; // return 0 to indicate no drawSettings ring buffer history\n    } else if (drawSettings.bitRangeSize == 0) {\n      drawSettings = _drawSettingsRingBuffer[0];\n      drawId = (buffer.lastDrawId + 1) - buffer.nextIndex; // 2 + 1 - 2 = 1 | [1,2,0]\n    } else {\n      // Calculates the Draw.drawID using the ring buffer length and SEQUENTIAL id(s)\n      // Sequential \"guaranteedness\" is handled in DrawRingBufferLibLib.push()\n      drawId = (buffer.lastDrawId + 1) - buffer.cardinality; // 4 + 1 - 3 = 2 | [4,2,3]\n    }\n  }\n\n  /// @inheritdoc IPrizeDistributionHistory\n  function pushDrawSettings(uint32 _drawId, DrawLib.PrizeDistribution calldata _drawSettings) external override onlyManagerOrOwner returns (bool) {\n    return _pushDrawSettings(_drawId, _drawSettings);\n  }\n\n  /// @inheritdoc IPrizeDistributionHistory\n  function setDrawSetting(uint32 _drawId, DrawLib.PrizeDistribution calldata _drawSettings) external override onlyOwner returns (uint32) {\n    DrawRingBufferLib.Buffer memory buffer = drawSettingsRingBufferData;\n    uint32 index = buffer.getIndex(_drawId);\n    _drawSettingsRingBuffer[index] = _drawSettings;\n    emit DrawSettingsSet(_drawId, _drawSettings);\n    return _drawId;\n  }\n\n\n  /* ============ Internal Functions ============ */\n  \n  /**\n    * @notice Gets the PrizeDistributionHistorySettings for a Draw.drawID\n    * @param _drawSettingsRingBufferData DrawRingBufferLib.Buffer\n    * @param drawId Draw.drawId\n   */\n  function _getDrawSettings(\n    DrawRingBufferLib.Buffer memory _drawSettingsRingBufferData,\n    uint32 drawId\n  ) internal view returns (DrawLib.PrizeDistribution memory) {\n    return _drawSettingsRingBuffer[_drawSettingsRingBufferData.getIndex(drawId)];\n  }\n\n  /**\n    * @notice Set newest PrizeDistributionHistorySettings in ring buffer storage.\n    * @param _drawId       Draw.drawId\n    * @param _drawSettings PrizeDistributionHistorySettings struct\n   */\n  function _pushDrawSettings(uint32 _drawId, DrawLib.PrizeDistribution calldata _drawSettings) internal returns (bool) {\n    uint256 distributionsLength = _drawSettings.distributions.length;\n\n    require(_drawId > 0, \"DrawCalc/draw-id-gt-0\");\n    require(_drawSettings.matchCardinality >= distributionsLength, \"DrawCalc/matchCardinality-gte-distributions\");\n    require(_drawSettings.bitRangeSize <= 256 / _drawSettings.matchCardinality, \"DrawCalc/bitRangeSize-too-large\");\n    require(_drawSettings.bitRangeSize > 0, \"DrawCalc/bitRangeSize-gt-0\");\n    require(_drawSettings.maxPicksPerUser > 0, \"DrawCalc/maxPicksPerUser-gt-0\");\n\n    // ensure that the distributions are not gt 100%\n    uint256 sumTotalDistributions = 0;\n    for(uint256 index = 0; index < distributionsLength; index++){\n      sumTotalDistributions += _drawSettings.distributions[index];\n    }\n\n    // Each distribution amount stored as uint32 - summed can't exceed 1e9\n    require(sumTotalDistributions <= DISTRIUBTION_CEILING, \"DrawCalc/distributions-gt-100%\");\n\n    DrawRingBufferLib.Buffer memory _drawSettingsRingBufferData = drawSettingsRingBufferData;\n    _drawSettingsRingBuffer[_drawSettingsRingBufferData.nextIndex] = _drawSettings;\n    drawSettingsRingBufferData = drawSettingsRingBufferData.push(_drawId);\n\n    emit DrawSettingsSet(_drawId, _drawSettings);\n\n    return true;\n  }\n}\n"
    },
    "@pooltogether/v4-core/contracts/DrawPrizes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\";\nimport \"./interfaces/IDrawPrizes.sol\";\nimport \"./interfaces/IDrawCalculator.sol\";\nimport \"./libraries/DrawLib.sol\";\n\n/**\n  * @title  PoolTogether V4 DrawPrizes\n  * @author PoolTogether Inc Team\n  * @notice The DrawPrizes distributes claimable draw prizes to users via a pull model.\n            Managing the regularly captured PrizePool interest, a DrawPrizes is the\n            entrypoint for users to submit Draw.drawId(s) and winning pick indices.\n            Communicating with a DrawCalculator, the DrawPrizes will determine the maximum\n            prize payout and transfer those tokens directly to a user address. \n*/\ncontract DrawPrizes is IDrawPrizes, Ownable {\n  using SafeERC20 for IERC20;\n\n  /* ============ Global Variables ============ */\n\n  /// @notice The Draw Calculator to use\n  IDrawCalculator internal drawCalculator;\n  \n  /// @notice Token address\n  IERC20          internal immutable token;\n\n  /// @notice Maps users => drawId => paid out balance\n  mapping(address => mapping(uint256 => uint256)) internal userDrawPayouts;\n\n  /* ============ Initialize ============ */\n\n  /**\n    * @notice Initialize DrawPrizes smart contract.\n    * @param _owner           Address of the DrawPrizes owner\n    * @param _token           Token address\n    * @param _drawCalculator DrawCalculator address\n  */\n  constructor(\n    address _owner,\n    IERC20 _token,\n    IDrawCalculator _drawCalculator\n  ) Ownable(_owner) {\n    _setDrawCalculator(_drawCalculator);\n    require(address(_token) != address(0), \"DrawPrizes/token-not-zero-address\" );\n    token = _token;\n    emit TokenSet(_token);\n  }\n\n  /* ============ External Functions ============ */\n\n  /// @inheritdoc IDrawPrizes\n  function claim(address _user, uint32[] calldata _drawIds, bytes calldata _data) external override returns (uint256) {\n    uint256 totalPayout;\n    uint256[] memory drawPayouts = drawCalculator.calculate(_user, _drawIds, _data);  // CALL\n    for (uint256 payoutIndex = 0; payoutIndex < drawPayouts.length; payoutIndex++) {\n      uint32 drawId = _drawIds[payoutIndex];\n      uint256 payout = drawPayouts[payoutIndex];\n      uint256 oldPayout = _getDrawPayoutBalanceOf(_user, drawId);\n      uint256 payoutDiff = 0;\n      if (payout > oldPayout) {\n        payoutDiff = payout - oldPayout;\n        _setDrawPayoutBalanceOf(_user, drawId, payout);\n      }\n      // helpfully short-circuit, in case the user screwed something up.\n      require(payoutDiff > 0, \"DrawPrizes/zero-payout\");\n      totalPayout += payoutDiff;\n      emit ClaimedDraw(_user, drawId, payoutDiff);\n    }\n\n    _awardPayout(_user, totalPayout);\n\n    return totalPayout;\n  }\n\n  /// @inheritdoc IDrawPrizes\n  function getDrawCalculator() external override view returns (IDrawCalculator) {\n    return drawCalculator;\n  }\n\n  /// @inheritdoc IDrawPrizes\n  function getDrawPayoutBalanceOf(address user, uint32 drawId) external override view returns (uint256) {\n    return _getDrawPayoutBalanceOf(user, drawId);\n  }\n\n  /// @inheritdoc IDrawPrizes\n  function getToken() external override view returns (IERC20) {\n    return token;\n  }\n\n  /// @inheritdoc IDrawPrizes\n  function setDrawCalculator(IDrawCalculator _newCalculator) external override onlyOwner returns (IDrawCalculator) {\n    _setDrawCalculator(_newCalculator);\n    return _newCalculator;\n  }\n\n  \n  /* ============ Internal Functions ============ */\n\n  function _getDrawPayoutBalanceOf(address _user, uint32 _drawId) internal view returns (uint256) {\n    return userDrawPayouts[_user][_drawId];\n  }\n\n  function _setDrawPayoutBalanceOf(address _user, uint32 _drawId, uint256 _payout) internal {\n    userDrawPayouts[_user][_drawId] = _payout;\n  }\n\n  /**\n    * @notice Sets DrawCalculator reference for individual draw id.\n    * @param _newCalculator  DrawCalculator address\n  */\n  function _setDrawCalculator(IDrawCalculator _newCalculator) internal {\n    require(address(_newCalculator) != address(0), \"DrawPrizes/calc-not-zero\");\n    drawCalculator = _newCalculator;\n    emit DrawCalculatorSet(_newCalculator);\n  }\n\n  /**\n    * @notice Transfer claimed draw(s) total payout to user.\n    * @param _to      User address\n    * @param _amount  Transfer amount\n  */\n  function _awardPayout(address _to, uint256 _amount) internal {\n    token.safeTransfer(_to, _amount);\n  }\n\n  /**\n    * @notice Transfer ERC20 tokens out of this contract.\n    * @dev    This function is only callable by the owner.\n    * @param _erc20Token ERC20 token to transfer.\n    * @param _to Recipient of the tokens.\n    * @param _amount Amount of tokens to transfer.\n    * @return true if operation is successful.\n  */\n  function withdrawERC20(IERC20 _erc20Token, address _to, uint256 _amount) external override onlyOwner returns (bool) {\n    require(_to != address(0), \"DrawPrizes/recipient-not-zero-address\");\n    require(address(_erc20Token) != address(0), \"DrawPrizes/ERC20-not-zero-address\");\n    _erc20Token.safeTransfer(_to, _amount);\n    emit ERC20Withdrawn(_erc20Token, _to, _amount);\n    return true;\n  }\n}\n"
    },
    "@pooltogether/v4-core/contracts/interfaces/IDrawPrizes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IDrawHistory.sol\";\nimport \"./IDrawCalculator.sol\";\nimport \"../libraries/DrawLib.sol\";\n\ninterface IDrawPrizes {\n\n  /**\n    * @notice Emitted when a user has claimed N draw payouts.\n    * @param user        User address receiving draw claim payouts\n    * @param drawId      Draw id that was paid out\n    * @param payout Payout for draw\n  */\n  event ClaimedDraw (\n    address indexed user,\n    uint32 indexed drawId,\n    uint256 payout\n  );\n\n  /**\n    * @notice Emitted when a DrawCalculator is set\n    * @param calculator DrawCalculator address\n  */\n  event DrawCalculatorSet (\n    IDrawCalculator indexed calculator\n  );\n\n  /**\n    * @notice Emitted when a global Ticket variable is set.\n    * @param token Token address\n  */\n  event TokenSet (\n    IERC20 indexed token\n  );\n\n  /**\n    * @notice Emitted when ERC20 tokens are withdrawn from the claimable draw.\n    * @param token ERC20 token transferred.\n    * @param to Address that received funds.\n    * @param amount Amount of tokens transferred.\n  */\n  event ERC20Withdrawn(\n    IERC20 indexed token,\n    address indexed to,\n    uint256 amount\n  );\n\n  /**\n    * @notice Claim a user token payouts via a collection of draw ids and pick indices.\n    * @param user    Address of user to claim awards for. Does NOT need to be msg.sender\n    * @param drawIds Draw IDs from global DrawHistory reference\n    * @param data    The data to pass to the draw calculator\n    * @return Actual claim payout.  If the user has previously claimed a draw, this may be less.\n  */\n  function claim(address user, uint32[] calldata drawIds, bytes calldata data) external returns (uint256);\n  \n  /**\n    * @notice Read DrawCalculator\n    * @return IDrawCalculator\n  */\n  function getDrawCalculator() external view returns (IDrawCalculator);\n  \n  /**\n    * @notice Get the amount that a user has already been paid out for a draw\n    * @param user   User address\n    * @param drawId Draw ID\n  */\n  function getDrawPayoutBalanceOf(address user, uint32 drawId) external view returns (uint256);\n\n  /**\n    * @notice Read global Ticket variable.\n    * @return IERC20\n  */\n  function getToken() external view returns (IERC20);\n  /**\n    * @notice Sets DrawCalculator reference for individual draw id.\n    * @param _newCalculator  DrawCalculator address\n    * @return New DrawCalculator address\n  */\n  function setDrawCalculator(IDrawCalculator _newCalculator) external returns(IDrawCalculator);\n  function withdrawERC20(IERC20 _erc20Token, address _to, uint256 _amount) external returns (bool);\n}\n"
    },
    "@pooltogether/v4-timelocks/contracts/L1TimelockTrigger.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\n\nimport \"@pooltogether/v4-core/contracts/interfaces/IPrizeDistributionHistory.sol\";\nimport \"@pooltogether/v4-core/contracts/interfaces/IDrawHistory.sol\";\n\nimport \"./interfaces/IDrawCalculatorTimelock.sol\";\n\n/**\n  * @title  PoolTogether V4 L1TimelockTrigger\n  * @author PoolTogether Inc Team\n  * @notice L1TimelockTrigger(s) acts as an intermediary between multiple V4 smart contracts.\n            The L1TimelockTrigger is responsible for pushing Draws to a DrawHistory and routing\n            claim requests from a ClaimableDraw to a DrawCalculator. The primary objective is\n            to  include a \"cooldown\" period for all new Draws. Allowing the correction of a\n            malicously set Draw in the unfortunate event an Owner is compromised.\n*/\ncontract L1TimelockTrigger is Manageable {\n\n  /// @notice Emitted when the contract is deployed.\n  event Deployed(\n    IDrawHistory indexed drawHistory,\n    IPrizeDistributionHistory indexed prizeDistributionHistory,\n    IDrawCalculatorTimelock indexed timelock\n  );\n\n  /* ============ Global Variables ============ */\n  /// @notice\n  IDrawHistory public immutable drawHistory;\n\n  /// @notice Internal PrizeDistributionHistory reference.\n  IPrizeDistributionHistory public immutable prizeDistributionHistory;\n\n  /// @notice Timelock struct reference.\n  IDrawCalculatorTimelock public timelock;\n\n  /* ============ Deploy ============ */\n\n  /**\n    * @notice Initialize L1TimelockTrigger smart contract.\n    * @param _owner                       Address of the L1TimelockTrigger owner.\n    * @param _prizeDistributionHistory PrizeDistributionHistory address\n    * @param _drawHistory                DrawHistory address\n    * @param _timelock           Elapsed seconds before new Draw is available\n  */\n  constructor (\n    address _owner,\n    IDrawHistory _drawHistory,\n    IPrizeDistributionHistory _prizeDistributionHistory,\n    IDrawCalculatorTimelock _timelock\n  ) Ownable(_owner) {\n    drawHistory = _drawHistory;\n    prizeDistributionHistory = _prizeDistributionHistory;\n    timelock = _timelock;\n\n    emit Deployed(_drawHistory, _prizeDistributionHistory, _timelock);\n  }\n\n  /**\n    * @notice Push Draw onto draws ring buffer history.\n    * @dev    Restricts new draws by forcing a push timelock.\n    * @param _draw DrawLib.Draw\n    * @param _drawSetting DrawLib.PrizeDistribution\n  */\n  function push(DrawLib.Draw memory _draw, DrawLib.PrizeDistribution memory _drawSetting) external onlyManagerOrOwner {\n    timelock.lock(_draw.drawId);\n    drawHistory.pushDraw(_draw);\n    prizeDistributionHistory.pushDrawSettings(_draw.drawId, _drawSetting);\n  }\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/PrizeDistributionHistory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-core/contracts/PrizeDistributionHistory.sol';\n"
    },
    "@pooltogether/v4-core/contracts/DrawCalculator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\";\nimport \"./DrawPrizes.sol\";\nimport \"./PrizeDistributionHistory.sol\";\nimport \"./interfaces/IDrawCalculator.sol\";\nimport \"./interfaces/ITicket.sol\";\nimport \"./interfaces/IDrawHistory.sol\";\nimport \"./libraries/DrawLib.sol\";\nimport \"./libraries/DrawRingBufferLib.sol\";\n\n/**\n  * @title  PoolTogether V4 DrawCalculator\n  * @author PoolTogether Inc Team\n  * @notice The DrawCalculator calculates a user's prize by matching a winning random number against\n            their picks. A users picks are generated deterministically based on their address and balance\n            of tickets held. Prize payouts are divided into multiple tiers: grand prize, second place, etc... \n            A user with a higher average weighted balance (during each draw perid) will be given a large number of\n            pickIndices to choose from, and thus a higher chance to match the randomly generated winning numbers. \n            The DrawCalculator will retrieve data, like average weighted balance and cost of picks per draw \n            from the linked Ticket and PrizeDistributionHistory contracts when payouts are being calculated. \n*/\ncontract DrawCalculator is IDrawCalculator, Ownable {\n\n  /**\n    * @notice Emitted when a global DrawHistory variable is set.\n    * @param drawHistory DrawHistory address\n  */\n  event DrawHistorySet (\n    IDrawHistory indexed drawHistory\n  );\n\n\n  /// @notice DrawHistory address\n  IDrawHistory internal drawHistory;\n\n  /// @notice Ticket associated with DrawCalculator\n  ITicket immutable ticket;\n\n  /// @notice The stored history of draw settings.  Stored as ring buffer.\n  PrizeDistributionHistory immutable prizeDistributionHistory;\n\n  /* ============ Constructor ============ */\n\n  /// @notice Constructor for DrawCalculator\n  /// @param _owner Address of the DrawCalculator owner\n  /// @param _ticket Ticket associated with this DrawCalculator\n  /// @param _drawHistory The address of the draw history to push draws to\n  /// @param _prizeDistributionHistory PrizeDistributionHistory address\n  constructor(\n    address _owner,\n    ITicket _ticket,\n    IDrawHistory _drawHistory,\n    PrizeDistributionHistory _prizeDistributionHistory\n  ) Ownable(_owner) {\n    require(address(_ticket) != address(0), \"DrawCalc/ticket-not-zero\");\n    require(address(_prizeDistributionHistory) != address(0), \"DrawCalc/tdsh-not-zero\");\n    _setDrawHistory(_drawHistory);\n    prizeDistributionHistory = _prizeDistributionHistory;\n    ticket = _ticket;\n\n    emit Deployed(_ticket);\n  }\n\n  /* ============ External Functions ============ */\n\n  /// @inheritdoc IDrawCalculator\n  function calculate(\n    address _user, uint32[] calldata _drawIds, \n    bytes calldata _pickIndicesForDraws\n  ) external override view returns (uint256[] memory) {\n    uint256[][] memory pickIndices = abi.decode(_pickIndicesForDraws, (uint256 [][]));\n    require(pickIndices.length == _drawIds.length, \"DrawCalc/invalid-pick-indices-length\");\n\n\n    // READ list of DrawLib.Draw using the Draw.drawId[] \n    DrawLib.Draw[] memory draws = drawHistory.getDraws(_drawIds);\n\n    // READ list of DrawLib.PrizeDistribution using the Draw.drawId[]\n    DrawLib.PrizeDistribution[] memory _drawSettings = prizeDistributionHistory.getDrawSettings(_drawIds);\n\n    /**\n      * Maximum number of picks per user is calculated by getting a Ticket time-weighted average balance (TWAB).\n      * Using a Draw.timestamp + DrawSetings.endOffsetTimestamp a list of balances held (on average) by a User\n      * can be read via the Ticket contract. The TWAB determines a maximum number of picks per user, per draw.\n     */\n    uint256[] memory userBalances = _getNormalizedBalancesAt(_user, draws, _drawSettings);\n\n    /**\n      * The userRandomNumber is currently generated via hashing the user address.\n      * In future iterations of DrawCalculator the userRandomNumber could be set using\n      * input params supplied by the user. Giving users \"agency\" to select what\n      * random numbers are generated each beacon complete draw period. \n     */\n    bytes32 _userRandomNumber = keccak256(abi.encodePacked(_user));\n\n    /**\n      * The time weighted average balances peraining to each Draw period is supplied will be returned a User balances list.\n      * A list of prize amounts that can be claimed by supplied user address is returned.\n     */\n    return _calculatePrizesAwardable(userBalances, _userRandomNumber, draws, pickIndices, _drawSettings);\n  }\n\n  /// @inheritdoc IDrawCalculator\n  function getDrawHistory() external view override returns (IDrawHistory) {\n    return drawHistory;\n  }\n\n  /// @inheritdoc IDrawCalculator\n  function getPrizeDistributionHistory() external view override returns (PrizeDistributionHistory) {\n    return prizeDistributionHistory;\n  }\n\n  /// @inheritdoc IDrawCalculator\n  function setDrawHistory(IDrawHistory _drawHistory) external override onlyOwner returns (IDrawHistory) {\n    _setDrawHistory(_drawHistory);\n    return _drawHistory;\n  }\n\n  /// @inheritdoc IDrawCalculator\n  function getNormalizedBalancesForDrawIds(address _user, uint32[] calldata _drawIds) external view override returns (uint256[] memory) {\n    DrawLib.Draw[] memory _draws = drawHistory.getDraws(_drawIds);\n    DrawLib.PrizeDistribution[] memory _drawSettings = prizeDistributionHistory.getDrawSettings(_drawIds);\n    return _getNormalizedBalancesAt(_user, _draws, _drawSettings);\n  }\n\n  /// @inheritdoc IDrawCalculator\n  function checkPrizeDistributionIndicesForDrawId(\n    address _user, \n    uint256[] calldata _pickIndices, \n    uint32 _drawId\n  ) external view override returns(PickPrize[] memory) {\n    uint32[] memory drawIds = new uint32[](1);\n    drawIds[0] = _drawId;\n\n    DrawLib.Draw[] memory _draws = drawHistory.getDraws(drawIds);\n    DrawLib.PrizeDistribution[] memory _drawSettings = prizeDistributionHistory.getDrawSettings(drawIds);\n    \n    uint256[] memory userBalances = _getNormalizedBalancesAt(_user, _draws, _drawSettings);\n    uint256 totalUserPicks = _calculateNumberOfUserPicks(_drawSettings[0], userBalances[0]);\n\n    uint256[] memory masks =  _createBitMasks(_drawSettings[0]);\n    PickPrize[] memory pickPrizes = new PickPrize[](_pickIndices.length);\n    \n    bytes32 _userRandomNumber = keccak256(abi.encodePacked(_user)); // hash the users address\n\n    for(uint256 i = 0; i < _pickIndices.length; i++){\n      uint256 randomNumberThisPick = uint256(keccak256(abi.encode(_userRandomNumber, _pickIndices[i])));\n      require(_pickIndices[i] < totalUserPicks, \"DrawCalc/insufficient-user-picks\");\n\n      uint256 distributionIndex =  _calculateDistributionIndex(randomNumberThisPick, _draws[0].winningRandomNumber, masks);\n\n      pickPrizes[i] = PickPrize({\n        won: distributionIndex < _drawSettings[0].distributions.length && _drawSettings[0].distributions[distributionIndex] > 0, \n        distributionIndex: uint8(distributionIndex)\n      });\n    }\n\n    return pickPrizes;\n  }\n\n  /* ============ Internal Functions ============ */\n\n  /**\n    * @notice Set global DrawHistory reference.\n    * @param _drawHistory DrawHistory address\n  */\n  function _setDrawHistory(IDrawHistory _drawHistory) internal {\n    require(address(_drawHistory) != address(0), \"DrawCalc/dh-not-zero\");\n    drawHistory = _drawHistory;\n    emit DrawHistorySet(_drawHistory);\n  }\n\n  /**\n    * @notice Calculates the prizes awardable foe each Draw passed. Called by calculate()\n    * @param _normalizedUserBalances User TWABs for each draw settings perods\n    * @param _userRandomNumber       Random number of the user to consider over draws\n    * @param _draws                  Draws\n    * @param _pickIndicesForDraws    Pick indices for each Draw\n    * @param _drawSettings           DrawCalculatorSettings for each Draw\n    * @return Awardable prizes list\n  */\n  function _calculatePrizesAwardable(\n    uint256[] memory _normalizedUserBalances, \n    bytes32 _userRandomNumber,\n    DrawLib.Draw[] memory _draws, \n    uint256[][] memory _pickIndicesForDraws, \n    DrawLib.PrizeDistribution[] memory _drawSettings\n  ) internal view returns (uint256[] memory)\n   {\n    uint256[] memory prizesAwardable = new uint256[](_normalizedUserBalances.length);\n    // calculate prizes awardable for each Draw passed\n    for (uint32 drawIndex = 0; drawIndex < _draws.length; drawIndex++) {\n      uint256 totalUserPicks = _calculateNumberOfUserPicks(_drawSettings[drawIndex], _normalizedUserBalances[drawIndex]);\n      prizesAwardable[drawIndex] = _calculate(_draws[drawIndex].winningRandomNumber, totalUserPicks, _userRandomNumber, _pickIndicesForDraws[drawIndex], _drawSettings[drawIndex]);\n    }\n    return prizesAwardable;\n  }\n  /**\n    * @notice Calculates the number of picks a user gets for a Draw, considering the normalized user balance and the draw settings\n    * @dev Divided by 1e18 since the normalized user balance is stored as a base 18 number\n    * @param _drawSettings The DrawCalculatorSettings to consider\n    * @param _normalizedUserBalance The normalized user balances to consider\n  */\n  function _calculateNumberOfUserPicks(DrawLib.PrizeDistribution memory _drawSettings, uint256 _normalizedUserBalance) internal view returns (uint256) {\n    return (_normalizedUserBalance * _drawSettings.numberOfPicks) / 1 ether;\n  }\n\n  /**\n    * @notice Calculates the normalized balance of a user against the total supply for timestamps\n    * @param _user The user to consider\n    * @param _draws The draws we are looking at\n    * @param _drawSettings The draw settings to consider (needed for draw timstamp offsets)\n    * @return An array of normalized balances\n  */\n  function _getNormalizedBalancesAt(address _user, DrawLib.Draw[] memory _draws, DrawLib.PrizeDistribution[] memory _drawSettings) internal view returns (uint256[] memory) {\n    uint32[] memory _timestampsWithStartCutoffTimes = new uint32[](_draws.length);\n    uint32[] memory _timestampsWithEndCutoffTimes = new uint32[](_draws.length);\n\n    // generate timestamps with draw cutoff offsets included\n    for (uint32 i = 0; i < _draws.length; i++) {\n      unchecked {\n        _timestampsWithStartCutoffTimes[i] = uint32(_draws[i].timestamp - _drawSettings[i].startOffsetTimestamp);\n        _timestampsWithEndCutoffTimes[i] = uint32(_draws[i].timestamp - _drawSettings[i].endOffsetTimestamp);\n      }\n    }\n\n    uint256[] memory balances = ticket.getAverageBalancesBetween(_user, _timestampsWithStartCutoffTimes, _timestampsWithEndCutoffTimes);\n    uint256[] memory totalSupplies = ticket.getAverageTotalSuppliesBetween(_timestampsWithStartCutoffTimes, _timestampsWithEndCutoffTimes);\n\n    uint256[] memory normalizedBalances = new uint256[](_draws.length);\n\n    // divide balances by total supplies (normalize)\n    for (uint256 i = 0; i < _draws.length; i++) {\n      require(totalSupplies[i] > 0, \"DrawCalc/total-supply-zero\");\n      normalizedBalances[i] = balances[i] * 1 ether / totalSupplies[i];\n    }\n\n    return normalizedBalances;\n  }\n\n  /**\n    * @notice calculates the prize amount per Draw per users pick\n    * @param _winningRandomNumber The Draw's winningRandomNumber\n    * @param _totalUserPicks      The number of picks the user gets for the Draw\n    * @param _userRandomNumber    The users randomNumber for that draw\n    * @param _picks               The users picks for that draw\n    * @param _drawSettings        DrawLib.PrizeDistribution\n    * @return prize (if any) per Draw claim\n  */\n  function _calculate(uint256 _winningRandomNumber, uint256 _totalUserPicks, bytes32 _userRandomNumber, uint256[] memory _picks, DrawLib.PrizeDistribution memory _drawSettings)\n    internal view returns (uint256)\n  {\n\n    uint256[] memory prizeCounts =  new uint256[](_drawSettings.distributions.length);\n    uint256[] memory masks =  _createBitMasks(_drawSettings);\n    uint256 picksLength = _picks.length;\n\n    require(picksLength <= _drawSettings.maxPicksPerUser, \"DrawCalc/exceeds-max-user-picks\");\n\n    // for each pick find number of matching numbers and calculate prize distribution index\n    for(uint256 index  = 0; index < picksLength; index++){\n      // hash the user random number with the pick index\n      uint256 randomNumberThisPick = uint256(keccak256(abi.encode(_userRandomNumber, _picks[index])));\n      require(_picks[index] < _totalUserPicks, \"DrawCalc/insufficient-user-picks\");\n\n      uint256 distributionIndex =  _calculateDistributionIndex(randomNumberThisPick, _winningRandomNumber, masks);\n\n      if(distributionIndex < _drawSettings.distributions.length) { // there is prize for this distribution index\n        prizeCounts[distributionIndex]++;\n      }\n    }\n\n    // now calculate prizeFraction given prize counts\n    uint256 prizeFraction = 0;\n    for(uint256 prizeCountIndex = 0; prizeCountIndex < _drawSettings.distributions.length; prizeCountIndex++) {\n      if(prizeCounts[prizeCountIndex] > 0) {\n        prizeFraction += _calculatePrizeDistributionFraction(_drawSettings, prizeCountIndex) * prizeCounts[prizeCountIndex];\n      }\n    }\n    // return the absolute amount of prize awardable\n    return (prizeFraction * _drawSettings.prize) / 1e9; // div by 1e9 as prize distributions are base 1e9\n  }\n\n  /**\n    * @notice Calculates the distribution index given the random numbers and masks\n    * @param _randomNumberThisPick Users random number for this Pick\n    * @param _winningRandomNumber  The winning number for this draw\n    * @param _masks                The pre-calculate bitmasks for the drawSettings\n    * @return The position within the prize distribution array (0 = top prize, 1 = runner-up prize, etc)\n  */\n  function _calculateDistributionIndex(\n    uint256 _randomNumberThisPick, \n    uint256 _winningRandomNumber, \n    uint256[] memory _masks\n  ) internal pure returns (uint256) {\n    uint256 numberOfMatches = 0;\n    uint256 masksLength = _masks.length;\n\n    for(uint256 matchIndex = 0; matchIndex < masksLength; matchIndex++) {\n      uint256 mask = _masks[matchIndex];\n      if((_randomNumberThisPick & mask) != (_winningRandomNumber & mask)){\n        // there are no more sequential matches since this comparison is not a match\n        return masksLength - numberOfMatches;\n      }\n      // else there was a match\n      numberOfMatches++;\n    }\n    return masksLength - numberOfMatches;\n  }\n\n\n  /**\n    * @notice Create bitmasks equal to the DrawLib.PrizeDistribution.matchCardinality\n    * @param _drawSettings The DrawCalculatorSettings to use to calculate the masks\n    * @return An array of bitmasks\n  */\n  function _createBitMasks(DrawLib.PrizeDistribution memory _drawSettings)\n    internal pure returns (uint256[] memory)\n  {\n    uint256[] memory masks = new uint256[](_drawSettings.matchCardinality);\n\n    uint256 _bitRangeMaskValue = (2 ** _drawSettings.bitRangeSize) - 1; // get a decimal representation of bitRangeSize\n\n    for(uint256 maskIndex = 0; maskIndex < _drawSettings.matchCardinality; maskIndex++){\n      uint16 _matchIndexOffset = uint16(maskIndex * _drawSettings.bitRangeSize);\n      masks[maskIndex] = _bitRangeMaskValue << _matchIndexOffset;\n    }\n\n    return masks;\n  }\n\n  /**\n    * @notice Calculates the expected prize fraction per DrawCalculatorSettings and prizeDistributionIndex\n    * @param _drawSettings DrawCalculatorSettings struct for Draw\n    * @param _prizeDistributionIndex Index of the prize distribution array to calculate\n    * @return returns the fraction of the total prize (base 1e18)\n  */\n  function _calculatePrizeDistributionFraction(\n    DrawLib.PrizeDistribution memory _drawSettings, \n    uint256 _prizeDistributionIndex\n  ) internal pure returns (uint256) {\n    uint256 prizeDistribution = _drawSettings.distributions[_prizeDistributionIndex];\n    uint256 numberOfPrizesForIndex = _numberOfPrizesForIndex(_drawSettings.bitRangeSize, _prizeDistributionIndex);\n    return prizeDistribution / numberOfPrizesForIndex;\n  }\n\n\n  /**\n    * @notice Calculates the number of prizes for a given prizeDistributionIndex\n    * @param _bitRangeSize DrawCalculatorSettings struct for Draw\n    * @param _prizeDistributionIndex Index of the prize distribution array to calculate\n    * @return returns the fraction of the total prize (base 1e18)\n  */\n  function _numberOfPrizesForIndex(uint8 _bitRangeSize, uint256 _prizeDistributionIndex) internal pure returns (uint256) {\n    uint256 bitRangeDecimal = 2 ** uint256(_bitRangeSize);\n    uint256 numberOfPrizesForIndex = bitRangeDecimal ** _prizeDistributionIndex;\n\n    if(_prizeDistributionIndex > 0){\n      numberOfPrizesForIndex -= bitRangeDecimal ** (_prizeDistributionIndex - 1);\n    }\n    return numberOfPrizesForIndex;\n  }\n}\n"
    },
    "@pooltogether/v4-core/contracts/prize-pool/PrizePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@pooltogether/fixed-point/contracts/FixedPoint.sol\";\nimport \"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\";\nimport \"../external/compound/ICompLike.sol\";\nimport \"../interfaces/IPrizePool.sol\";\n\n/**\n  * @title  PoolTogether V4 PrizePool\n  * @author PoolTogether Inc Team\n  * @notice Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.\n            Users deposit and withdraw from this contract to participate in Prize Pool.\n            Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\n            Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\n*/\nabstract contract PrizePool is IPrizePool, Ownable, ReentrancyGuard, IERC721Receiver {\n  using SafeCast for uint256;\n  using SafeERC20 for IERC20;\n  using SafeERC20 for IERC721;\n  using ERC165Checker for address;\n\n  /// @notice Semver Version\n  string constant public VERSION = \"4.0.0\";\n\n  /// @notice Prize Pool ticket. Can only be set once by calling `setTicket()`.\n  IControlledToken public override ticket;\n\n  /// @notice The Prize Strategy that this Prize Pool is bound to.\n  address public prizeStrategy;\n\n  /// @notice The total amount of tickets a user can hold.\n  uint256 public balanceCap;\n\n  /// @notice The total amount of funds that the prize pool can hold.\n  uint256 public liquidityCap;\n\n  /// @notice the The awardable balance\n  uint256 internal _currentAwardBalance;\n\n  /* ============ Modifiers ============ */\n\n  /// @dev Function modifier to ensure caller is the prize-strategy\n  modifier onlyPrizeStrategy() {\n    require(msg.sender == prizeStrategy, \"PrizePool/only-prizeStrategy\");\n    _;\n  }\n\n  /// @dev Function modifier to ensure the deposit amount does not exceed the liquidity cap (if set)\n  modifier canAddLiquidity(uint256 _amount) {\n    require(_canAddLiquidity(_amount), \"PrizePool/exceeds-liquidity-cap\");\n    _;\n  }\n\n  /* ============ Constructor ============ */\n\n  /// @notice Deploy the Prize Pool\n  /// @param _owner Address of the Prize Pool owner\n  constructor (\n    address _owner\n  ) Ownable(_owner) ReentrancyGuard() {\n    _setLiquidityCap(type(uint256).max);\n  }\n\n  /* ============ External Functions ============ */\n\n  /// @inheritdoc IPrizePool\n  function token() external override view returns (address) {\n    return address(_token());\n  }\n\n  /// @inheritdoc IPrizePool\n  function balance() external override returns (uint256) {\n    return _balance();\n  }\n\n  /// @inheritdoc IPrizePool\n  function awardBalance() external override view returns (uint256) {\n    return _currentAwardBalance;\n  }\n\n  /// @inheritdoc IPrizePool\n  function canAwardExternal(address _externalToken) external override view returns (bool) {\n    return _canAwardExternal(_externalToken);\n  }\n\n  /// @inheritdoc IPrizePool\n  function isControlled(IControlledToken _controlledToken) external override view returns (bool) {\n    return _isControlled(_controlledToken);\n  }\n\n  /// @inheritdoc IPrizePool\n  function getTicket() external override view returns (IControlledToken) {\n    return ticket;\n  }\n\n  /// @inheritdoc IPrizePool\n  function captureAwardBalance() external override nonReentrant returns (uint256) {\n    uint256 ticketTotalSupply = _ticketTotalSupply();\n\n    // it's possible for the balance to be slightly less due to rounding errors in the underlying yield source\n    uint256 currentBalance = _balance();\n    uint256 totalInterest = (currentBalance > ticketTotalSupply) ? currentBalance - ticketTotalSupply : 0;\n    uint256 unaccountedPrizeBalance = (totalInterest > _currentAwardBalance) ? totalInterest - _currentAwardBalance : 0;\n\n    if (unaccountedPrizeBalance > 0) {\n      _currentAwardBalance = _currentAwardBalance + unaccountedPrizeBalance;\n\n      emit AwardCaptured(unaccountedPrizeBalance);\n    }\n\n    return _currentAwardBalance;\n  }\n\n  /// @inheritdoc IPrizePool\n  function depositTo( address _to, uint256 _amount) external override nonReentrant canAddLiquidity(_amount) {\n    address _operator = msg.sender;\n\n    require(_canDeposit(_operator, _amount), \"PrizePool/exceeds-balance-cap\");\n\n    IControlledToken _ticket = ticket;\n\n    _mint(_to, _amount, _ticket);\n\n    _token().safeTransferFrom(_operator, address(this), _amount);\n    _supply(_amount);\n\n    emit Deposited(_operator, _to, _ticket, _amount);\n  }\n\n  /// @inheritdoc IPrizePool\n  function withdrawFrom(address _from, uint256 _amount) external override nonReentrant returns (uint256) {\n    IControlledToken _ticket = ticket;\n\n    // burn the tickets\n    _ticket.controllerBurnFrom(msg.sender, _from, _amount);\n\n    // redeem the tickets\n    uint256 _redeemed = _redeem(_amount);\n\n    _token().safeTransfer(_from, _redeemed);\n\n    emit Withdrawal(msg.sender, _from, _ticket, _amount, _redeemed);\n\n    return _redeemed;\n  }\n\n  /// @inheritdoc IPrizePool\n  function award(\n    address _to,\n    uint256 _amount\n  ) external override onlyPrizeStrategy {\n    if (_amount == 0) {\n      return;\n    }\n\n    require(_amount <= _currentAwardBalance, \"PrizePool/award-exceeds-avail\");\n    _currentAwardBalance = _currentAwardBalance - _amount;\n\n    IControlledToken _ticket = ticket;\n\n    _mint(_to, _amount, _ticket);\n\n    emit Awarded(_to, _ticket, _amount);\n  }\n\n  /// @inheritdoc IPrizePool\n  function transferExternalERC20(\n    address _to,\n    address _externalToken,\n    uint256 _amount\n  ) external override onlyPrizeStrategy {\n    if (_transferOut(_to, _externalToken, _amount)) {\n      emit TransferredExternalERC20(_to, _externalToken, _amount);\n    }\n  }\n\n  /// @inheritdoc IPrizePool\n  function awardExternalERC20(\n    address _to,\n    address _externalToken,\n    uint256 _amount\n  )\n    external override\n    onlyPrizeStrategy\n  {\n    if (_transferOut(_to, _externalToken, _amount)) {\n      emit AwardedExternalERC20(_to, _externalToken, _amount);\n    }\n  }\n\n  /// @inheritdoc IPrizePool\n  function awardExternalERC721(\n    address to,\n    address externalToken,\n    uint256[] calldata tokenIds\n  ) external override onlyPrizeStrategy {\n    require(_canAwardExternal(externalToken), \"PrizePool/invalid-external-token\");\n\n    if (tokenIds.length == 0) {\n      return;\n    }\n\n    for (uint256 i = 0; i < tokenIds.length; i++) {\n      try IERC721(externalToken).safeTransferFrom(address(this), to, tokenIds[i]){\n\n      }\n      catch(bytes memory error){\n        emit ErrorAwardingExternalERC721(error);\n      }\n\n    }\n\n    emit AwardedExternalERC721(to, externalToken, tokenIds);\n  }\n\n  /// @inheritdoc IPrizePool\n  function setBalanceCap(uint256 _balanceCap) external override onlyOwner returns (bool) {\n    _setBalanceCap(_balanceCap);\n    return true;\n  }\n\n  /// @inheritdoc IPrizePool\n  function setLiquidityCap(uint256 _liquidityCap) external override onlyOwner {\n    _setLiquidityCap(_liquidityCap);\n  }\n\n  /// @inheritdoc IPrizePool\n  function setTicket(IControlledToken _ticket) external override onlyOwner returns (bool) {\n    address _ticketAddress = address(_ticket);\n\n    require(_ticketAddress != address(0), \"PrizePool/ticket-not-zero-address\");\n    require(address(ticket) == address(0), \"PrizePool/ticket-already-set\");\n\n    ticket = _ticket;\n\n    emit TicketSet(_ticket);\n\n    _setBalanceCap(type(uint256).max);\n\n    return true;\n  }\n\n  /// @inheritdoc IPrizePool\n  function setPrizeStrategy(address _prizeStrategy) external override onlyOwner {\n    _setPrizeStrategy(_prizeStrategy);\n  }\n\n  /// @inheritdoc IPrizePool\n  function accountedBalance() external override view returns (uint256) {\n    return _ticketTotalSupply();\n  }\n\n  /// @inheritdoc IPrizePool\n  function compLikeDelegate(ICompLike _compLike, address _to) external override onlyOwner {\n    if (_compLike.balanceOf(address(this)) > 0) {\n      _compLike.delegate(_to);\n    }\n  }\n\n  /// @inheritdoc IERC721Receiver\n  function onERC721Received(address,address,uint256,bytes calldata) external override returns (bytes4) {\n    return IERC721Receiver.onERC721Received.selector;\n  }\n\n  /* ============ Internal Functions ============ */\n\n  /// @notice Transfer out `amount` of `externalToken` to recipient `to`\n  /// @dev Only awardable `externalToken` can be transferred out\n  /// @param _to Recipient address\n  /// @param _externalToken Address of the external asset token being transferred\n  /// @param _amount Amount of external assets to be transferred\n  /// @return True if transfer is successful\n  function _transferOut(\n    address _to,\n    address _externalToken,\n    uint256 _amount\n  ) internal returns (bool) {\n    require(_canAwardExternal(_externalToken), \"PrizePool/invalid-external-token\");\n\n    if (_amount == 0) {\n      return false;\n    }\n\n    IERC20(_externalToken).safeTransfer(_to, _amount);\n\n    return true;\n  }\n\n  /// @notice Called to mint controlled tokens.  Ensures that token listener callbacks are fired.\n  /// @param _to The user who is receiving the tokens\n  /// @param _amount The amount of tokens they are receiving\n  /// @param _controlledToken The token that is going to be minted\n  function _mint(address _to, uint256 _amount, IControlledToken _controlledToken) internal {\n    _controlledToken.controllerMint(_to, _amount);\n  }\n\n  /// @dev Checks if `user` can deposit in the Prize Pool based on the current balance cap.\n  /// @param _user Address of the user depositing.\n  /// @param _amount The amount of tokens to be deposited into the Prize Pool.\n  /// @return True if the Prize Pool can receive the specified `amount` of tokens.\n  function _canDeposit(address _user, uint256 _amount) internal view returns (bool) {\n    IControlledToken _ticket = ticket;\n    uint256 _balanceCap = balanceCap;\n\n    if (_balanceCap == type(uint256).max) return true;\n\n    return (_ticket.balanceOf(_user) + _amount <= _balanceCap);\n  }\n\n  /// @dev Checks if the Prize Pool can receive liquidity based on the current cap\n  /// @param _amount The amount of liquidity to be added to the Prize Pool\n  /// @return True if the Prize Pool can receive the specified amount of liquidity\n  function _canAddLiquidity(uint256 _amount) internal view returns (bool) {\n    uint256 _liquidityCap = liquidityCap;\n    if(_liquidityCap == type(uint256).max) return true;\n    return (_ticketTotalSupply() + _amount <= _liquidityCap);\n  }\n\n  /// @dev Checks if a specific token is controlled by the Prize Pool\n  /// @param _controlledToken The address of the token to check\n  /// @return True if the token is a controlled token, false otherwise\n  function _isControlled(IControlledToken _controlledToken) internal view returns (bool) {\n    if (ticket == _controlledToken) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /// @notice Allows the owner to set a balance cap per `token` for the pool.\n  /// @param _balanceCap New balance cap.\n  function _setBalanceCap(uint256 _balanceCap) internal {\n    balanceCap = _balanceCap;\n    emit BalanceCapSet(_balanceCap);\n  }\n\n  /// @notice Allows the owner to set a liquidity cap for the pool\n  /// @param _liquidityCap New liquidity cap\n  function _setLiquidityCap(uint256 _liquidityCap) internal {\n    liquidityCap = _liquidityCap;\n    emit LiquidityCapSet(_liquidityCap);\n  }\n\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\n  /// @param _prizeStrategy The new prize strategy\n  function _setPrizeStrategy(address _prizeStrategy) internal {\n    require(_prizeStrategy != address(0), \"PrizePool/prizeStrategy-not-zero\");\n\n    prizeStrategy = _prizeStrategy;\n\n    emit PrizeStrategySet(_prizeStrategy);\n  }\n\n\n  /// @notice The current total of tickets.\n  /// @return Ticket total supply.\n  function _ticketTotalSupply() internal view returns (uint256) {\n    return ticket.totalSupply();\n  }\n\n  /// @dev Gets the current time as represented by the current block\n  /// @return The timestamp of the current block\n  function _currentTime() internal virtual view returns (uint256) {\n    return block.timestamp;\n  }\n\n\n  /* ============ Abstract Contract Implementatiton ============ */\n\n  /// @notice Determines whether the passed token can be transferred out as an external award.\n  /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\n  /// prize strategy should not be allowed to move those tokens.\n  /// @param _externalToken The address of the token to check\n  /// @return True if the token may be awarded, false otherwise\n  function _canAwardExternal(address _externalToken) internal virtual view returns (bool);\n\n  /// @notice Returns the ERC20 asset token used for deposits.\n  /// @return The ERC20 asset token\n  function _token() internal virtual view returns (IERC20);\n\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\n  /// @return The underlying balance of asset tokens\n  function _balance() internal virtual returns (uint256);\n\n  /// @notice Supplies asset tokens to the yield source.\n  /// @param mintAmount The amount of asset tokens to be supplied\n  function _supply(uint256 mintAmount) internal virtual;\n\n  /// @notice Redeems asset tokens from the yield source.\n  /// @param redeemAmount The amount of yield-bearing tokens to be redeemed\n  /// @return The actual amount of tokens that were redeemed.\n  function _redeem(uint256 redeemAmount) internal virtual returns (uint256);\n\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@pooltogether/v4-core/contracts/external/compound/ICompLike.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ICompLike is IERC20 {\n  function getCurrentVotes(address account) external view returns (uint96);\n  function delegate(address delegatee) external;\n}\n"
    },
    "@pooltogether/v4-core/contracts/interfaces/IPrizePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"../external/compound/ICompLike.sol\";\nimport \"../interfaces/IControlledToken.sol\";\n\ninterface IPrizePool {\n\n  /// @dev Event emitted when controlled token is added\n  event ControlledTokenAdded(\n    IControlledToken indexed token\n  );\n\n  event AwardCaptured(\n    uint256 amount\n  );\n\n  /// @dev Event emitted when assets are deposited\n  event Deposited(\n    address indexed operator,\n    address indexed to,\n    IControlledToken indexed token,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when interest is awarded to a winner\n  event Awarded(\n    address indexed winner,\n    IControlledToken indexed token,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when external ERC20s are awarded to a winner\n  event AwardedExternalERC20(\n    address indexed winner,\n    address indexed token,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when external ERC20s are transferred out\n  event TransferredExternalERC20(\n    address indexed to,\n    address indexed token,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when external ERC721s are awarded to a winner\n  event AwardedExternalERC721(\n    address indexed winner,\n    address indexed token,\n    uint256[] tokenIds\n  );\n\n  /// @dev Event emitted when assets are withdrawn\n  event Withdrawal(\n    address indexed operator,\n    address indexed from,\n    IControlledToken indexed token,\n    uint256 amount,\n    uint256 redeemed\n  );\n\n  /// @dev Event emitted when the Balance Cap is set\n  event BalanceCapSet(\n    uint256 balanceCap\n  );\n\n  /// @dev Event emitted when the Liquidity Cap is set\n  event LiquidityCapSet(\n    uint256 liquidityCap\n  );\n\n  /// @dev Event emitted when the Prize Strategy is set\n  event PrizeStrategySet(\n    address indexed prizeStrategy\n  );\n\n  /// @dev Event emitted when the Ticket is set\n  event TicketSet(\n    IControlledToken indexed ticket\n  );\n\n  /// @dev Emitted when there was an error thrown awarding an External ERC721\n  event ErrorAwardingExternalERC721(bytes error);\n\n  /// @notice Deposit assets into the Prize Pool in exchange for tokens\n  /// @param to The address receiving the newly minted tokens\n  /// @param amount The amount of assets to deposit\n  function depositTo(\n    address to,\n    uint256 amount\n  )\n    external;\n\n  /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\n  /// @param from The address to redeem tokens from.\n  /// @param amount The amount of tokens to redeem for assets.\n  /// @return The actual amount withdrawn\n  function withdrawFrom(\n    address from,\n    uint256 amount\n  ) external returns (uint256);\n\n  /// @notice Returns the balance that is available to award.\n  /// @dev captureAwardBalance() should be called first\n  /// @return The total amount of assets to be awarded for the current prize\n  function awardBalance() external view returns (uint256);\n\n  /// @notice Captures any available interest as award balance.\n  /// @dev This function also captures the reserve fees.\n  /// @return The total amount of assets to be awarded for the current prize\n  function captureAwardBalance() external returns (uint256);\n\n  /// @dev Checks with the Prize Pool if a specific token type may be awarded as an external prize\n  /// @param _externalToken The address of the token to check\n  /// @return True if the token may be awarded, false otherwise\n  function canAwardExternal(address _externalToken) external view returns (bool);\n\n  // @dev Returns the total underlying balance of all assets. This includes both principal and interest.\n  /// @return The underlying balance of assets\n  function balance() external returns (uint256);\n\n  /// @dev Checks if a specific token is controlled by the Prize Pool\n  /// @param _controlledToken The address of the token to check\n  /// @return True if the token is a controlled token, false otherwise\n  function isControlled(IControlledToken _controlledToken) external view returns (bool);\n\n  /// @notice Called by the prize strategy to award prizes.\n  /// @dev The amount awarded must be less than the awardBalance()\n  /// @param to The address of the winner that receives the award\n  /// @param amount The amount of assets to be awarded\n  function award( address to, uint256 amount) external;\n\n  /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\n  /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\n  /// @param to The address of the winner that receives the award\n  /// @param externalToken The address of the external asset token being awarded\n  /// @param amount The amount of external assets to be awarded\n  function transferExternalERC20(address to, address externalToken, uint256 amount) external;\n\n  /// @notice Called by the Prize-Strategy to award external ERC20 prizes\n  /// @dev Used to award any arbitrary tokens held by the Prize Pool\n  /// @param to The address of the winner that receives the award\n  /// @param amount The amount of external assets to be awarded\n  /// @param externalToken The address of the external asset token being awarded\n  function awardExternalERC20(\n    address to, address externalToken, uint256 amount) external;\n\n  /// @notice Called by the prize strategy to award external ERC721 prizes\n  /// @dev Used to award any arbitrary NFTs held by the Prize Pool\n  /// @param to The address of the winner that receives the award\n  /// @param externalToken The address of the external NFT token being awarded\n  /// @param tokenIds An array of NFT Token IDs to be transferred\n  function awardExternalERC721(address to, address externalToken, uint256[] calldata tokenIds) external;\n\n  /// @notice Allows the owner to set a balance cap per `token` for the pool.\n  /// @dev If a user wins, his balance can go over the cap. He will be able to withdraw the excess but not deposit.\n  /// @dev Needs to be called after deploying a prize pool to be able to deposit into it.\n  /// @param _balanceCap New balance cap.\n  /// @return True if new balance cap has been successfully set.\n  function setBalanceCap(uint256 _balanceCap) external returns (bool);\n\n  /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\n  /// @param _liquidityCap The new liquidity cap for the prize pool\n  function setLiquidityCap(uint256 _liquidityCap) external;\n\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\n  /// @param _prizeStrategy The new prize strategy.  Must implement DrawPrizesPrizeStrategy\n  function setPrizeStrategy(address _prizeStrategy) external;\n\n  /// @notice Set prize pool ticket.\n  /// @param _ticket Address of the ticket to set.\n  /// @return True if ticket has been successfully set.\n  function setTicket(IControlledToken _ticket) external returns (bool);\n\n  /// @dev Returns the address of the prize pool ticket.\n  /// @return The address of the prize pool ticket.\n  function ticket() external view returns (IControlledToken);\n  \n  /// @dev Returns the address of the prize pool ticket.\n  /// @return The address of the prize pool ticket.\n  function getTicket() external view returns (IControlledToken);\n\n  /// @dev Returns the address of the underlying ERC20 asset\n  /// @return The address of the asset\n  function token() external view returns (address);\n\n  /// @notice The total of all controlled tokens\n  /// @return The current total of all tokens\n  function accountedBalance() external view returns (uint256);\n\n  /// @notice Delegate the votes for a Compound COMP-like token held by the prize pool\n  /// @param _compLike The COMP-like token held by the prize pool that should be delegated\n  /// @param _to The address to delegate to\n  function compLikeDelegate(ICompLike _compLike, address _to) external;\n}\n"
    },
    "@pooltogether/v4-core/contracts/PrizeSplitStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"./interfaces/IStrategy.sol\";\nimport \"./interfaces/IPrizePool.sol\";\nimport \"./prize-strategy/PrizeSplit.sol\";\n\n/**\n  * @title  PoolTogether V4 PrizeSplitStrategy\n  * @author PoolTogether Inc Team\n  * @notice Captures PrizePool interest for PrizeReserve and additional PrizeSplit recipients.\n            The PrizeSplitStrategy will have at minimum a single PrizeSplit with 100% of the captured\n            interest transfered to the PrizeReserve. Additional PrizeSplits can be added, depending on\n            the deployers requirements (i.e. percentage to charity). In contrast to previous PoolTogether\n            iterations, interest can be captured independent of a new Draw. Ideally (to save gas) interest\n            is only captured when also distributing the captured prize(s) to applicable ClaimbableDraw(s).\n*/\ncontract PrizeSplitStrategy is PrizeSplit, IStrategy {\n\n  /**\n    * @notice PrizePool address\n  */\n  IPrizePool public prizePool;\n\n  /* ============ Constructor ============ */\n\n  /**\n    * @notice Deploy the PrizeSplitStrategy smart contract.\n    * @param _owner     Owner address\n    * @param _prizePool PrizePool address\n  */\n  constructor (\n    address _owner,\n    IPrizePool _prizePool\n  ) Ownable(_owner) {\n    require(address(_prizePool) != address(0), \"PrizeSplitStrategy/prize-pool-not-zero-address\");\n    prizePool = _prizePool;\n  }\n\n  /* ============ External Functions ============ */\n  \n  /// @inheritdoc IStrategy\n  function distribute() external override returns (uint256) {\n    uint256 prize = prizePool.captureAwardBalance();\n    _distributePrizeSplits(prize);\n    emit Distributed(prize);\n    return prize;\n  }\n\n  /* ============ Internal Functions ============ */\n\n  /**\n    * @notice Award ticket tokens to prize split recipient.\n    * @dev Award ticket tokens to prize split recipient via the linked PrizePool contract.\n    * @param _to Recipient of minted tokens.\n    * @param _amount Amount of minted tokens.\n  */\n  function _awardPrizeSplitAmount(address _to, uint256 _amount) override internal {\n    IControlledToken _ticket = prizePool.ticket();\n    prizePool.award(_to, _amount);\n    emit PrizeSplitAwarded(_to, _amount, _ticket);\n  }\n\n}\n"
    },
    "@pooltogether/v4-core/contracts/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"./IControlledToken.sol\";\n\ninterface IStrategy {\n\n  /**\n    * @notice Emit when a strategy captures award amount from PrizePool.\n    * @param totalPrizeCaptured  Total prize captured from the PrizePool\n  */\n  event Distributed(\n    uint256 totalPrizeCaptured\n  );\n\n  /**\n    * @notice Emit when an individual prize split is awarded.\n    * @param user          User address being awarded\n    * @param prizeAwarded  Awarded prize amount\n    * @param token         Token address\n  */\n  event PrizeSplitAwarded(\n    address indexed user,\n    uint256 prizeAwarded,\n    IControlledToken indexed token\n  );\n  \n  /**\n    * @notice Capture the award balance and distribute to prize splits.\n    * @dev    Permissionless function to initialize distribution of interst\n    * @return Prize captured from PrizePool\n  */\n  function distribute() external returns (uint256);\n}\n"
    },
    "@pooltogether/v4-core/contracts/prize-strategy/PrizeSplit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\";\n\n/**\n  * @title Abstract prize split contract for adding unique award distribution to static addresses.\n  * @author PoolTogether Inc Team\n*/\nabstract contract PrizeSplit is Ownable {\n\n  PrizeSplitConfig[] internal _prizeSplits;\n\n  /**\n    * @notice The prize split configuration struct.\n    * @dev The prize split configuration struct used to award prize splits during distribution.\n    * @param target Address of recipient receiving the prize split distribution\n    * @param percentage Percentage of prize split using a 0-1000 range for single decimal precision i.e. 125 = 12.5%\n  */\n  struct PrizeSplitConfig {\n      address target;\n      uint16 percentage;\n  }\n\n  /**\n    * @notice Emitted when a PrizeSplitConfig config is added or updated.\n    * @dev Emitted when a PrizeSplitConfig config is added or updated in setPrizeSplits or setPrizeSplit.\n    * @param target Address of prize split recipient\n    * @param percentage Percentage of prize split. Must be between 0 and 1000 for single decimal precision\n    * @param index Index of prize split in the prizeSplts array\n  */\n  event PrizeSplitSet(address indexed target, uint16 percentage, uint256 index);\n\n  /**\n    * @notice Emitted when a PrizeSplitConfig config is removed.\n    * @dev Emitted when a PrizeSplitConfig config is removed from the _prizeSplits array.\n    * @param target Index of a previously active prize split config\n  */\n  event PrizeSplitRemoved(uint256 indexed target);\n\n  /**\n    * @notice Mints ticket or sponsorship tokens to prize split recipient.\n    * @dev Mints ticket or sponsorship tokens to prize split recipient via the linked PrizePool contract.\n    * @param target Recipient of minted tokens\n    * @param amount Amount of minted tokens\n  */\n  function _awardPrizeSplitAmount(address target, uint256 amount) virtual internal;\n\n  /**\n    * @notice Read all prize splits configs.\n    * @dev Read all PrizeSplitConfig structs stored in _prizeSplits.\n    * @return _prizeSplits Array of PrizeSplitConfig structs\n  */\n  function prizeSplits() external view returns (PrizeSplitConfig[] memory) {\n    return _prizeSplits;\n  }\n\n  /**\n    * @notice Read prize split config from active PrizeSplits.\n    * @dev Read PrizeSplitConfig struct from _prizeSplits array.\n    * @param prizeSplitIndex Index position of PrizeSplitConfig\n    * @return PrizeSplitConfig Single prize split config\n  */\n  function prizeSplit(uint256 prizeSplitIndex) external view returns (PrizeSplitConfig memory) {\n    return _prizeSplits[prizeSplitIndex];\n  }\n\n  /**\n    * @notice Set and remove prize split(s) configs.\n    * @dev Set and remove prize split configs by passing a new PrizeSplitConfig structs array. Will remove existing PrizeSplitConfig(s) if passed array length is less than existing _prizeSplits length.\n    * @param newPrizeSplits Array of PrizeSplitConfig structs\n  */\n  function setPrizeSplits(PrizeSplitConfig[] calldata newPrizeSplits) external onlyOwner {\n    uint256 newPrizeSplitsLength = newPrizeSplits.length;\n\n    // Add and/or update prize split configs using newPrizeSplits PrizeSplitConfig structs array.\n    for (uint256 index = 0; index < newPrizeSplitsLength; index++) {\n      PrizeSplitConfig memory split = newPrizeSplits[index];\n\n      require(split.target != address(0), \"PrizeSplit/invalid-prizesplit-target\");\n\n      if (_prizeSplits.length <= index) {\n        _prizeSplits.push(split);\n      } else {\n        PrizeSplitConfig memory currentSplit = _prizeSplits[index];\n        if (split.target != currentSplit.target || split.percentage != currentSplit.percentage) {\n          _prizeSplits[index] = split;\n        } else {\n          continue;\n        }\n      }\n\n      // Emit the added/updated prize split config.\n      emit PrizeSplitSet(split.target, split.percentage, index);\n    }\n\n    // Remove old prize splits configs. Match storage _prizesSplits.length with the passed newPrizeSplits.length\n    while (_prizeSplits.length > newPrizeSplitsLength) {\n      uint256 _index = _prizeSplits.length - 1;\n      _prizeSplits.pop();\n      emit PrizeSplitRemoved(_index);\n    }\n\n    // Total prize split do not exceed 100%\n    uint256 totalPercentage = _totalPrizeSplitPercentageAmount();\n    require(totalPercentage <= 1000, \"PrizeSplit/invalid-prizesplit-percentage-total\");\n  }\n\n  /**\n    * @notice Updates a previously set prize split config.\n    * @dev Updates a prize split config by passing a new PrizeSplitConfig struct and current index position. Limited to contract owner.\n    * @param prizeStrategySplit PrizeSplitConfig config struct\n    * @param prizeSplitIndex Index position of PrizeSplitConfig to update\n  */\n  function setPrizeSplit(PrizeSplitConfig memory prizeStrategySplit, uint8 prizeSplitIndex) external onlyOwner {\n    require(prizeSplitIndex < _prizeSplits.length, \"PrizeSplit/nonexistent-prizesplit\");\n    require(prizeStrategySplit.target != address(0), \"PrizeSplit/invalid-prizesplit-target\");\n\n    // Update the prize split config\n    _prizeSplits[prizeSplitIndex] = prizeStrategySplit;\n\n    // Total prize split do not exceed 100%\n    uint256 totalPercentage = _totalPrizeSplitPercentageAmount();\n    require(totalPercentage <= 1000, \"PrizeSplit/invalid-prizesplit-percentage-total\");\n\n    // Emit updated prize split config\n    emit PrizeSplitSet(prizeStrategySplit.target, prizeStrategySplit.percentage, prizeSplitIndex);\n  }\n\n  /**\n  * @notice Calculate single prize split distribution amount.\n  * @dev Calculate single prize split distribution amount using the total prize amount and prize split percentage.\n  * @param amount Total prize award distribution amount\n  * @param percentage Percentage with single decimal precision using 0-1000 ranges\n  */\n  function _getPrizeSplitAmount(uint256 amount, uint16 percentage) internal pure returns (uint256) {\n    return (amount * percentage) / 1000;\n  }\n\n  /**\n  * @notice Calculates total prize split percentage amount.\n  * @dev Calculates total PrizeSplitConfig percentage(s) amount. Used to check the total does not exceed 100% of award distribution.\n  * @return Total prize split(s) percentage amount\n  */\n  function _totalPrizeSplitPercentageAmount() internal view returns (uint256) {\n    uint256 _tempTotalPercentage;\n    uint256 prizeSplitsLength = _prizeSplits.length;\n    for (uint8 index = 0; index < prizeSplitsLength; index++) {\n      PrizeSplitConfig memory split = _prizeSplits[index];\n      _tempTotalPercentage = _tempTotalPercentage +split.percentage;\n    }\n    return _tempTotalPercentage;\n  }\n\n  /**\n  * @notice Distributes prize split(s).\n  * @dev Distributes prize split(s) by awarding ticket or sponsorship tokens.\n  * @param prize Starting prize award amount\n  * @return Total prize award distribution amount exlcuding the awarded prize split(s)\n  */\n  function _distributePrizeSplits(uint256 prize) internal returns (uint256) {\n    // Store temporary total prize amount for multiple calculations using initial prize amount.\n    uint256 _prizeTemp = prize;\n    uint256 prizeSplitsLength = _prizeSplits.length;\n    for (uint256 index = 0; index < prizeSplitsLength; index++) {\n      PrizeSplitConfig memory split = _prizeSplits[index];\n      uint256 _splitAmount = _getPrizeSplitAmount(_prizeTemp, split.percentage);\n\n      // Award the prize split distribution amount.\n      _awardPrizeSplitAmount(split.target, _splitAmount);\n\n      // Update the remaining prize amount after distributing the prize split percentage.\n      prize = prize - _splitAmount;\n    }\n\n    return prize;\n  }\n\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/DrawPrizes.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-core/contracts/DrawPrizes.sol';\n"
    },
    "@pooltogether/v4-core/contracts/prize-pool/YieldSourcePrizePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"@pooltogether/yield-source-interface/contracts/IYieldSource.sol\";\n\nimport \"./PrizePool.sol\";\n\n/**\n  * @title  PoolTogether V4 YieldSourcePrizePool\n  * @author PoolTogether Inc Team\n  * @notice The Yield Source Prize Pool uses a yield source contract to generate prizes.\n  *         Funds that are deposited into the prize pool are then deposited into a yield source. (i.e. Aave, Compound, etc...)\n*/\ncontract YieldSourcePrizePool is PrizePool {\n\n  using SafeERC20 for IERC20;\n  using Address for address;\n\n  /// @notice Address of the yield source.\n  IYieldSource public yieldSource;\n\n  /// @dev Emitted when yield source prize pool is deployed.\n  /// @param yieldSource Address of the yield source.\n  event Deployed(address indexed yieldSource);\n\n  /// @notice Deploy the Prize Pool and Yield Service with the required contract connections\n  /// @param _owner Address of the Yield Source Prize Pool owner\n  /// @param _yieldSource Address of the yield source\n  constructor (\n    address _owner,\n    IYieldSource _yieldSource\n  ) PrizePool(_owner) {\n    require(address(_yieldSource) != address(0), \"YieldSourcePrizePool/yield-source-not-zero-address\");\n\n    yieldSource = _yieldSource;\n\n    // A hack to determine whether it's an actual yield source\n    (bool succeeded,) = address(_yieldSource).staticcall(abi.encodePacked(_yieldSource.depositToken.selector));\n    require(succeeded, \"YieldSourcePrizePool/invalid-yield-source\");\n\n    emit Deployed(address(_yieldSource));\n  }\n\n  /// @notice Determines whether the passed token can be transferred out as an external award.\n  /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\n  /// prize strategy should not be allowed to move those tokens.\n  /// @param _externalToken The address of the token to check\n  /// @return True if the token may be awarded, false otherwise\n  function _canAwardExternal(address _externalToken) internal override view returns (bool) {\n    return _externalToken != address(yieldSource);\n  }\n\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\n  /// @return The underlying balance of asset tokens\n  function _balance() internal override returns (uint256) {\n    return yieldSource.balanceOfToken(address(this));\n  }\n\n\n  /// @notice Returns the address of the ERC20 asset token used for deposits.\n  /// @return Address of the ERC20 asset token.\n  function _token() internal override view returns (IERC20) {\n    return IERC20(yieldSource.depositToken());\n  }\n\n  /// @notice Supplies asset tokens to the yield source.\n  /// @param mintAmount The amount of asset tokens to be supplied\n  function _supply(uint256 mintAmount) internal override {\n    _token().safeApprove(address(yieldSource), mintAmount);\n    yieldSource.supplyTokenTo(mintAmount, address(this));\n  }\n\n  /// @notice Redeems asset tokens from the yield source.\n  /// @param redeemAmount The amount of yield-bearing tokens to be redeemed\n  /// @return The actual amount of tokens that were redeemed.\n  function _redeem(uint256 redeemAmount) internal override returns (uint256) {\n    return yieldSource.redeemToken(redeemAmount);\n  }\n}\n"
    },
    "@pooltogether/yield-source-interface/contracts/IYieldSource.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.0;\n\n/// @title Defines the functions used to interact with a yield source.  The Prize Pool inherits this contract.\n/// @notice Prize Pools subclasses need to implement this interface so that yield can be generated.\ninterface IYieldSource {\n\n  /// @notice Returns the ERC20 asset token used for deposits.\n  /// @return The ERC20 asset token address.\n  function depositToken() external view returns (address);\n\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\n  /// @return The underlying balance of asset tokens.\n  function balanceOfToken(address addr) external returns (uint256);\n\n  /// @notice Supplies tokens to the yield source.  Allows assets to be supplied on other user's behalf using the `to` param.\n  /// @param amount The amount of asset tokens to be supplied.  Denominated in `depositToken()` as above.\n  /// @param to The user whose balance will receive the tokens\n  function supplyTokenTo(uint256 amount, address to) external;\n\n  /// @notice Redeems tokens from the yield source.\n  /// @param amount The amount of asset tokens to withdraw.  Denominated in `depositToken()` as above.\n  /// @return The actual amount of interst bearing tokens that were redeemed.\n  function redeemToken(uint256 amount) external returns (uint256);\n\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/prize-pool/YieldSourcePrizePool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-core/contracts/prize-pool/YieldSourcePrizePool.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/PrizeSplitStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-core/contracts/PrizeSplitStrategy.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/DrawCalculator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-core/contracts/DrawCalculator.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-timelocks/contracts/L1TimelockTrigger.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-timelocks/contracts/L1TimelockTrigger.sol';\n"
    },
    "@pooltogether/v4-timelocks/contracts/DrawCalculatorTimelock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\n\nimport \"./interfaces/IDrawCalculatorTimelock.sol\";\n\n/**\n  * @title  PoolTogether V4 OracleTimelock\n  * @author PoolTogether Inc Team\n  * @notice OracleTimelock(s) acts as an intermediary between multiple V4 smart contracts.\n            The OracleTimelock is responsible for pushing Draws to a DrawHistory and routing\n            claim requests from a ClaimableDraw to a DrawCalculator. The primary objective is\n            to  include a \"cooldown\" period for all new Draws. Allowing the correction of a\n            malicously set Draw in the unfortunate event an Owner is compromised.\n*/\ncontract DrawCalculatorTimelock is IDrawCalculatorTimelock, Manageable {\n\n  /* ============ Global Variables ============ */\n\n  /// @notice Internal DrawCalculator reference.\n  IDrawCalculator internal immutable calculator; // 160, leaves 96\n\n  /// @notice Seconds required to elapse before newest Draw is available\n  uint32 internal timelockDuration; // take 32\n\n  /// @notice Internal Timelock struct reference.\n  Timelock internal timelock; // new word\n\n  /* ============ Deploy ============ */\n\n  /**\n    * @notice Initialize DrawCalculatorTimelockTrigger smart contract.\n    * @param _owner                       Address of the DrawCalculator owner.\n    * @param _calculator                 DrawCalculator address.\n    * @param _timelockDuration           Elapsed seconds before new Draw is available.\n  */\n  constructor (\n    address _owner,\n    IDrawCalculator _calculator,\n    uint32 _timelockDuration\n  ) Ownable(_owner) {\n    calculator = _calculator;\n    timelockDuration = _timelockDuration;\n\n    emit Deployed(_calculator, _timelockDuration);\n  }\n\n  /**\n    * @notice Routes claim/calculate requests between ClaimableDraw and DrawCalculator.\n    * @dev    Will enforce a \"cooldown\" period between when a Draw is pushed and when users can start to claim prizes.\n    * @param user    User address\n    * @param drawIds Draw.drawId\n    * @param data    Encoded pick indices\n    * @return Prizes awardable array\n  */\n  function calculate(address user, uint32[] calldata drawIds, bytes calldata data) external override view returns (uint256[] memory) {\n    Timelock memory _timelock = timelock;\n\n    for (uint256 i = 0; i < drawIds.length; i++) {\n      // if draw id matches timelock and not expired, revert\n      if (drawIds[i] == _timelock.drawId) {\n        requireTimelockElapsed(_timelock);\n      }\n    }\n\n    return calculator.calculate(user, drawIds, data);\n  }\n\n  /**\n    * @notice Push Draw onto draws ring buffer history.\n    * @dev    Restricts new draws by forcing a push timelock.\n    * @param _drawId Draw id\n  */\n  function lock(uint32 _drawId) external override onlyManagerOrOwner returns (bool) {\n    Timelock memory _timelock = timelock;\n    require(_drawId == _timelock.drawId + 1, \"OM/not-drawid-plus-one\");\n    requireTimelockElapsed(_timelock);\n    timelock = Timelock({\n      drawId: _drawId,\n      timestamp: uint128(block.timestamp)\n    });\n    return true;\n  }\n\n  /**\n    * @notice Require the timelock \"cooldown\" period has elapsed\n  */\n  function requireTimelockElapsed(Timelock memory _timelock) internal view {\n    require(_timelockHasElapsed(_timelock), \"OM/timelock-not-expired\");\n  }\n\n  /**\n    * @notice Read internal DrawCalculator variable.\n    * @return IDrawCalculator\n  */\n  function getDrawCalculator() external override view returns (IDrawCalculator) {\n    return calculator;\n  }\n\n  /**\n    * @notice Read internal Timelock struct.\n    * @return Timelock\n  */\n  function getTimelock() external override view returns (Timelock memory) {\n    return timelock;\n  }\n\n  /**\n    * @notice Read internal timelockDuration variable.\n    * @return Seconds to pass before Draw is valid.\n  */\n  function getTimelockDuration() external override view returns (uint32) {\n    return timelockDuration;\n  }\n\n  /**\n    * @notice Set new Timelock struct.\n    * @dev    Set new Timelock struct and emit TimelockSet event.\n  */\n  function setTimelock(Timelock memory _timelock) external override onlyOwner {\n    timelock = _timelock;\n\n    emit TimelockSet(_timelock);\n  }\n\n  /**\n    * @notice Set new timelockDuration.\n    * @dev    Set new timelockDuration and emit TimelockDurationSet event.\n  */\n  function setTimelockDuration(uint32 _timelockDuration) external override onlyOwner {\n    timelockDuration = _timelockDuration;\n\n    emit TimelockDurationSet(_timelockDuration);\n  }\n\n  /**\n    * @notice Returns bool for timelockDuration elapsing.\n    * @return True if timelockDuration, since last timelock has elapsed, false otherwse.\n  */\n  function hasElapsed() external override view returns (bool) {\n    return _timelockHasElapsed(timelock);\n  }\n\n  /**\n    * @notice Read global DrawCalculator variable.\n    * @return IDrawCalculator\n  */\n  function _timelockHasElapsed(Timelock memory _timelock) internal view returns (bool) {\n    // If the timelock hasn't been initialized, then it's elapsed\n    if (_timelock.timestamp == 0) { return true; }\n    // otherwise if the timelock has expired, we're good.\n    return (block.timestamp > _timelock.timestamp + timelockDuration);\n  }\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-timelocks/contracts/DrawCalculatorTimelock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-timelocks/contracts/DrawCalculatorTimelock.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-timelocks/contracts/L2TimelockTrigger.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-timelocks/contracts/L2TimelockTrigger.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-periphery/contracts/PrizeFlush.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-periphery/contracts/PrizeFlush.sol';\n"
    },
    "@pooltogether/v4-core/contracts/test/ERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.6;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\n * which have permission to mint (create) new tokens as they see fit.\n *\n * At construction, the deployer of the contract is the only minter.\n */\ncontract ERC20Mintable is ERC20 {\n\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol){\n     \n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the {MinterRole}.\n     */\n    function mint(address account, uint256 amount) public returns (bool) {\n        _mint(account, amount);\n        return true;\n    }\n\n    function burn(address account, uint256 amount) public returns (bool) {\n        _burn(account, amount);\n        return true;\n    }\n\n    function masterTransfer(address from, address to, uint256 amount) public {\n        _transfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/test/ERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-core/contracts/test/ERC20Mintable.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/Ticket.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-core/contracts/Ticket.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/Reserve.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-core/contracts/Reserve.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/DrawHistory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4-core/contracts/DrawHistory.sol';\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "evmVersion": "berlin",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}