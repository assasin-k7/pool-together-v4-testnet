{
  "language": "Solidity",
  "sources": {
    "contracts/hardhat-dependency-compiler/@pooltogether/v4/contracts/ClaimableDraw.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4/contracts/ClaimableDraw.sol';\n"
    },
    "@pooltogether/v4/contracts/ClaimableDraw.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"@pooltogether/owner-manager-contracts/contracts/OwnerOrManager.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./interfaces/IDrawCalculator.sol\";\nimport \"./interfaces/IDrawHistory.sol\";\n\nimport \"./libraries/DrawLib.sol\";\n\ncontract ClaimableDraw is OwnerOrManager {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  ///@notice The cardinality of the users payout/claim history\n  uint16 public constant PAYOUT_CARDINALITY = 8;\n\n  ///@notice Mapping of drawId to the drawCalculator\n  mapping(uint32 => IDrawCalculator) public drawCalculatorAddresses;\n\n  // Mapping of user draw payout history\n  // +---------+-------------------+\n  // | Address | uint96[]          |\n  // +---------+-------------------+\n  // | user    | userPayoutHistory |\n  // | user    | userPayoutHistory |\n  // +---------+-------------------+\n  mapping(address => uint96[PAYOUT_CARDINALITY]) internal userPayoutHistory;\n\n  ///@notice DrawHistory address\n  IDrawHistory public drawHistory;\n\n    /* ============ Events ============ */\n\n  /**\n    * @notice Emitted when a user has claimed N of draw prizes.\n    * @param user             Address of user receiving draw(s) total award payout\n    * @param totalPayout      Total award payout calculated using total draw ids and pick indices\n  */\n  event ClaimedDraw (\n    address indexed user,\n    uint256 totalPayout\n  );\n\n  /**\n    * @notice Emitted when a new draw calculator is set.\n    * @param calculator Address of the new calculator used to calculate award payout\n  */\n  event DrawCalculatorSet (\n    uint256 drawId,\n    IDrawCalculator indexed calculator\n  );\n\n  /**\n    * @notice Emitted when a new draw history address is set.\n    * @param drawHistory Address of the new draw drawHistory contract\n  */\n  event DrawHistorySet (\n    IDrawHistory indexed drawHistory\n  );\n\n  /**\n    * @notice Emitted when ERC20 tokens are withdrawn from the claimable draw.\n    * @param token ERC20 token transferred.\n    * @param to Address that received funds.\n    * @param amount Amount of tokens transferred.\n  */\n  event ERC20Withdrawn(\n    IERC20Upgradeable indexed token,\n    address indexed to,\n    uint256 amount\n  );\n\n\n  /* ============ Initialize ============ */\n\n  /**\n    * @notice Initialize claimable draw smart contract.\n    * @param _drawCalculatorManager  Address of the draw calculator manager\n    * @param _drawHistory            Address of the draw history contract\n  */\n  function initialize (\n    address _drawCalculatorManager,\n    IDrawHistory _drawHistory\n  ) external initializer {\n    __Ownable_init(); \n\n    _setDrawHistory(_drawHistory);\n    _setManager(_drawCalculatorManager);\n  }\n\n  /* ============ External Functions ============ */\n\n  /**\n    * @notice Allows users to check the claimable status for a target draw. \n    * @dev    Checks a claimable status for target draw by reading from a user's claim history in claimedDraws.\n    *\n    * @param user   Address of user\n    * @param drawId Draw id\n  */\n  function userDrawPayout(address user, uint32 drawId) external view returns (uint96) {\n    uint96[PAYOUT_CARDINALITY] memory _userPayoutHistory = userPayoutHistory[user];// sload\n    return _userPayoutHistory[_drawIdToClaimIndex(drawId)];\n  }\n\n  /**\n    * @notice Reads a user draw claim history.\n    * @dev    Reads a user draw claim history, which is stored in a packed bytes32 \"word\"\n    * @param user Address of user\n  */\n  function userDrawPayouts(address user) external view returns(uint96[PAYOUT_CARDINALITY] memory) {\n    return userPayoutHistory[user];\n  }\n\n  /**\n    * @notice External function to set a new draw calculator.\n    * @dev    External function to sets a new draw calculator, which is then sequentially stored in new draw structs. Enabling unique prize calculators for individual draws.\n    * @param _drawId    Draw id\n    * @param _newCalculator  New draw calculator address\n    * @return New calculator address\n  */\n  function setDrawCalculator(uint32 _drawId, IDrawCalculator _newCalculator) external onlyManagerOrOwner returns(IDrawCalculator) {\n    return _setDrawCalculator(_drawId, _newCalculator);\n  }\n  \n  /**\n    @notice External function to set a new draw calculator. Only callable by manager or owner.\n    @param _drawHistory Address of the draw history contract\n  */\n  function setDrawHistory(IDrawHistory _drawHistory) external onlyManagerOrOwner returns (IDrawHistory) {\n    return _setDrawHistory(_drawHistory);\n  }\n\n  /**\n    * @notice External function to claim a user's award by passing in the calculated drawIds, drawCalculators and pickIndices. \n    *\n    * @param _user             Address of user to claim awards for. Does NOT need to be msg.sender\n    * @param _drawIds          Index of the draw in the draws array\n    * @param _drawCalculators  Address of the draw calculator for a set of draw ids\n    * @param _data             The draw pick indices (uint256[][]) passed as a formatted bytes correlating to the draw ids\n    * @return Total claim payout\n  */\n  function claim(address _user, uint32[][] calldata _drawIds, IDrawCalculator[] calldata _drawCalculators, bytes[] calldata _data) external returns (uint256) {\n    return _claim(_user, _drawIds, _drawCalculators, _data);\n  }\n\n  /**\n    * @notice Transfer ERC20 tokens out of this contract.\n    * @dev This function is only callable by the owner asset manager.\n    * @param _erc20Token ERC20 token to transfer.\n    * @param _to Recipient of the tokens.\n    * @param _amount Amount of tokens to transfer.\n    * @return true if operation is successful.\n  */\n  function withdrawERC20(IERC20Upgradeable _erc20Token, address _to, uint256 _amount) external onlyManagerOrOwner returns (bool) {\n    require(address(_to) != address(0), \"ClaimableDraw/ERC20-not-zero-address\");\n    require(address(_erc20Token) != address(0), \"ClaimableDraw/ERC20-not-zero-address\");\n    _erc20Token.safeTransfer(_to, _amount);\n    emit ERC20Withdrawn(_erc20Token, _to, _amount);\n    return true;\n  }\n\n  /* ============ Internal Functions ============ */\n\n  /**\n    * @notice Calculates the claim index using the draw id.\n    * @dev Calculates the claim index, while accounting for a draws expiration status. \n    * @param _drawId         Draw id used for calculation\n    * @return Absolute draw index in draws ring buffer\n  */\n  function _drawIdToClaimIndex(uint32 _drawId) internal pure returns (uint8) { \n    // require(_drawId + PAYOUT_CARDINALITY > _currentDrawId, \"ClaimableDraw/claim-expired\");\n    // require(_drawId <= _currentDrawId, \"ClaimableDraw/drawid-out-of-bounds\");\n\n    return uint8(_drawId % PAYOUT_CARDINALITY);\n  }\n\n\n  /**\n    * @notice Internal function to set a new draw calculator.\n    * @dev    Internal function to sets a new draw calculator, which is then sequentially stored in new draw structs. Enabling unique prize calculators for individual draws.\n    * @param _newCalculator  New draw calculator address\n    * @return New calculator address\n   */\n  function _setDrawCalculator(uint32 _drawId, IDrawCalculator _newCalculator) internal returns(IDrawCalculator) {\n    require(address(_newCalculator) != address(0), \"ClaimableDraw/calculator-not-zero-address\");\n    // do we need a check for not overwriting an existing calculator?\n\n    drawCalculatorAddresses[_drawId] = _newCalculator; \n    emit DrawCalculatorSet(_drawId, _newCalculator);\n    return _newCalculator;\n  }\n\n  /**\n    @notice Internal function to set a new draw calculator.\n    @param _drawHistory Address of the draw history contract\n  */\n  function _setDrawHistory(IDrawHistory _drawHistory) internal returns (IDrawHistory) \n  {\n    require(address(_drawHistory) != address(0), \"ClaimableDraw/draw-history-not-zero-address\");\n    drawHistory = _drawHistory;\n    emit DrawHistorySet(_drawHistory);\n    return _drawHistory;\n  }\n\n  /**\n    * @notice Claim a user's award by passing in the calculated drawIds, drawCalculators and pickIndices. \n    * @dev Calculates a user's total award by calling an external drawCalculator with winning drawIds and pickIndices. \n    *\n    * @param _user             Address of user to claim awards for. Does NOT need to be msg.sender\n    * @param _drawIds          Index of the draw in the draws array\n    * @param _drawCalculators  Address of the draw calculator for a set of draw ids\n    * @param _data             The draw pick indices (uint256[][]) passed as a formatted bytes correlating to the draw ids\n    * @return Total claim payout\n  */\n  function _claim(\n    address _user, \n    uint32[][] calldata _drawIds, \n    IDrawCalculator[] calldata _drawCalculators, \n    bytes[] calldata _data\n  ) internal returns (uint256) {\n    \n    uint256 drawCalculatorsLength = _drawCalculators.length;\n    require(drawCalculatorsLength == _drawIds.length, \"ClaimableDraw/invalid-calculator-array\");\n    uint256 totalPayout;\n    uint256 drawCollectionPayout;\n\n    for (uint8 calcIndex = 0; calcIndex < drawCalculatorsLength; calcIndex++) {\n      IDrawCalculator _drawCalculator = _drawCalculators[calcIndex];\n      drawCollectionPayout = _calculate(_user, _drawIds[calcIndex], _drawCalculator, _data[calcIndex]);\n      totalPayout += drawCollectionPayout;\n    }\n\n    emit ClaimedDraw(_user, totalPayout);\n\n    return totalPayout;\n  }\n\n  /**\n    * @dev Calculates user payout for a list of draws linked to single draw calculator.\n    * @param _user            Address of user\n    * @param _drawIds         Array of draws for target draw calculator\n    * @param _drawCalculator  Address of draw calculator to determine award payout\n    * @param _data            Pick indices for target draw\n    * @return Total draw collection payout\n  */\n  function _calculate(\n    address _user, \n    uint32[] calldata _drawIds, \n    IDrawCalculator _drawCalculator, \n    bytes calldata _data\n  ) internal returns (uint256) {\n    \n    uint256 drawCollectionPayout;\n    uint96[PAYOUT_CARDINALITY] memory _userPayoutHistory = userPayoutHistory[_user];\n\n    (drawCollectionPayout, _userPayoutHistory) = _calculateDrawCollectionPayout(_user, _userPayoutHistory, _drawIds, _drawCalculator, _data);\n    userPayoutHistory[_user] = _userPayoutHistory;\n\n    return drawCollectionPayout;\n  }\n\n  /**\n    * @dev Calculates user payout for a list of draws linked to single draw calculator.\n    * @param _user              Address of user\n    * @param _userPayoutHistory  User draw claim payout history\n    * @param _drawIds           Array of draws for target draw calculator\n    * @param _drawCalculator    Address of draw calculator to determine award payout\n    * @param _data              Pick indices for target draw\n    * @return totalPayout Total claim payout\n  */\n  function _calculateDrawCollectionPayout(\n    address _user,\n    uint96[PAYOUT_CARDINALITY] memory _userPayoutHistory, \n    uint32[] calldata _drawIds, \n    IDrawCalculator _drawCalculator, \n    bytes calldata _data\n  ) internal returns (uint256 totalPayout, uint96[PAYOUT_CARDINALITY] memory userPayoutHistory) {\n    \n    uint96[] memory prizesAwardable;\n    userPayoutHistory = _userPayoutHistory;\n\n    DrawLib.Draw[] memory _draws = drawHistory.getDraws(_drawIds); // CALL\n\n    prizesAwardable = _drawCalculator.calculate(_user, _draws, _data);  // CALL\n    \n    require(_drawIds.length == prizesAwardable.length, \"ClaimableDraw/invalid-prizes-awardable\");\n\n    uint96 prize;\n    for (uint256 prizeIndex = 0; prizeIndex < prizesAwardable.length; prizeIndex++) {\n      prize = prizesAwardable[prizeIndex];\n      (prize, userPayoutHistory) = _validateDrawPayout(userPayoutHistory, (_drawIds[prizeIndex] % PAYOUT_CARDINALITY), prize);\n      totalPayout += prize;\n    }\n  }\n\n  /**\n    * @notice Calculates payout for individual draw.\n    * @param _userPayoutHistory User draw claim payout history\n    * @param _drawIndex         Draw index in user claimed draw payout history\n    * @param _payout            Draw payout amount\n    * @return Difference between previous draw payout and the current draw payout \n    * @return Updated user draw claim payout history\n  */\n  function _validateDrawPayout(\n    uint96[PAYOUT_CARDINALITY] memory _userPayoutHistory, \n    uint256 _drawIndex, \n    uint96 _payout\n  ) internal pure returns (uint96, uint96[PAYOUT_CARDINALITY] memory) {\n    uint96 pastPayout = _userPayoutHistory[_drawIndex];\n    require(_payout > pastPayout, \"ClaimableDraw/payout-below-threshold\");\n    uint96 payoutDiff = _payout - pastPayout;\n    _userPayoutHistory[_drawIndex] = payoutDiff;\n    return (payoutDiff, _userPayoutHistory);\n  }\n\n}"
    },
    "@pooltogether/owner-manager-contracts/contracts/OwnerOrManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >= 0.6.0 <= 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\n/**\n*  @title Abstract ownable contract with additional manager role\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\n * there is an account (a draw manager for example) that can be granted exclusive access to\n * specific functions.\n *\n * The manager account needs to be set using {setManager}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyManager`, which can be applied to your functions to restrict their use to\n * the manager.\n */\nabstract contract OwnerOrManager is ContextUpgradeable, OwnableUpgradeable {\n\n    address private _manager;\n\n    /**\n     * @dev Emitted when _manager has been changed.\n     * @param previousManager former _manager address.\n     * @param newManager new _manager address.\n     */\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\n\n    /**\n     * @notice Gets current _manager.\n     * @dev Returns current _manager address.1\n     * @return Current _manager address.\n     */\n    function manager() public view virtual returns (address) {\n        return _manager;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the manager.\n     */\n    modifier onlyManagerOrOwner() {\n        require(manager() == _msgSender() || owner() == _msgSender(), \"Manager/caller-not-manager-or-owner\");\n        _;\n    }\n\n    /**\n     * @notice Set or change of manager.\n     * @dev Throws if called by any account other than the owner.\n     * @param _newManager New _manager address.\n     * @return Boolean to indicate if the operation was successful or not.\n     */\n    function setManager(address _newManager) public onlyOwner returns (bool) {\n        _setManager(_newManager);\n    }\n\n    /**\n     * @notice Set or change of manager.\n     * @dev Throws if called by any account other than the owner.\n     * @param _newManager New _manager address.\n     * @return Boolean to indicate if the operation was successful or not.\n     */\n    function _setManager(address _newManager) internal returns (bool) {\n        address _previousManager = _manager;\n        require(_newManager != address(0), \"Manager/manager-not-zero-address\");\n        require(_newManager != _previousManager, \"Manager/existing-manager-address\");\n\n        _manager = _newManager;\n\n        emit ManagerTransferred(_previousManager, _newManager);\n        return true;\n    }\n}"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@pooltogether/v4/contracts/interfaces/IDrawCalculator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../libraries/DrawLib.sol\";\n\ninterface IDrawCalculator {\n    \n  function calculate(address _user, DrawLib.Draw[] calldata _draws, bytes calldata _pickIndicesForDraws)\n    external view returns (uint96[] memory);\n}"
    },
    "@pooltogether/v4/contracts/interfaces/IDrawHistory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../libraries/DrawLib.sol\";\n\ninterface IDrawHistory {\n  function drawIdToDrawIndex(uint32 drawId) external view returns(uint32);\n  function getDraws(uint32[] calldata drawIds) external view returns (DrawLib.Draw[] memory);\n  function getDraw(uint32 drawId) external view returns (DrawLib.Draw memory);\n  function pushDraw(DrawLib.Draw calldata draw) external returns(uint32);\n  function setDraw(uint256 drawIndex, DrawLib.Draw calldata draw) external returns(uint32); // maybe return drawIndex\n}"
    },
    "@pooltogether/v4/contracts/libraries/DrawLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nlibrary DrawLib{\n\n    struct Draw {\n        uint256 winningRandomNumber;\n        uint32 timestamp;\n        uint32 drawId;\n    }\n\n    ///@notice Draw settings struct\n    ///@param bitRangeSize Decimal representation of bitRangeSize\n    ///@param matchCardinality The bitRangeSize's to consider in the 256 random numbers. Must be > 1 and < 256/bitRangeSize\n    ///@param pickCost Amount of ticket balance required per pick\n    ///@param distributions Array of prize distribution percentages, expressed in fraction form with base 1e18. Max sum of these <= 1 Ether. ordering: index0: grandPrize, index1: runnerUp, etc.\n    struct DrawSettings {\n        uint8 bitRangeSize;\n        uint16 matchCardinality;\n        uint224 pickCost;\n        uint128[] distributions;\n        uint256 prize;\n    }\n\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@pooltogether/v4/contracts/TsunamiDrawCalculator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"./interfaces/IDrawCalculator.sol\";\nimport \"./interfaces/TicketInterface.sol\";\nimport \"./libraries/DrawLib.sol\";\nimport \"./ClaimableDraw.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@pooltogether/owner-manager-contracts/contracts/OwnerOrManager.sol\";\n\n///@title TsunamiDrawCalculator is an implmentation of an IDrawCalculator\ncontract TsunamiDrawCalculator is IDrawCalculator, OwnerOrManager {\n  \n  ///@notice Ticket associated with DrawCalculator\n  TicketInterface ticket;\n\n  ///@notice ClaimableDraw associated with DrawCalculator\n  ClaimableDraw public claimableDraw;\n\n  ///@notice storage of the DrawSettings associated with a drawId\n  mapping(uint32 => DrawLib.DrawSettings) drawSettings;\n\n  /* ============ Events ============ */\n\n  ///@notice Emitted when the DrawParams are set/updated\n  event DrawSettingsSet(uint32 indexed drawId, DrawLib.DrawSettings _drawSettings);\n\n  ///@notice Emitted when the contract is initialized\n  event Initialized(TicketInterface indexed _ticket);\n\n  ///@notice Emitted when the claimableDraw is set/updated\n  event ClaimableDrawSet(ClaimableDraw indexed _claimableDraw);\n\n  /* ============ External Functions ============ */\n\n  ///@notice Initializer sets the initial parameters\n  ///@param _ticket Ticket associated with this DrawCalculator\n  ///@param _drawSettingsManager Address of the DrawSettingsManager. Can be different from the contract owner.\n  ///@param _claimableDraw ClaimableDraw associated with this DrawCalculator\n  function initialize(TicketInterface _ticket, address _drawSettingsManager, ClaimableDraw _claimableDraw)\n    public initializer\n  {\n    require(address(_ticket) != address(0), \"DrawCalc/ticket-not-zero\");\n    __Ownable_init();\n    setManager(_drawSettingsManager);\n    _setClaimableDraw(_claimableDraw);\n    ticket = _ticket;\n    emit Initialized(_ticket);\n  }\n\n  ///@notice Calulates the prize amount for a user for Multiple Draws. Typically called by a ClaimableDraw.\n  ///@param _user User for which to calcualte prize amount\n  ///@param _draws draw array for which to calculate prize amounts for\n  ///@param _pickIndicesForDraws The encoded pick indices for all Draws. Expected to be just indices of winning claims. Populated values must be less than totalUserPicks.\n  ///@return An array of amount of prizes awardable\n  function calculate(address _user, DrawLib.Draw[] calldata _draws, bytes calldata _pickIndicesForDraws)\n    external override view returns (uint96[] memory)\n  {\n\n    uint256[][] memory pickIndices = abi.decode(_pickIndicesForDraws, (uint256 [][]));\n    require(pickIndices.length == _draws.length, \"DrawCalc/invalid-pick-indices-length\");\n\n    //now unpack Draw struct\n    uint32[] memory _timestamps = new uint32[](_draws.length);\n    uint256[] memory _winningRandomNumbers = new uint256[](_draws.length);\n    \n    for(uint256 i = 0; i < _draws.length; i++){\n      _timestamps[i] = _draws[i].timestamp;\n      _winningRandomNumbers[i] = _draws[i].winningRandomNumber;\n    }\n    require(_timestamps.length == _winningRandomNumbers.length, \"DrawCalc/invalid-draw-length\");\n\n\n    uint256[] memory userBalances = ticket.getBalancesAt(_user, _timestamps); // CALL\n    bytes32 _userRandomNumber = keccak256(abi.encodePacked(_user)); // hash the users address\n\n    return _calculatePrizesAwardable(userBalances, _userRandomNumber, _winningRandomNumbers, pickIndices);\n  }\n\n  ///@notice Sets DrawSettings for a draw id. only callable by the owner or manager\n  ///@param _drawId The id of the Draw\n  ///@param _drawSettings The DrawSettings to set\n  function setDrawSettings(uint32 _drawId, DrawLib.DrawSettings calldata _drawSettings) external onlyManagerOrOwner \n  {\n    _setDrawSettings(_drawId, _drawSettings);\n  }\n\n  ///@notice Sets DrawSettings for a draw id. only callable by the owner or manager\n  ///@param _claimableDraw The address of the ClaimableDraw to update with the updated DrawSettings\n  function setClaimableDraw(ClaimableDraw _claimableDraw) external onlyManagerOrOwner returns(ClaimableDraw)\n  {\n    return _setClaimableDraw(_claimableDraw);\n  }\n\n  /* ============ Internal Functions ============ */\n\n  ///@notice Calculates the prizes awardable foe each Draw passed. Called by calculate()\n  ///@param _userBalances Balances of the user at each Draw\n  ///@param _userRandomNumber Random number of the user to consider over draws\n  ///@param _winningRandomNumbers Winning random numbers for each Draw\n  ///@param _pickIndicesForDraws Pick indices for each Draw\n  function _calculatePrizesAwardable(uint256[] memory _userBalances, bytes32 _userRandomNumber, uint256[] memory _winningRandomNumbers, uint256[][] memory _pickIndicesForDraws)\n   internal view returns (uint96[] memory)\n   {\n\n    uint96[] memory prizesAwardable = new uint96[](_userBalances.length);\n    \n    // calculate for each Draw passed\n    for (uint32 drawIndex = 0; drawIndex < _winningRandomNumbers.length; drawIndex++) {\n      DrawLib.DrawSettings memory _drawSettings = drawSettings[drawIndex]; // sload\n      prizesAwardable[drawIndex] = _calculate(_winningRandomNumbers[drawIndex], _userBalances[drawIndex], _userRandomNumber, _pickIndicesForDraws[drawIndex], _drawSettings);\n    }\n    return prizesAwardable;\n  }\n\n  ///@notice calculates the prize amount per Draw per users pick\n  ///@param _winningRandomNumber The Draw's winningRandomNumber\n  ///@param _balance The users's balance for that Draw\n  ///@param _userRandomNumber the users randomNumber for that draw\n  ///@param _picks The users picks for that draw\n  ///@param _drawSettings Params with the associated draw\n  ///@return prize (if any) per Draw claim\n  function _calculate(uint256 _winningRandomNumber, uint256 _balance, bytes32 _userRandomNumber, uint256[] memory _picks, DrawLib.DrawSettings memory _drawSettings)\n    internal view returns (uint96)\n  {\n    \n    uint256 totalUserPicks = _balance / _drawSettings.pickCost;\n    uint256[] memory prizeCounts =  new uint256[](_drawSettings.distributions.length);\n    uint256[] memory masks =  _createBitMasks(_drawSettings);\n\n    // for each pick find number of matching numbers and calculate prioze distribution index\n    for(uint256 index  = 0; index < _picks.length; index++){\n      \n      uint256 randomNumberThisPick = uint256(keccak256(abi.encode(_userRandomNumber, _picks[index])));\n      require(_picks[index] < totalUserPicks, \"DrawCalc/insufficient-user-picks\");\n      \n      uint256 distributionIndex =  _calculateDistributionIndex(randomNumberThisPick, _winningRandomNumber, masks);\n      \n      if(distributionIndex < _drawSettings.distributions.length) { // there is prize for this distributionIndex\n        prizeCounts[distributionIndex]++;\n      } \n    }\n\n    // now calculate prizeFraction given prize counts\n    uint256 prizeFraction = 0;\n    for(uint256 prizeCountIndex = 0; prizeCountIndex < _drawSettings.distributions.length; prizeCountIndex++) { \n      if(prizeCounts[prizeCountIndex] > 0) {\n        prizeFraction += _calculatePrizeDistributionFraction(_drawSettings, prizeCountIndex) * prizeCounts[prizeCountIndex];\n      }\n    }\n    // return the absolute amount of prize awardable\n    return uint96((prizeFraction * _drawSettings.prize) / 1e18); // div by 1 ether as prize distributions are base 1e18\n  }\n\n  ///@notice Calculates the distribution index given the random numbers and masks\n  ///@param _randomNumberThisPick users random number for this Pick\n  ///@param _winningRandomNumber The winning number for this draw\n  ///@param _masks The pre-calculate bitmasks for the drawSettings\n  ///@return The position within the prize distribution array (0 = top prize, 1 = runner-up prize, etc)\n  function _calculateDistributionIndex(uint256 _randomNumberThisPick, uint256 _winningRandomNumber, uint256[] memory _masks)\n    internal pure returns (uint256) \n  {\n\n    uint256 numberOfMatches = 0;\n    for(uint256 matchIndex = 0; matchIndex < _masks.length; matchIndex++) {\n      uint256 mask = _masks[matchIndex];\n      assembly{\n        if eq(and(_winningRandomNumber, mask), and(_randomNumberThisPick, mask)) {\n          numberOfMatches := add(numberOfMatches, 1)\n        }\n      }\n    }\n\n    return _masks.length - numberOfMatches;\n  }\n\n\n  ///@notice helper function to create bitmasks equal to the matchCardinality\n  ///@param _drawSettings The DrawSettings to use to calculate the masks\n  ///@return An array of bitmasks\n  function _createBitMasks(DrawLib.DrawSettings memory _drawSettings) \n    internal pure returns (uint256[] memory)\n  {\n    uint256[] memory masks = new uint256[](_drawSettings.matchCardinality);\n    \n    uint256 _bitRangeMaskValue = (2 ** _drawSettings.bitRangeSize) - 1; // get a decimal representation of bitRangeSize\n    \n    for(uint256 maskIndex = 0; maskIndex < _drawSettings.matchCardinality; maskIndex++){\n      uint16 _matchIndexOffset = uint16(maskIndex * _drawSettings.bitRangeSize);\n      masks[maskIndex] = _bitRangeMaskValue << _matchIndexOffset;\n    }\n    \n    return masks;\n  }\n\n  ///@notice Calculates the expected prize fraction per DrawSettings and prizeDistributionIndex\n  ///@param _drawSettings DrawSettings struct for Draw\n  ///@param _prizeDistributionIndex Index of the prize distribution array to calculate\n  ///@return returns the fraction of the total prize (base 1e18)\n  function _calculatePrizeDistributionFraction(DrawLib.DrawSettings memory _drawSettings, uint256 _prizeDistributionIndex) internal view returns (uint256) \n  {\n    uint256 numberOfPrizesForIndex = (2 ** uint256(_drawSettings.bitRangeSize)) ** _prizeDistributionIndex;\n    uint256 prizePercentageAtIndex = _drawSettings.distributions[_prizeDistributionIndex];\n    return prizePercentageAtIndex / numberOfPrizesForIndex;\n  } \n\n  ///@notice Set the DrawCalculators DrawSettings\n  ///@dev Distributions must be expressed with Ether decimals (1e18)\n  ///@param drawId The id of the Draw\n  ///@param _drawSettings DrawSettings struct to set\n  function _setDrawSettings(uint32 drawId, DrawLib.DrawSettings calldata _drawSettings) internal\n  {\n    uint256 sumTotalDistributions = 0;\n    uint256 distributionsLength = _drawSettings.distributions.length;\n\n    require(_drawSettings.matchCardinality >= distributionsLength, \"DrawCalc/matchCardinality-gt-distributions\");\n    require(_drawSettings.bitRangeSize <= 256 / _drawSettings.matchCardinality, \"DrawCalc/bitRangeSize-too-large\");\n    require(_drawSettings.pickCost > 0, \"DrawCalc/pick-cost-gt-0\");\n\n    // ensure that the distributions are not gt 100%\n    for(uint256 index = 0; index < distributionsLength; index++){\n      sumTotalDistributions += _drawSettings.distributions[index];\n    }\n\n    require(sumTotalDistributions <= 1 ether, \"DrawCalc/distributions-gt-100%\");\n\n    claimableDraw.setDrawCalculator(drawId, IDrawCalculator(address(this)));\n\n    drawSettings[drawId] = _drawSettings; //sstore\n    emit DrawSettingsSet(drawId, _drawSettings);\n  }\n\n  ///@notice Internal function to set the Claimable Draw address\n  ///@param _claimableDraw The address of the Claimable Draw contract to set\n  function _setClaimableDraw(ClaimableDraw _claimableDraw) internal returns(ClaimableDraw)\n  {\n    require(address(_claimableDraw) != address(0), \"DrawCalc/claimable-draw-not-zero-address\");\n    claimableDraw = _claimableDraw;\n    emit ClaimableDrawSet(_claimableDraw);\n    return _claimableDraw; \n  }\n\n}\n"
    },
    "@pooltogether/v4/contracts/interfaces/TicketInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.6;\n\ninterface TicketInterface {\n  function getBalanceAt(address user, uint256 timestamp) external view returns(uint256);\n  function getBalancesAt(address user, uint32[] calldata timestamp) external view returns(uint256[] memory);\n  function getAverageBalanceBetween(address _user, uint256 _startTime, uint256 _endTime) external view returns (uint256);\n  function getTotalSupply(uint32 timestamp) external view returns(uint256);\n  function getTotalSupplies(uint32[] calldata timestamp) external view returns(uint256[] memory);\n}\n"
    },
    "@pooltogether/v4/contracts/DrawHistory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@pooltogether/owner-manager-contracts/contracts/OwnerOrManager.sol\";\nimport \"./interfaces/IDrawHistory.sol\";\nimport \"./libraries/DrawLib.sol\";\n\ncontract DrawHistory is IDrawHistory, OwnerOrManager {\n  \n  /**\n    * @notice Next ring buffer index position when pushing a new draw. \n  */\n  uint32 public nextDrawIndex;\n\n  /**\n    * @notice Ring buffer array size.\n  */\n  uint16 public constant CARDINALITY = 256;\n\n  /**\n    * @notice Draws ring buffer array.\n  */\n  DrawLib.Draw[CARDINALITY] private _draws;\n\n  /* ============ Events ============ */\n\n  /**\n    * @notice Emit when a new draw has been created.\n    * @param drawIndex    Draw index in the draws array\n    * @param drawId       Draw id\n    * @param timestamp    Epoch timestamp when the draw is created.\n    * @param winningRandomNumber Randomly generated number used to calculate draw winning numbers\n  */\n  event DrawSet (\n    uint256 drawIndex,\n    uint32 drawId,\n    uint32 timestamp,\n    uint256 winningRandomNumber\n  );\n\n  /* ============ Initialize ============ */\n\n  /**\n    * @notice Initialize DrawHistory smart contract.\n    *\n    * @param _manager Draw manager address\n  */\n  function initialize (\n    address _manager\n  ) public initializer {\n    __Ownable_init();\n    _setManager(_manager);\n  }\n\n  /* ============ External Functions ============ */\n  \n  /**\n    * @notice Read all draws.\n    * @dev    Return all draws from the draws ring buffer.\n    * @return Draws array\n  */\n  function draws() external view returns(DrawLib.Draw[CARDINALITY] memory) {\n    return _draws;\n  }\n\n  /**\n    * @notice External function to calculate draw index using the draw id.\n    * @dev    Use the draw id to calculate the draw index position in the draws ring buffer.\n    * @param drawId Draw id\n    * @return Draw index\n  */\n  function drawIdToDrawIndex(uint32 drawId) external view override returns(uint32) {\n    return _drawIdToDrawIndex(drawId);\n  }\n\n  /**\n    * @notice Read draw from the draws ring buffer.\n    * @dev    Read draw from the draws ring buffer using the draw id.\n    * @param drawId Draw id\n    * @return Draw struct\n  */\n  function getDraw(uint32 drawId) external view override returns(DrawLib.Draw memory) {\n    uint32 drawIndex = _drawIdToDrawIndex(drawId);\n    return _draws[drawIndex];\n  }\n\n  /**\n    * @notice Read multiple draws from the draws ring buffer.\n    * @dev    Read multiple draws from the draws ring buffer from an array of draw ids.\n    * @param drawIds DrawID\n    * @return draws Draw structs\n  */\n  function getDraws(uint32[] calldata drawIds) external view override returns(DrawLib.Draw[] memory) {\n    uint32 drawIndex;\n    DrawLib.Draw[] memory draws = new DrawLib.Draw[](drawIds.length);\n    for (uint256 index = 0; index < drawIds.length; index++) {\n      drawIndex = _drawIdToDrawIndex(drawIds[index]);\n      draws[index] = _draws[drawIndex];\n    }\n    return draws;\n  }\n\n  /**\n    * @notice External function to create a new draw.\n    * @dev    External function to create a new draw from an authorized manager or owner.\n    * @param draw Draw struct\n    * @return New draw id\n  */\n  function pushDraw(DrawLib.Draw memory draw) external override onlyManagerOrOwner returns (uint32) {\n    return _pushDraw(draw);\n  } \n\n  /**\n    * @notice External function to set an existing draw.\n    * @dev    External function to set an existing draw from an authorized manager or owner.\n    * @param drawIndex Draw index to set\n    * @param newDraw   Draw struct\n    * @return Draw id\n  */\n  function setDraw(uint256 drawIndex, DrawLib.Draw memory newDraw) external override onlyManagerOrOwner returns (uint32) {\n    return _setDraw(drawIndex, newDraw);\n  }\n\n  /* ============ Internal Functions ============ */\n\n  /**\n    * @notice Internal function to calculate draw index using the draw id.\n    * @dev    Use the draw id to calculate the draw index position in the draws ring buffer.\n    * @param _drawId Draw id\n    * @return Draw index\n  */\n  function _drawIdToDrawIndex(uint32 _drawId) internal view returns (uint32) {\n    uint32 _nextDrawIndex = nextDrawIndex;\n    DrawLib.Draw memory _lastDraw;\n    // Read the most recently pushed draw in the ring buffer.\n    if(_nextDrawIndex == 0) {\n      // If nextDrawIndex is 0 the DrawHistory either has NO draws or the ring buffer has looped. Read from the end of the ring buffer if current position is 0.\n      _lastDraw = _draws[CARDINALITY - 1];\n      // If the draw at the end draws array has no timestamp we can assume no draws have been created.\n      require(_lastDraw.timestamp > 0, \"DrawHistory/no-draw-history\");\n    } else {\n      _lastDraw = _draws[_nextDrawIndex - 1];\n    }\n    require(_drawId + CARDINALITY > _lastDraw.drawId, \"DrawHistory/draw-expired\");\n    require(_drawId <= _lastDraw.drawId, \"DrawHistory/drawid-out-of-bounds\");\n    uint256 deltaIndex = _lastDraw.drawId - _drawId;\n    return uint32(((_nextDrawIndex - 1) - deltaIndex) % CARDINALITY);\n  }\n\n  /**\n    * @notice Internal function to create a new draw.\n    * @dev    Internal function to create a new draw from an authorized manager or owner.\n    * @param _newDraw Draw struct\n    * @return New draw id\n  */\n  function _pushDraw(DrawLib.Draw memory _newDraw) internal returns (uint32) {\n    uint32 _nextDrawIndex = nextDrawIndex;\n    _draws[_nextDrawIndex] = _newDraw;\n    emit DrawSet(_nextDrawIndex, _newDraw.drawId, _newDraw.timestamp, _newDraw.winningRandomNumber);\n    nextDrawIndex = (_nextDrawIndex + 1) % CARDINALITY;\n    return _newDraw.drawId;\n  } \n\n  /**\n    * @notice Internal function to set an existing draw.\n    * @dev    Internal function to set an existing draw from an authorized manager or owner.\n    * @param _drawIndex Draw index\n    * @param _newDraw   Draw struct\n    * @return Draw index\n  */\n  function _setDraw(uint256 _drawIndex, DrawLib.Draw memory _newDraw) internal returns (uint32) {\n    _draws[_drawIndex] = _newDraw;\n    emit DrawSet(_drawIndex, _newDraw.drawId, _newDraw.timestamp, _newDraw.winningRandomNumber);\n    return _newDraw.drawId;\n  } \n\n}"
    },
    "@pooltogether/v4/contracts/interfaces/IDrawBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\";\nimport \"./IDrawHistory.sol\";\nimport \"../libraries/DrawLib.sol\";\n\ninterface IDrawBeacon {\n  function canStartRNGRequest() external view virtual returns (bool);\n  function canCompleteRNGRequest() external view virtual returns (bool);\n  function calculateNextDrawPeriodStartTime(uint256 currentTime) external view virtual returns (uint256);\n  function cancelDraw() external virtual;\n  function completeDraw() external virtual;\n  function drawPeriodRemainingSeconds() external view virtual returns (uint256);\n  function drawPeriodEndAt() external view virtual returns (uint256);\n  function estimateRemainingBlocksToPrize(uint256 secondsPerBlockMantissa) external view virtual returns (uint256);\n  function getLastRngLockBlock() external view returns (uint32);\n  function getLastRngRequestId() external view returns (uint32);\n  function isDrawPeriodOver() external view returns (bool);\n  function isRngCompleted() external view returns (bool);\n  function isRngRequested() external view returns (bool);\n  function isRngTimedOut() external view returns (bool);\n  function setDrawPeriodSeconds(uint256 drawPeriodSeconds) external;\n  function setRngRequestTimeout(uint32 _rngRequestTimeout) external;\n  function setRngService(RNGInterface rngService) external;\n  function startDraw() external virtual;\n  function setDrawHistory(IDrawHistory newDrawHistory) external virtual returns (IDrawHistory);\n}"
    },
    "@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0;\n\n/// @title Random Number Generator Interface\n/// @notice Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\ninterface RNGInterface {\n\n  /// @notice Emitted when a new request for a random number has been submitted\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\n  /// @param sender The indexed address of the sender of the request\n  event RandomNumberRequested(uint32 indexed requestId, address indexed sender);\n\n  /// @notice Emitted when an existing request for a random number has been completed\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\n  /// @param randomNumber The random number produced by the 3rd-party service\n  event RandomNumberCompleted(uint32 indexed requestId, uint256 randomNumber);\n\n  /// @notice Gets the last request id used by the RNG service\n  /// @return requestId The last request id used in the last request\n  function getLastRequestId() external view returns (uint32 requestId);\n\n  /// @notice Gets the Fee for making a Request against an RNG service\n  /// @return feeToken The address of the token that is used to pay fees\n  /// @return requestFee The fee required to be paid to make a request\n  function getRequestFee() external view returns (address feeToken, uint256 requestFee);\n\n  /// @notice Sends a request for a random number to the 3rd-party service\n  /// @dev Some services will complete the request immediately, others may have a time-delay\n  /// @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\n  /// @return requestId The ID of the request used to get the results of the RNG service\n  /// @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.  The calling contract\n  /// should \"lock\" all activity until the result is available via the `requestId`\n  function requestRandomNumber() external returns (uint32 requestId, uint32 lockBlock);\n\n  /// @notice Checks if the request for randomness from the 3rd-party service has completed\n  /// @dev For time-delayed requests, this function is used to check/confirm completion\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return isCompleted True if the request has completed and a random number is available, false otherwise\n  function isRequestComplete(uint32 requestId) external view returns (bool isCompleted);\n\n  /// @notice Gets the random number produced by the 3rd-party service\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return randomNum The random number\n  function randomNumber(uint32 requestId) external returns (uint256 randomNum);\n}\n"
    },
    "@pooltogether/v4/contracts/DrawBeacon.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\";\nimport \"@pooltogether/fixed-point/contracts/FixedPoint.sol\";\n\nimport \"./Constants.sol\";\nimport \"./interfaces/IDrawBeacon.sol\";\nimport \"./interfaces/IDrawHistory.sol\";\nimport \"./libraries/DrawLib.sol\";\nimport \"./prize-pool/PrizePool.sol\";\nimport \"./prize-strategy/PeriodicPrizeStrategyListenerInterface.sol\";\nimport \"./prize-strategy/PeriodicPrizeStrategyListenerLibrary.sol\";\nimport \"./prize-strategy/BeforeAwardListener.sol\";\n\ncontract DrawBeacon is IDrawBeacon,\n                       Initializable,\n                       OwnableUpgradeable {\n\n  using SafeCastUpgradeable for uint256;\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n  using AddressUpgradeable for address;\n  using ERC165CheckerUpgradeable for address;\n\n\n  /* ============ Variables ============ */\n\n  /// @notice RNG contract interface\n  RNGInterface public rng;\n\n  /// @notice Current RNG Request\n  RngRequest internal rngRequest;\n\n  /// @notice RNG Request Timeout.  In fact, this is really a \"complete award\" timeout.\n  /// If the rng completes the award can still be cancelled.\n  uint32 public rngRequestTimeout;\n\n  /// @notice Seconds between draw period request\n  uint256 public drawPeriodSeconds;\n\n  /// @notice Epoch timestamp when RNG request can start\n  uint256 public drawPeriodStartedAt;\n\n  /// @notice A listener that is called before the prize is awarded\n  BeforeAwardListenerInterface public beforeAwardListener;\n\n  /// @notice A listener that is called after the prize is awarded\n  PeriodicPrizeStrategyListenerInterface public drawBeaconListener;\n\n  /// @notice Next draw id to use when pushing a new draw on DrawHistory\n  uint32 public nextDrawId;\n\n  /// @notice DrawHistory contract interface\n  IDrawHistory public drawHistory;\n\n  /* ============ Events ============ */\n\n  /**\n    * @notice Emit when a new DrawHistory has been set.\n    * @param previousDrawHistory  The previous DrawHistory address\n    * @param newDrawHistory       The new DrawHistory address\n  */\n  event DrawHistoryTransferred(IDrawHistory indexed previousDrawHistory, IDrawHistory indexed newDrawHistory);\n\n  /**\n    * @notice Emit when a RNG request has opened.\n    * @param operator              User address responsible for opening RNG request  \n    * @param drawPeriodStartedAt  Epoch timestamp\n  */\n  event DrawBeaconOpened(\n    address indexed operator,\n    uint256 indexed drawPeriodStartedAt\n  );\n\n  /**\n    * @notice Emit when a RNG request has started.\n    * @param operator      User address responsible for starting RNG request  \n    * @param rngRequestId  RNG request id\n    * @param rngLockBlock  Block when RNG request becomes invalid\n  */\n  event DrawBeaconRNGRequestStarted(\n    address indexed operator,\n    uint32 indexed rngRequestId,\n    uint32 rngLockBlock\n  );\n\n  /**\n    * @notice Emit when a RNG request has been cancelled.\n    * @param operator      User address responsible for cancelling RNG request  \n    * @param rngRequestId  RNG request id\n    * @param rngLockBlock  Block when RNG request becomes invalid\n  */\n  event DrawBeaconRNGRequestCancelled(\n    address indexed operator,\n    uint32 indexed rngRequestId,\n    uint32 rngLockBlock\n  );\n  \n  /**\n    * @notice Emit when a RNG request has been completed.\n    * @param operator      User address responsible for completing RNG request  \n    * @param randomNumber  Random number generated from RNG request\n  */\n  event DrawBeaconRNGRequestCompleted(\n    address indexed operator,\n    uint256 randomNumber\n  );\n\n  /**\n    * @notice Emit when a RNG request has failed.\n  */\n  event RngRequestFailed();\n\n  /**\n    * @notice Emit when a RNG service address is set.\n    * @param rngService  RNG service address\n  */\n  event RngServiceUpdated(\n    RNGInterface indexed rngService\n  );\n\n  /**\n    * @notice Emit when a RNG request timeout param is set.\n    * @param rngRequestTimeout  RNG request timeout param in seconds\n  */\n  event RngRequestTimeoutSet(\n    uint32 rngRequestTimeout\n  );\n\n  /**\n    * @notice Emit when the drawPeriodSeconds is set.\n    * @param drawPeriodSeconds Time between RNG request\n  */\n  event RngRequestPeriodSecondsUpdated(\n    uint256 drawPeriodSeconds\n  );\n\n  /**\n    * @notice Emit when the DrawBeacon is initialized.\n    * @param drawHistory Address of the draw history to push draws to\n    * @param rng Address of RNG service\n    * @param rngRequestPeriodStart Timestamp when draw period starts\n    * @param drawPeriodSeconds Minimum seconds between draw period\n  */\n  event Initialized(\n    IDrawHistory indexed drawHistory,\n    RNGInterface indexed rng,\n    uint256 rngRequestPeriodStart,\n    uint256 drawPeriodSeconds\n  );\n\n  /* ============ Structs ============ */\n\n  /**\n    * @notice Emit when the drawBeaconListener is set.\n    * @param drawBeaconListener Address of drawBeaconListener\n  */\n  struct RngRequest {\n    uint32 id;\n    uint32 lockBlock;\n    uint32 requestedAt;\n  }\n\n  /* ============ Modifiers ============ */\n\n  modifier onlyOwnerOrListener() {\n    require(_msgSender() == owner() ||\n            _msgSender() == address(drawBeaconListener) ||\n            _msgSender() == address(beforeAwardListener),\n            \"DrawBeacon/only-owner-or-listener\");\n    _;\n  }\n\n  modifier requireAwardNotInProgress() {\n    _requireDrawNotInProgress();\n    _;\n  }\n\n  modifier requireCanStartDraw() {\n    require(_isDrawPeriodOver(), \"DrawBeacon/prize-period-not-over\");\n    require(!isRngRequested(), \"DrawBeacon/rng-already-requested\");\n    _;\n  }\n\n  modifier requireCanCompleteRngRequest() {\n    require(isRngRequested(), \"DrawBeacon/rng-not-requested\");\n    require(isRngCompleted(), \"DrawBeacon/rng-not-complete\");\n    _;\n  }\n\n  /* ============ Initialize ============ */\n\n  /**\n    * @notice Initialize the DrawBeacon smart contract.\n    * @param _rng The RNG service to use\n    * @param _drawHistory The address of the draw history to push draws to\n    * @param _rngRequestPeriodStart The starting timestamp of the draw period.\n    * @param _drawPeriodSeconds The duration of the draw period in seconds\n  */\n  function initialize (\n    IDrawHistory _drawHistory,\n    RNGInterface _rng,\n    uint256 _rngRequestPeriodStart,\n    uint256 _drawPeriodSeconds\n  ) public initializer {\n    require(_rngRequestPeriodStart > 0, \"DrawBeacon/rng-request-period-greater-than-zero\");\n    require(address(_rng) != address(0), \"DrawBeacon/rng-not-zero\");\n    rng = _rng;\n\n    __Ownable_init();\n\n    _setDrawPeriodSeconds(_drawPeriodSeconds);\n    drawPeriodStartedAt = _rngRequestPeriodStart;\n\n    _setDrawHistory(_drawHistory);\n\n    // 30 min timeout\n    _setRngRequestTimeout(1800);\n\n    emit Initialized(\n      _drawHistory,\n      _rng,\n      _rngRequestPeriodStart,\n      _drawPeriodSeconds\n    );\n\n    emit DrawBeaconOpened(_msgSender(), _rngRequestPeriodStart);\n  }\n\n  /* ============ Public Functions ============ */\n\n  /**\n    * @notice Returns whether the random number request has completed.\n    * @return True if a random number request has completed, false otherwise.\n   */\n  function isRngCompleted() public view override returns (bool) {\n    return rng.isRequestComplete(rngRequest.id);\n  }\n\n  /**\n    * @notice Returns whether a random number has been requested\n    * @return True if a random number has been requested, false otherwise.\n   */\n  function isRngRequested() public view override returns (bool) {\n    return rngRequest.id != 0;\n  }\n\n  /**\n    * @notice Returns whether the random number request has timed out.\n    * @return True if a random number request has timed out, false otherwise.\n   */\n  function isRngTimedOut() public view override returns (bool) {\n    if (rngRequest.requestedAt == 0) {\n      return false;\n    } else {\n      return _currentTime() > uint256(rngRequestTimeout) + rngRequest.requestedAt;\n    }\n  }\n\n  /* ============ External Functions ============ */\n\n  /**\n    * @notice Returns whether an award process can be started.\n    * @return True if an award can be started, false otherwise.\n   */\n  function canStartRNGRequest() external view override returns (bool) {\n    return _isDrawPeriodOver() && !isRngRequested();\n  }\n\n  /**\n    * @notice Returns whether an award process can be completed.\n    * @return True if an award can be completed, false otherwise.\n   */\n  function canCompleteRNGRequest() external view override returns (bool) {\n    return isRngRequested() && isRngCompleted();\n  }\n\n\n  /**\n    * @notice Calculates when the next draw period will start.\n    * @param currentTime The timestamp to use as the current time\n    * @return The timestamp at which the next draw period would start\n   */\n  function calculateNextDrawPeriodStartTime(uint256 currentTime) external view override returns (uint256) {\n    return _calculateNextDrawPeriodStartTime(currentTime);\n  }\n\n  /**\n    * @notice Can be called by anyone to cancel the RNG request if the RNG has timed out.\n   */\n  function cancelDraw() external override {\n    require(isRngTimedOut(), \"DrawBeacon/rng-not-timedout\");\n    uint32 requestId = rngRequest.id;\n    uint32 lockBlock = rngRequest.lockBlock;\n    delete rngRequest;\n    emit RngRequestFailed();\n    emit DrawBeaconRNGRequestCancelled(msg.sender, requestId, lockBlock);\n  }\n\n  /**\n    * @notice Completes the RNG request and creates a new draw.\n    * @dev    Completes the RNG request, creates a new draw on the DrawHistory and reset draw period start.\n    *\n   */\n  function completeDraw() external override requireCanCompleteRngRequest {\n    uint256 randomNumber = rng.randomNumber(rngRequest.id);\n    delete rngRequest;\n\n    _saveRNGRequestWithDraw(randomNumber);\n\n    // to avoid clock drift, we should calculate the start time based on the previous period start time.\n    drawPeriodStartedAt = _calculateNextDrawPeriodStartTime(_currentTime());\n\n    emit DrawBeaconRNGRequestCompleted(_msgSender(), randomNumber);\n    emit DrawBeaconOpened(_msgSender(), drawPeriodStartedAt);\n  }\n\n  /**\n    * @notice Returns the number of seconds remaining until the rng request can be complete.\n    * @return The number of seconds remaining until the rng request can be complete.\n   */\n  function drawPeriodRemainingSeconds() external view override returns (uint256) {\n    return _drawPeriodRemainingSeconds();\n  }\n\n  /**\n    * @notice Returns the timestamp at which the draw period ends\n    * @return The timestamp at which the draw period ends.\n   */\n  function drawPeriodEndAt() external view override returns (uint256) {\n    return _drawPeriodEndAt();\n  }\n\n  /**\n    * @notice Estimates the remaining blocks until the prize given a number of seconds per block\n    * @param secondsPerBlockMantissa The number of seconds per block to use for the calculation.  Should be a fixed point 18 number like Ether.\n    * @return The estimated number of blocks remaining until the prize can be awarded.\n   */\n  function estimateRemainingBlocksToPrize(uint256 secondsPerBlockMantissa) external view override returns (uint256) {\n    return FixedPoint.divideUintByMantissa(\n      _drawPeriodRemainingSeconds(),\n      secondsPerBlockMantissa\n    );\n  }\n\n  /**\n    * @notice Returns the block number that the current RNG request has been locked to.\n    * @return The block number that the RNG request is locked to\n   */\n  function getLastRngLockBlock() external view override returns (uint32) {\n    return rngRequest.lockBlock;\n  }\n\n  /**\n    * @notice Returns the current RNG Request ID.\n    * @return The current Request ID\n   */\n  function getLastRngRequestId() external view override returns (uint32) {\n    return rngRequest.id;\n  }\n\n  /**\n    * @notice Returns whether the draw period is over\n    * @return True if the draw period is over, false otherwise\n   */\n  function isDrawPeriodOver() external view override returns (bool) {\n    return _isDrawPeriodOver();\n  }\n\n  /**\n    * @notice External function to set DrawHistory.\n    * @dev    External function to set DrawHistory from an authorized manager.\n    * @param newDrawHistory DrawHistory address\n    * @return DrawHistory\n  */\n  function setDrawHistory(IDrawHistory newDrawHistory) external override onlyOwner returns (IDrawHistory) {\n    return _setDrawHistory(newDrawHistory);\n  }\n\n  /**\n    * @notice Starts the award process by starting random number request.  The draw period must have ended.\n    * @dev The RNG-Request-Fee is expected to be held within this contract before calling this function\n   */\n  function startDraw() external override requireCanStartDraw {\n    (address feeToken, uint256 requestFee) = rng.getRequestFee();\n    if (feeToken != address(0) && requestFee > 0) {\n      IERC20Upgradeable(feeToken).safeApprove(address(rng), requestFee);\n    }\n\n    (uint32 requestId, uint32 lockBlock) = rng.requestRandomNumber();\n    rngRequest.id = requestId;\n    rngRequest.lockBlock = lockBlock;\n    rngRequest.requestedAt = _currentTime().toUint32();\n\n    emit DrawBeaconRNGRequestStarted(_msgSender(), requestId, lockBlock);\n  }\n\n  /**\n    * @notice Allows the owner to set the draw period in seconds.\n    * @param drawPeriodSeconds The new draw period in seconds.  Must be greater than zero.\n   */\n  function setDrawPeriodSeconds(uint256 drawPeriodSeconds) external override onlyOwner requireAwardNotInProgress {\n    _setDrawPeriodSeconds(drawPeriodSeconds);\n  }\n  \n  /**\n    * @notice Allows the owner to set the RNG request timeout in seconds. This is the time that must elapsed before the RNG request can be cancelled and the pool unlocked.\n    * @param _rngRequestTimeout The RNG request timeout in seconds.\n   */\n  function setRngRequestTimeout(uint32 _rngRequestTimeout) external override onlyOwner requireAwardNotInProgress {\n    _setRngRequestTimeout(_rngRequestTimeout);\n  }\n\n  /**\n    * @notice Sets the RNG service that the Prize Strategy is connected to\n    * @param rngService The address of the new RNG service interface\n   */\n  function setRngService(RNGInterface rngService) external override onlyOwner requireAwardNotInProgress {\n    require(!isRngRequested(), \"DrawBeacon/rng-in-flight\");\n    rng = rngService;\n    emit RngServiceUpdated(rngService);\n  }\n\n  /* ============ Internal Functions ============ */\n\n  /**\n    * @notice Calculates when the next draw period will start\n    * @param currentTime The timestamp to use as the current time\n    * @return The timestamp at which the next draw period would start\n   */\n  function _calculateNextDrawPeriodStartTime(uint256 currentTime) internal view returns (uint256) {\n    uint256 _drawPeriodStartedAt = drawPeriodStartedAt; // single sload\n    uint256 _drawPeriodSeconds = drawPeriodSeconds; // single sload\n    uint256 elapsedPeriods = (currentTime - _drawPeriodStartedAt) / (_drawPeriodSeconds);\n    return _drawPeriodStartedAt + (elapsedPeriods * _drawPeriodSeconds);\n  }\n\n  /**\n    * @notice returns the current time.  Used for testing.\n    * @return The current time (block.timestamp)\n   */\n  function _currentTime() internal virtual view returns (uint256) {\n    return block.timestamp;\n  }\n\n  /**\n    * @notice Returns the timestamp at which the draw period ends\n    * @return The timestamp at which the draw period ends\n   */\n  function _drawPeriodEndAt() internal view returns (uint256) {\n    return drawPeriodStartedAt + drawPeriodSeconds;\n  }\n\n  /**\n    * @notice Returns the number of seconds remaining until the prize can be awarded.\n    * @return The number of seconds remaining until the prize can be awarded.\n   */\n  function _drawPeriodRemainingSeconds() internal view returns (uint256) {\n    uint256 endAt = _drawPeriodEndAt();\n    uint256 time = _currentTime();\n    if (time > endAt) {\n      return 0;\n    }\n    return endAt - time;\n  }\n\n  /**\n    * @notice Returns whether the draw period is over.\n    * @return True if the draw period is over, false otherwise\n   */\n  function _isDrawPeriodOver() internal view returns (bool) {\n    return _currentTime() >= _drawPeriodEndAt();\n  }\n\n  /**\n    * @notice Check to see award is in progress.\n   */\n  function _requireDrawNotInProgress() internal view {\n    uint256 currentBlock = block.number;\n    require(rngRequest.lockBlock == 0 || currentBlock < rngRequest.lockBlock, \"DrawBeacon/rng-in-flight\");\n  }\n\n  /**\n    * @notice Internal function to set DrawHistory.\n    * @dev    Internal function to set DrawHistory from an authorized manager.\n    * @param _newDrawHistory  DrawHistory address\n    * @return DrawHistory\n  */\n  function _setDrawHistory(IDrawHistory _newDrawHistory) internal returns (IDrawHistory) {\n    IDrawHistory _previousDrawHistory = drawHistory;\n    require(address(_newDrawHistory) != address(0), \"DrawBeacon/draw-history-not-zero-address\");\n    require(address(_newDrawHistory) != address(_previousDrawHistory), \"DrawBeacon/existing-draw-history-address\");\n    drawHistory = _newDrawHistory;\n    emit DrawHistoryTransferred(_previousDrawHistory, _newDrawHistory);\n    return _newDrawHistory;\n  }\n\n  /**\n    * @notice Sets the draw period in seconds.\n    * @param _drawPeriodSeconds The new draw period in seconds.  Must be greater than zero.\n   */\n  function _setDrawPeriodSeconds(uint256 _drawPeriodSeconds) internal {\n    require(_drawPeriodSeconds > 0, \"DrawBeacon/rng-request-period-greater-than-zero\");\n    drawPeriodSeconds = _drawPeriodSeconds;\n\n    emit RngRequestPeriodSecondsUpdated(_drawPeriodSeconds);\n  }\n  \n  /**\n    * @notice Sets the RNG request timeout in seconds.  This is the time that must elapsed before the RNG request can be cancelled and the pool unlocked.\n    * @param _rngRequestTimeout The RNG request timeout in seconds.\n   */\n  function _setRngRequestTimeout(uint32 _rngRequestTimeout) internal {\n    require(_rngRequestTimeout > 60, \"DrawBeacon/rng-timeout-gt-60-secs\");\n    rngRequestTimeout = _rngRequestTimeout;\n    emit RngRequestTimeoutSet(_rngRequestTimeout);\n  }\n\n  /**\n    * @notice Create a new draw using the RNG request result.\n    * @dev    Create a new draw in the connected DrawHistory contract using the RNG request result.\n    * @param randomNumber Randomly generated number\n  */\n  function _saveRNGRequestWithDraw(uint256 randomNumber) internal {\n    DrawLib.Draw memory _draw = DrawLib.Draw({drawId: nextDrawId, timestamp: uint32(block.timestamp), winningRandomNumber: randomNumber});\n    drawHistory.pushDraw(_draw);\n    nextDrawId += 1;\n  }\n\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165CheckerUpgradeable {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165Upgradeable).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable(account).supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n"
    },
    "@pooltogether/fixed-point/contracts/FixedPoint.sol": {
      "content": "/**\nCopyright 2020 PoolTogether Inc.\n\nThis file is part of PoolTogether.\n\nPoolTogether is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation under version 3 of the License.\n\nPoolTogether is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.4.0;\n\nimport \"./external/openzeppelin/OpenZeppelinSafeMath_V3_3_0.sol\";\n\n/**\n * @author Brendan Asselstine\n * @notice Provides basic fixed point math calculations.\n *\n * This library calculates integer fractions by scaling values by 1e18 then performing standard integer math.\n */\nlibrary FixedPoint {\n    using OpenZeppelinSafeMath_V3_3_0 for uint256;\n\n    // The scale to use for fixed point numbers.  Same as Ether for simplicity.\n    uint256 internal constant SCALE = 1e18;\n\n    /**\n        * Calculates a Fixed18 mantissa given the numerator and denominator\n        *\n        * The mantissa = (numerator * 1e18) / denominator\n        *\n        * @param numerator The mantissa numerator\n        * @param denominator The mantissa denominator\n        * @return The mantissa of the fraction\n        */\n    function calculateMantissa(uint256 numerator, uint256 denominator) internal pure returns (uint256) {\n        uint256 mantissa = numerator.mul(SCALE);\n        mantissa = mantissa.div(denominator);\n        return mantissa;\n    }\n\n    /**\n        * Multiplies a Fixed18 number by an integer.\n        *\n        * @param b The whole integer to multiply\n        * @param mantissa The Fixed18 number\n        * @return An integer that is the result of multiplying the params.\n        */\n    function multiplyUintByMantissa(uint256 b, uint256 mantissa) internal pure returns (uint256) {\n        uint256 result = mantissa.mul(b);\n        result = result.div(SCALE);\n        return result;\n    }\n\n    /**\n    * Divides an integer by a fixed point 18 mantissa\n    *\n    * @param dividend The integer to divide\n    * @param mantissa The fixed point 18 number to serve as the divisor\n    * @return An integer that is the result of dividing an integer by a fixed point 18 mantissa\n    */\n    function divideUintByMantissa(uint256 dividend, uint256 mantissa) internal pure returns (uint256) {\n        uint256 result = SCALE.mul(dividend);\n        result = result.div(mantissa);\n        return result;\n    }\n}\n"
    },
    "@pooltogether/v4/contracts/Constants.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\";\n\nlibrary Constants {\n  IERC1820RegistryUpgradeable public constant REGISTRY = IERC1820RegistryUpgradeable(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n  // keccak256(\"ERC777TokensSender\")\n  bytes32 public constant TOKENS_SENDER_INTERFACE_HASH =\n  0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n\n  // keccak256(\"ERC777TokensRecipient\")\n  bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH =\n  0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n\n  // keccak256(abi.encodePacked(\"ERC1820_ACCEPT_MAGIC\"));\n  bytes32 public constant ACCEPT_MAGIC =\n  0xa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4;\n\n  bytes4 public constant ERC165_INTERFACE_ID_ERC165 = 0x01ffc9a7;\n  bytes4 public constant ERC165_INTERFACE_ID_ERC721 = 0x80ac58cd;\n}"
    },
    "@pooltogether/v4/contracts/prize-pool/PrizePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@pooltogether/fixed-point/contracts/FixedPoint.sol\";\n\nimport \"../external/compound/ICompLike.sol\";\n\nimport \"../registry/RegistryInterface.sol\";\nimport \"../reserve/ReserveInterface.sol\";\nimport \"../token/ControlledToken.sol\";\nimport \"../interfaces/IPrizePool.sol\";\n\n/// @title Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.\n///       Users deposit and withdraw from this contract to participate in Prize Pool.\n/// @notice Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\n/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\nabstract contract PrizePool is IPrizePool, OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC721ReceiverUpgradeable {\n  using SafeCastUpgradeable for uint256;\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n  using SafeERC20Upgradeable for IERC721Upgradeable;\n  using ERC165CheckerUpgradeable for address;\n\n  /// @dev Emitted when an instance is initialized\n  event Initialized(\n    address reserveRegistry,\n    uint256 maxExitFeeMantissa\n  );\n\n  /// @dev Event emitted when controlled token is added\n  event ControlledTokenAdded(\n    ControlledTokenInterface indexed token\n  );\n\n  /// @dev Emitted when reserve is captured.\n  event ReserveFeeCaptured(\n    uint256 amount\n  );\n\n  event AwardCaptured(\n    uint256 amount\n  );\n\n  /// @dev Event emitted when assets are deposited\n  event Deposited(\n    address indexed operator,\n    address indexed to,\n    address indexed token,\n    uint256 amount,\n    address referrer\n  );\n\n  /// @dev Event emitted when interest is awarded to a winner\n  event Awarded(\n    address indexed winner,\n    address indexed token,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when external ERC20s are awarded to a winner\n  event AwardedExternalERC20(\n    address indexed winner,\n    address indexed token,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when external ERC20s are transferred out\n  event TransferredExternalERC20(\n    address indexed to,\n    address indexed token,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when external ERC721s are awarded to a winner\n  event AwardedExternalERC721(\n    address indexed winner,\n    address indexed token,\n    uint256[] tokenIds\n  );\n\n  /// @dev Event emitted when assets are withdrawn instantly\n  event InstantWithdrawal(\n    address indexed operator,\n    address indexed from,\n    address indexed token,\n    uint256 amount,\n    uint256 redeemed,\n    uint256 exitFee\n  );\n\n  event ReserveWithdrawal(\n    address indexed to,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when the Liquidity Cap is set\n  event LiquidityCapSet(\n    uint256 liquidityCap\n  );\n\n  /// @dev Event emitted when the Credit plan is set\n  event CreditPlanSet(\n    address token,\n    uint128 creditLimitMantissa,\n    uint128 creditRateMantissa\n  );\n\n  /// @dev Event emitted when the Prize Strategy is set\n  event PrizeStrategySet(\n    address indexed prizeStrategy\n  );\n\n  /// @dev Emitted when credit is minted\n  event CreditMinted(\n    address indexed user,\n    address indexed token,\n    uint256 amount\n  );\n\n  /// @dev Emitted when credit is burned\n  event CreditBurned(\n    address indexed user,\n    address indexed token,\n    uint256 amount\n  );\n\n  /// @dev Emitted when there was an error thrown awarding an External ERC721\n  event ErrorAwardingExternalERC721(bytes error);\n\n\n  struct CreditPlan {\n    uint128 creditLimitMantissa;\n    uint128 creditRateMantissa;\n  }\n\n  struct CreditBalance {\n    uint192 balance;\n    uint32 timestamp;\n    bool initialized;\n  }\n\n  /// @notice Semver Version\n  string constant public VERSION = \"3.4.0\";\n\n  /// @dev Reserve to which reserve fees are sent\n  RegistryInterface public reserveRegistry;\n\n  /// @dev An array of all the controlled tokens\n  ControlledTokenInterface[] internal _tokens;\n\n  /// @dev The Prize Strategy that this Prize Pool is bound to.\n  address public prizeStrategy;\n\n  /// @dev The maximum possible exit fee fraction as a fixed point 18 number.\n  /// For example, if the maxExitFeeMantissa is \"0.1 ether\", then the maximum exit fee for a withdrawal of 100 Dai will be 10 Dai\n  uint256 public maxExitFeeMantissa;\n\n  /// @dev The total funds that have been allocated to the reserve\n  uint256 public reserveTotalSupply;\n\n  /// @dev The total amount of funds that the prize pool can hold.\n  uint256 public liquidityCap;\n\n  /// @dev the The awardable balance\n  uint256 internal _currentAwardBalance;\n\n  /// @dev Stores the credit plan for each token.\n  mapping(address => CreditPlan) internal _tokenCreditPlans;\n\n  /// @dev Stores each users balance of credit per token.\n  mapping(address => mapping(address => CreditBalance)) internal _tokenCreditBalances;\n\n  /// @notice Initializes the Prize Pool\n  /// @param _controlledTokens Array of ControlledTokens that are controlled by this Prize Pool.\n  /// @param _maxExitFeeMantissa The maximum exit fee size\n  function initialize (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa\n  )\n    public\n    initializer\n  {\n    require(address(_reserveRegistry) != address(0), \"PrizePool/reserveRegistry-not-zero\");\n    uint256 controlledTokensLength = _controlledTokens.length;\n    _tokens = new ControlledTokenInterface[](controlledTokensLength);\n\n    for (uint256 i = 0; i < controlledTokensLength; i++) {\n      ControlledTokenInterface controlledToken = _controlledTokens[i];\n      _addControlledToken(controlledToken, i);\n    }\n    __Ownable_init();\n    __ReentrancyGuard_init();\n\n    // NOTE: Updated from _setLiquidityCap(uint256(-1));\n    uint256 liquidityCapMask = type(uint256).max;\n    _setLiquidityCap(liquidityCapMask);\n\n    reserveRegistry = _reserveRegistry;\n    maxExitFeeMantissa = _maxExitFeeMantissa;\n\n    emit Initialized(\n      address(_reserveRegistry),\n      maxExitFeeMantissa\n    );\n  }\n\n  /// @dev Returns the address of the underlying ERC20 asset\n  /// @return The address of the asset\n  function token() external override view returns (address) {\n    return address(_token());\n  }\n\n  /// @dev Returns the total underlying balance of all assets. This includes both principal and interest.\n  /// @return The underlying balance of assets\n  function balance() external returns (uint256) {\n    return _balance();\n  }\n  \n  /// @dev Returns the address of a token in the _tokens array.\n  /// @return Address of token\n  function tokenAtIndex(uint256 tokenIndex) external override view returns (ControlledTokenInterface) {\n    ControlledTokenInterface[] memory __tokens = _tokens;\n    require(tokenIndex < __tokens.length, \"PrizePool/invalid-token-index\");\n    return __tokens[tokenIndex];\n  }\n\n  /// @dev Checks with the Prize Pool if a specific token type may be awarded as an external prize\n  /// @param _externalToken The address of the token to check\n  /// @return True if the token may be awarded, false otherwise\n  function canAwardExternal(address _externalToken) external view returns (bool) {\n    return _canAwardExternal(_externalToken);\n  }\n\n  /// @notice Deposit assets into the Prize Pool in exchange for tokens\n  /// @param to The address receiving the newly minted tokens\n  /// @param amount The amount of assets to deposit\n  /// @param controlledToken The address of the type of token the user is minting\n  /// @param referrer The referrer of the deposit\n  function depositTo(\n    address to,\n    uint256 amount,\n    address controlledToken,\n    address referrer\n  )\n    external override\n    nonReentrant\n    onlyControlledToken(controlledToken)\n    canAddLiquidity(amount)\n  {\n    address operator = _msgSender();\n\n    _mint(to, amount, controlledToken, referrer);\n\n    _token().safeTransferFrom(operator, address(this), amount);\n    _supply(amount);\n\n    emit Deposited(operator, to, controlledToken, amount, referrer);\n  }\n\n  /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\n  /// @param from The address to redeem tokens from.\n  /// @param amount The amount of tokens to redeem for assets.\n  /// @param controlledToken The address of the token to redeem (i.e. ticket or sponsorship)\n  /// @param maximumExitFee The maximum exit fee the caller is willing to pay.  This should be pre-calculated by the calculateExitFee() fxn.\n  /// @return The actual exit fee paid\n  function withdrawInstantlyFrom(\n    address from,\n    uint256 amount,\n    address controlledToken,\n    uint256 maximumExitFee\n  )\n    external override\n    nonReentrant\n    onlyControlledToken(controlledToken)\n    returns (uint256)\n  {\n    (uint256 exitFee, uint256 burnedCredit) = _calculateEarlyExitFeeLessBurnedCredit(from, controlledToken, amount);\n    require(exitFee <= maximumExitFee, \"PrizePool/exit-fee-exceeds-user-maximum\");\n\n    // burn the credit\n    _burnCredit(from, controlledToken, burnedCredit);\n\n    // burn the tickets\n    ControlledToken(controlledToken).controllerBurnFrom(_msgSender(), from, amount);\n\n    // redeem the tickets less the fee\n    uint256 amountLessFee = amount - exitFee;\n    uint256 redeemed = _redeem(amountLessFee);\n\n    _token().safeTransfer(from, redeemed);\n\n    emit InstantWithdrawal(_msgSender(), from, controlledToken, amount, redeemed, exitFee);\n\n    return exitFee;\n  }\n\n  /// @notice Limits the exit fee to the maximum as hard-coded into the contract\n  /// @param withdrawalAmount The amount that is attempting to be withdrawn\n  /// @param exitFee The exit fee to check against the limit\n  /// @return The passed exit fee if it is less than the maximum, otherwise the maximum fee is returned.\n  function _limitExitFee(uint256 withdrawalAmount, uint256 exitFee) internal view returns (uint256) {\n    uint256 maxFee = FixedPoint.multiplyUintByMantissa(withdrawalAmount, maxExitFeeMantissa);\n    if (exitFee > maxFee) {\n      exitFee = maxFee;\n    }\n    return exitFee;\n  }\n\n  /// @notice Returns the balance that is available to award.\n  /// @dev captureAwardBalance() should be called first\n  /// @return The total amount of assets to be awarded for the current prize\n  function awardBalance() external override view returns (uint256) {\n    return _currentAwardBalance;\n  }\n\n  /// @notice Captures any available interest as award balance.\n  /// @dev This function also captures the reserve fees.\n  /// @return The total amount of assets to be awarded for the current prize\n  function captureAwardBalance() external override nonReentrant returns (uint256) {\n    uint256 tokenTotalSupply = _tokenTotalSupply();\n\n    // it's possible for the balance to be slightly less due to rounding errors in the underlying yield source\n    uint256 currentBalance = _balance();\n    uint256 totalInterest = (currentBalance > tokenTotalSupply) ? currentBalance - tokenTotalSupply : 0;\n    uint256 unaccountedPrizeBalance = (totalInterest > _currentAwardBalance) ? totalInterest - _currentAwardBalance : 0;\n\n    if (unaccountedPrizeBalance > 0) {\n      uint256 reserveFee = calculateReserveFee(unaccountedPrizeBalance);\n      if (reserveFee > 0) {\n        reserveTotalSupply = reserveTotalSupply + reserveFee;\n        unaccountedPrizeBalance = unaccountedPrizeBalance - reserveFee;\n        emit ReserveFeeCaptured(reserveFee);\n      }\n      _currentAwardBalance = _currentAwardBalance + unaccountedPrizeBalance;\n\n      emit AwardCaptured(unaccountedPrizeBalance);\n    }\n\n    return _currentAwardBalance;\n  }\n\n  function withdrawReserve(address to) external override onlyReserve returns (uint256) {\n\n    uint256 amount = reserveTotalSupply;\n    reserveTotalSupply = 0;\n    uint256 redeemed = _redeem(amount);\n\n    _token().safeTransfer(address(to), redeemed);\n\n    emit ReserveWithdrawal(to, amount);\n\n    return redeemed;\n  }\n\n  /// @notice Called by the prize strategy to award prizes.\n  /// @dev The amount awarded must be less than the awardBalance()\n  /// @param to The address of the winner that receives the award\n  /// @param amount The amount of assets to be awarded\n  /// @param controlledToken The address of the asset token being awarded\n  function award(\n    address to,\n    uint256 amount,\n    address controlledToken\n  )\n    external override\n    onlyPrizeStrategy\n    onlyControlledToken(controlledToken)\n  {\n    if (amount == 0) {\n      return;\n    }\n\n    require(amount <= _currentAwardBalance, \"PrizePool/award-exceeds-avail\");\n    _currentAwardBalance = _currentAwardBalance - amount;\n\n    _mint(to, amount, controlledToken, address(0));\n\n    uint256 extraCredit = _calculateEarlyExitFeeNoCredit(controlledToken, amount);\n    _accrueCredit(to, controlledToken, IERC20Upgradeable(controlledToken).balanceOf(to), extraCredit);\n\n    emit Awarded(to, controlledToken, amount);\n  }\n\n  /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\n  /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\n  /// @param to The address of the winner that receives the award\n  /// @param amount The amount of external assets to be awarded\n  /// @param externalToken The address of the external asset token being awarded\n  function transferExternalERC20(\n    address to,\n    address externalToken,\n    uint256 amount\n  )\n    external override\n    onlyPrizeStrategy\n  {\n    if (_transferOut(to, externalToken, amount)) {\n      emit TransferredExternalERC20(to, externalToken, amount);\n    }\n  }\n\n  /// @notice Called by the Prize-Strategy to award external ERC20 prizes\n  /// @dev Used to award any arbitrary tokens held by the Prize Pool\n  /// @param to The address of the winner that receives the award\n  /// @param amount The amount of external assets to be awarded\n  /// @param externalToken The address of the external asset token being awarded\n  function awardExternalERC20(\n    address to,\n    address externalToken,\n    uint256 amount\n  )\n    external override\n    onlyPrizeStrategy\n  {\n    if (_transferOut(to, externalToken, amount)) {\n      emit AwardedExternalERC20(to, externalToken, amount);\n    }\n  }\n\n  function _transferOut(\n    address to,\n    address externalToken,\n    uint256 amount\n  )\n    internal\n    returns (bool)\n  {\n    require(_canAwardExternal(externalToken), \"PrizePool/invalid-external-token\");\n\n    if (amount == 0) {\n      return false;\n    }\n\n    IERC20Upgradeable(externalToken).safeTransfer(to, amount);\n\n    return true;\n  }\n\n  /// @notice Called to mint controlled tokens.  Ensures that token listener callbacks are fired.\n  /// @param to The user who is receiving the tokens\n  /// @param amount The amount of tokens they are receiving\n  /// @param controlledToken The token that is going to be minted\n  /// @param referrer The user who referred the minting\n  function _mint(address to, uint256 amount, address controlledToken, address referrer) internal {\n    ControlledToken(controlledToken).controllerMint(to, amount);\n  }\n\n  /// @notice Called by the prize strategy to award external ERC721 prizes\n  /// @dev Used to award any arbitrary NFTs held by the Prize Pool\n  /// @param to The address of the winner that receives the award\n  /// @param externalToken The address of the external NFT token being awarded\n  /// @param tokenIds An array of NFT Token IDs to be transferred\n  function awardExternalERC721(\n    address to,\n    address externalToken,\n    uint256[] calldata tokenIds\n  )\n    external override\n    onlyPrizeStrategy\n  {\n    require(_canAwardExternal(externalToken), \"PrizePool/invalid-external-token\");\n\n    if (tokenIds.length == 0) {\n      return;\n    }\n\n    for (uint256 i = 0; i < tokenIds.length; i++) {\n      try IERC721Upgradeable(externalToken).safeTransferFrom(address(this), to, tokenIds[i]){\n\n      }\n      catch(bytes memory error){\n        emit ErrorAwardingExternalERC721(error);\n      }\n\n    }\n\n    emit AwardedExternalERC721(to, externalToken, tokenIds);\n  }\n\n  /// @notice Calculates the reserve portion of the given amount of funds.  If there is no reserve address, the portion will be zero.\n  /// @param amount The prize amount\n  /// @return The size of the reserve portion of the prize\n  function calculateReserveFee(uint256 amount) public view returns (uint256) {\n    ReserveInterface reserve = ReserveInterface(reserveRegistry.lookup());\n    if (address(reserve) == address(0)) {\n      return 0;\n    }\n    uint256 reserveRateMantissa = reserve.reserveRateMantissa(address(this));\n    if (reserveRateMantissa == 0) {\n      return 0;\n    }\n    return FixedPoint.multiplyUintByMantissa(amount, reserveRateMantissa);\n  }\n\n  /// @notice Calculates the early exit fee for the given amount\n  /// @param from The user who is withdrawing\n  /// @param controlledToken The type of collateral being withdrawn\n  /// @param amount The amount of collateral to be withdrawn\n  /// @return exitFee The exit fee\n  /// @return burnedCredit The user's credit that was burned\n  function calculateEarlyExitFee(\n    address from,\n    address controlledToken,\n    uint256 amount\n  )\n    external override\n    returns (\n      uint256 exitFee,\n      uint256 burnedCredit\n    )\n  {\n    (exitFee, burnedCredit) = _calculateEarlyExitFeeLessBurnedCredit(from, controlledToken, amount);\n  }\n\n  /// @dev Calculates the early exit fee for the given amount\n  /// @param amount The amount of collateral to be withdrawn\n  /// @return Exit fee\n  function _calculateEarlyExitFeeNoCredit(address controlledToken, uint256 amount) internal view returns (uint256) {\n    return _limitExitFee(\n      amount,\n      FixedPoint.multiplyUintByMantissa(amount, _tokenCreditPlans[controlledToken].creditLimitMantissa)\n    );\n  }\n\n  /// @notice Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit.\n  /// @param _principal The principal amount on which interest is accruing\n  /// @param _interest The amount of interest that must accrue\n  /// @return durationSeconds The duration of time it will take to accrue the given amount of interest, in seconds.\n  function estimateCreditAccrualTime(\n    address _controlledToken,\n    uint256 _principal,\n    uint256 _interest\n  )\n    external override\n    view\n    returns (uint256 durationSeconds)\n  {\n    durationSeconds =_estimateCreditAccrualTime(\n      _controlledToken,\n      _principal,\n      _interest\n    );\n  }\n\n  /// @notice Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit\n  /// @param _principal The principal amount on which interest is accruing\n  /// @param _interest The amount of interest that must accrue\n  /// @return durationSeconds The duration of time it will take to accrue the given amount of interest, in seconds.\n  function _estimateCreditAccrualTime(\n    address _controlledToken,\n    uint256 _principal,\n    uint256 _interest\n  )\n    internal\n    view\n    returns (uint256 durationSeconds)\n  {\n    // interest = credit rate * principal * time\n    // => time = interest / (credit rate * principal)\n    uint256 accruedPerSecond = FixedPoint.multiplyUintByMantissa(_principal, _tokenCreditPlans[_controlledToken].creditRateMantissa);\n    if (accruedPerSecond == 0) {\n      return 0;\n    }\n    return (_interest / accruedPerSecond);\n  }\n\n  /// @notice Burns a users credit.\n  /// @param user The user whose credit should be burned\n  /// @param credit The amount of credit to burn\n  function _burnCredit(address user, address controlledToken, uint256 credit) internal {\n    _tokenCreditBalances[controlledToken][user].balance = uint256(_tokenCreditBalances[controlledToken][user].balance - credit).toUint128();\n\n    emit CreditBurned(user, controlledToken, credit);\n  }\n\n  /// @notice Accrues ticket credit for a user assuming their current balance is the passed balance.  May burn credit if they exceed their limit.\n  /// @param user The user for whom to accrue credit\n  /// @param controlledToken The controlled token whose balance we are checking\n  /// @param controlledTokenBalance The balance to use for the user\n  /// @param extra Additional credit to be added\n  function _accrueCredit(address user, address controlledToken, uint256 controlledTokenBalance, uint256 extra) internal {\n    _updateCreditBalance(\n      user,\n      controlledToken,\n      _calculateCreditBalance(user, controlledToken, controlledTokenBalance, extra)\n    );\n  }\n\n  function _calculateCreditBalance(address user, address controlledToken, uint256 controlledTokenBalance, uint256 extra) internal view returns (uint256) {\n    uint256 newBalance;\n    CreditBalance storage creditBalance = _tokenCreditBalances[controlledToken][user];\n    if (!creditBalance.initialized) {\n      newBalance = 0;\n    } else {\n      uint256 credit = _calculateAccruedCredit(user, controlledToken, controlledTokenBalance);\n      newBalance = _applyCreditLimit(controlledToken, controlledTokenBalance, uint256(creditBalance.balance) + credit + extra);\n    }\n    return newBalance;\n  }\n\n  function _updateCreditBalance(address user, address controlledToken, uint256 newBalance) internal {\n    uint256 oldBalance = _tokenCreditBalances[controlledToken][user].balance;\n\n    _tokenCreditBalances[controlledToken][user] = CreditBalance({\n      balance: newBalance.toUint128(),\n      timestamp: _currentTime().toUint32(),\n      initialized: true\n    });\n\n    if (oldBalance < newBalance) {\n      emit CreditMinted(user, controlledToken, newBalance - oldBalance);\n    }\n    else if (newBalance < oldBalance) {\n      emit CreditBurned(user, controlledToken, oldBalance - newBalance);\n    }\n  }\n\n  /// @notice Applies the credit limit to a credit balance.  The balance cannot exceed the credit limit.\n  /// @param controlledToken The controlled token that the user holds\n  /// @param controlledTokenBalance The users ticket balance (used to calculate credit limit)\n  /// @param creditBalance The new credit balance to be checked\n  /// @return The users new credit balance.  Will not exceed the credit limit.\n  function _applyCreditLimit(address controlledToken, uint256 controlledTokenBalance, uint256 creditBalance) internal view returns (uint256) {\n    uint256 creditLimit = FixedPoint.multiplyUintByMantissa(\n      controlledTokenBalance,\n      _tokenCreditPlans[controlledToken].creditLimitMantissa\n    );\n    if (creditBalance > creditLimit) {\n      creditBalance = creditLimit;\n    }\n\n    return creditBalance;\n  }\n\n  /// @notice Calculates the accrued interest for a user\n  /// @param user The user whose credit should be calculated.\n  /// @param controlledToken The controlled token that the user holds\n  /// @param controlledTokenBalance The user's current balance of the controlled tokens.\n  /// @return The credit that has accrued since the last credit update.\n  function _calculateAccruedCredit(address user, address controlledToken, uint256 controlledTokenBalance) internal view returns (uint256) {\n    uint256 userTimestamp = _tokenCreditBalances[controlledToken][user].timestamp;\n\n    if (!_tokenCreditBalances[controlledToken][user].initialized) {\n      return 0;\n    }\n\n    uint256 deltaTime = _currentTime() - userTimestamp;\n    uint256 deltaMantissa = deltaTime * (_tokenCreditPlans[controlledToken].creditRateMantissa);\n    return FixedPoint.multiplyUintByMantissa(controlledTokenBalance, deltaMantissa);\n  }\n\n  /// @notice Returns the credit balance for a given user.  Not that this includes both minted credit and pending credit.\n  /// @param user The user whose credit balance should be returned\n  /// @return The balance of the users credit\n  function balanceOfCredit(address user, address controlledToken) external override onlyControlledToken(controlledToken) returns (uint256) {\n    _accrueCredit(user, controlledToken, IERC20Upgradeable(controlledToken).balanceOf(user), 0);\n    return _tokenCreditBalances[controlledToken][user].balance;\n  }\n\n  /// @notice Sets the rate at which credit accrues per second.  The credit rate is a fixed point 18 number (like Ether).\n  /// @param _controlledToken The controlled token for whom to set the credit plan\n  /// @param _creditRateMantissa The credit rate to set.  Is a fixed point 18 decimal (like Ether).\n  /// @param _creditLimitMantissa The credit limit to set.  Is a fixed point 18 decimal (like Ether).\n  function setCreditPlanOf(\n    address _controlledToken,\n    uint128 _creditRateMantissa,\n    uint128 _creditLimitMantissa\n  )\n    external override\n    onlyControlledToken(_controlledToken)\n    onlyOwner\n  {\n    _tokenCreditPlans[_controlledToken] = CreditPlan({\n      creditLimitMantissa: _creditLimitMantissa,\n      creditRateMantissa: _creditRateMantissa\n    });\n\n    emit CreditPlanSet(_controlledToken, _creditLimitMantissa, _creditRateMantissa);\n  }\n\n  /// @notice Returns the credit rate of a controlled token\n  /// @param controlledToken The controlled token to retrieve the credit rates for\n  /// @return creditLimitMantissa The credit limit fraction.  This number is used to calculate both the credit limit and early exit fee.\n  /// @return creditRateMantissa The credit rate. This is the amount of tokens that accrue per second.\n  function creditPlanOf(\n    address controlledToken\n  )\n    external override\n    view\n    returns (\n      uint128 creditLimitMantissa,\n      uint128 creditRateMantissa\n    )\n  {\n    creditLimitMantissa = _tokenCreditPlans[controlledToken].creditLimitMantissa;\n    creditRateMantissa = _tokenCreditPlans[controlledToken].creditRateMantissa;\n  }\n\n  /// @notice Calculate the early exit for a user given a withdrawal amount.  The user's credit is taken into account.\n  /// @param from The user who is withdrawing\n  /// @param controlledToken The token they are withdrawing\n  /// @param amount The amount of funds they are withdrawing\n  /// @return earlyExitFee The additional exit fee that should be charged.\n  /// @return creditBurned The amount of credit that will be burned\n  function _calculateEarlyExitFeeLessBurnedCredit(\n    address from,\n    address controlledToken,\n    uint256 amount\n  )\n    internal\n    returns (\n      uint256 earlyExitFee,\n      uint256 creditBurned\n    )\n  {\n    uint256 controlledTokenBalance = IERC20Upgradeable(controlledToken).balanceOf(from);\n    require(controlledTokenBalance >= amount, \"PrizePool/insuff-funds\");\n    _accrueCredit(from, controlledToken, controlledTokenBalance, 0);\n    /*\n    The credit is used *last*.  Always charge the fees up-front.\n\n    How to calculate:\n\n    Calculate their remaining exit fee.  I.e. full exit fee of their balance less their credit.\n\n    If the exit fee on their withdrawal is greater than the remaining exit fee, then they'll have to pay the difference.\n    */\n\n    // Determine available usable credit based on withdraw amount\n    uint256 remainingExitFee = _calculateEarlyExitFeeNoCredit(controlledToken, controlledTokenBalance - amount);\n\n    uint256 availableCredit;\n    if (_tokenCreditBalances[controlledToken][from].balance >= remainingExitFee) {\n      availableCredit = uint256(_tokenCreditBalances[controlledToken][from].balance) - remainingExitFee;\n    }\n\n    // Determine amount of credit to burn and amount of fees required\n    uint256 totalExitFee = _calculateEarlyExitFeeNoCredit(controlledToken, amount);\n    creditBurned = (availableCredit > totalExitFee) ? totalExitFee : availableCredit;\n    earlyExitFee = totalExitFee - creditBurned;\n  }\n\n  /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\n  /// @param _liquidityCap The new liquidity cap for the prize pool\n  function setLiquidityCap(uint256 _liquidityCap) external override onlyOwner {\n    _setLiquidityCap(_liquidityCap);\n  }\n\n  function _setLiquidityCap(uint256 _liquidityCap) internal {\n    liquidityCap = _liquidityCap;\n    emit LiquidityCapSet(_liquidityCap);\n  }\n\n  /// @notice Adds a new controlled token\n  /// @param _controlledToken The controlled token to add.\n  /// @param index The index to add the controlledToken\n  function _addControlledToken(ControlledTokenInterface _controlledToken, uint256 index) internal {\n    _tokens[index] = _controlledToken;\n    emit ControlledTokenAdded(_controlledToken);\n  }\n\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\n  /// @param _prizeStrategy The new prize strategy\n  function setPrizeStrategy(address _prizeStrategy) external override onlyOwner {\n    _setPrizeStrategy(_prizeStrategy);\n  }\n\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\n  /// @param _prizeStrategy The new prize strategy\n  function _setPrizeStrategy(address _prizeStrategy) internal {\n    require(_prizeStrategy != address(0), \"PrizePool/prizeStrategy-not-zero\");\n\n    prizeStrategy = _prizeStrategy;\n\n    emit PrizeStrategySet(_prizeStrategy);\n  }\n\n  /// @notice An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)\n  /// @return An array of controlled token addresses\n  function tokens() external override view returns (ControlledTokenInterface[] memory) {\n    return _tokens;\n  }\n\n  /// @dev Gets the current time as represented by the current block\n  /// @return The timestamp of the current block\n  function _currentTime() internal virtual view returns (uint256) {\n    return block.timestamp;\n  }\n\n  /// @notice The total of all controlled tokens\n  /// @return The current total of all tokens\n  function accountedBalance() external override view returns (uint256) {\n    return _tokenTotalSupply();\n  }\n\n  /// @notice Delegate the votes for a Compound COMP-like token held by the prize pool\n  /// @param compLike The COMP-like token held by the prize pool that should be delegated\n  /// @param to The address to delegate to\n  function compLikeDelegate(ICompLike compLike, address to) external onlyOwner {\n    if (compLike.balanceOf(address(this)) > 0) {\n      compLike.delegate(to);\n    }\n  }\n\n  /// @notice Required for ERC721 safe token transfers from smart contracts.\n  /// @param operator The address that acts on behalf of the owner\n  /// @param from The current owner of the NFT\n  /// @param tokenId The NFT to transfer\n  /// @param data Additional data with no specified format, sent in call to `_to`.\n  function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external override returns (bytes4){\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\n  }\n\n  /// @notice The total of all controlled tokens\n  /// @return The current total of all tokens\n  function _tokenTotalSupply() internal view returns (uint256) {\n    uint256 total = reserveTotalSupply;\n    ControlledTokenInterface[] memory tokens = _tokens; // SLOAD\n    uint256 tokensLength = tokens.length;\n\n    for(uint256 i = 0; i < tokensLength; i++){\n      total = total + IERC20Upgradeable(tokens[i]).totalSupply();\n    }\n\n    return total;\n  }\n\n  /// @dev Checks if the Prize Pool can receive liquidity based on the current cap\n  /// @param _amount The amount of liquidity to be added to the Prize Pool\n  /// @return True if the Prize Pool can receive the specified amount of liquidity\n  function _canAddLiquidity(uint256 _amount) internal view returns (bool) {\n    uint256 tokenTotalSupply = _tokenTotalSupply();\n    return (tokenTotalSupply + _amount <= liquidityCap);\n  }\n\n  /// @dev Checks if a specific token is controlled by the Prize Pool\n  /// @param controlledToken The address of the token to check\n  /// @return True if the token is a controlled token, false otherwise\n  function _isControlled(ControlledTokenInterface controlledToken) internal view returns (bool) {\n    ControlledTokenInterface[] memory tokens = _tokens; // SLOAD\n    uint256 tokensLength = tokens.length;\n\n    for(uint256 i = 0; i < tokensLength; i++) {\n      if(tokens[i] == controlledToken) return true;\n    }\n    return false;\n  }\n\n  /// @dev Checks if a specific token is controlled by the Prize Pool\n  /// @param controlledToken The address of the token to check\n  /// @return True if the token is a controlled token, false otherwise\n  function isControlled(ControlledTokenInterface controlledToken) external view returns (bool) {\n    return _isControlled(controlledToken);\n  }\n\n  /// @notice Determines whether the passed token can be transferred out as an external award.\n  /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\n  /// prize strategy should not be allowed to move those tokens.\n  /// @param _externalToken The address of the token to check\n  /// @return True if the token may be awarded, false otherwise\n  function _canAwardExternal(address _externalToken) internal virtual view returns (bool);\n\n  /// @notice Returns the ERC20 asset token used for deposits.\n  /// @return The ERC20 asset token\n  function _token() internal virtual view returns (IERC20Upgradeable);\n\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\n  /// @return The underlying balance of asset tokens\n  function _balance() internal virtual returns (uint256);\n\n  /// @notice Supplies asset tokens to the yield source.\n  /// @param mintAmount The amount of asset tokens to be supplied\n  function _supply(uint256 mintAmount) internal virtual;\n\n  /// @notice Redeems asset tokens from the yield source.\n  /// @param redeemAmount The amount of yield-bearing tokens to be redeemed\n  /// @return The actual amount of tokens that were redeemed.\n  function _redeem(uint256 redeemAmount) internal virtual returns (uint256);\n\n  /// @dev Function modifier to ensure usage of tokens controlled by the Prize Pool\n  /// @param controlledToken The address of the token to check\n  modifier onlyControlledToken(address controlledToken) {\n    require(_isControlled(ControlledTokenInterface(controlledToken)), \"PrizePool/unknown-token\");\n    _;\n  }\n\n  /// @dev Function modifier to ensure caller is the prize-strategy\n  modifier onlyPrizeStrategy() {\n    require(_msgSender() == prizeStrategy, \"PrizePool/only-prizeStrategy\");\n    _;\n  }\n\n  /// @dev Function modifier to ensure the deposit amount does not exceed the liquidity cap (if set)\n  modifier canAddLiquidity(uint256 _amount) {\n    require(_canAddLiquidity(_amount), \"PrizePool/exceeds-liquidity-cap\");\n    _;\n  }\n\n  modifier onlyReserve() {\n    ReserveInterface reserve = ReserveInterface(reserveRegistry.lookup());\n    require(address(reserve) == msg.sender, \"PrizePool/only-reserve\");\n    _;\n  }\n}\n"
    },
    "@pooltogether/v4/contracts/prize-strategy/PeriodicPrizeStrategyListenerInterface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\n/* solium-disable security/no-block-members */\ninterface PeriodicPrizeStrategyListenerInterface is IERC165Upgradeable {\n  function afterPrizePoolAwarded(uint256 randomNumber, uint256 prizePeriodStartedAt) external;\n}\n"
    },
    "@pooltogether/v4/contracts/prize-strategy/PeriodicPrizeStrategyListenerLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nlibrary PeriodicPrizeStrategyListenerLibrary {\n  /*\n    *     bytes4(keccak256('afterPrizePoolAwarded(uint256,uint256)')) == 0x575072c6\n    */\n  bytes4 public constant ERC165_INTERFACE_ID_PERIODIC_PRIZE_STRATEGY_LISTENER = 0x575072c6;\n}\n"
    },
    "@pooltogether/v4/contracts/prize-strategy/BeforeAwardListener.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"./BeforeAwardListenerInterface.sol\";\nimport \"../Constants.sol\";\nimport \"./BeforeAwardListenerLibrary.sol\";\n\nabstract contract BeforeAwardListener is BeforeAwardListenerInterface {\n  function supportsInterface(bytes4 interfaceId) external override view returns (bool) {\n    return (\n      interfaceId == Constants.ERC165_INTERFACE_ID_ERC165 || \n      interfaceId == BeforeAwardListenerLibrary.ERC165_INTERFACE_ID_BEFORE_AWARD_LISTENER\n    );\n  }\n}"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@pooltogether/fixed-point/contracts/external/openzeppelin/OpenZeppelinSafeMath_V3_3_0.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// NOTE: Copied from OpenZeppelin Contracts version 3.3.0\n\npragma solidity >=0.4.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary OpenZeppelinSafeMath_V3_3_0 {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820RegistryUpgradeable {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(\n        address account,\n        bytes32 _interfaceHash,\n        address implementer\n    ) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     * @param account Address of the contract for which to update the cache.\n     * @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not.\n     * If the result is not cached a direct lookup on the contract address is performed.\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     * {updateERC165Cache} with the contract address.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@pooltogether/v4/contracts/external/compound/ICompLike.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface ICompLike is IERC20Upgradeable {\n  function getCurrentVotes(address account) external view returns (uint96);\n  function delegate(address delegatee) external;\n}\n"
    },
    "@pooltogether/v4/contracts/registry/RegistryInterface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\n/// @title Interface that allows a user to draw an address using an index\ninterface RegistryInterface {\n  function lookup() external view returns (address);\n}\n"
    },
    "@pooltogether/v4/contracts/reserve/ReserveInterface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\n/// @title Interface that allows a user to draw an address using an index\ninterface ReserveInterface {\n  function reserveRateMantissa(address prizePool) external view returns (uint256);\n}\n"
    },
    "@pooltogether/v4/contracts/token/ControlledToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\n\nimport \"./ControlledTokenInterface.sol\";\n\n/// @title Controlled ERC20 Token\n/// @notice ERC20 Tokens with a controller for minting & burning\ncontract ControlledToken is ERC20PermitUpgradeable, ControlledTokenInterface {\n\n  /// @dev Emitted when an instance is initialized\n  event Initialized(\n    string _name,\n    string _symbol,\n    uint8 _decimals,\n    address _controller\n  );\n\n  /// @notice Interface to the contract responsible for controlling mint/burn\n  address public override controller;\n\n  /// @notice ERC20 controlled token decimals.\n  uint8 private _decimals;\n\n  /// @notice Initializes the Controlled Token with Token Details and the Controller\n  /// @param _name The name of the Token\n  /// @param _symbol The symbol for the Token\n  /// @param decimals_ The number of decimals for the Token\n  /// @param _controller Address of the Controller contract for minting & burning\n  function initialize(\n    string memory _name,\n    string memory _symbol,\n    uint8 decimals_,\n    address _controller\n  )\n    public\n    virtual\n    initializer\n  {\n    require(address(_controller) != address(0), \"ControlledToken/controller-not-zero\");\n    controller = _controller;\n\n    __ERC20_init(_name, _symbol);\n    __ERC20Permit_init(\"PoolTogether ControlledToken\");\n    _decimals = decimals_;\n\n    emit Initialized(\n      _name,\n      _symbol,\n      _decimals,\n      _controller\n    );\n  }\n\n  /// @notice Allows the controller to mint tokens for a user account\n  /// @dev May be overridden to provide more granular control over minting\n  /// @param _user Address of the receiver of the minted tokens\n  /// @param _amount Amount of tokens to mint\n  function controllerMint(address _user, uint256 _amount) external virtual override onlyController {\n    _mint(_user, _amount);\n  }\n\n  /// @notice Allows the controller to burn tokens from a user account\n  /// @dev May be overridden to provide more granular control over burning\n  /// @param _user Address of the holder account to burn tokens from\n  /// @param _amount Amount of tokens to burn\n  function controllerBurn(address _user, uint256 _amount) external virtual override onlyController {\n    _burn(_user, _amount);\n  }\n\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\n  /// @dev May be overridden to provide more granular control over operator-burning\n  /// @param _operator Address of the operator performing the burn action via the controller contract\n  /// @param _user Address of the holder account to burn tokens from\n  /// @param _amount Amount of tokens to burn\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external virtual override onlyController {\n    if (_operator != _user) {\n      uint256 decreasedAllowance = allowance(_user, _operator) - _amount;\n      _approve(_user, _operator, decreasedAllowance);\n    }\n    _burn(_user, _amount);\n  }\n\n  /// @notice Returns the ERC20 controlled token decimals.\n  /// @dev This value should be equal to the decimals of the token used to deposit into the pool.\n  /// @return uint8 decimals.\n  function decimals() public view virtual override returns (uint8) {\n    return _decimals;\n  }\n\n  /// @dev Function modifier to ensure that the caller is the controller contract\n  modifier onlyController {\n    require(_msgSender() == address(controller), \"ControlledToken/only-controller\");\n    _;\n  }\n}\n"
    },
    "@pooltogether/v4/contracts/interfaces/IPrizePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../token/ControlledTokenInterface.sol\";\n\n/// @title Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.\n///       Users deposit and withdraw from this contract to participate in Prize Pool.\n/// @notice Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\n/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\ninterface IPrizePool {\n\n  /// @dev Returns the address of a token in the _tokens array.\n  /// @return Address of token\n  function tokenAtIndex(uint256 tokenIndex) external returns (ControlledTokenInterface);\n\n  /// @notice Deposit assets into the Prize Pool in exchange for tokens\n  /// @param to The address receiving the newly minted tokens\n  /// @param amount The amount of assets to deposit\n  /// @param controlledToken The address of the type of token the user is minting\n  /// @param referrer The referrer of the deposit\n  function depositTo(\n    address to,\n    uint256 amount,\n    address controlledToken,\n    address referrer\n  )\n    external;\n\n  /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\n  /// @param from The address to redeem tokens from.\n  /// @param amount The amount of tokens to redeem for assets.\n  /// @param controlledToken The address of the token to redeem (i.e. ticket or sponsorship)\n  /// @param maximumExitFee The maximum exit fee the caller is willing to pay.  This should be pre-calculated by the calculateExitFee() fxn.\n  /// @return The actual exit fee paid\n  function withdrawInstantlyFrom(\n    address from,\n    uint256 amount,\n    address controlledToken,\n    uint256 maximumExitFee\n  ) external returns (uint256);\n\n  function withdrawReserve(address to) external returns (uint256);\n\n  /// @notice Returns the balance that is available to award.\n  /// @dev captureAwardBalance() should be called first\n  /// @return The total amount of assets to be awarded for the current prize\n  function awardBalance() external view returns (uint256);\n\n  /// @notice Captures any available interest as award balance.\n  /// @dev This function also captures the reserve fees.\n  /// @return The total amount of assets to be awarded for the current prize\n  function captureAwardBalance() external returns (uint256);\n\n  /// @notice Called by the prize strategy to award prizes.\n  /// @dev The amount awarded must be less than the awardBalance()\n  /// @param to The address of the winner that receives the award\n  /// @param amount The amount of assets to be awarded\n  /// @param controlledToken The address of the asset token being awarded\n  function award(\n    address to,\n    uint256 amount,\n    address controlledToken\n  )\n    external;\n\n  /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\n  /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\n  /// @param to The address of the winner that receives the award\n  /// @param amount The amount of external assets to be awarded\n  /// @param externalToken The address of the external asset token being awarded\n  function transferExternalERC20(\n    address to,\n    address externalToken,\n    uint256 amount\n  )\n    external;\n\n  /// @notice Called by the Prize-Strategy to award external ERC20 prizes\n  /// @dev Used to award any arbitrary tokens held by the Prize Pool\n  /// @param to The address of the winner that receives the award\n  /// @param amount The amount of external assets to be awarded\n  /// @param externalToken The address of the external asset token being awarded\n  function awardExternalERC20(\n    address to,\n    address externalToken,\n    uint256 amount\n  )\n    external;\n\n  /// @notice Called by the prize strategy to award external ERC721 prizes\n  /// @dev Used to award any arbitrary NFTs held by the Prize Pool\n  /// @param to The address of the winner that receives the award\n  /// @param externalToken The address of the external NFT token being awarded\n  /// @param tokenIds An array of NFT Token IDs to be transferred\n  function awardExternalERC721(\n    address to,\n    address externalToken,\n    uint256[] calldata tokenIds\n  )\n    external;\n\n  /// @notice Calculates the early exit fee for the given amount\n  /// @param from The user who is withdrawing\n  /// @param controlledToken The type of collateral being withdrawn\n  /// @param amount The amount of collateral to be withdrawn\n  /// @return exitFee The exit fee\n  /// @return burnedCredit The user's credit that was burned\n  function calculateEarlyExitFee(\n    address from,\n    address controlledToken,\n    uint256 amount\n  )\n    external\n    returns (\n      uint256 exitFee,\n      uint256 burnedCredit\n    );\n\n  /// @notice Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit.\n  /// @param _principal The principal amount on which interest is accruing\n  /// @param _interest The amount of interest that must accrue\n  /// @return durationSeconds The duration of time it will take to accrue the given amount of interest, in seconds.\n  function estimateCreditAccrualTime(\n    address _controlledToken,\n    uint256 _principal,\n    uint256 _interest\n  )\n    external\n    view\n    returns (uint256 durationSeconds);\n\n  /// @notice Returns the credit balance for a given user.  Not that this includes both minted credit and pending credit.\n  /// @param user The user whose credit balance should be returned\n  /// @return The balance of the users credit\n  function balanceOfCredit(address user, address controlledToken) external returns (uint256);\n\n  /// @notice Sets the rate at which credit accrues per second.  The credit rate is a fixed point 18 number (like Ether).\n  /// @param _controlledToken The controlled token for whom to set the credit plan\n  /// @param _creditRateMantissa The credit rate to set.  Is a fixed point 18 decimal (like Ether).\n  /// @param _creditLimitMantissa The credit limit to set.  Is a fixed point 18 decimal (like Ether).\n  function setCreditPlanOf(\n    address _controlledToken,\n    uint128 _creditRateMantissa,\n    uint128 _creditLimitMantissa\n  )\n    external;\n\n  /// @notice Returns the credit rate of a controlled token\n  /// @param controlledToken The controlled token to retrieve the credit rates for\n  /// @return creditLimitMantissa The credit limit fraction.  This number is used to calculate both the credit limit and early exit fee.\n  /// @return creditRateMantissa The credit rate. This is the amount of tokens that accrue per second.\n  function creditPlanOf(\n    address controlledToken\n  )\n    external\n    view\n    returns (\n      uint128 creditLimitMantissa,\n      uint128 creditRateMantissa\n    );\n\n  /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\n  /// @param _liquidityCap The new liquidity cap for the prize pool\n  function setLiquidityCap(uint256 _liquidityCap) external;\n\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\n  /// @param _prizeStrategy The new prize strategy.  Must implement ClaimableDrawPrizeStrategy\n  function setPrizeStrategy(address _prizeStrategy) external;\n\n  /// @dev Returns the address of the underlying ERC20 asset\n  /// @return The address of the asset\n  function token() external view returns (address);\n\n  /// @notice An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)\n  /// @return An array of controlled token addresses\n  function tokens() external view returns (ControlledTokenInterface[] memory);\n\n  /// @notice The total of all controlled tokens\n  /// @return The current total of all tokens\n  function accountedBalance() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal initializer {\n        __Context_init_unchained();\n        __EIP712_init_unchained(name, \"1\");\n        __ERC20Permit_init_unchained(name);\n    }\n\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\n        _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@pooltogether/v4/contracts/token/ControlledTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\n/// @title Controlled ERC20 Token\n/// @notice ERC20 Tokens with a controller for minting & burning\ninterface ControlledTokenInterface is IERC20Upgradeable {\n\n  /// @notice Interface to the contract responsible for controlling mint/burn\n  function controller() external view returns (address);\n\n  /// @notice Allows the controller to mint tokens for a user account\n  /// @dev May be overridden to provide more granular control over minting\n  /// @param _user Address of the receiver of the minted tokens\n  /// @param _amount Amount of tokens to mint\n  function controllerMint(address _user, uint256 _amount) external;\n\n  /// @notice Allows the controller to burn tokens from a user account\n  /// @dev May be overridden to provide more granular control over burning\n  /// @param _user Address of the holder account to burn tokens from\n  /// @param _amount Amount of tokens to burn\n  function controllerBurn(address _user, uint256 _amount) external;\n\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\n  /// @dev May be overridden to provide more granular control over operator-burning\n  /// @param _operator Address of the operator performing the burn action via the controller contract\n  /// @param _user Address of the holder account to burn tokens from\n  /// @param _amount Amount of tokens to burn\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal initializer {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return recover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return recover(hash, r, vs);\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@pooltogether/v4/contracts/prize-strategy/BeforeAwardListenerInterface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\n/// @notice The interface for the Periodic Prize Strategy before award listener.  This listener will be called immediately before the award is distributed.\ninterface BeforeAwardListenerInterface is IERC165Upgradeable {\n  /// @notice Called immediately before the award is distributed\n  function beforePrizePoolAwarded(uint256 randomNumber, uint256 prizePeriodStartedAt) external;\n}\n"
    },
    "@pooltogether/v4/contracts/prize-strategy/BeforeAwardListenerLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nlibrary BeforeAwardListenerLibrary {\n  /*\n    *     bytes4(keccak256('beforePrizePoolAwarded(uint256,uint256)')) == 0x4cdf9c3e\n    */\n  bytes4 public constant ERC165_INTERFACE_ID_BEFORE_AWARD_LISTENER = 0x4cdf9c3e;\n}"
    },
    "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\nimport \"@pooltogether/yield-source-interface/contracts/IYieldSource.sol\";\n\nimport \"./PrizePool.sol\";\n\ncontract YieldSourcePrizePool is PrizePool {\n\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n  using AddressUpgradeable for address;\n\n  IYieldSource public yieldSource;\n\n  event YieldSourcePrizePoolInitialized(address indexed yieldSource);\n\n  /// @notice Initializes the Prize Pool and Yield Service with the required contract connections\n  /// @param _controlledTokens Array of addresses for the Ticket and Sponsorship Tokens controlled by the Prize Pool\n  /// @param _maxExitFeeMantissa The maximum exit fee size, relative to the withdrawal amount\n  /// @param _yieldSource Address of the yield source\n  function initializeYieldSourcePrizePool (\n    RegistryInterface _reserveRegistry,\n    ControlledTokenInterface[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    IYieldSource _yieldSource\n  )\n    public\n    initializer\n  {\n    require(address(_yieldSource) != address(0), \"YieldSourcePrizePool/yield-source-not-zero\");\n    PrizePool.initialize(\n      _reserveRegistry,\n      _controlledTokens,\n      _maxExitFeeMantissa\n    );\n    yieldSource = _yieldSource;\n\n    // A hack to determine whether it's an actual yield source\n    (bool succeeded,) = address(_yieldSource).staticcall(abi.encodePacked(_yieldSource.depositToken.selector));\n    require(succeeded, \"YieldSourcePrizePool/invalid-yield-source\");\n\n    emit YieldSourcePrizePoolInitialized(address(_yieldSource));\n  }\n\n  /// @notice Determines whether the passed token can be transferred out as an external award.\n  /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\n  /// prize strategy should not be allowed to move those tokens.\n  /// @param _externalToken The address of the token to check\n  /// @return True if the token may be awarded, false otherwise\n  function _canAwardExternal(address _externalToken) internal override view returns (bool) {\n    return _externalToken != address(yieldSource);\n  }\n\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\n  /// @return The underlying balance of asset tokens\n  function _balance() internal override returns (uint256) {\n    return yieldSource.balanceOfToken(address(this));\n  }\n\n  function _token() internal override view returns (IERC20Upgradeable) {\n    return IERC20Upgradeable(yieldSource.depositToken());\n  }\n\n  /// @notice Supplies asset tokens to the yield source.\n  /// @param mintAmount The amount of asset tokens to be supplied\n  function _supply(uint256 mintAmount) internal override {\n    _token().safeApprove(address(yieldSource), mintAmount);\n    yieldSource.supplyTokenTo(mintAmount, address(this));\n  }\n\n  /// @notice Redeems asset tokens from the yield source.\n  /// @param redeemAmount The amount of yield-bearing tokens to be redeemed\n  /// @return The actual amount of tokens that were redeemed.\n  function _redeem(uint256 redeemAmount) internal override returns (uint256) {\n    return yieldSource.redeemToken(redeemAmount);\n  }\n}"
    },
    "@pooltogether/yield-source-interface/contracts/IYieldSource.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.0;\n\n/// @title Defines the functions used to interact with a yield source.  The Prize Pool inherits this contract.\n/// @notice Prize Pools subclasses need to implement this interface so that yield can be generated.\ninterface IYieldSource {\n\n  /// @notice Returns the ERC20 asset token used for deposits.\n  /// @return The ERC20 asset token address.\n  function depositToken() external view returns (address);\n\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\n  /// @return The underlying balance of asset tokens.\n  function balanceOfToken(address addr) external returns (uint256);\n\n  /// @notice Supplies tokens to the yield source.  Allows assets to be supplied on other user's behalf using the `to` param.\n  /// @param amount The amount of asset tokens to be supplied.  Denominated in `depositToken()` as above.\n  /// @param to The user whose balance will receive the tokens\n  function supplyTokenTo(uint256 amount, address to) external;\n\n  /// @notice Redeems tokens from the yield source.\n  /// @param amount The amount of asset tokens to withdraw.  Denominated in `depositToken()` as above.\n  /// @return The actual amount of interst bearing tokens that were redeemed.\n  function redeemToken(uint256 amount) external returns (uint256);\n\n}\n"
    },
    "@pooltogether/v4/contracts/Ticket.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\n\nimport \"hardhat/console.sol\";\n\nimport \"./libraries/OverflowSafeComparator.sol\";\nimport \"./libraries/TwabLibrary.sol\";\nimport \"./interfaces/TicketInterface.sol\";\nimport \"./token/ControlledToken.sol\";\n\n/// @title An ERC20 token that allows you to see user's past balances, and average balance held between timestamps.\n/// @author PoolTogether Inc.\ncontract Ticket is ControlledToken, TicketInterface {\n  /// @notice The minimum length of time a twab should exist.\n  /// @dev Once the twab ttl expires, its storage slot is recycled.\n  uint32 public constant TWAB_TIME_TO_LIVE = 24 weeks;\n  /// @notice The maximum number of twab entries\n  uint16 public constant MAX_CARDINALITY = 65535;\n\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n  using SafeCastUpgradeable for uint256;\n\n  /// @notice A struct containing details for an Account\n  /// @param balance The current balance for an Account\n  /// @param nextTwabIndex The next available index to store a new twab\n  /// @param cardinality The number of recorded twabs (plus one!)\n  struct AccountDetails {\n    uint224 balance;\n    uint16 nextTwabIndex;\n    uint16 cardinality;\n  }\n\n  /// @notice Combines account details with their twab history\n  /// @param details The account details\n  /// @param twabs The history of twabs for this account\n  struct Account {\n    AccountDetails details;\n    TwabLibrary.Twab[MAX_CARDINALITY] twabs;\n  }\n\n  event Delegated(\n    address indexed user,\n    address indexed delegate\n  );\n\n  /// @notice Emitted when ticket is initialized.\n  /// @param name Ticket name (eg: PoolTogether Dai Ticket (Compound)).\n  /// @param symbol Ticket symbol (eg: PcDAI).\n  /// @param decimals Ticket decimals.\n  /// @param controller Token controller address.\n  event TicketInitialized(\n    string name,\n    string symbol,\n    uint8 decimals,\n    address controller\n  );\n\n  /// @notice Emitted when a new TWAB has been recorded.\n  /// @param ticketHolder The Ticket holder address.\n  /// @param user The recipient of the ticket power (may be the same as the ticketHolder)\n  /// @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\n  event NewUserTwab(\n    address indexed ticketHolder,\n    address indexed user,\n    TwabLibrary.Twab newTwab\n  );\n\n  /// @notice Emitted when a new total supply TWAB has been recorded.\n  /// @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\n  event NewTotalSupplyTwab(\n    TwabLibrary.Twab newTotalSupplyTwab\n  );\n\n  /// @notice Record of token holders TWABs for each account.\n  mapping (address => Account) internal userTwabs;\n\n  /// @notice ERC20 ticket token decimals.\n  uint8 private _decimals;\n\n  /// @notice Record of tickets total supply and most recent TWAB index.\n  Account internal totalSupplyTwab;\n\n  /// @notice Mapping of delegates.  Each address can delegate their ticket power to another.\n  mapping(address => address) delegates;\n\n  /// @notice Each address's balance\n  mapping(address => uint256) balances;\n\n  /// @notice Initializes Ticket with passed parameters.\n  /// @param _name ERC20 ticket token name.\n  /// @param _symbol ERC20 ticket token symbol.\n  /// @param decimals_ ERC20 ticket token decimals.\n  function initialize (\n    string calldata _name,\n    string calldata _symbol,\n    uint8 decimals_,\n    address _controller\n  ) public virtual override initializer {\n    __ERC20_init(_name, _symbol);\n    __ERC20Permit_init(\"PoolTogether Ticket\");\n\n    require(decimals_ > 0, \"Ticket/decimals-gt-zero\");\n    _decimals = decimals_;\n\n    require(_controller != address(0), \"Ticket/controller-not-zero-address\");\n\n    ControlledToken.initialize(_name, _symbol, _decimals, _controller);\n\n    emit TicketInitialized(_name, _symbol, decimals_, _controller);\n  }\n\n  /// @notice Gets a users twap context.  This is a struct with their balance, next twab index, and cardinality.\n  /// @param _user The user for whom to fetch the TWAB context\n  /// @return The TWAB context, which includes { balance, nextTwabIndex, cardinality }\n  function getAccountDetails(address _user) external view returns (AccountDetails memory) {\n    return userTwabs[_user].details;\n  }\n\n  /// @notice Gets the TWAB at a specific index for a user.\n  /// @param _user The user for whom to fetch the TWAB\n  /// @param _index The index of the TWAB to fetch\n  /// @return The TWAB, which includes the twab amount and the timestamp.\n  function getTwab(address _user, uint16 _index) external view returns (TwabLibrary.Twab memory) {\n    return userTwabs[_user].twabs[_index];\n  }\n\n  /// @notice Retrieves `_user` TWAB balance.\n  /// @param _user Address of the user whose TWAB is being fetched.\n  /// @param _target Timestamp at which the reserved TWAB should be for.\n  function getBalanceAt(address _user, uint256 _target) external override view returns (uint256) {\n    Account storage account = userTwabs[_user];\n    return _getBalanceAt(account.twabs, account.details, _target);\n  }\n\n  /// @notice Retrieves `_user` TWAB balance.\n  /// @param _target Timestamp at which the reserved TWAB should be for.\n  function _getBalanceAt(TwabLibrary.Twab[MAX_CARDINALITY] storage _twabs, AccountDetails memory _details, uint256 _target) internal view returns (uint256) {\n    return TwabLibrary.getBalanceAt(\n      _details.cardinality,\n      _details.nextTwabIndex,\n      _twabs,\n      _details.balance,\n      uint32(_target),\n      uint32(block.timestamp)\n    );\n  }\n\n  /// @notice Calculates the average balance held by a user for a given time frame.\n  /// @param _user The user whose balance is checked\n  /// @param _startTime The start time of the time frame.\n  /// @param _endTime The end time of the time frame.\n  /// @return The average balance that the user held during the time frame.\n  function getAverageBalanceBetween(address _user, uint256 _startTime, uint256 _endTime) external override view returns (uint256) {\n    Account storage account = userTwabs[_user];\n    return _getAverageBalanceBetween(account.twabs, account.details, uint32(_startTime), uint32(_endTime));\n  }\n\n  /// @notice Calculates the average balance held by a user for a given time frame.\n  /// @param _startTime The start time of the time frame.\n  /// @param _endTime The end time of the time frame.\n  /// @return The average balance that the user held during the time frame.\n  function _getAverageBalanceBetween(TwabLibrary.Twab[MAX_CARDINALITY] storage _twabs, AccountDetails memory _details, uint32 _startTime, uint32 _endTime) internal view returns (uint256) {\n    return TwabLibrary.getAverageBalanceBetween(\n      _details.cardinality,\n      _details.nextTwabIndex,\n      _twabs,\n      _details.balance,\n      _startTime,\n      _endTime,\n      uint32(block.timestamp)\n    );\n  }\n\n  /// @notice Retrieves `_user` TWAB balances.\n  /// @param _user Address of the user whose TWABs are being fetched.\n  /// @param _targets Timestamps at which the reserved TWABs should be for.\n  /// @return uint256[] `_user` TWAB balances.\n  function getBalancesAt(address _user, uint32[] calldata _targets) external override view returns (uint256[] memory) {\n    uint256 length = _targets.length;\n    uint256[] memory balances = new uint256[](length);\n\n    Account storage twabContext = userTwabs[_user];\n    AccountDetails memory details = twabContext.details;\n\n    for(uint256 i = 0; i < length; i++) {\n      balances[i] = _getBalanceAt(twabContext.twabs, details, _targets[i]);\n    }\n\n    return balances;\n  }\n\n  /// @notice Retrieves ticket TWAB `totalSupply`.\n  /// @param _target Timestamp at which the reserved TWAB should be for.\n  function getTotalSupply(uint32 _target) override external view returns (uint256) {\n    return _getBalanceAt(totalSupplyTwab.twabs, totalSupplyTwab.details, _target);\n  }\n\n  /// @notice Retrieves ticket TWAB `totalSupplies`.\n  /// @param _targets Timestamps at which the reserved TWABs should be for.\n  /// @return uint256[] ticket TWAB `totalSupplies`.\n  function getTotalSupplies(uint32[] calldata _targets) external view override returns (uint256[] memory){\n    uint256 length = _targets.length;\n    uint256[] memory totalSupplies = new uint256[](length);\n\n    AccountDetails memory details = totalSupplyTwab.details;\n\n    for(uint256 i = 0; i < length; i++) {\n      totalSupplies[i] = _getBalanceAt(totalSupplyTwab.twabs, details, _targets[i]);\n    }\n\n    return totalSupplies;\n  }\n\n  function delegateOf(address _user) external view returns (address) {\n    return delegates[_user];\n  }\n\n  /// @notice Returns the ERC20 ticket token balance of a ticket holder.\n  /// @return uint256 `_user` ticket token balance.\n  function _balanceOf(address _user) internal view returns (uint256) {\n    return balances[_user];\n  }\n\n  /// @notice Returns the ERC20 ticket token decimals.\n  /// @dev This value should be equal to the decimals of the token used to deposit into the pool.\n  /// @return uint8 decimals.\n  function decimals() public view virtual override returns (uint8) {\n    return _decimals;\n  }\n\n  /// @notice Returns the ERC20 ticket token balance of a ticket holder.\n  /// @return uint224 `_user` ticket token balance.\n  function balanceOf(address _user) public view override returns (uint256) {\n    return _balanceOf(_user);\n  }\n\n  /// @notice Returns the ERC20 ticket token total supply.\n  /// @return uint256 Total supply of the ERC20 ticket token.\n  function totalSupply() public view virtual override returns (uint256) {\n    return totalSupplyTwab.details.balance;\n  }\n\n  function delegate(address to) external virtual {\n    uint224 balance = uint224(_balanceOf(msg.sender));\n    address currentDelegate = delegates[msg.sender];\n\n    if (currentDelegate != address(0)) {\n      _decreaseUserTwab(msg.sender, currentDelegate, balance);\n    } else {\n      _decreaseUserTwab(msg.sender, msg.sender, balance);\n    }\n\n    if (to != address(0)) {\n      _increaseUserTwab(msg.sender, to, balance);\n    } else {\n      _increaseUserTwab(msg.sender, msg.sender, balance);\n    }\n\n    delegates[msg.sender] = to;\n\n    emit Delegated(msg.sender, to);\n  }\n\n  /// @notice Overridding of the `_transfer` function of the base ERC20Upgradeable contract.\n  /// @dev `_sender` cannot be the zero address.\n  /// @dev `_recipient` cannot be the zero address.\n  /// @dev `_sender` must have a balance of at least `_amount`.\n  /// @param _sender Address of the `_sender`that will send `_amount` of tokens.\n  /// @param _recipient Address of the `_recipient`that will receive `_amount` of tokens.\n  /// @param _amount Amount of tokens to be transferred from `_sender` to `_recipient`.\n  function _transfer(\n    address _sender,\n    address _recipient,\n    uint256 _amount\n  ) internal override virtual {\n    require(_sender != address(0), \"ERC20: transfer from the zero address\");\n    require(_recipient != address(0), \"ERC20: transfer to the zero address\");\n\n    uint224 amount = uint224(_amount);\n\n    _beforeTokenTransfer(_sender, _recipient, _amount);\n\n    if (_sender != _recipient) {\n\n      // standard balance update\n      uint256 senderBalance = balances[_sender];\n      require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n      unchecked {\n          balances[_sender] = senderBalance - amount;\n      }\n      balances[_recipient] += amount;\n\n      // history update\n      address senderDelegate = delegates[_sender];\n      if (senderDelegate != address(0)) {\n        _decreaseUserTwab(_sender, senderDelegate, _amount);\n      } else {\n        _decreaseUserTwab(_sender, _sender, _amount);\n      }\n\n      // history update\n      address recipientDelegate = delegates[_recipient];\n      if (recipientDelegate != address(0)) {\n        _increaseUserTwab(_recipient, recipientDelegate, amount);\n      } else {\n        _increaseUserTwab(_recipient, _recipient, amount);\n      }\n\n    }\n\n    emit Transfer(_sender, _recipient, _amount);\n\n    _afterTokenTransfer(_sender, _recipient, _amount);\n  }\n\n  /// @notice Overridding of the `_mint` function of the base ERC20Upgradeable contract.\n  /// @dev `_to` cannot be the zero address.\n  /// @param _to Address that will be minted `_amount` of tokens.\n  /// @param _amount Amount of tokens to be minted to `_to`.\n  function _mint(address _to, uint256 _amount) internal virtual override {\n    require(_to != address(0), \"ERC20: mint to the zero address\");\n\n    uint224 amount = _amount.toUint224();\n\n    _beforeTokenTransfer(address(0), _to, _amount);\n\n    balances[_to] += amount;\n\n    (TwabLibrary.Twab memory totalSupply, bool tsIsNew) = increaseTwab(totalSupplyTwab, amount);\n    if (tsIsNew) {\n      emit NewTotalSupplyTwab(totalSupply);\n    }\n\n    address toDelegate = delegates[_to];\n    if (toDelegate != address(0)) {\n      _increaseUserTwab(_to, toDelegate, amount);\n    } else {\n      _increaseUserTwab(_to, _to, amount);\n    }\n\n    emit Transfer(address(0), _to, _amount);\n\n    _afterTokenTransfer(address(0), _to, _amount);\n  }\n\n  /// @notice Overridding of the `_burn` function of the base ERC20Upgradeable contract.\n  /// @dev `_from` cannot be the zero address.\n  /// @dev `_from` must have at least `_amount` of tokens.\n  /// @param _from Address that will be burned `_amount` of tokens.\n  /// @param _amount Amount of tokens to be burnt from `_from`.\n  function _burn(address _from, uint256 _amount) internal virtual override {\n    require(_from != address(0), \"ERC20: burn from the zero address\");\n\n    uint224 amount = _amount.toUint224();\n\n    _beforeTokenTransfer(_from, address(0), _amount);\n\n    (TwabLibrary.Twab memory tsTwab, bool tsIsNew) = decreaseTwab(\n      totalSupplyTwab,\n      amount,\n      \"ERC20: burn amount exceeds balance\"\n    );\n    if (tsIsNew) {\n      emit NewTotalSupplyTwab(tsTwab);\n    }\n\n    uint256 accountBalance = balances[_from];\n    require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n    unchecked {\n        balances[_from] = accountBalance - amount;\n    }\n\n    address fromDelegate = delegates[_from];\n    if (fromDelegate != address(0)) {\n      _decreaseUserTwab(_from, fromDelegate, amount);\n    } else {\n      _decreaseUserTwab(_from, _from, amount);\n    }\n\n    emit Transfer(_from, address(0), _amount);\n\n    _afterTokenTransfer(_from, address(0), _amount);\n  }\n\n  function _increaseUserTwab(\n    address _holder,\n    address _user,\n    uint256 _amount\n  ) internal {\n    Account storage _account = userTwabs[_user];\n    // console.log(\"_increaseUserTwab \", _user);\n    (TwabLibrary.Twab memory twab, bool isNew) = increaseTwab(_account, _amount);\n    if (isNew) {\n      // console.log(\"!!! new twab: \", twab.timestamp);\n      emit NewUserTwab(_holder, _user, twab);\n    }\n  }\n\n  function _decreaseUserTwab(\n    address _holder,\n    address _user,\n    uint256 _amount\n  ) internal {\n    Account storage _account = userTwabs[_user];\n    // console.log(\"_decreaseUserTwab \", _user);\n    (TwabLibrary.Twab memory twab, bool isNew) = decreaseTwab(_account, _amount, \"ERC20: burn amount exceeds balance\");\n    if (isNew) {\n      // console.log(\"!!! new twab: \", twab.timestamp);\n      emit NewUserTwab(_holder, _user, twab);\n    }\n  }\n\n  /// @notice Increases an account's balance and records a new twab.\n  /// @param _account The account whose balance will be increased\n  /// @param _amount The amount to increase the balance by\n  /// @return twab The user's latest TWAB\n  /// @return isNew Whether the TWAB is new\n  function increaseTwab(\n    Account storage _account,\n    uint256 _amount\n  ) internal returns (TwabLibrary.Twab memory twab, bool isNew) {\n    uint16 nextTwabIndex;\n    uint16 cardinality;\n    AccountDetails memory details = _account.details;\n    (nextTwabIndex, cardinality, twab, isNew) = TwabLibrary.update(\n      details.balance,\n      details.nextTwabIndex,\n      details.cardinality,\n      _account.twabs,\n      uint32(block.timestamp),\n      TWAB_TIME_TO_LIVE\n    );\n    _account.details = AccountDetails({\n      balance: (details.balance + _amount).toUint224(),\n      nextTwabIndex: nextTwabIndex,\n      cardinality: cardinality\n    });\n  }\n\n  /// @notice Decreases an account's balance and records a new twab.\n  /// @param _account The account whose balance will be decreased\n  /// @param _amount The amount to decrease the balance by\n  /// @param _message The revert message in the event of insufficient balance\n  /// @return twab The user's latest TWAB\n  /// @return isNew Whether the TWAB is new\n  function decreaseTwab(\n    Account storage _account,\n    uint256 _amount,\n    string memory _message\n  ) internal returns (TwabLibrary.Twab memory twab, bool isNew) {\n    uint16 nextTwabIndex;\n    uint16 cardinality;\n    AccountDetails memory details = _account.details;\n    require(details.balance >= _amount, _message);\n    (nextTwabIndex, cardinality, twab, isNew) = TwabLibrary.update(\n      details.balance,\n      details.nextTwabIndex,\n      details.cardinality,\n      _account.twabs,\n      uint32(block.timestamp),\n      TWAB_TIME_TO_LIVE\n    );\n    _account.details = AccountDetails({\n      balance: (details.balance - _amount).toUint224(),\n      nextTwabIndex: nextTwabIndex,\n      cardinality: cardinality\n    });\n  }\n\n}\n"
    },
    "@pooltogether/v4/contracts/libraries/OverflowSafeComparator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\n/// @title OverflowSafeComparator library to share comparator functions between contracts\n/// @author PoolTogether Inc.\nlibrary OverflowSafeComparator {\n  /// @notice 32-bit timestamps comparator.\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\n  /// @param _b Timestamp to compare against `_a`.\n  /// @param _timestamp A timestamp truncated to 32 bits.\n  /// @return bool Whether `_a` is chronologically < `_b`.\n  function lt(\n      uint32 _a,\n      uint32 _b,\n      uint32 _timestamp\n  ) internal pure returns (bool) {\n      // No need to adjust if there hasn't been an overflow\n      if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\n\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n      return aAdjusted < bAdjusted;\n  }\n\n  /// @notice 32-bit timestamps comparator.\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\n  /// @param _b Timestamp to compare against `_a`.\n  /// @param _timestamp A timestamp truncated to 32 bits.\n  /// @return bool Whether `_a` is chronologically <= `_b`.\n  function lte(\n      uint32 _a,\n      uint32 _b,\n      uint32 _timestamp\n  ) internal pure returns (bool) {\n      // No need to adjust if there hasn't been an overflow\n      if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\n\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n      return aAdjusted <= bAdjusted;\n  }\n\n  function checkedSub(\n      uint32 _a,\n      uint32 _b,\n      uint32 _timestamp\n  ) internal pure returns (uint32) {\n      // No need to adjust if there hasn't been an overflow\n      if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\n\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n      return uint32(aAdjusted - bAdjusted);\n  }\n}\n"
    },
    "@pooltogether/v4/contracts/libraries/TwabLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\n\nimport \"./OverflowSafeComparator.sol\";\n\n/// @title Time-Weighted Average Balance Library\n/// @notice This library allows you to efficiently track a user's historic balance.  You can get a\n/// @author PoolTogether Inc.\nlibrary TwabLibrary {\n  using OverflowSafeComparator for uint32;\n  using SafeCastUpgradeable for uint256;\n\n  /// @notice The maximum number of twab entries\n  uint16 public constant MAX_CARDINALITY = 65535;\n\n  /// @notice Time Weighted Average Balance (TWAB).\n  /// @param amount `amount` at `timestamp`.\n  /// @param timestamp Recorded `timestamp`.\n  struct Twab {\n    uint224 amount;\n    uint32 timestamp;\n  }\n\n  /// @notice Ensures the passed cardinality is a minimum of 1\n  /// @param _cardinality The cardinality to ensure a floor of 1\n  /// @return Returns 1 if the given cardinality is zero, otherwise return the cardinality\n  function _minCardinality(uint16 _cardinality) internal pure returns (uint16) {\n    return _cardinality > 0 ? _cardinality : 1;\n  }\n\n  /// @notice Retrieves TWAB balance.\n  /// @param _target Timestamp at which the reserved TWAB should be for.\n  function getBalanceAt(\n    uint16 _cardinality,\n    uint16 _nextTwabIndex,\n    Twab[MAX_CARDINALITY] storage _twabs,\n    uint224 _balance,\n    uint32 _target,\n    uint32 _time\n  ) internal view returns (uint256) {\n    uint16 cardinality = _minCardinality(_cardinality);\n    uint16 recentIndex = mostRecentIndex(_nextTwabIndex, cardinality);\n    return getBalanceAt(_twabs, _target, _balance, recentIndex, cardinality, _time);\n  }\n\n  /// @notice Calculates the average balance held by an Account for a given time frame.\n  /// @param _startTime The start time of the time frame.\n  /// @param _endTime The end time of the time frame.\n  /// @param _time The current time\n  /// @return The average balance that the user held during the time frame.\n  function getAverageBalanceBetween(\n    uint16 _cardinality,\n    uint16 _nextTwabIndex,\n    Twab[MAX_CARDINALITY] storage _twabs,\n    uint224 _balance,\n    uint32 _startTime,\n    uint32 _endTime,\n    uint32 _time\n  ) internal view returns (uint256) {\n    uint16 card = _minCardinality(_cardinality);\n    uint16 recentIndex = mostRecentIndex(_nextTwabIndex, card);\n    return getAverageBalanceBetween(\n      _twabs,\n      _balance,\n      recentIndex,\n      _startTime,\n      _endTime,\n      card,\n      _time\n    );\n  }\n\n  /// @notice Decreases an account's balance and records a new twab.\n  /// @param _balance The balance held since the last update\n  /// @param _time The current time\n  /// @param _ttl The time-to-live for TWABs. This is essentially how long twabs are kept around.  History is not available longer than the time-to-live.\n  /// @return nextTwabIndex\n  /// @return cardinality\n  /// @return twab The user's latest TWAB\n  /// @return isNew Whether the TWAB is new\n  function update(\n    uint224 _balance,\n    uint16 _nextTwabIndex,\n    uint16 _cardinality,\n    Twab[MAX_CARDINALITY] storage _twabs,\n    uint32 _time,\n    uint32 _ttl\n  ) internal returns (uint16 nextTwabIndex, uint16 cardinality, Twab memory twab, bool isNew) {\n    (nextTwabIndex, cardinality, twab, isNew) = nextTwabWithExpiry(\n      _twabs,\n      _balance,\n      _nextTwabIndex,\n      _cardinality,\n      _time,\n      _ttl\n    );\n  }\n\n  /// @dev A struct that just used internally to bypass the stack variable limitation\n  struct AvgHelper {\n    uint16 twabIndex;\n    uint16 oldestTwabIndex;\n    uint32 startTime;\n    uint32 endTime;\n    uint16 cardinality;\n  }\n\n  /// @notice Returns TWAB index.\n  /// @dev `twabs` is a circular buffer of `MAX_CARDINALITY` size equal to 32. So the array goes from 0 to 31.\n  /// @dev In order to navigate the circular buffer, we need to use the modulo operator.\n  /// @dev For example, if `_index` is equal to 32, `_index % MAX_CARDINALITY` will return 0 and will point to the first element of the array.\n  /// @param _index Index used to navigate through `twabs` circular buffer.\n  function wrapCardinality(uint256 _index, uint16 _cardinality) internal pure returns (uint16) {\n    return uint16(_index % _cardinality);\n  }\n\n  /// @notice Returns the index of the last recorded TWAB\n  /// @param _nextAvailableIndex The next available twab index.  This will be recorded to next.\n  /// @param _cardinality The cardinality of the TWAB history.\n  /// @return The index of the last recorded TWAB\n  function mostRecentIndex(uint256 _nextAvailableIndex, uint16 _cardinality) internal pure returns (uint16) {\n    if (_cardinality == 0) {\n      return 0;\n    }\n    return wrapCardinality(_nextAvailableIndex + uint256(_cardinality) - 1, _cardinality);\n  }\n\n  /// @notice Fetches TWABs `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\n  /// The result may be the same TWAB, or adjacent TWABs.\n  /// @dev The answer must be contained in the array, used when the target is located within the stored TWAB.\n  /// boundaries: older than the most recent TWAB and younger, or the same age as, the oldest TWAB.\n  /// @param _twabs List of TWABs to search through.\n  /// @param _twabIndex Index of the TWAB to start searching from.\n  /// @param _target Timestamp at which the reserved TWAB should be for.\n  /// @return beforeOrAt TWAB recorded before, or at, the target.\n  /// @return atOrAfter TWAB recorded at, or after, the target.\n  function binarySearch(\n    Twab[MAX_CARDINALITY] storage _twabs,\n    uint16 _twabIndex,\n    uint16 _oldestTwabIndex,\n    uint32 _target,\n    uint16 _cardinality,\n    uint32 _time\n  ) internal view returns (Twab memory beforeOrAt, Twab memory atOrAfter) {\n    uint256 leftSide = _oldestTwabIndex; // Oldest TWAB\n    uint256 rightSide = _twabIndex < leftSide ? leftSide + _cardinality - 1 : _twabIndex;\n    uint256 currentIndex;\n\n    while (true) {\n      currentIndex = (leftSide + rightSide) / 2;\n      beforeOrAt = _twabs[wrapCardinality(currentIndex, _cardinality)];\n      uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\n\n      // We've landed on an uninitialized timestamp, keep searching higher (more recently)\n      if (beforeOrAtTimestamp == 0) {\n        leftSide = currentIndex + 1;\n        continue;\n      }\n\n      atOrAfter = _twabs[wrapCardinality(currentIndex + 1, _cardinality)];\n\n      bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\n\n      // Check if we've found the corresponding TWAB\n      if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\n        break;\n      }\n\n      // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower\n      if (!targetAtOrAfter) rightSide = currentIndex - 1;\n\n      // Otherwise, we keep searching higher\n      else leftSide = currentIndex + 1;\n    }\n  }\n\n  /// @notice Calculates the TWAB for a given timestamp.  It interpolates as necessary.\n  /// @param _twabs The TWAB history\n  function calculateTwab(\n    Twab[MAX_CARDINALITY] storage _twabs,\n    Twab memory newestTwab,\n    Twab memory oldestTwab,\n    uint16 _twabIndex,\n    uint16 _oldestTwabIndex,\n    uint32 targetTimestamp,\n    uint224 _currentBalance,\n    uint16 _cardinality,\n    uint32 _time\n  ) internal view returns (Twab memory) {\n    // If `targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\n    if (newestTwab.timestamp.lt(targetTimestamp, _time)) {\n      return Twab({\n        amount: newestTwab.amount + _currentBalance*(targetTimestamp - newestTwab.timestamp),\n        timestamp: targetTimestamp\n      });\n    }\n\n    if (newestTwab.timestamp == targetTimestamp) {\n      return newestTwab;\n    }\n\n    if (oldestTwab.timestamp == targetTimestamp) {\n      return oldestTwab;\n    }\n\n    // If `targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\n    if (targetTimestamp.lt(oldestTwab.timestamp, _time)) {\n      return Twab({\n        amount: 0,\n        timestamp: targetTimestamp\n      });\n    }\n\n    // Otherwise, both timestamps must be surrounded by twabs.\n    (Twab memory beforeOrAtStart, Twab memory afterOrAtStart) = binarySearch(_twabs, _twabIndex, _oldestTwabIndex, targetTimestamp, _cardinality, _time);\n\n    uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) / (afterOrAtStart.timestamp - beforeOrAtStart.timestamp);\n    uint224 amount = beforeOrAtStart.amount + heldBalance * (targetTimestamp - beforeOrAtStart.timestamp);\n\n    return Twab({\n      amount: amount,\n      timestamp: targetTimestamp\n    });\n  }\n\n  function getAverageBalanceBetween(\n    Twab[MAX_CARDINALITY] storage _twabs,\n    uint224 _currentBalance,\n    uint16 _twabIndex,\n    uint32 _startTime,\n    uint32 _endTime,\n    uint16 _cardinality,\n    uint32 _time\n  ) internal view returns (uint256) {\n    require(_endTime > _startTime, \"start time must be greater than end time\");\n\n    // Find oldest Twab\n    uint16 oldestTwabIndex = wrapCardinality(_twabIndex + 1, _cardinality);\n    Twab memory oldestTwab = _twabs[oldestTwabIndex];\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\n    if (oldestTwab.timestamp == 0) {\n      oldestTwabIndex = 0;\n      oldestTwab = _twabs[0];\n    }\n\n    return _getAverageBalanceBetween(\n      _twabs,\n      _currentBalance,\n      AvgHelper({\n        twabIndex: _twabIndex,\n        oldestTwabIndex: oldestTwabIndex,\n        startTime: _startTime,\n        endTime: _endTime,\n        cardinality: _cardinality\n      }),\n      oldestTwab,\n      _time\n    );\n  }\n\n  function _getAverageBalanceBetween(\n    Twab[MAX_CARDINALITY] storage _twabs,\n    uint224 _currentBalance,\n    AvgHelper memory helper,\n    Twab memory _oldestTwab,\n    uint32 _time\n  ) private view returns (uint256) {\n    uint32 endTime = helper.endTime > _time ? _time : helper.endTime;\n\n    Twab memory newestTwab = _twabs[helper.twabIndex];\n\n    Twab memory startTwab = calculateTwab(\n      _twabs, newestTwab, _oldestTwab, helper.twabIndex, helper.oldestTwabIndex, helper.startTime, _currentBalance, helper.cardinality, _time\n    );\n    Twab memory endTwab = calculateTwab(\n      _twabs, newestTwab, _oldestTwab, helper.twabIndex, helper.oldestTwabIndex, endTime, _currentBalance, helper.cardinality, _time\n    );\n\n    // Difference in amount / time\n    return (endTwab.amount - startTwab.amount) / (endTwab.timestamp - startTwab.timestamp);\n  }\n\n  /// @notice Retrieves amount at `_target` timestamp\n  /// @param _twabs List of TWABs to search through.\n  /// @param _currentBalance Most recent amount recorded.\n  /// @param _target Timestamp at which the reserved TWAB should be for.\n  /// @param _twabIndex Most recent TWAB index recorded.\n  /// @return uint256 TWAB amount at `_target`.\n  function getBalanceAt(\n    Twab[MAX_CARDINALITY] storage _twabs,\n    uint32 _target,\n    uint256 _currentBalance,\n    uint16 _twabIndex,\n    uint16 _cardinality,\n    uint32 _time\n  ) internal view returns (uint256) {\n    uint32 targetTimestamp = _target > _time ? _time : _target;\n\n    Twab memory afterOrAt;\n    Twab memory beforeOrAt = _twabs[_twabIndex];\n\n    // If `targetTimestamp` is chronologically after the newest TWAB, we can simply return the current balance\n    if (beforeOrAt.timestamp.lte(targetTimestamp, _time)) {\n      return _currentBalance;\n    }\n\n    // Now, set before to the oldest TWAB\n    uint16 oldestTwabIndex = wrapCardinality(_twabIndex + 1, _cardinality);\n    beforeOrAt = _twabs[oldestTwabIndex];\n\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\n    if (beforeOrAt.timestamp == 0) {\n      oldestTwabIndex = 0;\n      beforeOrAt = _twabs[0];\n    }\n\n    // If `targetTimestamp` is chronologically before the oldest TWAB, we can early return\n    if (targetTimestamp.lt(beforeOrAt.timestamp, _time)) {\n      return 0;\n    }\n\n    // Otherwise, we perform the `binarySearch`\n    (beforeOrAt, afterOrAt) = binarySearch(_twabs, _twabIndex, oldestTwabIndex, _target, _cardinality, _time);\n\n    // Difference in amount / time\n    uint224 differenceInAmount = afterOrAt.amount - beforeOrAt.amount;\n    uint32 differenceInTime = afterOrAt.timestamp - beforeOrAt.timestamp;\n\n    return differenceInAmount / differenceInTime;\n  }\n\n  /// @notice Records a new TWAB.\n  /// @param _currentBalance Current `amount`.\n  /// @return New TWAB that was recorded.\n  function nextTwab(\n    Twab memory _currentTwab,\n    uint256 _currentBalance,\n    uint32 _time\n  ) internal pure returns (Twab memory) {\n    // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\n    return Twab({\n      amount: (uint256(_currentTwab.amount) + (_currentBalance * (_time.checkedSub(_currentTwab.timestamp, _time)))).toUint224(),\n      timestamp: _time\n    });\n  }\n\n  function calculateNextWithExpiry(\n    Twab[MAX_CARDINALITY] storage _twabs,\n    uint16 _nextTwabIndex,\n    uint16 _cardinality,\n    uint32 _time,\n    uint32 _ttl\n  ) internal view returns (uint16 nextAvailableTwabIndex, uint16 nextCardinality) {\n    uint16 cardinality = _cardinality > 0 ? _cardinality : 1;\n/*\n    TTL: 100\n\n    Example 1:\n      next twab timestamp: 100\n\n      existing twab timestamps:\n      0: 10\n      1: 90\n\n      we should not eliminate 0 or else the history will be 10 seconds long\n\n    Example 2:\n\n      next twab timestamp: 105\n\n      existing twab timestamps\n      0: 1\n      1: 5\n\n      We can eliminate 0, because the history will be 100 seconds long\n\n    Q: when do we eliminate the oldest twab?\n    A: when current time - second oldest twab >= time to live\n    */\n\n    Twab memory secondOldestTwab;\n    // if there are two or more records (cardinality is always one greater than # of records)\n    if (cardinality > 2) {\n      // get the second oldest twab\n      secondOldestTwab = _twabs[wrapCardinality(uint32(_nextTwabIndex) + 1, cardinality)];\n    }\n\n    nextCardinality = cardinality;\n    if (secondOldestTwab.timestamp == 0 || _time.checkedSub(secondOldestTwab.timestamp, _time) < _ttl) {\n      nextCardinality = cardinality < MAX_CARDINALITY ? cardinality + 1 : MAX_CARDINALITY;\n    }\n\n    nextAvailableTwabIndex = wrapCardinality(uint32(_nextTwabIndex) + 1, nextCardinality);\n  }\n\n  function nextTwabWithExpiry(\n    Twab[MAX_CARDINALITY] storage _twabs,\n    uint224 _balance,\n    uint16 _nextTwabIndex,\n    uint16 _cardinality,\n    uint32 _time,\n    uint32 _maxLifetime\n  ) internal returns (uint16 nextAvailableTwabIndex, uint16 nextCardinality, Twab memory twab, bool isNew) {\n    Twab memory newestTwab = _twabs[mostRecentIndex(_nextTwabIndex, _cardinality)];\n\n    // if we're in the same block, return\n    if (newestTwab.timestamp == _time) {\n      return (_nextTwabIndex, _cardinality, newestTwab, false);\n    }\n\n    (nextAvailableTwabIndex, nextCardinality) = calculateNextWithExpiry(_twabs, _nextTwabIndex, _cardinality, _time, _maxLifetime);\n\n    Twab memory newTwab = nextTwab(\n      newestTwab,\n      _balance,\n      _time\n    );\n\n    _twabs[_nextTwabIndex] = newTwab;\n\n    return (nextAvailableTwabIndex, nextCardinality, newTwab, true);\n  }\n}\n"
    },
    "@pooltogether/v4/contracts/test/ERC20Mintable.sol": {
      "content": "pragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\n * which have permission to mint (create) new tokens as they see fit.\n *\n * At construction, the deployer of the contract is the only minter.\n */\ncontract ERC20Mintable is ERC20Upgradeable {\n\n    constructor(string memory _name, string memory _symbol) {\n        __ERC20_init(_name, _symbol);\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the {MinterRole}.\n     */\n    function mint(address account, uint256 amount) public returns (bool) {\n        _mint(account, amount);\n        return true;\n    }\n\n    function burn(address account, uint256 amount) public returns (bool) {\n        _burn(account, amount);\n        return true;\n    }\n\n    function masterTransfer(address from, address to, uint256 amount) public {\n        _transfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4/contracts/test/ERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4/contracts/test/ERC20Mintable.sol';\n"
    },
    "@pooltogether/v4/contracts/registry/Registry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./RegistryInterface.sol\";\n\n/// @title Interface that allows a user to draw an address using an index\ncontract Registry is OwnableUpgradeable, RegistryInterface {\n  address private pointer;\n\n  event Registered(address indexed pointer);\n\n  constructor () public {\n    __Ownable_init();\n  }\n\n  function register(address _pointer) external onlyOwner {\n    pointer = _pointer;\n\n    emit Registered(pointer);\n  }\n\n  function lookup() external override view returns (address) {\n    return pointer;\n  }\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4/contracts/registry/Registry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4/contracts/registry/Registry.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4/contracts/Ticket.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4/contracts/Ticket.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4/contracts/DrawBeacon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4/contracts/DrawBeacon.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4/contracts/DrawHistory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4/contracts/DrawHistory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@pooltogether/v4/contracts/TsunamiDrawCalculator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@pooltogether/v4/contracts/TsunamiDrawCalculator.sol';\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "evmVersion": "berlin",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}