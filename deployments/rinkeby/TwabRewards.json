{
  "address": "0xb9e647c26Aa25239Bd8d2007a656deFDe0688993",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "promotionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PromotionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "promotionId",
          "type": "uint256"
        }
      ],
      "name": "PromotionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "promotionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberOfEpochs",
          "type": "uint256"
        }
      ],
      "name": "PromotionExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "promotionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "epochIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        }
      ],
      "name": "_updateClaimedEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_promotionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "cancelPromotion",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_promotionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_epochIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ticket",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint216",
          "name": "_tokensPerEpoch",
          "type": "uint216"
        },
        {
          "internalType": "uint32",
          "name": "_startTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_epochDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "_numberOfEpochs",
          "type": "uint8"
        }
      ],
      "name": "createPromotion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_promotionId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_numberOfEpochs",
          "type": "uint8"
        }
      ],
      "name": "extendPromotion",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_promotionId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_promotionId",
          "type": "uint256"
        }
      ],
      "name": "getPromotion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ticket",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint216",
              "name": "tokensPerEpoch",
              "type": "uint216"
            },
            {
              "internalType": "uint32",
              "name": "startTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "epochDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "numberOfEpochs",
              "type": "uint8"
            }
          ],
          "internalType": "struct ITwabRewards.Promotion",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_promotionId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_promotionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_epochIds",
          "type": "uint256[]"
        }
      ],
      "name": "getRewardsAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x67a2d842f25695f67e3095062d7b0c6932c98f3c4a3c43994a239bbae97ac9b3",
  "receipt": {
    "to": null,
    "from": "0x0fB374787B0bB7e62bD82A1B020b12fa239aB788",
    "contractAddress": "0xb9e647c26Aa25239Bd8d2007a656deFDe0688993",
    "transactionIndex": 25,
    "gasUsed": "1932350",
    "logsBloom": "0x
    "blockHash": "0xaa62dc634b2101a9ec47bdca5ce479158905e998678e5412cf83131cddcb6ed4",
    "transactionHash": "0x67a2d842f25695f67e3095062d7b0c6932c98f3c4a3c43994a239bbae97ac9b3",
    "logs": [],
    "blockNumber": 9771270,
    "cumulativeGasUsed": "12193069",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cacbd7b68ea6843282aa5b60bcaacabf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"promotionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PromotionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"promotionId\",\"type\":\"uint256\"}],\"name\":\"PromotionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"promotionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfEpochs\",\"type\":\"uint256\"}],\"name\":\"PromotionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"promotionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"epochIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"_updateClaimedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_promotionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"cancelPromotion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_promotionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_epochIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint216\",\"name\":\"_tokensPerEpoch\",\"type\":\"uint216\"},{\"internalType\":\"uint32\",\"name\":\"_startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_epochDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_numberOfEpochs\",\"type\":\"uint8\"}],\"name\":\"createPromotion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_promotionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_numberOfEpochs\",\"type\":\"uint8\"}],\"name\":\"extendPromotion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_promotionId\",\"type\":\"uint256\"}],\"name\":\"getCurrentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_promotionId\",\"type\":\"uint256\"}],\"name\":\"getPromotion\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ticket\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint216\",\"name\":\"tokensPerEpoch\",\"type\":\"uint216\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epochDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numberOfEpochs\",\"type\":\"uint8\"}],\"internalType\":\"struct ITwabRewards.Promotion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_promotionId\",\"type\":\"uint256\"}],\"name\":\"getRemainingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_promotionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_epochIds\",\"type\":\"uint256[]\"}],\"name\":\"getRewardsAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"PoolTogether Inc Team\",\"events\":{\"PromotionCancelled(uint256,uint256)\":{\"params\":{\"amount\":\"Amount of tokens transferred to the promotion creator\",\"promotionId\":\"Id of the promotion being cancelled\"}},\"PromotionCreated(uint256)\":{\"params\":{\"promotionId\":\"Id of the newly created promotion\"}},\"PromotionExtended(uint256,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of tokens transferred to the recipient address\",\"numberOfEpochs\":\"New total number of epochs after extending the promotion\",\"promotionId\":\"Id of the promotion being extended\"}},\"RewardsClaimed(uint256,uint256[],uint256)\":{\"params\":{\"amount\":\"Amount of tokens transferred to the recipient address\",\"epochIds\":\"Ids of the epochs being claimed\",\"promotionId\":\"Id of the promotion for which epoch rewards were claimed\"}}},\"kind\":\"dev\",\"methods\":{\"_updateClaimedEpoch(uint256,uint256)\":{\"details\":\"Bits are stored in a uint256 from right to left. Let's take the example of the following 8 bits word. 0110 0011 To set the boolean value to 1 for the epoch id 2, we need to create a mask by shifting 1 to the left by 2 bits. We get: 0000 0001 << 2 = 0000 0100 We then OR the mask with the word to set the value. We get: 0110 0011 | 0000 0100 = 0110 0111\",\"params\":{\"_epochId\":\"Id of the epoch to set the boolean for\",\"_epochs\":\"Tightly packed epoch ids with their boolean values\"},\"returns\":{\"_0\":\"Tightly packed epoch ids with the newly boolean value set\"}},\"cancelPromotion(uint256,address)\":{\"params\":{\"_promotionId\":\"Promotion id to cancel\",\"_to\":\"Address that will receive the remaining tokens if there are any left\"},\"returns\":{\"_0\":\"true if cancelation was successful\"}},\"claimRewards(address,uint256,uint256[])\":{\"details\":\"Rewards can be claimed on behalf of a user.Rewards can only be claimed for a past epoch.\",\"params\":{\"_epochIds\":\"Epoch ids to claim rewards for\",\"_promotionId\":\"Promotion id to claim rewards for\",\"_user\":\"Address of the user to claim rewards for\"},\"returns\":{\"_0\":\"Amount of rewards claimed\"}},\"createPromotion(address,address,uint216,uint32,uint32,uint8)\":{\"details\":\"For sake of simplicity, `msg.sender` will be the creator of the promotion.We approve the contract to spend the max amount of reward tokens in order to save on gas when claiming rewards.`_latestPromotionId` starts at 0 and is incremented by 1 for each new promotion. So the first promotion will have id 1, the second 2, etc.\",\"params\":{\"_epochDuration\":\"Duration of one epoch in seconds\",\"_numberOfEpochs\":\"Number of epochs the promotion will last for\",\"_startTimestamp\":\"Timestamp at which the promotion starts\",\"_ticket\":\"Prize Pool ticket address for which the promotion is created\",\"_token\":\"Address of the token to be distributed\",\"_tokensPerEpoch\":\"Number of tokens to be distributed per epoch\"},\"returns\":{\"_0\":\"Id of the newly created promotion\"}},\"extendPromotion(uint256,uint8)\":{\"params\":{\"_numberOfEpochs\":\"Number of epochs to add\",\"_promotionId\":\"Promotion id to extend\"},\"returns\":{\"_0\":\"true if the operation was successful\"}},\"getCurrentEpochId(uint256)\":{\"details\":\"Epoch ids and their boolean values are tightly packed and stored in a uint256, so epoch id starts at 0.\",\"params\":{\"_promotionId\":\"Promotion id to get current epoch for\"},\"returns\":{\"_0\":\"Epoch id\"}},\"getPromotion(uint256)\":{\"params\":{\"_promotionId\":\"Promotion id to get settings for\"},\"returns\":{\"_0\":\"Promotion settings\"}},\"getRemainingRewards(uint256)\":{\"params\":{\"_promotionId\":\"Promotion id to get the total amount of tokens left to be rewarded for\"},\"returns\":{\"_0\":\"Amount of tokens left to be rewarded\"}},\"getRewardsAmount(address,uint256,uint256[])\":{\"details\":\"Will be 0 if user has already claimed rewards for the epoch.\",\"params\":{\"_epochIds\":\"Epoch ids to get reward amount for\",\"_promotionId\":\"Promotion id from which the epoch is\",\"_user\":\"Address of the user to get amount of rewards for\"},\"returns\":{\"_0\":\"Amount of tokens to be rewarded\"}}},\"stateVariables\":{\"_claimedEpochs\":{\"details\":\"_claimedEpochs[promotionId][user] => claimedEpochsWe pack epochs claimed by a user into a uint256. So we can't store more than 255 epochs.\"},\"_latestPromotionId\":{\"details\":\"Starts at 0 and is incremented by 1 for each new promotion. So the first promotion will have id 1, the second 2, etc.\"}},\"title\":\"PoolTogether V4 TwabRewards\",\"version\":1},\"userdoc\":{\"events\":{\"PromotionCancelled(uint256,uint256)\":{\"notice\":\"Emmited when a promotion is cancelled.\"},\"PromotionCreated(uint256)\":{\"notice\":\"Emmited when a promotion is created.\"},\"PromotionExtended(uint256,uint256,uint256)\":{\"notice\":\"Emmited when a promotion is extended.\"},\"RewardsClaimed(uint256,uint256[],uint256)\":{\"notice\":\"Emmited when rewards have been claimed.\"}},\"kind\":\"user\",\"methods\":{\"_updateClaimedEpoch(uint256,uint256)\":{\"notice\":\"Set boolean value for a specific epoch.\"},\"cancelPromotion(uint256,address)\":{\"notice\":\"Cancel currently active promotion and send promotion tokens back to the creator.\"},\"claimRewards(address,uint256,uint256[])\":{\"notice\":\"Claim rewards for a given promotion and epoch.\"},\"createPromotion(address,address,uint216,uint32,uint32,uint8)\":{\"notice\":\"Create a new promotion.\"},\"extendPromotion(uint256,uint8)\":{\"notice\":\"Extend promotion by adding more epochs.\"},\"getCurrentEpochId(uint256)\":{\"notice\":\"Get the current epoch id of a promotion.\"},\"getPromotion(uint256)\":{\"notice\":\"Get settings for a specific promotion.\"},\"getRemainingRewards(uint256)\":{\"notice\":\"Get the total amount of tokens left to be rewarded.\"},\"getRewardsAmount(address,uint256,uint256[])\":{\"notice\":\"Get amount of tokens to be rewarded for a given epoch.\"}},\"notice\":\"Contract to distribute rewards to depositors in a pool.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooltogether/v4-periphery/contracts/TwabRewards.sol\":\"TwabRewards\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@pooltogether/v4-core/contracts/interfaces/IControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/** @title IControlledToken\\n  * @author PoolTogether Inc Team\\n  * @notice ERC20 Tokens with a controller for minting & burning.\\n*/\\ninterface IControlledToken is IERC20 {\\n\\n    /** \\n        @notice Interface to the contract responsible for controlling mint/burn\\n    */\\n    function controller() external view returns (address);\\n\\n    /** \\n      * @notice Allows the controller to mint tokens for a user account\\n      * @dev May be overridden to provide more granular control over minting\\n      * @param user Address of the receiver of the minted tokens\\n      * @param amount Amount of tokens to mint\\n    */\\n    function controllerMint(address user, uint256 amount) external;\\n\\n    /** \\n      * @notice Allows the controller to burn tokens from a user account\\n      * @dev May be overridden to provide more granular control over burning\\n      * @param user Address of the holder account to burn tokens from\\n      * @param amount Amount of tokens to burn\\n    */\\n    function controllerBurn(address user, uint256 amount) external;\\n\\n    /** \\n      * @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n      * @dev May be overridden to provide more granular control over operator-burning\\n      * @param operator Address of the operator performing the burn action via the controller contract\\n      * @param user Address of the holder account to burn tokens from\\n      * @param amount Amount of tokens to burn\\n    */\\n    function controllerBurnFrom(\\n        address operator,\\n        address user,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x90dceeec1eea6e49021e8db88b084f3f0c503c60b6f7e0bbecd2529ffde87ef3\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/ITicket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/TwabLib.sol\\\";\\nimport \\\"./IControlledToken.sol\\\";\\n\\ninterface ITicket is IControlledToken {\\n    /**\\n     * @notice A struct containing details for an Account.\\n     * @param balance The current balance for an Account.\\n     * @param nextTwabIndex The next available index to store a new twab.\\n     * @param cardinality The number of recorded twabs (plus one!).\\n     */\\n    struct AccountDetails {\\n        uint224 balance;\\n        uint16 nextTwabIndex;\\n        uint16 cardinality;\\n    }\\n\\n    /**\\n     * @notice Combines account details with their twab history.\\n     * @param details The account details.\\n     * @param twabs The history of twabs for this account.\\n     */\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[65535] twabs;\\n    }\\n\\n    /**\\n     * @notice Emitted when TWAB balance has been delegated to another user.\\n     * @param delegator Address of the delegator.\\n     * @param delegate Address of the delegate.\\n     */\\n    event Delegated(address indexed delegator, address indexed delegate);\\n\\n    /**\\n     * @notice Emitted when ticket is initialized.\\n     * @param name Ticket name (eg: PoolTogether Dai Ticket (Compound)).\\n     * @param symbol Ticket symbol (eg: PcDAI).\\n     * @param decimals Ticket decimals.\\n     * @param controller Token controller address.\\n     */\\n    event TicketInitialized(string name, string symbol, uint8 decimals, address indexed controller);\\n\\n    /**\\n     * @notice Emitted when a new TWAB has been recorded.\\n     * @param delegate The recipient of the ticket power (may be the same as the user).\\n     * @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\\n     */\\n    event NewUserTwab(\\n        address indexed delegate,\\n        ObservationLib.Observation newTwab\\n    );\\n\\n    /**\\n     * @notice Emitted when a new total supply TWAB has been recorded.\\n     * @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\\n     */\\n    event NewTotalSupplyTwab(ObservationLib.Observation newTotalSupplyTwab);\\n\\n    /**\\n     * @notice Retrieves the address of the delegate to whom `user` has delegated their tickets.\\n     * @dev Address of the delegate will be the zero address if `user` has not delegated their tickets.\\n     * @param user Address of the delegator.\\n     * @return Address of the delegate.\\n     */\\n    function delegateOf(address user) external view returns (address);\\n\\n    /**\\n    * @notice Delegate time-weighted average balances to an alternative address.\\n    * @dev    Transfers (including mints) trigger the storage of a TWAB in delegate(s) account, instead of the\\n              targetted sender and/or recipient address(s).\\n    * @dev    To reset the delegate, pass the zero address (0x000.000) as `to` parameter.\\n    * @dev Current delegate address should be different from the new delegate address `to`.\\n    * @param  to Recipient of delegated TWAB.\\n    */\\n    function delegate(address to) external;\\n\\n    /**\\n     * @notice Allows the controller to delegate on a users behalf.\\n     * @param user The user for whom to delegate\\n     * @param delegate The new delegate\\n     */\\n    function controllerDelegateFor(address user, address delegate) external;\\n\\n    /**\\n     * @notice Allows a user to delegate via signature\\n     * @param user The user who is delegating\\n     * @param delegate The new delegate\\n     * @param deadline The timestamp by which this must be submitted\\n     * @param v The v portion of the ECDSA sig\\n     * @param r The r portion of the ECDSA sig\\n     * @param s The s portion of the ECDSA sig\\n     */\\n    function delegateWithSignature(\\n        address user,\\n        address delegate,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Gets a users twab context.  This is a struct with their balance, next twab index, and cardinality.\\n     * @param user The user for whom to fetch the TWAB context.\\n     * @return The TWAB context, which includes { balance, nextTwabIndex, cardinality }\\n     */\\n    function getAccountDetails(address user) external view returns (TwabLib.AccountDetails memory);\\n\\n    /**\\n     * @notice Gets the TWAB at a specific index for a user.\\n     * @param user The user for whom to fetch the TWAB.\\n     * @param index The index of the TWAB to fetch.\\n     * @return The TWAB, which includes the twab amount and the timestamp.\\n     */\\n    function getTwab(address user, uint16 index)\\n        external\\n        view\\n        returns (ObservationLib.Observation memory);\\n\\n    /**\\n     * @notice Retrieves `user` TWAB balance.\\n     * @param user Address of the user whose TWAB is being fetched.\\n     * @param timestamp Timestamp at which we want to retrieve the TWAB balance.\\n     * @return The TWAB balance at the given timestamp.\\n     */\\n    function getBalanceAt(address user, uint64 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves `user` TWAB balances.\\n     * @param user Address of the user whose TWABs are being fetched.\\n     * @param timestamps Timestamps range at which we want to retrieve the TWAB balances.\\n     * @return `user` TWAB balances.\\n     */\\n    function getBalancesAt(address user, uint64[] calldata timestamps)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the average balance held by a user for a given time frame.\\n     * @param user The user whose balance is checked.\\n     * @param startTime The start time of the time frame.\\n     * @param endTime The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function getAverageBalanceBetween(\\n        address user,\\n        uint64 startTime,\\n        uint64 endTime\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the average balances held by a user for a given time frame.\\n     * @param user The user whose balance is checked.\\n     * @param startTimes The start time of the time frame.\\n     * @param endTimes The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function getAverageBalancesBetween(\\n        address user,\\n        uint64[] calldata startTimes,\\n        uint64[] calldata endTimes\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the total supply TWAB balance at the given timestamp.\\n     * @param timestamp Timestamp at which we want to retrieve the total supply TWAB balance.\\n     * @return The total supply TWAB balance at the given timestamp.\\n     */\\n    function getTotalSupplyAt(uint64 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the total supply TWAB balance between the given timestamps range.\\n     * @param timestamps Timestamps range at which we want to retrieve the total supply TWAB balance.\\n     * @return Total supply TWAB balances.\\n     */\\n    function getTotalSuppliesAt(uint64[] calldata timestamps)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the average total supply balance for a set of given time frames.\\n     * @param startTimes Array of start times.\\n     * @param endTimes Array of end times.\\n     * @return The average total supplies held during the time frame.\\n     */\\n    function getAverageTotalSuppliesBetween(\\n        uint64[] calldata startTimes,\\n        uint64[] calldata endTimes\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xb9f6423a8a9c7394941cb84723b82cc66c5f815d689dc0562e612ae4d9f1cc27\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/ExtendedSafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary ExtendedSafeCastLib {\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 _value) internal pure returns (uint104) {\\n        require(_value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 _value) internal pure returns (uint208) {\\n        require(_value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 _value) internal pure returns (uint224) {\\n        require(_value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(_value);\\n    }\\n}\\n\",\"keccak256\":\"0x1e8add7802f19dbf5957b4d921b2d7b5277f39c9e44505c0375e52f02134e434\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/ObservationLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\n\\n/**\\n* @title Observation Library\\n* @notice This library allows one to store an array of timestamped values and efficiently binary search them.\\n* @dev Largely pulled from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/c05a0e2c8c08c460fb4d05cfdda30b3ad8deeaac/contracts/libraries/Oracle.sol\\n* @author PoolTogether Inc.\\n*/\\nlibrary ObservationLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using SafeCast for uint256;\\n\\n    /// @notice The maximum number of observations\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /**\\n    * @notice Observation, which includes an amount and timestamp.\\n    * @param amount `amount` at `timestamp`.\\n    * @param timestamp Recorded `timestamp`.\\n    */\\n    struct Observation {\\n        uint224 amount;\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n    * @notice Fetches Observations `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\\n    * The result may be the same Observation, or adjacent Observations.\\n    * @dev The answer must be contained in the array used when the target is located within the stored Observation.\\n    * boundaries: older than the most recent Observation and younger, or the same age as, the oldest Observation.\\n    * @dev  If `_newestObservationIndex` is less than `_oldestObservationIndex`, it means that we've wrapped around the circular buffer.\\n    *       So the most recent observation will be at `_oldestObservationIndex + _cardinality - 1`, at the beginning of the circular buffer.\\n    * @param _observations List of Observations to search through.\\n    * @param _newestObservationIndex Index of the newest Observation. Right side of the circular buffer.\\n    * @param _oldestObservationIndex Index of the oldest Observation. Left side of the circular buffer.\\n    * @param _target Timestamp at which we are searching the Observation.\\n    * @param _cardinality Cardinality of the circular buffer we are searching through.\\n    * @param _time Timestamp at which we perform the binary search.\\n    * @return beforeOrAt Observation recorded before, or at, the target.\\n    * @return atOrAfter Observation recorded at, or after, the target.\\n    */\\n    function binarySearch(\\n        Observation[MAX_CARDINALITY] storage _observations,\\n        uint24 _newestObservationIndex,\\n        uint24 _oldestObservationIndex,\\n        uint32 _target,\\n        uint24 _cardinality,\\n        uint32 _time\\n    ) internal view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 leftSide = _oldestObservationIndex;\\n        uint256 rightSide = _newestObservationIndex < leftSide\\n            ? leftSide + _cardinality - 1\\n            : _newestObservationIndex;\\n        uint256 currentIndex;\\n\\n        while (true) {\\n            // We start our search in the middle of the `leftSide` and `rightSide`.\\n            // After each iteration, we narrow down the search to the left or the right side while still starting our search in the middle.\\n            currentIndex = (leftSide + rightSide) / 2;\\n\\n            beforeOrAt = _observations[uint24(RingBufferLib.wrap(currentIndex, _cardinality))];\\n            uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\\n\\n            // We've landed on an uninitialized timestamp, keep searching higher (more recently).\\n            if (beforeOrAtTimestamp == 0) {\\n                leftSide = currentIndex + 1;\\n                continue;\\n            }\\n\\n            atOrAfter = _observations[uint24(RingBufferLib.nextIndex(currentIndex, _cardinality))];\\n\\n            bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\\n\\n            // Check if we've found the corresponding Observation.\\n            if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\\n                break;\\n            }\\n\\n            // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower. To the left of the current index.\\n            if (!targetAtOrAfter) {\\n                rightSide = currentIndex - 1;\\n            } else {\\n                // Otherwise, we keep searching higher. To the left of the current index.\\n                leftSide = currentIndex + 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x225592b42013fc0af60822e75bc047d53b42a5fcf15f2173cdc3b50bea334b0a\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/OverflowSafeComparatorLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/// @title OverflowSafeComparatorLib library to share comparator functions between contracts\\n/// @dev Code taken from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/3e88af408132fc957e3e406f65a0ce2b1ca06c3d/contracts/libraries/Oracle.sol\\n/// @author PoolTogether Inc.\\nlibrary OverflowSafeComparatorLib {\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically < `_b`.\\n    function lt(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (bool) {\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return aAdjusted < bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically <= `_b`.\\n    function lte(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (bool) {\\n\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return aAdjusted <= bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamp subtractor\\n    /// @dev safe for 0 or 1 overflows, where `_a` and `_b` must be chronologically before or equal to time\\n    /// @param _a The subtraction left operand\\n    /// @param _b The subtraction right operand\\n    /// @param _timestamp The current time.  Expected to be chronologically after both.\\n    /// @return The difference between a and b, adjusted for overflow\\n    function checkedSub(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (uint32) {\\n        // No need to adjust if there hasn't been an overflow\\n\\n        if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return uint32(aAdjusted - bAdjusted);\\n    }\\n}\\n\",\"keccak256\":\"0x20630cf89e7b92462946defe979fd0e69fa119841d55886121948ad810778c74\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/RingBufferLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nlibrary RingBufferLib {\\n    /**\\n    * @notice Returns wrapped TWAB index.\\n    * @dev  In order to navigate the TWAB circular buffer, we need to use the modulo operator.\\n    * @dev  For example, if `_index` is equal to 32 and the TWAB circular buffer is of `_cardinality` 32,\\n    *       it will return 0 and will point to the first element of the array.\\n    * @param _index Index used to navigate through the TWAB circular buffer.\\n    * @param _cardinality TWAB buffer cardinality.\\n    * @return TWAB index.\\n    */\\n    function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n        return _index % _cardinality;\\n    }\\n\\n    /**\\n    * @notice Computes the negative offset from the given index, wrapped by the cardinality.\\n    * @dev  We add `_cardinality` to `_index` to be able to offset even if `_amount` is superior to `_cardinality`.\\n    * @param _index The index from which to offset\\n    * @param _amount The number of indices to offset.  This is subtracted from the given index.\\n    * @param _cardinality The number of elements in the ring buffer\\n    * @return Offsetted index.\\n     */\\n    function offset(\\n        uint256 _index,\\n        uint256 _amount,\\n        uint256 _cardinality\\n    ) internal pure returns (uint256) {\\n        return wrap(_index + _cardinality - _amount, _cardinality);\\n    }\\n\\n    /// @notice Returns the index of the last recorded TWAB\\n    /// @param _nextIndex The next available twab index.  This will be recorded to next.\\n    /// @param _cardinality The cardinality of the TWAB history.\\n    /// @return The index of the last recorded TWAB\\n    function newestIndex(uint256 _nextIndex, uint256 _cardinality)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_cardinality == 0) {\\n            return 0;\\n        }\\n\\n        return wrap(_nextIndex + _cardinality - 1, _cardinality);\\n    }\\n\\n    /// @notice Computes the ring buffer index that follows the given one, wrapped by cardinality\\n    /// @param _index The index to increment\\n    /// @param _cardinality The number of elements in the Ring Buffer\\n    /// @return The next index relative to the given index.  Will wrap around to 0 if the next index == cardinality\\n    function nextIndex(uint256 _index, uint256 _cardinality)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return wrap(_index + 1, _cardinality);\\n    }\\n}\\n\",\"keccak256\":\"0x052e3bf6bfb30f32950e322c853589a8d153cf34f4b1ee292b17eb46f2ae656c\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/TwabLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./ExtendedSafeCastLib.sol\\\";\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\nimport \\\"./ObservationLib.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 TwabLib (Library)\\n  * @author PoolTogether Inc Team\\n  * @dev    Time-Weighted Average Balance Library for ERC20 tokens.\\n  * @notice This TwabLib adds on-chain historical lookups to a user(s) time-weighted average balance.\\n            Each user is mapped to an Account struct containing the TWAB history (ring bufffer) and\\n            ring buffer parameters. Every token.transfer() creates a new TWAB checkpoint. The new TWAB\\n            checkpoint is stored in the circular ring buffer, as either a new checkpoint or rewriting\\n            a previous checkpoint with new parameters. The TwabLib (using existing blocktimes 1block/15sec)\\n            guarantees minimum 7.4 years of search history.\\n */\\nlibrary TwabLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using ExtendedSafeCastLib for uint256;\\n\\n    /**\\n      * @notice Sets max ring buffer length in the Account.twabs Observation list.\\n                As users transfer/mint/burn tickets new Observation checkpoints are\\n                recorded. The current max cardinality guarantees a six month minimum,\\n                of historical accurate lookups with current estimates of 1 new block\\n                every 15 seconds - the of course contain a transfer to trigger an\\n                observation write to storage.\\n      * @dev    The user Account.AccountDetails.cardinality parameter can NOT exceed\\n                the max cardinality variable. Preventing \\\"corrupted\\\" ring buffer lookup\\n                pointers and new observation checkpoints.\\n\\n                The MAX_CARDINALITY in fact guarantees at least 7.4 years of records:\\n                If 14 = block time in seconds\\n                (2**24) * 14 = 234881024 seconds of history\\n                234881024 / (365 * 24 * 60 * 60) ~= 7.44 years\\n    */\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /** @notice Struct ring buffer parameters for single user Account\\n      * @param balance       Current balance for an Account\\n      * @param nextTwabIndex Next uninitialized or updatable ring buffer checkpoint storage slot\\n      * @param cardinality   Current total \\\"initialized\\\" ring buffer checkpoints for single user AccountDetails.\\n                             Used to set initial boundary conditions for an efficient binary search.\\n    */\\n    struct AccountDetails {\\n        uint208 balance;\\n        uint24 nextTwabIndex;\\n        uint24 cardinality;\\n    }\\n\\n    /// @notice Combines account details with their twab history\\n    /// @param details The account details\\n    /// @param twabs The history of twabs for this account\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[MAX_CARDINALITY] twabs;\\n    }\\n\\n    /// @notice Increases an account's balance and records a new twab.\\n    /// @param _account The account whose balance will be increased\\n    /// @param _amount The amount to increase the balance by\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new AccountDetails\\n    /// @return twab The user's latest TWAB\\n    /// @return isNew Whether the TWAB is new\\n    function increaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        uint32 _currentTime\\n    )\\n        internal\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        AccountDetails memory _accountDetails = _account.details;\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        accountDetails.balance = _accountDetails.balance + _amount;\\n    }\\n\\n    /** @notice Calculates the next TWAB checkpoint for an account with a decreasing balance.\\n     * @dev    With Account struct and amount decreasing calculates the next TWAB observable checkpoint.\\n     * @param _account        Account whose balance will be decreased\\n     * @param _amount         Amount to decrease the balance by\\n     * @param _revertMessage  Revert message for insufficient balance\\n     * @return accountDetails Updated Account.details struct\\n     * @return twab           TWAB observation (with decreasing average)\\n     * @return isNew          Whether TWAB is new or calling twice in the same block\\n     */\\n    function decreaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        string memory _revertMessage,\\n        uint32 _currentTime\\n    )\\n        internal\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        AccountDetails memory _accountDetails = _account.details;\\n\\n        require(_accountDetails.balance >= _amount, _revertMessage);\\n\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        unchecked {\\n            accountDetails.balance -= _amount;\\n        }\\n    }\\n\\n    /** @notice Calculates the average balance held by a user for a given time frame.\\n      * @dev    Finds the average balance between start and end timestamp epochs.\\n                Validates the supplied end time is within the range of elapsed time i.e. less then timestamp of now.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _startTime      Start of timestamp range as an epoch\\n      * @param _endTime        End of timestamp range as an epoch\\n      * @param _currentTime    Block.timestamp\\n      * @return Average balance of user held between epoch timestamps start and end\\n    */\\n    function getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 endTime = _endTime > _currentTime ? _currentTime : _endTime;\\n\\n        return\\n            _getAverageBalanceBetween(_twabs, _accountDetails, _startTime, endTime, _currentTime);\\n    }\\n\\n    /// @notice Retrieves the oldest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the oldest TWAB in the twabs array\\n    /// @return twab The oldest TWAB\\n    function oldestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = _accountDetails.nextTwabIndex;\\n        twab = _twabs[index];\\n\\n        // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n        if (twab.timestamp == 0) {\\n            index = 0;\\n            twab = _twabs[0];\\n        }\\n    }\\n\\n    /// @notice Retrieves the newest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the newest TWAB in the twabs array\\n    /// @return twab The newest TWAB\\n    function newestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = uint24(RingBufferLib.newestIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY));\\n        twab = _twabs[index];\\n    }\\n\\n    /// @notice Retrieves amount at `_targetTime` timestamp\\n    /// @param _twabs List of TWABs to search through.\\n    /// @param _accountDetails Accounts details\\n    /// @param _targetTime Timestamp at which the reserved TWAB should be for.\\n    /// @return uint256 TWAB amount at `_targetTime`.\\n    function getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 timeToTarget = _targetTime > _currentTime ? _currentTime : _targetTime;\\n        return _getBalanceAt(_twabs, _accountDetails, timeToTarget, _currentTime);\\n    }\\n\\n    /// @notice Calculates the average balance held by a user for a given time frame.\\n    /// @param _startTime The start time of the time frame.\\n    /// @param _endTime The end time of the time frame.\\n    /// @return The average balance that the user held during the time frame.\\n    function _getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        (uint24 oldestTwabIndex, ObservationLib.Observation memory oldTwab) = oldestTwab(\\n            _twabs,\\n            _accountDetails\\n        );\\n\\n        (uint24 newestTwabIndex, ObservationLib.Observation memory newTwab) = newestTwab(\\n            _twabs,\\n            _accountDetails\\n        );\\n\\n        ObservationLib.Observation memory startTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _startTime,\\n            _currentTime\\n        );\\n\\n        ObservationLib.Observation memory endTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _endTime,\\n            _currentTime\\n        );\\n\\n        // Difference in amount / time\\n        return (endTwab.amount - startTwab.amount) / OverflowSafeComparatorLib.checkedSub(endTwab.timestamp, startTwab.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Searches TWAB history and calculate the difference between amount(s)/timestamp(s) to return average balance\\n                between the Observations closes to the supplied targetTime.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _targetTime     Target timestamp to filter Observations in the ring buffer binary search\\n      * @param _currentTime    Block.timestamp\\n      * @return uint256 Time-weighted average amount between two closest observations.\\n    */\\n    function _getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        uint24 newestTwabIndex;\\n        ObservationLib.Observation memory afterOrAt;\\n        ObservationLib.Observation memory beforeOrAt;\\n        (newestTwabIndex, beforeOrAt) = newestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically after the newest TWAB, we can simply return the current balance\\n        if (beforeOrAt.timestamp.lte(_targetTime, _currentTime)) {\\n            return _accountDetails.balance;\\n        }\\n\\n        uint24 oldestTwabIndex;\\n        // Now, set before to the oldest TWAB\\n        (oldestTwabIndex, beforeOrAt) = oldestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically before the oldest TWAB, we can early return\\n        if (_targetTime.lt(beforeOrAt.timestamp, _currentTime)) {\\n            return 0;\\n        }\\n\\n        // Otherwise, we perform the `binarySearch`\\n        (beforeOrAt, afterOrAt) = ObservationLib.binarySearch(\\n            _twabs,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _targetTime,\\n            _accountDetails.cardinality,\\n            _currentTime\\n        );\\n\\n        // Sum the difference in amounts and divide by the difference in timestamps.\\n        // The time-weighted average balance uses time measured between two epoch timestamps as\\n        // a constaint on the measurement when calculating the time weighted average balance.\\n        return\\n            (afterOrAt.amount - beforeOrAt.amount) / OverflowSafeComparatorLib.checkedSub(afterOrAt.timestamp, beforeOrAt.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Calculates a user TWAB for a target timestamp using the historical TWAB records.\\n                The balance is linearly interpolated: amount differences / timestamp differences\\n                using the simple (after.amount - before.amount / end.timestamp - start.timestamp) formula.\\n    /** @dev    Binary search in _calculateTwab fails when searching out of bounds. Thus, before\\n                searching we exclude target timestamps out of range of newest/oldest TWAB(s).\\n                IF a search is before or after the range we \\\"extrapolate\\\" a Observation from the expected state.\\n      * @param _twabs           Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails  User AccountDetails struct loaded in memory\\n      * @param _newestTwab      Newest TWAB in history (end of ring buffer)\\n      * @param _oldestTwab      Olderst TWAB in history (end of ring buffer)\\n      * @param _newestTwabIndex Pointer in ring buffer to newest TWAB\\n      * @param _oldestTwabIndex Pointer in ring buffer to oldest TWAB\\n      * @param _targetTimestamp Epoch timestamp to calculate for time (T) in the TWAB\\n      * @param _time            Block.timestamp\\n      * @return accountDetails Updated Account.details struct\\n    */\\n    function _calculateTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        ObservationLib.Observation memory _newestTwab,\\n        ObservationLib.Observation memory _oldestTwab,\\n        uint24 _newestTwabIndex,\\n        uint24 _oldestTwabIndex,\\n        uint32 _targetTimestamp,\\n        uint32 _time\\n    ) private view returns (ObservationLib.Observation memory) {\\n        // If `_targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\\n        if (_newestTwab.timestamp.lt(_targetTimestamp, _time)) {\\n            return _computeNextTwab(_newestTwab, _accountDetails.balance, _targetTimestamp);\\n        }\\n\\n        if (_newestTwab.timestamp == _targetTimestamp) {\\n            return _newestTwab;\\n        }\\n\\n        if (_oldestTwab.timestamp == _targetTimestamp) {\\n            return _oldestTwab;\\n        }\\n\\n        // If `_targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\\n        if (_targetTimestamp.lt(_oldestTwab.timestamp, _time)) {\\n            return ObservationLib.Observation({ amount: 0, timestamp: _targetTimestamp });\\n        }\\n\\n        // Otherwise, both timestamps must be surrounded by twabs.\\n        (\\n            ObservationLib.Observation memory beforeOrAtStart,\\n            ObservationLib.Observation memory afterOrAtStart\\n        ) = ObservationLib.binarySearch(\\n                _twabs,\\n                _newestTwabIndex,\\n                _oldestTwabIndex,\\n                _targetTimestamp,\\n                _accountDetails.cardinality,\\n                _time\\n            );\\n\\n        uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) /\\n            OverflowSafeComparatorLib.checkedSub(afterOrAtStart.timestamp, beforeOrAtStart.timestamp, _time);\\n\\n        return _computeNextTwab(beforeOrAtStart, heldBalance, _targetTimestamp);\\n    }\\n\\n    /**\\n     * @notice Calculates the next TWAB using the newestTwab and updated balance.\\n     * @dev    Storage of the TWAB obersation is managed by the calling function and not _computeNextTwab.\\n     * @param _currentTwab    Newest Observation in the Account.twabs list\\n     * @param _currentBalance User balance at time of most recent (newest) checkpoint write\\n     * @param _time           Current block.timestamp\\n     * @return TWAB Observation\\n     */\\n    function _computeNextTwab(\\n        ObservationLib.Observation memory _currentTwab,\\n        uint224 _currentBalance,\\n        uint32 _time\\n    ) private pure returns (ObservationLib.Observation memory) {\\n        // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\\n        return\\n            ObservationLib.Observation({\\n                amount: _currentTwab.amount +\\n                    _currentBalance *\\n                    (_time.checkedSub(_currentTwab.timestamp, _time)),\\n                timestamp: _time\\n            });\\n    }\\n\\n    /// @notice Sets a new TWAB Observation at the next available index and returns the new account details.\\n    /// @dev Note that if _currentTime is before the last observation timestamp, it appears as an overflow\\n    /// @param _twabs The twabs array to insert into\\n    /// @param _accountDetails The current account details\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new account details\\n    /// @return twab The newest twab (may or may not be brand-new)\\n    /// @return isNew Whether the newest twab was created by this call\\n    function _nextTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _currentTime\\n    )\\n        private\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        (, ObservationLib.Observation memory _newestTwab) = newestTwab(_twabs, _accountDetails);\\n\\n        // if we're in the same block, return\\n        if (_newestTwab.timestamp == _currentTime) {\\n            return (_accountDetails, _newestTwab, false);\\n        }\\n\\n        ObservationLib.Observation memory newTwab = _computeNextTwab(\\n            _newestTwab,\\n            _accountDetails.balance,\\n            _currentTime\\n        );\\n\\n        _twabs[_accountDetails.nextTwabIndex] = newTwab;\\n\\n        AccountDetails memory nextAccountDetails = push(_accountDetails);\\n\\n        return (nextAccountDetails, newTwab, true);\\n    }\\n\\n    /// @notice \\\"Pushes\\\" a new element on the AccountDetails ring buffer, and returns the new AccountDetails\\n    /// @param _accountDetails The account details from which to pull the cardinality and next index\\n    /// @return The new AccountDetails\\n    function push(AccountDetails memory _accountDetails)\\n        internal\\n        pure\\n        returns (AccountDetails memory)\\n    {\\n        _accountDetails.nextTwabIndex = uint24(\\n            RingBufferLib.nextIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY)\\n        );\\n\\n        // Prevent the Account specific cardinality from exceeding the MAX_CARDINALITY.\\n        // The ring buffer length is limited by MAX_CARDINALITY. IF the account.cardinality\\n        // exceeds the max cardinality, new observations would be incorrectly set or the\\n        // observation would be out of \\\"bounds\\\" of the ring buffer. Once reached the\\n        // AccountDetails.cardinality will continue to be equal to max cardinality.\\n        if (_accountDetails.cardinality < MAX_CARDINALITY) {\\n            _accountDetails.cardinality += 1;\\n        }\\n\\n        return _accountDetails;\\n    }\\n}\\n\",\"keccak256\":\"0xa9cd1103707325d2eaba038d7c0f2b271d934448b8782b82f922653eccb8c90a\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-periphery/contracts/TwabRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@pooltogether/v4-core/contracts/interfaces/ITicket.sol\\\";\\n\\nimport \\\"./interfaces/ITwabRewards.sol\\\";\\n\\n/**\\n * @title PoolTogether V4 TwabRewards\\n * @author PoolTogether Inc Team\\n * @notice Contract to distribute rewards to depositors in a pool.\\n */\\ncontract TwabRewards is ITwabRewards {\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ Global Variables ============ */\\n\\n    /// @notice Settings of each promotion.\\n    mapping(uint256 => Promotion) internal _promotions;\\n\\n    /// @notice Latest recorded promotion id.\\n    /// @dev Starts at 0 and is incremented by 1 for each new promotion. So the first promotion will have id 1, the second 2, etc.\\n    uint256 internal _latestPromotionId;\\n\\n    /// @notice Keeps track of claimed rewards per user.\\n    /// @dev _claimedEpochs[promotionId][user] => claimedEpochs\\n    /// @dev We pack epochs claimed by a user into a uint256. So we can't store more than 255 epochs.\\n    mapping(uint256 => mapping(address => uint256)) internal _claimedEpochs;\\n\\n    /* ============ Events ============ */\\n\\n    /**\\n        @notice Emmited when a promotion is created.\\n        @param promotionId Id of the newly created promotion\\n    */\\n    event PromotionCreated(uint256 indexed promotionId);\\n\\n    /**\\n        @notice Emmited when a promotion is cancelled.\\n        @param promotionId Id of the promotion being cancelled\\n        @param amount Amount of tokens transferred to the promotion creator\\n    */\\n    event PromotionCancelled(uint256 indexed promotionId, uint256 amount);\\n\\n    /**\\n        @notice Emmited when a promotion is extended.\\n        @param promotionId Id of the promotion being extended\\n        @param amount Amount of tokens transferred to the recipient address\\n        @param numberOfEpochs New total number of epochs after extending the promotion\\n    */\\n    event PromotionExtended(uint256 indexed promotionId, uint256 amount, uint256 numberOfEpochs);\\n\\n    /**\\n        @notice Emmited when rewards have been claimed.\\n        @param promotionId Id of the promotion for which epoch rewards were claimed\\n        @param epochIds Ids of the epochs being claimed\\n        @param amount Amount of tokens transferred to the recipient address\\n    */\\n    event RewardsClaimed(uint256 indexed promotionId, uint256[] epochIds, uint256 amount);\\n\\n    /* ============ Modifiers ============ */\\n\\n    /// @dev Ensure that the caller is the creator of the promotion.\\n    /// @param _promotionId Id of the promotion to check\\n    modifier onlyPromotionCreator(uint256 _promotionId) {\\n        require(\\n            msg.sender == _getPromotion(_promotionId).creator,\\n            \\\"TwabRewards/only-promotion-creator\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc ITwabRewards\\n    function createPromotion(\\n        address _ticket,\\n        IERC20 _token,\\n        uint216 _tokensPerEpoch,\\n        uint32 _startTimestamp,\\n        uint32 _epochDuration,\\n        uint8 _numberOfEpochs\\n    ) external override returns (uint256) {\\n        _requireTicket(_ticket);\\n\\n        uint256 _nextPromotionId = _latestPromotionId + 1;\\n        _latestPromotionId = _nextPromotionId;\\n\\n        _promotions[_nextPromotionId] = Promotion(\\n            msg.sender,\\n            _ticket,\\n            _token,\\n            _tokensPerEpoch,\\n            _startTimestamp,\\n            _epochDuration,\\n            _numberOfEpochs\\n        );\\n\\n        uint256 _allowance = _token.allowance(address(this), address(this));\\n\\n        if (_allowance < type(uint256).max) {\\n            _token.safeIncreaseAllowance(address(this), type(uint256).max - _allowance);\\n        }\\n\\n        _token.safeTransferFrom(msg.sender, address(this), _tokensPerEpoch * _numberOfEpochs);\\n\\n        emit PromotionCreated(_nextPromotionId);\\n\\n        return _nextPromotionId;\\n    }\\n\\n    /// @inheritdoc ITwabRewards\\n    function cancelPromotion(uint256 _promotionId, address _to)\\n        external\\n        override\\n        onlyPromotionCreator(_promotionId)\\n        returns (bool)\\n    {\\n        _requirePromotionActive(_promotionId);\\n        require(_to != address(0), \\\"TwabRewards/recipient-not-zero-address\\\");\\n\\n        Promotion memory _promotion = _getPromotion(_promotionId);\\n        uint256 _remainingRewards = _getRemainingRewards(_promotionId);\\n\\n        delete _promotions[_promotionId];\\n        _promotion.token.safeTransfer(_to, _remainingRewards);\\n\\n        emit PromotionCancelled(_promotionId, _remainingRewards);\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc ITwabRewards\\n    function extendPromotion(uint256 _promotionId, uint8 _numberOfEpochs)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _requirePromotionActive(_promotionId);\\n\\n        Promotion memory _promotion = _getPromotion(_promotionId);\\n        uint8 _extendedNumberOfEpochs = _promotion.numberOfEpochs + _numberOfEpochs;\\n        _promotions[_promotionId].numberOfEpochs = _extendedNumberOfEpochs;\\n\\n        uint256 _amount = _numberOfEpochs * _promotion.tokensPerEpoch;\\n        _promotion.token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit PromotionExtended(_promotionId, _amount, _extendedNumberOfEpochs);\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc ITwabRewards\\n    function claimRewards(\\n        address _user,\\n        uint256 _promotionId,\\n        uint256[] calldata _epochIds\\n    ) external override returns (uint256) {\\n        uint256 _rewardsAmount;\\n        uint256 _userClaimedEpochs = _claimedEpochs[_promotionId][_user];\\n\\n        for (uint256 index = 0; index < _epochIds.length; index++) {\\n            uint256 _epochId = _epochIds[index];\\n\\n            require(\\n                !_isClaimedEpoch(_user, _promotionId, _epochId),\\n                \\\"TwabRewards/rewards-already-claimed\\\"\\n            );\\n\\n            _rewardsAmount += _calculateRewardAmount(_user, _promotionId, _epochId);\\n            _userClaimedEpochs = _updateClaimedEpoch(_userClaimedEpochs, _epochId);\\n        }\\n\\n        _claimedEpochs[_promotionId][_user] = _userClaimedEpochs;\\n\\n        _getPromotion(_promotionId).token.safeTransfer(_user, _rewardsAmount);\\n\\n        emit RewardsClaimed(_promotionId, _epochIds, _rewardsAmount);\\n\\n        return _rewardsAmount;\\n    }\\n\\n    /// @inheritdoc ITwabRewards\\n    function getPromotion(uint256 _promotionId) external view override returns (Promotion memory) {\\n        return _getPromotion(_promotionId);\\n    }\\n\\n    /// @inheritdoc ITwabRewards\\n    function getCurrentEpochId(uint256 _promotionId) external view override returns (uint256) {\\n        return _getCurrentEpochId(_promotionId);\\n    }\\n\\n    /// @inheritdoc ITwabRewards\\n    function getRemainingRewards(uint256 _promotionId) external view override returns (uint256) {\\n        return _getRemainingRewards(_promotionId);\\n    }\\n\\n    /// @inheritdoc ITwabRewards\\n    function getRewardsAmount(\\n        address _user,\\n        uint256 _promotionId,\\n        uint256[] calldata _epochIds\\n    ) external view override returns (uint256[] memory) {\\n        uint256[] memory _rewardsAmount = new uint256[](_epochIds.length);\\n\\n        for (uint256 index = 0; index < _epochIds.length; index++) {\\n            _rewardsAmount[index] = _calculateRewardAmount(_user, _promotionId, _epochIds[index]);\\n        }\\n\\n        return _rewardsAmount;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n    @notice Determine if address passed is actually a ticket.\\n    @param _ticket Address to check\\n   */\\n    function _requireTicket(address _ticket) internal view {\\n        require(_ticket != address(0), \\\"TwabRewards/ticket-not-zero-address\\\");\\n\\n        (bool succeeded, bytes memory data) = address(_ticket).staticcall(\\n            abi.encodePacked(ITicket(_ticket).controller.selector)\\n        );\\n\\n        address controllerAddress;\\n\\n        if (data.length > 0) {\\n            controllerAddress = abi.decode(data, (address));\\n        }\\n\\n        require(succeeded && controllerAddress != address(0), \\\"TwabRewards/invalid-ticket\\\");\\n    }\\n\\n    /**\\n        @notice Determine if a promotion is active.\\n        @param _promotionId Id of the promotion to check\\n    */\\n    function _requirePromotionActive(uint256 _promotionId) internal view {\\n        Promotion memory _promotion = _getPromotion(_promotionId);\\n\\n        uint256 _promotionEndTimestamp = _promotion.startTimestamp +\\n            (_promotion.epochDuration * _promotion.numberOfEpochs);\\n\\n        require(\\n            _promotionEndTimestamp > 0 && _promotionEndTimestamp >= block.timestamp,\\n            \\\"TwabRewards/promotion-not-active\\\"\\n        );\\n    }\\n\\n    /**\\n        @notice Get settings for a specific promotion.\\n        @dev Will revert if the promotion does not exist.\\n        @param _promotionId Promotion id to get settings for\\n        @return Promotion settings\\n     */\\n    function _getPromotion(uint256 _promotionId) internal view returns (Promotion memory) {\\n        return _promotions[_promotionId];\\n    }\\n\\n    /**\\n        @notice Get the current epoch id of a promotion.\\n        @dev Epoch ids and their boolean values are tightly packed and stored in a uint256, so epoch id starts at 0.\\n        @param _promotionId Id of the promotion to get current epoch for\\n        @return Epoch id\\n     */\\n    function _getCurrentEpochId(uint256 _promotionId) internal view returns (uint256) {\\n        Promotion memory _promotion = _getPromotion(_promotionId);\\n\\n        // elapsedTimestamp / epochDurationTimestamp\\n        return (block.timestamp - _promotion.startTimestamp) / _promotion.epochDuration;\\n    }\\n\\n    /**\\n        @notice Get reward amount for a specific user.\\n        @dev Rewards can only be claimed once the epoch is over.\\n        @param _user User to get reward amount for\\n        @param _promotionId Promotion id from which the epoch is\\n        @param _epochId Epoch id to get reward amount for\\n        @return Reward amount\\n     */\\n    function _calculateRewardAmount(\\n        address _user,\\n        uint256 _promotionId,\\n        uint256 _epochId\\n    ) internal view returns (uint256) {\\n        Promotion memory _promotion = _getPromotion(_promotionId);\\n\\n        uint256 _epochDuration = _promotion.epochDuration;\\n        uint256 _epochStartTimestamp = _promotion.startTimestamp + (_epochDuration * _epochId);\\n        uint256 _epochEndTimestamp = _epochStartTimestamp + _epochDuration;\\n\\n        require(block.timestamp > _epochEndTimestamp, \\\"TwabRewards/epoch-not-over\\\");\\n\\n        ITicket _ticket = ITicket(_promotion.ticket);\\n\\n        uint256 _averageBalance = _ticket.getAverageBalanceBetween(\\n            _user,\\n            uint64(_epochStartTimestamp),\\n            uint64(_epochEndTimestamp)\\n        );\\n\\n        uint64[] memory _epochStartTimestamps = new uint64[](1);\\n        _epochStartTimestamps[0] = uint64(_epochStartTimestamp);\\n\\n        uint64[] memory _epochEndTimestamps = new uint64[](1);\\n        _epochEndTimestamps[0] = uint64(_epochEndTimestamp);\\n\\n        uint256[] memory _averageTotalSupplies = _ticket.getAverageTotalSuppliesBetween(\\n            _epochStartTimestamps,\\n            _epochEndTimestamps\\n        );\\n\\n        if (_averageTotalSupplies[0] > 0) {\\n            return (_promotion.tokensPerEpoch * _averageBalance) / _averageTotalSupplies[0];\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n        @notice Get the total amount of tokens left to be rewarded.\\n        @param _promotionId Promotion id to get the total amount of tokens left to be rewarded for\\n        @return Amount of tokens left to be rewarded\\n     */\\n    function _getRemainingRewards(uint256 _promotionId) internal view returns (uint256) {\\n        Promotion memory _promotion = _getPromotion(_promotionId);\\n\\n        // _tokensPerEpoch * _numberOfEpochsLeft\\n        return\\n            _promotion.tokensPerEpoch *\\n            (_promotion.numberOfEpochs - _getCurrentEpochId(_promotionId));\\n    }\\n\\n    /**\\n        @notice Set boolean value for a specific epoch.\\n        @dev Bits are stored in a uint256 from right to left.\\n        Let's take the example of the following 8 bits word. 0110 0011\\n        To set the boolean value to 1 for the epoch id 2, we need to create a mask by shifting 1 to the left by 2 bits.\\n        We get: 0000 0001 << 2 = 0000 0100\\n        We then OR the mask with the word to set the value.\\n        We get: 0110 0011 | 0000 0100 = 0110 0111\\n        @param _epochs Tightly packed epoch ids with their boolean values\\n        @param _epochId Id of the epoch to set the boolean for\\n        @return Tightly packed epoch ids with the newly boolean value set\\n    */\\n    function _updateClaimedEpoch(uint256 _epochs, uint256 _epochId) public pure returns (uint256) {\\n        return _epochs | (uint256(1) << _epochId);\\n    }\\n\\n    /**\\n        @notice Check if rewards of an epoch for a given promotion have already been claimed by the user.\\n        @dev Bits are stored in a uint256 from right to left.\\n        Let's take the example of the following 8 bits word. 0110 0111\\n        To retrieve the boolean value for the epoch id 2, we need to shift the word to the right by 2 bits.\\n        We get: 0110 0111 >> 2 = 0001 1001\\n        We then get the value of the last bit by masking with 1.\\n        We get: 0001 1001 & 0000 0001 = 0000 0001 = 1\\n        We then return the boolean value true since the last bit is 1.\\n        @param _user Address of the user to check\\n        @param _promotionId Promotion id to check\\n        @param _epochId Epoch id to check\\n        @return true if the rewards have already been claimed for the given epoch, false otherwise\\n     */\\n    function _isClaimedEpoch(\\n        address _user,\\n        uint256 _promotionId,\\n        uint256 _epochId\\n    ) internal view returns (bool) {\\n        uint256 flag = (_claimedEpochs[_promotionId][_user] >> _epochId) & uint256(1);\\n        return (flag == 1 ? true : false);\\n    }\\n}\\n\",\"keccak256\":\"0xc59753f1684cf878249906ecb4ba9b8c4c1ca396a88e10ba797bc3c6bd128314\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-periphery/contracts/interfaces/ITwabRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/v4-core/contracts/interfaces/ITicket.sol\\\";\\n\\n/**\\n * @title  PoolTogether V4 ITwabRewards\\n * @author PoolTogether Inc Team\\n * @notice TwabRewards contract interface.\\n */\\ninterface ITwabRewards {\\n    /**\\n        @notice Struct to keep track of each promotion's settings.\\n        @param creator Addresss of the promotion creator\\n        @param ticket Prize Pool ticket address for which the promotion has been created\\n        @param token Address of the token to be distributed as reward\\n        @param tokensPerEpoch Number of tokens to be distributed per epoch\\n        @param startTimestamp Timestamp at which the promotion starts\\n        @param epochDuration Duration of one epoch in seconds\\n        @param numberOfEpochs Number of epochs the promotion will last for\\n     */\\n    struct Promotion {\\n        address creator;\\n        address ticket;\\n        IERC20 token;\\n        uint216 tokensPerEpoch;\\n        uint32 startTimestamp;\\n        uint32 epochDuration;\\n        uint8 numberOfEpochs;\\n    }\\n\\n    /**\\n        @notice Create a new promotion.\\n        @dev For sake of simplicity, `msg.sender` will be the creator of the promotion.\\n        @dev We approve the contract to spend the max amount of reward tokens in order to save on gas when claiming rewards.\\n        @dev `_latestPromotionId` starts at 0 and is incremented by 1 for each new promotion.\\n        So the first promotion will have id 1, the second 2, etc.\\n        @param _ticket Prize Pool ticket address for which the promotion is created\\n        @param _token Address of the token to be distributed\\n        @param _tokensPerEpoch Number of tokens to be distributed per epoch\\n        @param _startTimestamp Timestamp at which the promotion starts\\n        @param _epochDuration Duration of one epoch in seconds\\n        @param _numberOfEpochs Number of epochs the promotion will last for\\n        @return Id of the newly created promotion\\n    */\\n    function createPromotion(\\n        address _ticket,\\n        IERC20 _token,\\n        uint216 _tokensPerEpoch,\\n        uint32 _startTimestamp,\\n        uint32 _epochDuration,\\n        uint8 _numberOfEpochs\\n    ) external returns (uint256);\\n\\n    /**\\n        @notice Cancel currently active promotion and send promotion tokens back to the creator.\\n        @param _promotionId Promotion id to cancel\\n        @param _to Address that will receive the remaining tokens if there are any left\\n        @return true if cancelation was successful\\n     */\\n    function cancelPromotion(uint256 _promotionId, address _to) external returns (bool);\\n\\n    /**\\n        @notice Extend promotion by adding more epochs.\\n        @param _promotionId Promotion id to extend\\n        @param _numberOfEpochs Number of epochs to add\\n        @return true if the operation was successful\\n     */\\n    function extendPromotion(uint256 _promotionId, uint8 _numberOfEpochs) external returns (bool);\\n\\n    /**\\n        @notice Claim rewards for a given promotion and epoch.\\n        @dev Rewards can be claimed on behalf of a user.\\n        @dev Rewards can only be claimed for a past epoch.\\n        @param _user Address of the user to claim rewards for\\n        @param _promotionId Promotion id to claim rewards for\\n        @param _epochIds Epoch ids to claim rewards for\\n        @return Amount of rewards claimed\\n     */\\n    function claimRewards(\\n        address _user,\\n        uint256 _promotionId,\\n        uint256[] calldata _epochIds\\n    ) external returns (uint256);\\n\\n    /**\\n        @notice Get settings for a specific promotion.\\n        @param _promotionId Promotion id to get settings for\\n        @return Promotion settings\\n     */\\n    function getPromotion(uint256 _promotionId) external view returns (Promotion memory);\\n\\n    /**\\n        @notice Get the current epoch id of a promotion.\\n        @dev Epoch ids and their boolean values are tightly packed and stored in a uint256, so epoch id starts at 0.\\n        @param _promotionId Promotion id to get current epoch for\\n        @return Epoch id\\n     */\\n    function getCurrentEpochId(uint256 _promotionId) external view returns (uint256);\\n\\n    /**\\n        @notice Get the total amount of tokens left to be rewarded.\\n        @param _promotionId Promotion id to get the total amount of tokens left to be rewarded for\\n        @return Amount of tokens left to be rewarded\\n     */\\n    function getRemainingRewards(uint256 _promotionId) external view returns (uint256);\\n\\n    /**\\n        @notice Get amount of tokens to be rewarded for a given epoch.\\n        @dev Will be 0 if user has already claimed rewards for the epoch.\\n        @param _user Address of the user to get amount of rewards for\\n        @param _promotionId Promotion id from which the epoch is\\n        @param _epochIds Epoch ids to get reward amount for\\n        @return Amount of tokens to be rewarded\\n     */\\n    function getRewardsAmount(\\n        address _user,\\n        uint256 _promotionId,\\n        uint256[] calldata _epochIds\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x2b87a3cda02deeefa3b4b610f7e2425c01e5a0eab6e68a9c0809226a48ae654c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612219806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80639057ed8111610076578063a49588451161005b578063a4958845146101c7578063b2ff9a2c146101da578063f824d0fb146101f057600080fd5b80639057ed81146101a1578063a05170cc146101b457600080fd5b806307392ef7146100a8578063096fe668146100ce57806314fdecca146100f15780637752328914610181575b600080fd5b6100bb6100b6366004611cb4565b610203565b6040519081526020015b60405180910390f35b6100e16100dc366004611eab565b610455565b60405190151581526020016100c5565b6101046100ff366004611e27565b610613565b6040516100c59190600060e0820190506001600160a01b03808451168352806020850151166020840152806040850151166040840152506001600160d81b036060840151166060830152608083015163ffffffff80821660808501528060a08601511660a0850152505060ff60c08401511660c083015292915050565b61019461018f366004611cb4565b61071e565b6040516100c59190611f97565b6100e16101af366004611e59565b6107ce565b6100bb6101c2366004611c2e565b610b67565b6100bb6101d5366004611e27565b610e50565b6100bb6101e8366004611e89565b6001901b1790565b6100bb6101fe366004611e27565b610e5b565b60008381526002602090815260408083206001600160a01b03881684529091528120548190815b848110156103045760008686838181106102465761024661219f565b90506020020135905061025a898983610e66565b156102d25760405162461bcd60e51b815260206004820152602360248201527f54776162526577617264732f726577617264732d616c72656164792d636c616960448201527f6d6564000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102dd898983610eac565b6102e79085612033565b93506001901b9190911790806102fc8161216e565b91505061022a565b5060008681526002602090815260408083206001600160a01b038b168452909152902081905561040f87836103fb896040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b604001516001600160a01b03169190611285565b857fd4d34012815a37cfd53f09c485fe0c00d5c412befbb63d2a19820dff71c4d50086868560405161044393929190611f38565b60405180910390a25095945050505050565b600061046083611333565b600061052e846040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b90506000838260c001516105429190612073565b6000868152602081905260408120600401805460ff808516640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff90921691909117909155606085015192935090916105a19187166120ba565b60408401516001600160d81b039190911691506105c9906001600160a01b031633308461148f565b6040805182815260ff8416602082015287917f26149736fc65f54602a80ef06252f7689dd136632fa2708e0cc2891eeb5f9cb691015b60405180910390a250600195945050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152610718826040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b92915050565b606060008267ffffffffffffffff81111561073b5761073b6121b5565b604051908082528060200260200182016040528015610764578160200160208202803683370190505b50905060005b838110156107c45761079587878787858181106107895761078961219f565b90506020020135610eac565b8282815181106107a7576107a761219f565b6020908102919091010152806107bc8161216e565b91505061076a565b5095945050505050565b60008261089d816040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b516001600160a01b0316331461091b5760405162461bcd60e51b815260206004820152602260248201527f54776162526577617264732f6f6e6c792d70726f6d6f74696f6e2d637265617460448201527f6f7200000000000000000000000000000000000000000000000000000000000060648201526084016102c9565b61092484611333565b6001600160a01b0383166109a05760405162461bcd60e51b815260206004820152602660248201527f54776162526577617264732f726563697069656e742d6e6f742d7a65726f2d6160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102c9565b6000610a6e856040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b90506000610a7b866114e6565b6000878152602081905260409081902080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811682556001820180548216905560028201805490911690556003810180547fff0000000000000000000000000000000000000000000000000000000000000016905560040180547fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000169055830151909150610b35906001600160a01b03168683611285565b857f844a7b43ca86c9f049aa258ab7241f0544cfc93f2ec9170dca1a4fbd79f2b798826040516105ff91815260200190565b6000610b72876115ea565b60006001546001610b839190612033565b9050806001819055506040518060e00160405280336001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b03168152602001876001600160d81b031681526020018663ffffffff1681526020018563ffffffff1681526020018460ff1681525060008083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160d81b0302191690836001600160d81b03160217905550608082015181600301601b6101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160040160006101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160040160046101000a81548160ff021916908360ff1602179055509050506000876001600160a01b031663dd62ed3e30306040518363ffffffff1660e01b8152600401610d6f9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b158015610d8757600080fd5b505afa158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf9190611e40565b9050600019811015610dec57610dec30610ddb8360001961212b565b6001600160a01b038b169190611784565b610e193330610dfe60ff88168b6120ba565b6001600160a01b038c169291906001600160d81b031661148f565b60405182907faedc1797e973574eb0e43205c473287ca44eb1c9d0f677dbb0ec8cfc72bb68f390600090a250979650505050505050565b6000610718826114e6565b600061071882611877565b60008281526002602090815260408083206001600160a01b0387168452909152812054821c6001908116908114610e9e576000610ea1565b60015b9150505b9392505050565b600080610f7b846040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b60a081015190915063ffffffff166000610f9585836120e9565b836080015163ffffffff16610faa9190612033565b90506000610fb88383612033565b90508042116110095760405162461bcd60e51b815260206004820152601a60248201527f54776162526577617264732f65706f63682d6e6f742d6f76657200000000000060448201526064016102c9565b60208401516040517f98b16f360000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483015267ffffffffffffffff808616602484015284166044830152600091908316906398b16f369060640160206040518083038186803b15801561108457600080fd5b505afa158015611098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bc9190611e40565b604080516001808252818301909252919250600091906020808301908036833701905050905084816000815181106110f6576110f661219f565b67ffffffffffffffff929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905084816000815181106111485761114861219f565b67ffffffffffffffff909216602092830291909101909101526040517f8e6d536a0000000000000000000000000000000000000000000000000000000081526000906001600160a01b03861690638e6d536a906111ab9086908690600401611fdb565b60006040518083038186803b1580156111c357600080fd5b505afa1580156111d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111ff9190810190611d40565b90506000816000815181106112165761121661219f565b6020026020010151111561127257806000815181106112375761123761219f565b6020026020010151848a606001516001600160d81b031661125891906120e9565b6112629190612098565b9950505050505050505050610ea5565b5060009c9b505050505050505050505050565b6040516001600160a01b03831660248201526044810182905261132e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611973565b505050565b6000611401826040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b905060008160c0015160ff168260a0015161141c9190612108565b826080015161142b919061204b565b63ffffffff1690506000811180156114435750428110155b61132e5760405162461bcd60e51b815260206004820181905260248201527f54776162526577617264732f70726f6d6f74696f6e2d6e6f742d61637469766560448201526064016102c9565b6040516001600160a01b03808516602483015283166044820152606481018290526114e09085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016112ca565b50505050565b6000806115b5836040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b90506115c083611877565b8160c0015160ff166115d2919061212b565b81606001516001600160d81b0316610ea591906120e9565b6001600160a01b0381166116665760405162461bcd60e51b815260206004820152602360248201527f54776162526577617264732f7469636b65742d6e6f742d7a65726f2d6164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016102c9565b6040517ff77c479100000000000000000000000000000000000000000000000000000000602082015260009081906001600160a01b0384169060240160408051601f19818403018152908290526116bc91611f1c565b600060405180830381855afa9150503d80600081146116f7576040519150601f19603f3d011682016040523d82523d6000602084013e6116fc565b606091505b50915091506000808251111561172357818060200190518101906117209190611c11565b90505b82801561173857506001600160a01b03811615155b6114e05760405162461bcd60e51b815260206004820152601a60248201527f54776162526577617264732f696e76616c69642d7469636b657400000000000060448201526064016102c9565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156117e957600080fd5b505afa1580156117fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118219190611e40565b61182b9190612033565b6040516001600160a01b0385166024820152604481018290529091506114e09085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016112ca565b600080611946836040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b90508060a0015163ffffffff16816080015163ffffffff1642611969919061212b565b610ea59190612098565b60006119c8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a589092919063ffffffff16565b80519091501561132e57808060200190518101906119e69190611e05565b61132e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102c9565b6060611a678484600085611a6f565b949350505050565b606082471015611ae75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102c9565b843b611b355760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102c9565b600080866001600160a01b03168587604051611b519190611f1c565b60006040518083038185875af1925050503d8060008114611b8e576040519150601f19603f3d011682016040523d82523d6000602084013e611b93565b606091505b5091509150611ba3828286611bae565b979650505050505050565b60608315611bbd575081610ea5565b825115611bcd5782518084602001fd5b8160405162461bcd60e51b81526004016102c99190612000565b803563ffffffff81168114611bfb57600080fd5b919050565b803560ff81168114611bfb57600080fd5b600060208284031215611c2357600080fd5b8151610ea5816121cb565b60008060008060008060c08789031215611c4757600080fd5b8635611c52816121cb565b95506020870135611c62816121cb565b945060408701356001600160d81b0381168114611c7e57600080fd5b9350611c8c60608801611be7565b9250611c9a60808801611be7565b9150611ca860a08801611c00565b90509295509295509295565b60008060008060608587031215611cca57600080fd5b8435611cd5816121cb565b935060208501359250604085013567ffffffffffffffff80821115611cf957600080fd5b818701915087601f830112611d0d57600080fd5b813581811115611d1c57600080fd5b8860208260051b8501011115611d3157600080fd5b95989497505060200194505050565b60006020808385031215611d5357600080fd5b825167ffffffffffffffff80821115611d6b57600080fd5b818501915085601f830112611d7f57600080fd5b815181811115611d9157611d916121b5565b8060051b604051601f19603f83011681018181108582111715611db657611db66121b5565b604052828152858101935084860182860187018a1015611dd557600080fd5b600095505b83861015611df8578051855260019590950194938601938601611dda565b5098975050505050505050565b600060208284031215611e1757600080fd5b81518015158114610ea557600080fd5b600060208284031215611e3957600080fd5b5035919050565b600060208284031215611e5257600080fd5b5051919050565b60008060408385031215611e6c57600080fd5b823591506020830135611e7e816121cb565b809150509250929050565b60008060408385031215611e9c57600080fd5b50508035926020909101359150565b60008060408385031215611ebe57600080fd5b82359150611ece60208401611c00565b90509250929050565b600081518084526020808501945080840160005b83811015611f1157815167ffffffffffffffff1687529582019590820190600101611eeb565b509495945050505050565b60008251611f2e818460208701612142565b9190910192915050565b6040815282604082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841115611f7157600080fd5b8360051b8086606085013760009083016060019081526020909201929092529392505050565b6020808252825182820181905260009190848201906040850190845b81811015611fcf57835183529284019291840191600101611fb3565b50909695505050505050565b604081526000611fee6040830185611ed7565b8281036020840152610ea18185611ed7565b602081526000825180602084015261201f816040850160208701612142565b601f01601f19169190910160400192915050565b6000821982111561204657612046612189565b500190565b600063ffffffff80831681851680830382111561206a5761206a612189565b01949350505050565b600060ff821660ff84168060ff0382111561209057612090612189565b019392505050565b6000826120b557634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160d81b03808316818516818304811182151516156120e0576120e0612189565b02949350505050565b600081600019048311821515161561210357612103612189565b500290565b600063ffffffff808316818516818304811182151516156120e0576120e0612189565b60008282101561213d5761213d612189565b500390565b60005b8381101561215d578181015183820152602001612145565b838111156114e05750506000910152565b600060001982141561218257612182612189565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146121e057600080fd5b5056fea26469706673582212203ec53a2a0ec1c534c4022b2b70f4e77c442990b44d5200babd5522f6ec1f313064736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80639057ed8111610076578063a49588451161005b578063a4958845146101c7578063b2ff9a2c146101da578063f824d0fb146101f057600080fd5b80639057ed81146101a1578063a05170cc146101b457600080fd5b806307392ef7146100a8578063096fe668146100ce57806314fdecca146100f15780637752328914610181575b600080fd5b6100bb6100b6366004611cb4565b610203565b6040519081526020015b60405180910390f35b6100e16100dc366004611eab565b610455565b60405190151581526020016100c5565b6101046100ff366004611e27565b610613565b6040516100c59190600060e0820190506001600160a01b03808451168352806020850151166020840152806040850151166040840152506001600160d81b036060840151166060830152608083015163ffffffff80821660808501528060a08601511660a0850152505060ff60c08401511660c083015292915050565b61019461018f366004611cb4565b61071e565b6040516100c59190611f97565b6100e16101af366004611e59565b6107ce565b6100bb6101c2366004611c2e565b610b67565b6100bb6101d5366004611e27565b610e50565b6100bb6101e8366004611e89565b6001901b1790565b6100bb6101fe366004611e27565b610e5b565b60008381526002602090815260408083206001600160a01b03881684529091528120548190815b848110156103045760008686838181106102465761024661219f565b90506020020135905061025a898983610e66565b156102d25760405162461bcd60e51b815260206004820152602360248201527f54776162526577617264732f726577617264732d616c72656164792d636c616960448201527f6d6564000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102dd898983610eac565b6102e79085612033565b93506001901b9190911790806102fc8161216e565b91505061022a565b5060008681526002602090815260408083206001600160a01b038b168452909152902081905561040f87836103fb896040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b604001516001600160a01b03169190611285565b857fd4d34012815a37cfd53f09c485fe0c00d5c412befbb63d2a19820dff71c4d50086868560405161044393929190611f38565b60405180910390a25095945050505050565b600061046083611333565b600061052e846040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b90506000838260c001516105429190612073565b6000868152602081905260408120600401805460ff808516640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff90921691909117909155606085015192935090916105a19187166120ba565b60408401516001600160d81b039190911691506105c9906001600160a01b031633308461148f565b6040805182815260ff8416602082015287917f26149736fc65f54602a80ef06252f7689dd136632fa2708e0cc2891eeb5f9cb691015b60405180910390a250600195945050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152610718826040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b92915050565b606060008267ffffffffffffffff81111561073b5761073b6121b5565b604051908082528060200260200182016040528015610764578160200160208202803683370190505b50905060005b838110156107c45761079587878787858181106107895761078961219f565b90506020020135610eac565b8282815181106107a7576107a761219f565b6020908102919091010152806107bc8161216e565b91505061076a565b5095945050505050565b60008261089d816040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b516001600160a01b0316331461091b5760405162461bcd60e51b815260206004820152602260248201527f54776162526577617264732f6f6e6c792d70726f6d6f74696f6e2d637265617460448201527f6f7200000000000000000000000000000000000000000000000000000000000060648201526084016102c9565b61092484611333565b6001600160a01b0383166109a05760405162461bcd60e51b815260206004820152602660248201527f54776162526577617264732f726563697069656e742d6e6f742d7a65726f2d6160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102c9565b6000610a6e856040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b90506000610a7b866114e6565b6000878152602081905260409081902080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811682556001820180548216905560028201805490911690556003810180547fff0000000000000000000000000000000000000000000000000000000000000016905560040180547fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000169055830151909150610b35906001600160a01b03168683611285565b857f844a7b43ca86c9f049aa258ab7241f0544cfc93f2ec9170dca1a4fbd79f2b798826040516105ff91815260200190565b6000610b72876115ea565b60006001546001610b839190612033565b9050806001819055506040518060e00160405280336001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b03168152602001876001600160d81b031681526020018663ffffffff1681526020018563ffffffff1681526020018460ff1681525060008083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160d81b0302191690836001600160d81b03160217905550608082015181600301601b6101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160040160006101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160040160046101000a81548160ff021916908360ff1602179055509050506000876001600160a01b031663dd62ed3e30306040518363ffffffff1660e01b8152600401610d6f9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b158015610d8757600080fd5b505afa158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf9190611e40565b9050600019811015610dec57610dec30610ddb8360001961212b565b6001600160a01b038b169190611784565b610e193330610dfe60ff88168b6120ba565b6001600160a01b038c169291906001600160d81b031661148f565b60405182907faedc1797e973574eb0e43205c473287ca44eb1c9d0f677dbb0ec8cfc72bb68f390600090a250979650505050505050565b6000610718826114e6565b600061071882611877565b60008281526002602090815260408083206001600160a01b0387168452909152812054821c6001908116908114610e9e576000610ea1565b60015b9150505b9392505050565b600080610f7b846040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b60a081015190915063ffffffff166000610f9585836120e9565b836080015163ffffffff16610faa9190612033565b90506000610fb88383612033565b90508042116110095760405162461bcd60e51b815260206004820152601a60248201527f54776162526577617264732f65706f63682d6e6f742d6f76657200000000000060448201526064016102c9565b60208401516040517f98b16f360000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483015267ffffffffffffffff808616602484015284166044830152600091908316906398b16f369060640160206040518083038186803b15801561108457600080fd5b505afa158015611098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bc9190611e40565b604080516001808252818301909252919250600091906020808301908036833701905050905084816000815181106110f6576110f661219f565b67ffffffffffffffff929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905084816000815181106111485761114861219f565b67ffffffffffffffff909216602092830291909101909101526040517f8e6d536a0000000000000000000000000000000000000000000000000000000081526000906001600160a01b03861690638e6d536a906111ab9086908690600401611fdb565b60006040518083038186803b1580156111c357600080fd5b505afa1580156111d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111ff9190810190611d40565b90506000816000815181106112165761121661219f565b6020026020010151111561127257806000815181106112375761123761219f565b6020026020010151848a606001516001600160d81b031661125891906120e9565b6112629190612098565b9950505050505050505050610ea5565b5060009c9b505050505050505050505050565b6040516001600160a01b03831660248201526044810182905261132e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611973565b505050565b6000611401826040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b905060008160c0015160ff168260a0015161141c9190612108565b826080015161142b919061204b565b63ffffffff1690506000811180156114435750428110155b61132e5760405162461bcd60e51b815260206004820181905260248201527f54776162526577617264732f70726f6d6f74696f6e2d6e6f742d61637469766560448201526064016102c9565b6040516001600160a01b03808516602483015283166044820152606481018290526114e09085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016112ca565b50505050565b6000806115b5836040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b90506115c083611877565b8160c0015160ff166115d2919061212b565b81606001516001600160d81b0316610ea591906120e9565b6001600160a01b0381166116665760405162461bcd60e51b815260206004820152602360248201527f54776162526577617264732f7469636b65742d6e6f742d7a65726f2d6164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016102c9565b6040517ff77c479100000000000000000000000000000000000000000000000000000000602082015260009081906001600160a01b0384169060240160408051601f19818403018152908290526116bc91611f1c565b600060405180830381855afa9150503d80600081146116f7576040519150601f19603f3d011682016040523d82523d6000602084013e6116fc565b606091505b50915091506000808251111561172357818060200190518101906117209190611c11565b90505b82801561173857506001600160a01b03811615155b6114e05760405162461bcd60e51b815260206004820152601a60248201527f54776162526577617264732f696e76616c69642d7469636b657400000000000060448201526064016102c9565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156117e957600080fd5b505afa1580156117fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118219190611e40565b61182b9190612033565b6040516001600160a01b0385166024820152604481018290529091506114e09085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016112ca565b600080611946836040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091525060009081526020818152604091829020825160e08101845281546001600160a01b039081168252600183015481169382019390935260028201549092169282019290925260038201546001600160d81b0381166060830152600160d81b900463ffffffff908116608083015260049092015491821660a082015264010000000090910460ff1660c082015290565b90508060a0015163ffffffff16816080015163ffffffff1642611969919061212b565b610ea59190612098565b60006119c8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a589092919063ffffffff16565b80519091501561132e57808060200190518101906119e69190611e05565b61132e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102c9565b6060611a678484600085611a6f565b949350505050565b606082471015611ae75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102c9565b843b611b355760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102c9565b600080866001600160a01b03168587604051611b519190611f1c565b60006040518083038185875af1925050503d8060008114611b8e576040519150601f19603f3d011682016040523d82523d6000602084013e611b93565b606091505b5091509150611ba3828286611bae565b979650505050505050565b60608315611bbd575081610ea5565b825115611bcd5782518084602001fd5b8160405162461bcd60e51b81526004016102c99190612000565b803563ffffffff81168114611bfb57600080fd5b919050565b803560ff81168114611bfb57600080fd5b600060208284031215611c2357600080fd5b8151610ea5816121cb565b60008060008060008060c08789031215611c4757600080fd5b8635611c52816121cb565b95506020870135611c62816121cb565b945060408701356001600160d81b0381168114611c7e57600080fd5b9350611c8c60608801611be7565b9250611c9a60808801611be7565b9150611ca860a08801611c00565b90509295509295509295565b60008060008060608587031215611cca57600080fd5b8435611cd5816121cb565b935060208501359250604085013567ffffffffffffffff80821115611cf957600080fd5b818701915087601f830112611d0d57600080fd5b813581811115611d1c57600080fd5b8860208260051b8501011115611d3157600080fd5b95989497505060200194505050565b60006020808385031215611d5357600080fd5b825167ffffffffffffffff80821115611d6b57600080fd5b818501915085601f830112611d7f57600080fd5b815181811115611d9157611d916121b5565b8060051b604051601f19603f83011681018181108582111715611db657611db66121b5565b604052828152858101935084860182860187018a1015611dd557600080fd5b600095505b83861015611df8578051855260019590950194938601938601611dda565b5098975050505050505050565b600060208284031215611e1757600080fd5b81518015158114610ea557600080fd5b600060208284031215611e3957600080fd5b5035919050565b600060208284031215611e5257600080fd5b5051919050565b60008060408385031215611e6c57600080fd5b823591506020830135611e7e816121cb565b809150509250929050565b60008060408385031215611e9c57600080fd5b50508035926020909101359150565b60008060408385031215611ebe57600080fd5b82359150611ece60208401611c00565b90509250929050565b600081518084526020808501945080840160005b83811015611f1157815167ffffffffffffffff1687529582019590820190600101611eeb565b509495945050505050565b60008251611f2e818460208701612142565b9190910192915050565b6040815282604082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841115611f7157600080fd5b8360051b8086606085013760009083016060019081526020909201929092529392505050565b6020808252825182820181905260009190848201906040850190845b81811015611fcf57835183529284019291840191600101611fb3565b50909695505050505050565b604081526000611fee6040830185611ed7565b8281036020840152610ea18185611ed7565b602081526000825180602084015261201f816040850160208701612142565b601f01601f19169190910160400192915050565b6000821982111561204657612046612189565b500190565b600063ffffffff80831681851680830382111561206a5761206a612189565b01949350505050565b600060ff821660ff84168060ff0382111561209057612090612189565b019392505050565b6000826120b557634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160d81b03808316818516818304811182151516156120e0576120e0612189565b02949350505050565b600081600019048311821515161561210357612103612189565b500290565b600063ffffffff808316818516818304811182151516156120e0576120e0612189565b60008282101561213d5761213d612189565b500390565b60005b8381101561215d578181015183820152602001612145565b838111156114e05750506000910152565b600060001982141561218257612182612189565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146121e057600080fd5b5056fea26469706673582212203ec53a2a0ec1c534c4022b2b70f4e77c442990b44d5200babd5522f6ec1f313064736f6c63430008060033",
  "devdoc": {
    "author": "PoolTogether Inc Team",
    "events": {
      "PromotionCancelled(uint256,uint256)": {
        "params": {
          "amount": "Amount of tokens transferred to the promotion creator",
          "promotionId": "Id of the promotion being cancelled"
        }
      },
      "PromotionCreated(uint256)": {
        "params": {
          "promotionId": "Id of the newly created promotion"
        }
      },
      "PromotionExtended(uint256,uint256,uint256)": {
        "params": {
          "amount": "Amount of tokens transferred to the recipient address",
          "numberOfEpochs": "New total number of epochs after extending the promotion",
          "promotionId": "Id of the promotion being extended"
        }
      },
      "RewardsClaimed(uint256,uint256[],uint256)": {
        "params": {
          "amount": "Amount of tokens transferred to the recipient address",
          "epochIds": "Ids of the epochs being claimed",
          "promotionId": "Id of the promotion for which epoch rewards were claimed"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "_updateClaimedEpoch(uint256,uint256)": {
        "details": "Bits are stored in a uint256 from right to left. Let's take the example of the following 8 bits word. 0110 0011 To set the boolean value to 1 for the epoch id 2, we need to create a mask by shifting 1 to the left by 2 bits. We get: 0000 0001 << 2 = 0000 0100 We then OR the mask with the word to set the value. We get: 0110 0011 | 0000 0100 = 0110 0111",
        "params": {
          "_epochId": "Id of the epoch to set the boolean for",
          "_epochs": "Tightly packed epoch ids with their boolean values"
        },
        "returns": {
          "_0": "Tightly packed epoch ids with the newly boolean value set"
        }
      },
      "cancelPromotion(uint256,address)": {
        "params": {
          "_promotionId": "Promotion id to cancel",
          "_to": "Address that will receive the remaining tokens if there are any left"
        },
        "returns": {
          "_0": "true if cancelation was successful"
        }
      },
      "claimRewards(address,uint256,uint256[])": {
        "details": "Rewards can be claimed on behalf of a user.Rewards can only be claimed for a past epoch.",
        "params": {
          "_epochIds": "Epoch ids to claim rewards for",
          "_promotionId": "Promotion id to claim rewards for",
          "_user": "Address of the user to claim rewards for"
        },
        "returns": {
          "_0": "Amount of rewards claimed"
        }
      },
      "createPromotion(address,address,uint216,uint32,uint32,uint8)": {
        "details": "For sake of simplicity, `msg.sender` will be the creator of the promotion.We approve the contract to spend the max amount of reward tokens in order to save on gas when claiming rewards.`_latestPromotionId` starts at 0 and is incremented by 1 for each new promotion. So the first promotion will have id 1, the second 2, etc.",
        "params": {
          "_epochDuration": "Duration of one epoch in seconds",
          "_numberOfEpochs": "Number of epochs the promotion will last for",
          "_startTimestamp": "Timestamp at which the promotion starts",
          "_ticket": "Prize Pool ticket address for which the promotion is created",
          "_token": "Address of the token to be distributed",
          "_tokensPerEpoch": "Number of tokens to be distributed per epoch"
        },
        "returns": {
          "_0": "Id of the newly created promotion"
        }
      },
      "extendPromotion(uint256,uint8)": {
        "params": {
          "_numberOfEpochs": "Number of epochs to add",
          "_promotionId": "Promotion id to extend"
        },
        "returns": {
          "_0": "true if the operation was successful"
        }
      },
      "getCurrentEpochId(uint256)": {
        "details": "Epoch ids and their boolean values are tightly packed and stored in a uint256, so epoch id starts at 0.",
        "params": {
          "_promotionId": "Promotion id to get current epoch for"
        },
        "returns": {
          "_0": "Epoch id"
        }
      },
      "getPromotion(uint256)": {
        "params": {
          "_promotionId": "Promotion id to get settings for"
        },
        "returns": {
          "_0": "Promotion settings"
        }
      },
      "getRemainingRewards(uint256)": {
        "params": {
          "_promotionId": "Promotion id to get the total amount of tokens left to be rewarded for"
        },
        "returns": {
          "_0": "Amount of tokens left to be rewarded"
        }
      },
      "getRewardsAmount(address,uint256,uint256[])": {
        "details": "Will be 0 if user has already claimed rewards for the epoch.",
        "params": {
          "_epochIds": "Epoch ids to get reward amount for",
          "_promotionId": "Promotion id from which the epoch is",
          "_user": "Address of the user to get amount of rewards for"
        },
        "returns": {
          "_0": "Amount of tokens to be rewarded"
        }
      }
    },
    "stateVariables": {
      "_claimedEpochs": {
        "details": "_claimedEpochs[promotionId][user] => claimedEpochsWe pack epochs claimed by a user into a uint256. So we can't store more than 255 epochs."
      },
      "_latestPromotionId": {
        "details": "Starts at 0 and is incremented by 1 for each new promotion. So the first promotion will have id 1, the second 2, etc."
      }
    },
    "title": "PoolTogether V4 TwabRewards",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PromotionCancelled(uint256,uint256)": {
        "notice": "Emmited when a promotion is cancelled."
      },
      "PromotionCreated(uint256)": {
        "notice": "Emmited when a promotion is created."
      },
      "PromotionExtended(uint256,uint256,uint256)": {
        "notice": "Emmited when a promotion is extended."
      },
      "RewardsClaimed(uint256,uint256[],uint256)": {
        "notice": "Emmited when rewards have been claimed."
      }
    },
    "kind": "user",
    "methods": {
      "_updateClaimedEpoch(uint256,uint256)": {
        "notice": "Set boolean value for a specific epoch."
      },
      "cancelPromotion(uint256,address)": {
        "notice": "Cancel currently active promotion and send promotion tokens back to the creator."
      },
      "claimRewards(address,uint256,uint256[])": {
        "notice": "Claim rewards for a given promotion and epoch."
      },
      "createPromotion(address,address,uint216,uint32,uint32,uint8)": {
        "notice": "Create a new promotion."
      },
      "extendPromotion(uint256,uint8)": {
        "notice": "Extend promotion by adding more epochs."
      },
      "getCurrentEpochId(uint256)": {
        "notice": "Get the current epoch id of a promotion."
      },
      "getPromotion(uint256)": {
        "notice": "Get settings for a specific promotion."
      },
      "getRemainingRewards(uint256)": {
        "notice": "Get the total amount of tokens left to be rewarded."
      },
      "getRewardsAmount(address,uint256,uint256[])": {
        "notice": "Get amount of tokens to be rewarded for a given epoch."
      }
    },
    "notice": "Contract to distribute rewards to depositors in a pool.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13863,
        "contract": "@pooltogether/v4-periphery/contracts/TwabRewards.sol:TwabRewards",
        "label": "_promotions",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Promotion)14938_storage)"
      },
      {
        "astId": 13866,
        "contract": "@pooltogether/v4-periphery/contracts/TwabRewards.sol:TwabRewards",
        "label": "_latestPromotionId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13873,
        "contract": "@pooltogether/v4-periphery/contracts/TwabRewards.sol:TwabRewards",
        "label": "_claimedEpochs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Promotion)14938_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITwabRewards.Promotion)",
        "numberOfBytes": "32",
        "value": "t_struct(Promotion)14938_storage"
      },
      "t_struct(Promotion)14938_storage": {
        "encoding": "inplace",
        "label": "struct ITwabRewards.Promotion",
        "members": [
          {
            "astId": 14924,
            "contract": "@pooltogether/v4-periphery/contracts/TwabRewards.sol:TwabRewards",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14926,
            "contract": "@pooltogether/v4-periphery/contracts/TwabRewards.sol:TwabRewards",
            "label": "ticket",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 14929,
            "contract": "@pooltogether/v4-periphery/contracts/TwabRewards.sol:TwabRewards",
            "label": "token",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)663"
          },
          {
            "astId": 14931,
            "contract": "@pooltogether/v4-periphery/contracts/TwabRewards.sol:TwabRewards",
            "label": "tokensPerEpoch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint216"
          },
          {
            "astId": 14933,
            "contract": "@pooltogether/v4-periphery/contracts/TwabRewards.sol:TwabRewards",
            "label": "startTimestamp",
            "offset": 27,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 14935,
            "contract": "@pooltogether/v4-periphery/contracts/TwabRewards.sol:TwabRewards",
            "label": "epochDuration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 14937,
            "contract": "@pooltogether/v4-periphery/contracts/TwabRewards.sol:TwabRewards",
            "label": "numberOfEpochs",
            "offset": 4,
            "slot": "4",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}