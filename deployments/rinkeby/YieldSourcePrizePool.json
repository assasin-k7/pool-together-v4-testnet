{
  "address": "0x3D99eB28985adcd105947Fbb8D90b49cCe1ec562",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AwardCaptured",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IControlledToken",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Awarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AwardedExternalERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "AwardedExternalERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IControlledToken",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ControlledTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IControlledToken",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "error",
          "type": "bytes"
        }
      ],
      "name": "ErrorAwardingExternalERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "reserveRegistry",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityCap",
          "type": "uint256"
        }
      ],
      "name": "LiquidityCapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prizeStrategy",
          "type": "address"
        }
      ],
      "name": "PrizeStrategySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferredExternalERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IControlledToken",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "yieldSource",
          "type": "address"
        }
      ],
      "name": "YieldSourcePrizePoolInitialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IControlledToken",
          "name": "_controlledToken",
          "type": "address"
        }
      ],
      "name": "award",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "awardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_externalToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "awardExternalERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "externalToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "awardExternalERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_externalToken",
          "type": "address"
        }
      ],
      "name": "canAwardExternal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "captureAwardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICompLike",
          "name": "_compLike",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "compLikeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IControlledToken",
          "name": "controlledToken",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IControlledToken[]",
          "name": "_controlledTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IControlledToken[]",
          "name": "_controlledTokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IYieldSource",
          "name": "_yieldSource",
          "type": "address"
        }
      ],
      "name": "initializeYieldSourcePrizePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IControlledToken",
          "name": "controlledToken",
          "type": "address"
        }
      ],
      "name": "isControlled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizeStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidityCap",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_prizeStrategy",
          "type": "address"
        }
      ],
      "name": "setPrizeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "tokenAtIndex",
      "outputs": [
        {
          "internalType": "contract IControlledToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IControlledToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_externalToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferExternalERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IControlledToken",
          "name": "controlledToken",
          "type": "address"
        }
      ],
      "name": "withdrawFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldSource",
      "outputs": [
        {
          "internalType": "contract IYieldSource",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0071dd0764d581735c61a1fff883e020dfe46e8353321ebc753312961acd59e",
  "receipt": {
    "to": null,
    "from": "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "contractAddress": "0x3D99eB28985adcd105947Fbb8D90b49cCe1ec562",
    "transactionIndex": 13,
    "gasUsed": "2561301",
    "logsBloom": "0x
    "blockHash": "0x7a290fa003d7bc2ff04de8a45b42abbd822760a137c55dda8511117e2538e0c6",
    "transactionHash": "0xb0071dd0764d581735c61a1fff883e020dfe46e8353321ebc753312961acd59e",
    "logs": [],
    "blockNumber": 9270445,
    "cumulativeGasUsed": "5047838",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5bd4dfff3996e6e250da2bdbd3154bc0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AwardCaptured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IControlledToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Awarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AwardedExternalERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"AwardedExternalERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IControlledToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ControlledTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IControlledToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"error\",\"type\":\"bytes\"}],\"name\":\"ErrorAwardingExternalERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reserveRegistry\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityCap\",\"type\":\"uint256\"}],\"name\":\"LiquidityCapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prizeStrategy\",\"type\":\"address\"}],\"name\":\"PrizeStrategySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferredExternalERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IControlledToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"yieldSource\",\"type\":\"address\"}],\"name\":\"YieldSourcePrizePoolInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IControlledToken\",\"name\":\"_controlledToken\",\"type\":\"address\"}],\"name\":\"award\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"awardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_externalToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"awardExternalERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"externalToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"awardExternalERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_externalToken\",\"type\":\"address\"}],\"name\":\"canAwardExternal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"captureAwardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompLike\",\"name\":\"_compLike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"compLikeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IControlledToken\",\"name\":\"controlledToken\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IControlledToken[]\",\"name\":\"_controlledTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IControlledToken[]\",\"name\":\"_controlledTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IYieldSource\",\"name\":\"_yieldSource\",\"type\":\"address\"}],\"name\":\"initializeYieldSourcePrizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IControlledToken\",\"name\":\"controlledToken\",\"type\":\"address\"}],\"name\":\"isControlled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityCap\",\"type\":\"uint256\"}],\"name\":\"setLiquidityCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prizeStrategy\",\"type\":\"address\"}],\"name\":\"setPrizeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"tokenAtIndex\",\"outputs\":[{\"internalType\":\"contract IControlledToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IControlledToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_externalToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferExternalERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IControlledToken\",\"name\":\"controlledToken\",\"type\":\"address\"}],\"name\":\"withdrawFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldSource\",\"outputs\":[{\"internalType\":\"contract IYieldSource\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountedBalance()\":{\"returns\":{\"_0\":\"The current total of all tokens\"}},\"award(address,uint256,address)\":{\"details\":\"The amount awarded must be less than the awardBalance()\",\"params\":{\"_amount\":\"The amount of assets to be awarded\",\"_controlledToken\":\"The address of the asset token being awarded\",\"_to\":\"The address of the winner that receives the award\"}},\"awardBalance()\":{\"details\":\"captureAwardBalance() should be called first\",\"returns\":{\"_0\":\"The total amount of assets to be awarded for the current prize\"}},\"awardExternalERC20(address,address,uint256)\":{\"details\":\"Used to award any arbitrary tokens held by the Prize Pool\",\"params\":{\"_amount\":\"The amount of external assets to be awarded\",\"_externalToken\":\"The address of the external asset token being awarded\",\"_to\":\"The address of the winner that receives the award\"}},\"awardExternalERC721(address,address,uint256[])\":{\"details\":\"Used to award any arbitrary NFTs held by the Prize Pool\",\"params\":{\"externalToken\":\"The address of the external NFT token being awarded\",\"to\":\"The address of the winner that receives the award\",\"tokenIds\":\"An array of NFT Token IDs to be transferred\"}},\"balance()\":{\"details\":\"Returns the total underlying balance of all assets. This includes both principal and interest.\",\"returns\":{\"_0\":\"The underlying balance of assets\"}},\"canAwardExternal(address)\":{\"details\":\"Checks with the Prize Pool if a specific token type may be awarded as an external prize\",\"params\":{\"_externalToken\":\"The address of the token to check\"},\"returns\":{\"_0\":\"True if the token may be awarded, false otherwise\"}},\"captureAwardBalance()\":{\"returns\":{\"_0\":\"The total amount of assets to be awarded for the current prize\"}},\"compLikeDelegate(address,address)\":{\"params\":{\"_compLike\":\"The COMP-like token held by the prize pool that should be delegated\",\"_to\":\"The address to delegate to\"}},\"depositTo(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of assets to deposit\",\"controlledToken\":\"The address of the type of token the user is minting\",\"to\":\"The address receiving the newly minted tokens\"}},\"initialize(address[])\":{\"params\":{\"_controlledTokens\":\"Array of ControlledTokens that are controlled by this Prize Pool.\"}},\"initializeYieldSourcePrizePool(address[],address)\":{\"params\":{\"_controlledTokens\":\"Array of addresses for the Ticket and Sponsorship Tokens controlled by the Prize Pool\",\"_yieldSource\":\"Address of the yield source\"}},\"isControlled(address)\":{\"details\":\"Checks if a specific token is controlled by the Prize Pool\",\"params\":{\"controlledToken\":\"The address of the token to check\"},\"returns\":{\"_0\":\"True if the token is a controlled token, false otherwise\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`.\",\"_from\":\"The current owner of the NFT\",\"_operator\":\"The address that acts on behalf of the owner\",\"_tokenId\":\"The NFT to transfer\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setLiquidityCap(uint256)\":{\"params\":{\"_liquidityCap\":\"The new liquidity cap for the prize pool\"}},\"setPrizeStrategy(address)\":{\"params\":{\"_prizeStrategy\":\"The new prize strategy\"}},\"token()\":{\"details\":\"Returns the address of the underlying ERC20 asset\",\"returns\":{\"_0\":\"The address of the asset\"}},\"tokenAtIndex(uint256)\":{\"details\":\"Returns the address of a token in the _tokens array.\",\"returns\":{\"_0\":\"Address of token\"}},\"tokens()\":{\"returns\":{\"_0\":\"An array of controlled token addresses\"}},\"transferExternalERC20(address,address,uint256)\":{\"details\":\"Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\",\"params\":{\"_amount\":\"The amount of external assets to be awarded\",\"_externalToken\":\"The address of the external asset token being awarded\",\"_to\":\"The address of the winner that receives the award\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFrom(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of tokens to redeem for assets.\",\"controlledToken\":\"The address of the token to redeem (i.e. ticket or sponsorship)\",\"from\":\"The address to redeem tokens from.\"},\"returns\":{\"_0\":\"The actual exit fee paid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"VERSION()\":{\"notice\":\"Semver Version\"},\"accountedBalance()\":{\"notice\":\"The total of all controlled tokens\"},\"award(address,uint256,address)\":{\"notice\":\"Called by the prize strategy to award prizes.\"},\"awardBalance()\":{\"notice\":\"Returns the balance that is available to award.\"},\"awardExternalERC20(address,address,uint256)\":{\"notice\":\"Called by the Prize-Strategy to award external ERC20 prizes\"},\"awardExternalERC721(address,address,uint256[])\":{\"notice\":\"Called by the prize strategy to award external ERC721 prizes\"},\"captureAwardBalance()\":{\"notice\":\"Captures any available interest as award balance.\"},\"compLikeDelegate(address,address)\":{\"notice\":\"Delegate the votes for a Compound COMP-like token held by the prize pool\"},\"depositTo(address,uint256,address)\":{\"notice\":\"Deposit assets into the Prize Pool in exchange for tokens\"},\"initialize(address[])\":{\"notice\":\"Initializes the Prize Pool\"},\"initializeYieldSourcePrizePool(address[],address)\":{\"notice\":\"Initializes the Prize Pool and Yield Service with the required contract connections\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Required for ERC721 safe token transfers from smart contracts.\"},\"setLiquidityCap(uint256)\":{\"notice\":\"Allows the Governor to set a cap on the amount of liquidity that he pool can hold\"},\"setPrizeStrategy(address)\":{\"notice\":\"Sets the prize strategy of the prize pool.  Only callable by the owner.\"},\"tokens()\":{\"notice\":\"An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)\"},\"transferExternalERC20(address,address,uint256)\":{\"notice\":\"Called by the Prize-Strategy to transfer out external ERC20 tokens\"},\"withdrawFrom(address,uint256,address)\":{\"notice\":\"Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol\":\"YieldSourcePrizePool\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37c56d5e4a1c4c65ad0dcc6af28442c5d35c6ca07d9ad6e966e07dceb97e6c8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165Upgradeable).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable(account).supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xbc406f0b40049918b3df06955a8a325fa40c76e13c384da3ab9f0daff1990531\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xb92541cd02568981bc3dac94060d542ab3231d8f30ade82aeba0588761c1b649\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x603946f0dc2541ff45f4b5cb1424ed1870eb24f3396cd318b1996e7e65278907\",\"license\":\"MIT\"},\"@pooltogether/fixed-point/contracts/FixedPoint.sol\":{\"content\":\"/**\\nCopyright 2020 PoolTogether Inc.\\n\\nThis file is part of PoolTogether.\\n\\nPoolTogether is free software: you can redistribute it and/or modify\\nit under the terms of the GNU General Public License as published by\\nthe Free Software Foundation under version 3 of the License.\\n\\nPoolTogether is distributed in the hope that it will be useful,\\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\nGNU General Public License for more details.\\n\\nYou should have received a copy of the GNU General Public License\\nalong with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.4.0;\\n\\nimport \\\"./external/openzeppelin/OpenZeppelinSafeMath_V3_3_0.sol\\\";\\n\\n/**\\n * @author Brendan Asselstine\\n * @notice Provides basic fixed point math calculations.\\n *\\n * This library calculates integer fractions by scaling values by 1e18 then performing standard integer math.\\n */\\nlibrary FixedPoint {\\n    using OpenZeppelinSafeMath_V3_3_0 for uint256;\\n\\n    // The scale to use for fixed point numbers.  Same as Ether for simplicity.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /**\\n        * Calculates a Fixed18 mantissa given the numerator and denominator\\n        *\\n        * The mantissa = (numerator * 1e18) / denominator\\n        *\\n        * @param numerator The mantissa numerator\\n        * @param denominator The mantissa denominator\\n        * @return The mantissa of the fraction\\n        */\\n    function calculateMantissa(uint256 numerator, uint256 denominator) internal pure returns (uint256) {\\n        uint256 mantissa = numerator.mul(SCALE);\\n        mantissa = mantissa.div(denominator);\\n        return mantissa;\\n    }\\n\\n    /**\\n        * Multiplies a Fixed18 number by an integer.\\n        *\\n        * @param b The whole integer to multiply\\n        * @param mantissa The Fixed18 number\\n        * @return An integer that is the result of multiplying the params.\\n        */\\n    function multiplyUintByMantissa(uint256 b, uint256 mantissa) internal pure returns (uint256) {\\n        uint256 result = mantissa.mul(b);\\n        result = result.div(SCALE);\\n        return result;\\n    }\\n\\n    /**\\n    * Divides an integer by a fixed point 18 mantissa\\n    *\\n    * @param dividend The integer to divide\\n    * @param mantissa The fixed point 18 number to serve as the divisor\\n    * @return An integer that is the result of dividing an integer by a fixed point 18 mantissa\\n    */\\n    function divideUintByMantissa(uint256 dividend, uint256 mantissa) internal pure returns (uint256) {\\n        uint256 result = SCALE.mul(dividend);\\n        result = result.div(mantissa);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f89a3e774fd543d6fb9bc56469eb0f9fb870fb8b2a01c623e4bb31139ef8bc8\"},\"@pooltogether/fixed-point/contracts/external/openzeppelin/OpenZeppelinSafeMath_V3_3_0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// NOTE: Copied from OpenZeppelin Contracts version 3.3.0\\n\\npragma solidity >=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary OpenZeppelinSafeMath_V3_3_0 {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x5715f9c8b03dd832dd0e21556431431c75b552d0c5904a89c4fcc17546ba54f4\",\"license\":\"MIT\"},\"@pooltogether/v4/contracts/external/compound/ICompLike.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ICompLike is IERC20Upgradeable {\\n  function getCurrentVotes(address account) external view returns (uint96);\\n  function delegate(address delegatee) external;\\n}\\n\",\"keccak256\":\"0x85191b3b175d79cd256db869231c8843c2b7e4ec274ada6019b21e026509aaa8\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4/contracts/interfaces/IControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ninterface IControlledToken is IERC20Upgradeable {\\n\\n  /// @dev Emitted when an instance is initialized\\n  event Initialized(\\n    string name,\\n    string symbol,\\n    uint8 decimals,\\n    address controller\\n  );\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  function controller() external view returns (address);\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param user Address of the receiver of the minted tokens\\n  /// @param amount Amount of tokens to mint\\n  function controllerMint(address user, uint256 amount) external;\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param user Address of the holder account to burn tokens from\\n  /// @param amount Amount of tokens to burn\\n  function controllerBurn(address user, uint256 amount) external;\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param operator Address of the operator performing the burn action via the controller contract\\n  /// @param user Address of the holder account to burn tokens from\\n  /// @param amount Amount of tokens to burn\\n  function controllerBurnFrom(address operator, address user, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x018bbb5f4609cfd289779a5caa73454db0b88bca99828a34c96b572694c9f49e\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4/contracts/interfaces/IPrizePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../interfaces/IControlledToken.sol\\\";\\n\\n/// @title Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.\\n///       Users deposit and withdraw from this contract to participate in Prize Pool.\\n/// @notice Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\\n/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\\ninterface IPrizePool {\\n\\n  /// @dev Emitted when an instance is initialized\\n  event Initialized(\\n    address reserveRegistry\\n  );\\n\\n  /// @dev Event emitted when controlled token is added\\n  event ControlledTokenAdded(\\n    IControlledToken indexed token\\n  );\\n\\n  event AwardCaptured(\\n    uint256 amount\\n  );\\n\\n  /// @dev Event emitted when assets are deposited\\n  event Deposited(\\n    address indexed operator,\\n    address indexed to,\\n    IControlledToken indexed token,\\n    uint256 amount\\n  );\\n\\n  /// @dev Event emitted when interest is awarded to a winner\\n  event Awarded(\\n    address indexed winner,\\n    IControlledToken indexed token,\\n    uint256 amount\\n  );\\n\\n  /// @dev Event emitted when external ERC20s are awarded to a winner\\n  event AwardedExternalERC20(\\n    address indexed winner,\\n    address indexed token,\\n    uint256 amount\\n  );\\n\\n  /// @dev Event emitted when external ERC20s are transferred out\\n  event TransferredExternalERC20(\\n    address indexed to,\\n    address indexed token,\\n    uint256 amount\\n  );\\n\\n  /// @dev Event emitted when external ERC721s are awarded to a winner\\n  event AwardedExternalERC721(\\n    address indexed winner,\\n    address indexed token,\\n    uint256[] tokenIds\\n  );\\n\\n  /// @dev Event emitted when assets are withdrawn instantly\\n  event Withdrawal(\\n    address indexed operator,\\n    address indexed from,\\n    IControlledToken indexed token,\\n    uint256 amount,\\n    uint256 redeemed\\n  );\\n\\n  /// @dev Event emitted when the Liquidity Cap is set\\n  event LiquidityCapSet(\\n    uint256 liquidityCap\\n  );\\n\\n  /// @dev Event emitted when the Prize Strategy is set\\n  event PrizeStrategySet(\\n    address indexed prizeStrategy\\n  );\\n\\n  /// @dev Emitted when there was an error thrown awarding an External ERC721\\n  event ErrorAwardingExternalERC721(bytes error);\\n\\n  /// @dev Returns the address of a token in the _tokens array.\\n  /// @return Address of token\\n  function tokenAtIndex(uint256 tokenIndex) external returns (IControlledToken);\\n\\n  /// @notice Deposit assets into the Prize Pool in exchange for tokens\\n  /// @param to The address receiving the newly minted tokens\\n  /// @param amount The amount of assets to deposit\\n  /// @param controlledToken The address of the type of token the user is minting\\n  function depositTo(\\n    address to,\\n    uint256 amount,\\n    IControlledToken controlledToken\\n  )\\n    external;\\n\\n  /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\\n  /// @param from The address to redeem tokens from.\\n  /// @param amount The amount of tokens to redeem for assets.\\n  /// @param controlledToken The address of the token to redeem (i.e. ticket or sponsorship)\\n  /// @return The actual amount withdrawn\\n  function withdrawFrom(\\n    address from,\\n    uint256 amount,\\n    IControlledToken controlledToken\\n  ) external returns (uint256);\\n\\n  /// @notice Returns the balance that is available to award.\\n  /// @dev captureAwardBalance() should be called first\\n  /// @return The total amount of assets to be awarded for the current prize\\n  function awardBalance() external view returns (uint256);\\n\\n  /// @notice Captures any available interest as award balance.\\n  /// @dev This function also captures the reserve fees.\\n  /// @return The total amount of assets to be awarded for the current prize\\n  function captureAwardBalance() external returns (uint256);\\n\\n  /// @notice Called by the prize strategy to award prizes.\\n  /// @dev The amount awarded must be less than the awardBalance()\\n  /// @param to The address of the winner that receives the award\\n  /// @param amount The amount of assets to be awarded\\n  /// @param controlledToken The address of the asset token being awarded\\n  function award(\\n    address to,\\n    uint256 amount,\\n    IControlledToken controlledToken\\n  )\\n    external;\\n\\n  /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\\n  /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\\n  /// @param to The address of the winner that receives the award\\n  /// @param amount The amount of external assets to be awarded\\n  /// @param externalToken The address of the external asset token being awarded\\n  function transferExternalERC20(\\n    address to,\\n    address externalToken,\\n    uint256 amount\\n  )\\n    external;\\n\\n  /// @notice Called by the Prize-Strategy to award external ERC20 prizes\\n  /// @dev Used to award any arbitrary tokens held by the Prize Pool\\n  /// @param to The address of the winner that receives the award\\n  /// @param amount The amount of external assets to be awarded\\n  /// @param externalToken The address of the external asset token being awarded\\n  function awardExternalERC20(\\n    address to,\\n    address externalToken,\\n    uint256 amount\\n  )\\n    external;\\n\\n  /// @notice Called by the prize strategy to award external ERC721 prizes\\n  /// @dev Used to award any arbitrary NFTs held by the Prize Pool\\n  /// @param to The address of the winner that receives the award\\n  /// @param externalToken The address of the external NFT token being awarded\\n  /// @param tokenIds An array of NFT Token IDs to be transferred\\n  function awardExternalERC721(\\n    address to,\\n    address externalToken,\\n    uint256[] calldata tokenIds\\n  )\\n    external;\\n\\n  /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\\n  /// @param _liquidityCap The new liquidity cap for the prize pool\\n  function setLiquidityCap(uint256 _liquidityCap) external;\\n\\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\\n  /// @param _prizeStrategy The new prize strategy.  Must implement ClaimableDrawPrizeStrategy\\n  function setPrizeStrategy(address _prizeStrategy) external;\\n\\n  /// @dev Returns the address of the underlying ERC20 asset\\n  /// @return The address of the asset\\n  function token() external view returns (address);\\n\\n  /// @notice An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)\\n  /// @return An array of controlled token addresses\\n  function tokens() external view returns (IControlledToken[] memory);\\n\\n  /// @notice The total of all controlled tokens\\n  /// @return The current total of all tokens\\n  function accountedBalance() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x49896ad4835234c126e06a327883d427215c3e23548236b8a1a5565df750e69b\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4/contracts/prize-pool/PrizePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@pooltogether/fixed-point/contracts/FixedPoint.sol\\\";\\n\\nimport \\\"../external/compound/ICompLike.sol\\\";\\nimport \\\"../interfaces/IPrizePool.sol\\\";\\n\\n/// @title Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.\\n///       Users deposit and withdraw from this contract to participate in Prize Pool.\\n/// @notice Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\\n/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\\nabstract contract PrizePool is IPrizePool, OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC721ReceiverUpgradeable {\\n  using SafeCastUpgradeable for uint256;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  using SafeERC20Upgradeable for IERC721Upgradeable;\\n  using ERC165CheckerUpgradeable for address;\\n\\n  /// @notice Semver Version\\n  string constant public VERSION = \\\"3.4.0\\\";\\n\\n  /// @dev An array of all the controlled tokens\\n  IControlledToken[] internal _tokens;\\n\\n  /// @dev The Prize Strategy that this Prize Pool is bound to.\\n  address public prizeStrategy;\\n\\n  /// @dev The total amount of funds that the prize pool can hold.\\n  uint256 public liquidityCap;\\n\\n  /// @dev the The awardable balance\\n  uint256 internal _currentAwardBalance;\\n\\n  /// @notice Initializes the Prize Pool\\n  /// @param _controlledTokens Array of ControlledTokens that are controlled by this Prize Pool.\\n  function initialize (\\n    IControlledToken[] memory _controlledTokens\\n  )\\n    public\\n    initializer\\n  {\\n    uint256 controlledTokensLength = _controlledTokens.length;\\n    _tokens = new IControlledToken[](controlledTokensLength);\\n\\n    for (uint256 i = 0; i < controlledTokensLength; i++) {\\n      IControlledToken controlledToken = _controlledTokens[i];\\n      _addControlledToken(controlledToken, i);\\n    }\\n\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n\\n    // NOTE: Updated from _setLiquidityCap(uint256(-1));\\n    uint256 liquidityCapMask = type(uint256).max;\\n    _setLiquidityCap(liquidityCapMask);\\n  }\\n\\n  /// @dev Returns the address of the underlying ERC20 asset\\n  /// @return The address of the asset\\n  function token() external override view returns (address) {\\n    return address(_token());\\n  }\\n\\n  /// @dev Returns the total underlying balance of all assets. This includes both principal and interest.\\n  /// @return The underlying balance of assets\\n  function balance() external returns (uint256) {\\n    return _balance();\\n  }\\n\\n  /// @dev Returns the address of a token in the _tokens array.\\n  /// @return Address of token\\n  function tokenAtIndex(uint256 tokenIndex) external override view returns (IControlledToken) {\\n    IControlledToken[] memory __tokens = _tokens;\\n    require(tokenIndex < __tokens.length, \\\"PrizePool/invalid-token-index\\\");\\n    return __tokens[tokenIndex];\\n  }\\n\\n  /// @dev Checks with the Prize Pool if a specific token type may be awarded as an external prize\\n  /// @param _externalToken The address of the token to check\\n  /// @return True if the token may be awarded, false otherwise\\n  function canAwardExternal(address _externalToken) external view returns (bool) {\\n    return _canAwardExternal(_externalToken);\\n  }\\n\\n  /// @notice Deposit assets into the Prize Pool in exchange for tokens\\n  /// @param to The address receiving the newly minted tokens\\n  /// @param amount The amount of assets to deposit\\n  /// @param controlledToken The address of the type of token the user is minting\\n  function depositTo(\\n    address to,\\n    uint256 amount,\\n    IControlledToken controlledToken\\n  )\\n    external override\\n    nonReentrant\\n    onlyControlledToken(controlledToken)\\n    canAddLiquidity(amount)\\n  {\\n    address operator = _msgSender();\\n\\n    _mint(to, amount, controlledToken);\\n\\n    _token().safeTransferFrom(operator, address(this), amount);\\n    _supply(amount);\\n\\n    emit Deposited(operator, to, controlledToken, amount);\\n  }\\n\\n  /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\\n  /// @param from The address to redeem tokens from.\\n  /// @param amount The amount of tokens to redeem for assets.\\n  /// @param controlledToken The address of the token to redeem (i.e. ticket or sponsorship)\\n  /// @return The actual exit fee paid\\n  function withdrawFrom(\\n    address from,\\n    uint256 amount,\\n    IControlledToken controlledToken\\n  )\\n    external override\\n    nonReentrant\\n    onlyControlledToken(controlledToken)\\n    returns (uint256)\\n  {\\n    // burn the tickets\\n    controlledToken.controllerBurnFrom(_msgSender(), from, amount);\\n\\n    // redeem the tickets\\n    uint256 redeemed = _redeem(amount);\\n\\n    _token().safeTransfer(from, redeemed);\\n\\n    emit Withdrawal(_msgSender(), from, controlledToken, amount, redeemed);\\n\\n    return redeemed;\\n  }\\n\\n  /// @notice Returns the balance that is available to award.\\n  /// @dev captureAwardBalance() should be called first\\n  /// @return The total amount of assets to be awarded for the current prize\\n  function awardBalance() external override view returns (uint256) {\\n    return _currentAwardBalance;\\n  }\\n\\n  /// @notice Captures any available interest as award balance.\\n  /// @return The total amount of assets to be awarded for the current prize\\n  function captureAwardBalance() external override nonReentrant returns (uint256) {\\n    uint256 tokenTotalSupply = _tokenTotalSupply();\\n\\n    // it's possible for the balance to be slightly less due to rounding errors in the underlying yield source\\n    uint256 currentBalance = _balance();\\n    uint256 totalInterest = (currentBalance > tokenTotalSupply) ? currentBalance - tokenTotalSupply : 0;\\n    uint256 unaccountedPrizeBalance = (totalInterest > _currentAwardBalance) ? totalInterest - _currentAwardBalance : 0;\\n\\n    if (unaccountedPrizeBalance > 0) {\\n      _currentAwardBalance = _currentAwardBalance + unaccountedPrizeBalance;\\n\\n      emit AwardCaptured(unaccountedPrizeBalance);\\n    }\\n\\n    return _currentAwardBalance;\\n  }\\n\\n  /// @notice Called by the prize strategy to award prizes.\\n  /// @dev The amount awarded must be less than the awardBalance()\\n  /// @param _to The address of the winner that receives the award\\n  /// @param _amount The amount of assets to be awarded\\n  /// @param _controlledToken The address of the asset token being awarded\\n  function award(\\n    address _to,\\n    uint256 _amount,\\n    IControlledToken _controlledToken\\n  )\\n    external override\\n    onlyPrizeStrategy\\n    onlyControlledToken(_controlledToken)\\n  {\\n    if (_amount == 0) {\\n      return;\\n    }\\n\\n    require(_amount <= _currentAwardBalance, \\\"PrizePool/award-exceeds-avail\\\");\\n    _currentAwardBalance = _currentAwardBalance - _amount;\\n\\n    _mint(_to, _amount, _controlledToken);\\n\\n    emit Awarded(_to, _controlledToken, _amount);\\n  }\\n\\n  /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\\n  /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\\n  /// @param _to The address of the winner that receives the award\\n  /// @param _amount The amount of external assets to be awarded\\n  /// @param _externalToken The address of the external asset token being awarded\\n  function transferExternalERC20(\\n    address _to,\\n    address _externalToken,\\n    uint256 _amount\\n  )\\n    external override\\n    onlyPrizeStrategy\\n  {\\n    if (_transferOut(_to, _externalToken, _amount)) {\\n      emit TransferredExternalERC20(_to, _externalToken, _amount);\\n    }\\n  }\\n\\n  /// @notice Called by the Prize-Strategy to award external ERC20 prizes\\n  /// @dev Used to award any arbitrary tokens held by the Prize Pool\\n  /// @param _to The address of the winner that receives the award\\n  /// @param _amount The amount of external assets to be awarded\\n  /// @param _externalToken The address of the external asset token being awarded\\n  function awardExternalERC20(\\n    address _to,\\n    address _externalToken,\\n    uint256 _amount\\n  )\\n    external override\\n    onlyPrizeStrategy\\n  {\\n    if (_transferOut(_to, _externalToken, _amount)) {\\n      emit AwardedExternalERC20(_to, _externalToken, _amount);\\n    }\\n  }\\n\\n  function _transferOut(\\n    address _to,\\n    address _externalToken,\\n    uint256 _amount\\n  )\\n    internal\\n    returns (bool)\\n  {\\n    require(_canAwardExternal(_externalToken), \\\"PrizePool/invalid-external-token\\\");\\n\\n    if (_amount == 0) {\\n      return false;\\n    }\\n\\n    IERC20Upgradeable(_externalToken).safeTransfer(_to, _amount);\\n\\n    return true;\\n  }\\n\\n  /// @notice Called to mint controlled tokens.  Ensures that token listener callbacks are fired.\\n  /// @param _to The user who is receiving the tokens\\n  /// @param _amount The amount of tokens they are receiving\\n  /// @param _controlledToken The token that is going to be minted\\n  function _mint(address _to, uint256 _amount, IControlledToken _controlledToken) internal {\\n    _controlledToken.controllerMint(_to, _amount);\\n  }\\n\\n  /// @notice Called by the prize strategy to award external ERC721 prizes\\n  /// @dev Used to award any arbitrary NFTs held by the Prize Pool\\n  /// @param to The address of the winner that receives the award\\n  /// @param externalToken The address of the external NFT token being awarded\\n  /// @param tokenIds An array of NFT Token IDs to be transferred\\n  function awardExternalERC721(\\n    address to,\\n    address externalToken,\\n    uint256[] calldata tokenIds\\n  )\\n    external override\\n    onlyPrizeStrategy\\n  {\\n    require(_canAwardExternal(externalToken), \\\"PrizePool/invalid-external-token\\\");\\n\\n    if (tokenIds.length == 0) {\\n      return;\\n    }\\n\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\n      try IERC721Upgradeable(externalToken).safeTransferFrom(address(this), to, tokenIds[i]){\\n\\n      }\\n      catch(bytes memory error){\\n        emit ErrorAwardingExternalERC721(error);\\n      }\\n\\n    }\\n\\n    emit AwardedExternalERC721(to, externalToken, tokenIds);\\n  }\\n\\n  /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\\n  /// @param _liquidityCap The new liquidity cap for the prize pool\\n  function setLiquidityCap(uint256 _liquidityCap) external override onlyOwner {\\n    _setLiquidityCap(_liquidityCap);\\n  }\\n\\n  function _setLiquidityCap(uint256 _liquidityCap) internal {\\n    liquidityCap = _liquidityCap;\\n    emit LiquidityCapSet(_liquidityCap);\\n  }\\n\\n  /// @notice Adds a new controlled token\\n  /// @param _controlledToken The controlled token to add.\\n  /// @param _index The index to add the controlledToken\\n  function _addControlledToken(IControlledToken _controlledToken, uint256 _index) internal {\\n    require(address(_controlledToken) != address(0), \\\"PrizePool/controlledToken-not-zero-address\\\");\\n\\n    _tokens[_index] = _controlledToken;\\n\\n    emit ControlledTokenAdded(_controlledToken);\\n  }\\n\\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\\n  /// @param _prizeStrategy The new prize strategy\\n  function setPrizeStrategy(address _prizeStrategy) external override onlyOwner {\\n    _setPrizeStrategy(_prizeStrategy);\\n  }\\n\\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\\n  /// @param _prizeStrategy The new prize strategy\\n  function _setPrizeStrategy(address _prizeStrategy) internal {\\n    require(_prizeStrategy != address(0), \\\"PrizePool/prizeStrategy-not-zero\\\");\\n\\n    prizeStrategy = _prizeStrategy;\\n\\n    emit PrizeStrategySet(_prizeStrategy);\\n  }\\n\\n  /// @notice An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)\\n  /// @return An array of controlled token addresses\\n  function tokens() external override view returns (IControlledToken[] memory) {\\n    return _tokens;\\n  }\\n\\n  /// @dev Gets the current time as represented by the current block\\n  /// @return The timestamp of the current block\\n  function _currentTime() internal virtual view returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  /// @notice The total of all controlled tokens\\n  /// @return The current total of all tokens\\n  function accountedBalance() external override view returns (uint256) {\\n    return _tokenTotalSupply();\\n  }\\n\\n  /// @notice Delegate the votes for a Compound COMP-like token held by the prize pool\\n  /// @param _compLike The COMP-like token held by the prize pool that should be delegated\\n  /// @param _to The address to delegate to\\n  function compLikeDelegate(ICompLike _compLike, address _to) external onlyOwner {\\n    if (_compLike.balanceOf(address(this)) > 0) {\\n      _compLike.delegate(_to);\\n    }\\n  }\\n\\n  /// @notice Required for ERC721 safe token transfers from smart contracts.\\n  /// @param _operator The address that acts on behalf of the owner\\n  /// @param _from The current owner of the NFT\\n  /// @param _tokenId The NFT to transfer\\n  /// @param _data Additional data with no specified format, sent in call to `_to`.\\n  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external override returns (bytes4){\\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n  }\\n\\n  /// @notice The total of all controlled tokens\\n  /// @return The current total of all tokens\\n  function _tokenTotalSupply() internal view returns (uint256) {\\n    uint256 total;\\n    IControlledToken[] memory tokens = _tokens; // SLOAD\\n    uint256 tokensLength = tokens.length;\\n\\n    for(uint256 i = 0; i < tokensLength; i++){\\n      total = total + IERC20Upgradeable(tokens[i]).totalSupply();\\n    }\\n\\n    return total;\\n  }\\n\\n  /// @dev Checks if the Prize Pool can receive liquidity based on the current cap\\n  /// @param _amount The amount of liquidity to be added to the Prize Pool\\n  /// @return True if the Prize Pool can receive the specified amount of liquidity\\n  function _canAddLiquidity(uint256 _amount) internal view returns (bool) {\\n    uint256 _liquidityCap = liquidityCap;\\n    if(_liquidityCap == type(uint256).max) return true;\\n    return (_tokenTotalSupply() + _amount <= _liquidityCap);\\n  }\\n\\n  /// @dev Checks if a specific token is controlled by the Prize Pool\\n  /// @param controlledToken The address of the token to check\\n  /// @return True if the token is a controlled token, false otherwise\\n  function _isControlled(IControlledToken controlledToken) internal view returns (bool) {\\n    IControlledToken[] memory tokens = _tokens; // SLOAD\\n    uint256 tokensLength = tokens.length;\\n\\n    for(uint256 i = 0; i < tokensLength; i++) {\\n      if(tokens[i] == controlledToken) return true;\\n    }\\n    return false;\\n  }\\n\\n  /// @dev Checks if a specific token is controlled by the Prize Pool\\n  /// @param controlledToken The address of the token to check\\n  /// @return True if the token is a controlled token, false otherwise\\n  function isControlled(IControlledToken controlledToken) external view returns (bool) {\\n    return _isControlled(controlledToken);\\n  }\\n\\n  /// @notice Determines whether the passed token can be transferred out as an external award.\\n  /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\\n  /// prize strategy should not be allowed to move those tokens.\\n  /// @param _externalToken The address of the token to check\\n  /// @return True if the token may be awarded, false otherwise\\n  function _canAwardExternal(address _externalToken) internal virtual view returns (bool);\\n\\n  /// @notice Returns the ERC20 asset token used for deposits.\\n  /// @return The ERC20 asset token\\n  function _token() internal virtual view returns (IERC20Upgradeable);\\n\\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\\n  /// @return The underlying balance of asset tokens\\n  function _balance() internal virtual returns (uint256);\\n\\n  /// @notice Supplies asset tokens to the yield source.\\n  /// @param mintAmount The amount of asset tokens to be supplied\\n  function _supply(uint256 mintAmount) internal virtual;\\n\\n  /// @notice Redeems asset tokens from the yield source.\\n  /// @param redeemAmount The amount of yield-bearing tokens to be redeemed\\n  /// @return The actual amount of tokens that were redeemed.\\n  function _redeem(uint256 redeemAmount) internal virtual returns (uint256);\\n\\n  /// @dev Function modifier to ensure usage of tokens controlled by the Prize Pool\\n  /// @param controlledToken The address of the token to check\\n  modifier onlyControlledToken(IControlledToken controlledToken) {\\n    require(_isControlled(controlledToken), \\\"PrizePool/unknown-token\\\");\\n    _;\\n  }\\n\\n  /// @dev Function modifier to ensure caller is the prize-strategy\\n  modifier onlyPrizeStrategy() {\\n    require(_msgSender() == prizeStrategy, \\\"PrizePool/only-prizeStrategy\\\");\\n    _;\\n  }\\n\\n  /// @dev Function modifier to ensure the deposit amount does not exceed the liquidity cap (if set)\\n  modifier canAddLiquidity(uint256 _amount) {\\n    require(_canAddLiquidity(_amount), \\\"PrizePool/exceeds-liquidity-cap\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5ad1b01ffed559ea241469f24c5f6b62fabd932e299e3da30372983b32306c5a\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"@pooltogether/yield-source-interface/contracts/IYieldSource.sol\\\";\\n\\nimport \\\"./PrizePool.sol\\\";\\n\\ncontract YieldSourcePrizePool is PrizePool {\\n\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  using AddressUpgradeable for address;\\n\\n  IYieldSource public yieldSource;\\n\\n  event YieldSourcePrizePoolInitialized(address indexed yieldSource);\\n\\n  /// @notice Initializes the Prize Pool and Yield Service with the required contract connections\\n  /// @param _controlledTokens Array of addresses for the Ticket and Sponsorship Tokens controlled by the Prize Pool\\n  /// @param _yieldSource Address of the yield source\\n  function initializeYieldSourcePrizePool (\\n    IControlledToken[] memory _controlledTokens,\\n    IYieldSource _yieldSource\\n  )\\n    public\\n    initializer\\n  {\\n    require(address(_yieldSource) != address(0), \\\"YieldSourcePrizePool/yield-source-not-zero-address\\\");\\n\\n    PrizePool.initialize(_controlledTokens);\\n\\n    yieldSource = _yieldSource;\\n\\n    // A hack to determine whether it's an actual yield source\\n    (bool succeeded,) = address(_yieldSource).staticcall(abi.encodePacked(_yieldSource.depositToken.selector));\\n    require(succeeded, \\\"YieldSourcePrizePool/invalid-yield-source\\\");\\n\\n    emit YieldSourcePrizePoolInitialized(address(_yieldSource));\\n  }\\n\\n  /// @notice Determines whether the passed token can be transferred out as an external award.\\n  /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\\n  /// prize strategy should not be allowed to move those tokens.\\n  /// @param _externalToken The address of the token to check\\n  /// @return True if the token may be awarded, false otherwise\\n  function _canAwardExternal(address _externalToken) internal override view returns (bool) {\\n    return _externalToken != address(yieldSource);\\n  }\\n\\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\\n  /// @return The underlying balance of asset tokens\\n  function _balance() internal override returns (uint256) {\\n    return yieldSource.balanceOfToken(address(this));\\n  }\\n\\n  function _token() internal override view returns (IERC20Upgradeable) {\\n    return IERC20Upgradeable(yieldSource.depositToken());\\n  }\\n\\n  /// @notice Supplies asset tokens to the yield source.\\n  /// @param mintAmount The amount of asset tokens to be supplied\\n  function _supply(uint256 mintAmount) internal override {\\n    _token().safeApprove(address(yieldSource), mintAmount);\\n    yieldSource.supplyTokenTo(mintAmount, address(this));\\n  }\\n\\n  /// @notice Redeems asset tokens from the yield source.\\n  /// @param redeemAmount The amount of yield-bearing tokens to be redeemed\\n  /// @return The actual amount of tokens that were redeemed.\\n  function _redeem(uint256 redeemAmount) internal override returns (uint256) {\\n    return yieldSource.redeemToken(redeemAmount);\\n  }\\n}\\n\",\"keccak256\":\"0xa23aff6fcfe708bd9e786893f1f4ce23c551bc498d29ff35314a370cdb91cbfc\",\"license\":\"GPL-3.0\"},\"@pooltogether/yield-source-interface/contracts/IYieldSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\n/// @title Defines the functions used to interact with a yield source.  The Prize Pool inherits this contract.\\n/// @notice Prize Pools subclasses need to implement this interface so that yield can be generated.\\ninterface IYieldSource {\\n\\n  /// @notice Returns the ERC20 asset token used for deposits.\\n  /// @return The ERC20 asset token address.\\n  function depositToken() external view returns (address);\\n\\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\\n  /// @return The underlying balance of asset tokens.\\n  function balanceOfToken(address addr) external returns (uint256);\\n\\n  /// @notice Supplies tokens to the yield source.  Allows assets to be supplied on other user's behalf using the `to` param.\\n  /// @param amount The amount of asset tokens to be supplied.  Denominated in `depositToken()` as above.\\n  /// @param to The user whose balance will receive the tokens\\n  function supplyTokenTo(uint256 amount, address to) external;\\n\\n  /// @notice Redeems tokens from the yield source.\\n  /// @param amount The amount of asset tokens to withdraw.  Denominated in `depositToken()` as above.\\n  /// @return The actual amount of interst bearing tokens that were redeemed.\\n  function redeemToken(uint256 amount) external returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xd4dbeebc5e2d92a493612a1324ba0c1a59eb49fbd8fe7ff8e59723bc0adc3684\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612d83806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806378b3d327116100f9578063b2470e5c11610097578063e6d8a94b11610071578063e6d8a94b146103ee578063f2fde38b146103f6578063fc0c546a14610409578063ffa1ad741461041157600080fd5b8063b2470e5c146103c0578063b69ef8a8146103d3578063e162402f146103db57600080fd5b806391ca480e116100d357806391ca480e1461037257806398bf3eb6146103855780639d63848a14610398578063a224cee7146103ad57600080fd5b806378b3d3271461033b5780637b99adb11461034e5780638da5cb5b1461036157600080fd5b806341f1afc7116101665780636a3fd4f9116101405780636a3fd4f9146102f45780636b1b863a14610317578063715018a61461032a57806376687d3d1461033257600080fd5b806341f1afc7146102ae578063475bd83d146102d9578063630665b4146102ec57600080fd5b806316960d55116101a257806316960d551461026257806320acd9f3146102755780632b0ab144146102885780632f7627e31461029b57600080fd5b80630937eb54146101c957806313f55e39146101e4578063150b7a02146101f9575b600080fd5b6101d161045a565b6040519081526020015b60405180910390f35b6101f76101f2366004612958565b610469565b005b610231610207366004612999565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101db565b6101f76102703660046128c3565b610534565b6101f7610283366004612a38565b610781565b6101f7610296366004612958565b61091d565b6101f76102a9366004612b23565b6109d5565b6102c16102bc366004612b51565b610b41565b6040516001600160a01b0390911681526020016101db565b6101f76102e7366004612aaf565b610c13565b609a546101d1565b610307610302366004612889565b610ead565b60405190151581526020016101db565b6101f7610325366004612a38565b610ece565b6101f7611044565b6101d160995481565b610307610349366004612889565b6110aa565b6101f761035c366004612b51565b6110b5565b6033546001600160a01b03166102c1565b6101f7610380366004612889565b61111b565b6098546102c1906001600160a01b031681565b6103a061117e565b6040516101db9190612bcb565b6101f76103bb366004612a7a565b6111e0565b609b546102c1906001600160a01b031681565b6101d1611352565b6101d16103e9366004612a38565b61135c565b6101d161153a565b6101f7610404366004612889565b611645565b6102c1611724565b61044d6040518060400160405280600581526020017f332e342e3000000000000000000000000000000000000000000000000000000081525081565b6040516101db9190612c6d565b600061046461172e565b905090565b6098546001600160a01b0316336001600160a01b0316146104d15760405162461bcd60e51b815260206004820152601c60248201527f5072697a65506f6f6c2f6f6e6c792d7072697a6553747261746567790000000060448201526064015b60405180910390fd5b6104dc838383611850565b1561052f57816001600160a01b0316836001600160a01b03167fb0bac59718cd343c80a813518afcf36846cfcfe6d56e2b3cab9bd49f5f9b251c8360405161052691815260200190565b60405180910390a35b505050565b6098546001600160a01b0316336001600160a01b0316146105975760405162461bcd60e51b815260206004820152601c60248201527f5072697a65506f6f6c2f6f6e6c792d7072697a6553747261746567790000000060448201526064016104c8565b609b546001600160a01b03848116911614156105f55760405162461bcd60e51b815260206004820181905260248201527f5072697a65506f6f6c2f696e76616c69642d65787465726e616c2d746f6b656e60448201526064016104c8565b806105ff5761077b565b60005b8181101561072c57836001600160a01b03166342842e0e308786868681811061062d5761062d612d0c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561069c57600080fd5b505af19250505080156106ad575060015b61071a573d8080156106db576040519150601f19603f3d011682016040523d82523d6000602084013e6106e0565b606091505b507f17e975018310f88872b58d4d8263adca83cf5c1893496ea2a86923dab15276ad816040516107109190612c6d565b60405180910390a1505b8061072481612cdb565b915050610602565b50826001600160a01b0316846001600160a01b03167f69c2de32bc4d47f488e72626a6cfdee85089342e52675e7de79c4b417623960c8484604051610772929190612c18565b60405180910390a35b50505050565b600260655414156107d45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104c8565b6002606555806107e3816118e3565b61082f5760405162461bcd60e51b815260206004820152601760248201527f5072697a65506f6f6c2f756e6b6e6f776e2d746f6b656e00000000000000000060448201526064016104c8565b82610839816119ad565b6108855760405162461bcd60e51b815260206004820152601f60248201527f5072697a65506f6f6c2f657863656564732d6c69717569646974792d6361700060448201526064016104c8565b336108918686866119e3565b6108b081308761089f611a63565b6001600160a01b0316929190611af9565b6108b985611baa565b836001600160a01b0316866001600160a01b0316826001600160a01b03167f4174a9435a04d04d274c76779cad136a41fde6937c56241c09ab9d3c7064a1a98860405161090891815260200190565b60405180910390a45050600160655550505050565b6098546001600160a01b0316336001600160a01b0316146109805760405162461bcd60e51b815260206004820152601c60248201527f5072697a65506f6f6c2f6f6e6c792d7072697a6553747261746567790000000060448201526064016104c8565b61098b838383611850565b1561052f57816001600160a01b0316836001600160a01b03167fc65f48aca3b7a99b7443d04b8ffbb073156179bc628dc3f7def50477489734698360405161052691815260200190565b6033546001600160a01b03163314610a2f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b158015610a8a57600080fd5b505afa158015610a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac29190612b6a565b1115610b3d576040517f5c19a95c0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690635c19a95c90602401600060405180830381600087803b158015610b2457600080fd5b505af1158015610b38573d6000803e3d6000fd5b505050505b5050565b6000806097805480602002602001604051908101604052809291908181526020018280548015610b9a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b7c575b5050505050905080518310610bf15760405162461bcd60e51b815260206004820152601d60248201527f5072697a65506f6f6c2f696e76616c69642d746f6b656e2d696e64657800000060448201526064016104c8565b808381518110610c0357610c03612d0c565b6020026020010151915050919050565b600054610100900460ff1680610c2c575060005460ff16155b610c8f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff16158015610cb1576000805461ffff19166101011790555b6001600160a01b038216610d2d5760405162461bcd60e51b815260206004820152603260248201527f5969656c64536f757263655072697a65506f6f6c2f7969656c642d736f75726360448201527f652d6e6f742d7a65726f2d61646472657373000000000000000000000000000060648201526084016104c8565b610d36836111e0565b609b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517fc89039c50000000000000000000000000000000000000000000000000000000060208201526000919060240160408051601f1981840301815290829052610dab91612baf565b600060405180830381855afa9150503d8060008114610de6576040519150601f19603f3d011682016040523d82523d6000602084013e610deb565b606091505b5050905080610e625760405162461bcd60e51b815260206004820152602960248201527f5969656c64536f757263655072697a65506f6f6c2f696e76616c69642d79696560448201527f6c642d736f75726365000000000000000000000000000000000000000000000060648201526084016104c8565b6040516001600160a01b038416907f7a0ca506edc9fcd36e010dbcaad57dade17bbac71dfeb53269077098e863eeca90600090a250801561052f576000805461ff0019169055505050565b6000610ec882609b546001600160a01b039182169116141590565b92915050565b6098546001600160a01b0316336001600160a01b031614610f315760405162461bcd60e51b815260206004820152601c60248201527f5072697a65506f6f6c2f6f6e6c792d7072697a6553747261746567790000000060448201526064016104c8565b80610f3b816118e3565b610f875760405162461bcd60e51b815260206004820152601760248201527f5072697a65506f6f6c2f756e6b6e6f776e2d746f6b656e00000000000000000060448201526064016104c8565b82610f915761077b565b609a54831115610fe35760405162461bcd60e51b815260206004820152601d60248201527f5072697a65506f6f6c2f61776172642d657863656564732d617661696c00000060448201526064016104c8565b82609a54610ff19190612c98565b609a55610fff8484846119e3565b816001600160a01b0316846001600160a01b03167fe2554529d99ab7a67db6b4cea2b32c7d55ae325f958861e05f304fdded867e318560405161077291815260200190565b6033546001600160a01b0316331461109e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b6110a86000611c53565b565b6000610ec8826118e3565b6033546001600160a01b0316331461110f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b61111881611cb2565b50565b6033546001600160a01b031633146111755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b61111881611ced565b606060978054806020026020016040519081016040528092919081815260200182805480156111d657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111b8575b5050505050905090565b600054610100900460ff16806111f9575060005460ff16155b61125c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff1615801561127e576000805461ffff19166101011790555b81518067ffffffffffffffff81111561129957611299612d22565b6040519080825280602002602001820160405280156112c2578160200160208202803683370190505b5080516112d79160979160209091019061274a565b5060005b8181101561131e5760008482815181106112f7576112f7612d0c565b6020026020010151905061130b8183611d9a565b508061131681612cdb565b9150506112db565b50611327611e8a565b61132f611f4c565b60001961133b81611cb2565b50508015610b3d576000805461ff00191690555050565b6000610464611ff2565b6000600260655414156113b15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104c8565b6002606555816113c0816118e3565b61140c5760405162461bcd60e51b815260206004820152601760248201527f5072697a65506f6f6c2f756e6b6e6f776e2d746f6b656e00000000000000000060448201526064016104c8565b6001600160a01b03831663631b5dfb336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039182166004820152908816602482015260448101879052606401600060405180830381600087803b15801561148457600080fd5b505af1158015611498573d6000803e3d6000fd5b5050505060006114a785612089565b90506114c686826114b6611a63565b6001600160a01b03169190612121565b836001600160a01b0316866001600160a01b03166114e13390565b6001600160a01b03167fe56473357106d0cdea364a045d5ab7abb44b6bd1c0f092ba3734983a43459f8f8885604051611524929190918252602082015260400190565b60405180910390a4600160655595945050505050565b60006002606554141561158f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104c8565b6002606555600061159e61172e565b905060006115aa611ff2565b905060008282116115bc5760006115c6565b6115c68383612c98565b90506000609a5482116115da5760006115e7565b609a546115e79083612c98565b905080156116345780609a546115fd9190612c80565b609a556040518181527fce2b6e507c7ca1a20ce136810f524eefc19ba4c7e4866eb6cc0cba76e778d4be9060200160405180910390a15b609a54945050505050600160655590565b6033546001600160a01b0316331461169f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b6001600160a01b03811661171b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104c8565b61111881611c53565b6000610464611a63565b6000806000609780548060200260200160405190810160405280929190818152602001828054801561178957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161176b575b505083519394506000925050505b81811015611847578281815181106117b1576117b1612d0c565b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118299190612b6a565b6118339085612c80565b93508061183f81612cdb565b915050611797565b50919392505050565b600061186b83609b546001600160a01b039182169116141590565b6118b75760405162461bcd60e51b815260206004820181905260248201527f5072697a65506f6f6c2f696e76616c69642d65787465726e616c2d746f6b656e60448201526064016104c8565b816118c4575060006118dc565b6118d86001600160a01b0384168584612121565b5060015b9392505050565b600080609780548060200260200160405190810160405280929190818152602001828054801561193c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161191e575b505083519394506000925050505b818110156119a257846001600160a01b031683828151811061196e5761196e612d0c565b60200260200101516001600160a01b0316141561199057506001949350505050565b8061199a81612cdb565b91505061194a565b506000949350505050565b6099546000906000198114156119c65750600192915050565b80836119d061172e565b6119da9190612c80565b11159392505050565b6040517f5d7b07580000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260248201849052821690635d7b075890604401600060405180830381600087803b158015611a4657600080fd5b505af1158015611a5a573d6000803e3d6000fd5b50505050505050565b609b54604080517fc89039c500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163c89039c5916004808301926020929190829003018186803b158015611ac157600080fd5b505afa158015611ad5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046491906128a6565b6040516001600160a01b038085166024830152831660448201526064810182905261077b9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261216a565b609b54611bd3906001600160a01b031682611bc3611a63565b6001600160a01b0316919061224f565b609b546040517f87a6eeef000000000000000000000000000000000000000000000000000000008152600481018390523060248201526001600160a01b03909116906387a6eeef90604401600060405180830381600087803b158015611c3857600080fd5b505af1158015611c4c573d6000803e3d6000fd5b5050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60998190556040518181527f3ff20538222f568f27ff436c0c49dfd3e48d5b8f86533a3f759dc1c7089775ab9060200160405180910390a150565b6001600160a01b038116611d435760405162461bcd60e51b815260206004820181905260248201527f5072697a65506f6f6c2f7072697a6553747261746567792d6e6f742d7a65726f60448201526064016104c8565b6098805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f7f58dc86bc2e435cb77ca0edb1df55e25f90caf2d6bd866971715437d456a21290600090a250565b6001600160a01b038216611e165760405162461bcd60e51b815260206004820152602a60248201527f5072697a65506f6f6c2f636f6e74726f6c6c6564546f6b656e2d6e6f742d7a6560448201527f726f2d616464726573730000000000000000000000000000000000000000000060648201526084016104c8565b8160978281548110611e2a57611e2a612d0c565b60009182526020822001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03938416179055604051918416917f460e712b4a5d801d031ed673dea209b73ab854f7ddeb86b6c48082e92c3eee669190a25050565b600054610100900460ff1680611ea3575060005460ff16155b611f065760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff16158015611f28576000805461ffff19166101011790555b611f306123ac565b611f3861245d565b8015611118576000805461ff001916905550565b600054610100900460ff1680611f65575060005460ff16155b611fc85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff16158015611fea576000805461ffff19166101011790555b611f38612504565b609b546040517fb99152d00000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b03169063b99152d090602401602060405180830381600087803b15801561205157600080fd5b505af1158015612065573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104649190612b6a565b609b546040517f013054c2000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b03169063013054c290602401602060405180830381600087803b1580156120e957600080fd5b505af11580156120fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec89190612b6a565b6040516001600160a01b03831660248201526044810182905261052f9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611b46565b60006121bf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125bb9092919063ffffffff16565b80519091501561052f57808060200190518101906121dd9190612b01565b61052f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104c8565b8015806122f157506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156122b757600080fd5b505afa1580156122cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ef9190612b6a565b155b6123635760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016104c8565b6040516001600160a01b03831660248201526044810182905261052f9084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611b46565b600054610100900460ff16806123c5575060005460ff16155b6124285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff16158015611f38576000805461ffff19166101011790558015611118576000805461ff001916905550565b600054610100900460ff1680612476575060005460ff16155b6124d95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff161580156124fb576000805461ffff19166101011790555b611f3833611c53565b600054610100900460ff168061251d575060005460ff16155b6125805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff161580156125a2576000805461ffff19166101011790555b60016065558015611118576000805461ff001916905550565b60606125ca84846000856125d2565b949350505050565b60608247101561264a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104c8565b843b6126985760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104c8565b600080866001600160a01b031685876040516126b49190612baf565b60006040518083038185875af1925050503d80600081146126f1576040519150601f19603f3d011682016040523d82523d6000602084013e6126f6565b606091505b5091509150612706828286612711565b979650505050505050565b606083156127205750816118dc565b8251156127305782518084602001fd5b8160405162461bcd60e51b81526004016104c89190612c6d565b8280548282559060005260206000209081019282156127ac579160200282015b828111156127ac578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617825560209092019160019091019061276a565b506127b89291506127bc565b5090565b5b808211156127b857600081556001016127bd565b600082601f8301126127e257600080fd5b8135602067ffffffffffffffff808311156127ff576127ff612d22565b8260051b604051601f19603f8301168101818110848211171561282457612824612d22565b6040528481528381019250868401828801850189101561284357600080fd5b600092505b8583101561286d5761285981612879565b845292840192600192909201918401612848565b50979650505050505050565b803561288481612d38565b919050565b60006020828403121561289b57600080fd5b81356118dc81612d38565b6000602082840312156128b857600080fd5b81516118dc81612d38565b600080600080606085870312156128d957600080fd5b84356128e481612d38565b935060208501356128f481612d38565b9250604085013567ffffffffffffffff8082111561291157600080fd5b818701915087601f83011261292557600080fd5b81358181111561293457600080fd5b8860208260051b850101111561294957600080fd5b95989497505060200194505050565b60008060006060848603121561296d57600080fd5b833561297881612d38565b9250602084013561298881612d38565b929592945050506040919091013590565b6000806000806000608086880312156129b157600080fd5b85356129bc81612d38565b945060208601356129cc81612d38565b935060408601359250606086013567ffffffffffffffff808211156129f057600080fd5b818801915088601f830112612a0457600080fd5b813581811115612a1357600080fd5b896020828501011115612a2557600080fd5b9699959850939650602001949392505050565b600080600060608486031215612a4d57600080fd5b8335612a5881612d38565b9250602084013591506040840135612a6f81612d38565b809150509250925092565b600060208284031215612a8c57600080fd5b813567ffffffffffffffff811115612aa357600080fd5b6125ca848285016127d1565b60008060408385031215612ac257600080fd5b823567ffffffffffffffff811115612ad957600080fd5b612ae5858286016127d1565b9250506020830135612af681612d38565b809150509250929050565b600060208284031215612b1357600080fd5b815180151581146118dc57600080fd5b60008060408385031215612b3657600080fd5b8235612b4181612d38565b91506020830135612af681612d38565b600060208284031215612b6357600080fd5b5035919050565b600060208284031215612b7c57600080fd5b5051919050565b60008151808452612b9b816020860160208601612caf565b601f01601f19169290920160200192915050565b60008251612bc1818460208701612caf565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015612c0c5783516001600160a01b031683529284019291840191600101612be7565b50909695505050505050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612c5157600080fd5b8260051b80856040850137600092016040019182525092915050565b6020815260006118dc6020830184612b83565b60008219821115612c9357612c93612cf6565b500190565b600082821015612caa57612caa612cf6565b500390565b60005b83811015612cca578181015183820152602001612cb2565b8381111561077b5750506000910152565b6000600019821415612cef57612cef612cf6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461111857600080fdfea264697066735822122075b5b8580511e27e91cae40c2c553597e8389e993d02b7c93eec1128b3c06c2e64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806378b3d327116100f9578063b2470e5c11610097578063e6d8a94b11610071578063e6d8a94b146103ee578063f2fde38b146103f6578063fc0c546a14610409578063ffa1ad741461041157600080fd5b8063b2470e5c146103c0578063b69ef8a8146103d3578063e162402f146103db57600080fd5b806391ca480e116100d357806391ca480e1461037257806398bf3eb6146103855780639d63848a14610398578063a224cee7146103ad57600080fd5b806378b3d3271461033b5780637b99adb11461034e5780638da5cb5b1461036157600080fd5b806341f1afc7116101665780636a3fd4f9116101405780636a3fd4f9146102f45780636b1b863a14610317578063715018a61461032a57806376687d3d1461033257600080fd5b806341f1afc7146102ae578063475bd83d146102d9578063630665b4146102ec57600080fd5b806316960d55116101a257806316960d551461026257806320acd9f3146102755780632b0ab144146102885780632f7627e31461029b57600080fd5b80630937eb54146101c957806313f55e39146101e4578063150b7a02146101f9575b600080fd5b6101d161045a565b6040519081526020015b60405180910390f35b6101f76101f2366004612958565b610469565b005b610231610207366004612999565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101db565b6101f76102703660046128c3565b610534565b6101f7610283366004612a38565b610781565b6101f7610296366004612958565b61091d565b6101f76102a9366004612b23565b6109d5565b6102c16102bc366004612b51565b610b41565b6040516001600160a01b0390911681526020016101db565b6101f76102e7366004612aaf565b610c13565b609a546101d1565b610307610302366004612889565b610ead565b60405190151581526020016101db565b6101f7610325366004612a38565b610ece565b6101f7611044565b6101d160995481565b610307610349366004612889565b6110aa565b6101f761035c366004612b51565b6110b5565b6033546001600160a01b03166102c1565b6101f7610380366004612889565b61111b565b6098546102c1906001600160a01b031681565b6103a061117e565b6040516101db9190612bcb565b6101f76103bb366004612a7a565b6111e0565b609b546102c1906001600160a01b031681565b6101d1611352565b6101d16103e9366004612a38565b61135c565b6101d161153a565b6101f7610404366004612889565b611645565b6102c1611724565b61044d6040518060400160405280600581526020017f332e342e3000000000000000000000000000000000000000000000000000000081525081565b6040516101db9190612c6d565b600061046461172e565b905090565b6098546001600160a01b0316336001600160a01b0316146104d15760405162461bcd60e51b815260206004820152601c60248201527f5072697a65506f6f6c2f6f6e6c792d7072697a6553747261746567790000000060448201526064015b60405180910390fd5b6104dc838383611850565b1561052f57816001600160a01b0316836001600160a01b03167fb0bac59718cd343c80a813518afcf36846cfcfe6d56e2b3cab9bd49f5f9b251c8360405161052691815260200190565b60405180910390a35b505050565b6098546001600160a01b0316336001600160a01b0316146105975760405162461bcd60e51b815260206004820152601c60248201527f5072697a65506f6f6c2f6f6e6c792d7072697a6553747261746567790000000060448201526064016104c8565b609b546001600160a01b03848116911614156105f55760405162461bcd60e51b815260206004820181905260248201527f5072697a65506f6f6c2f696e76616c69642d65787465726e616c2d746f6b656e60448201526064016104c8565b806105ff5761077b565b60005b8181101561072c57836001600160a01b03166342842e0e308786868681811061062d5761062d612d0c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561069c57600080fd5b505af19250505080156106ad575060015b61071a573d8080156106db576040519150601f19603f3d011682016040523d82523d6000602084013e6106e0565b606091505b507f17e975018310f88872b58d4d8263adca83cf5c1893496ea2a86923dab15276ad816040516107109190612c6d565b60405180910390a1505b8061072481612cdb565b915050610602565b50826001600160a01b0316846001600160a01b03167f69c2de32bc4d47f488e72626a6cfdee85089342e52675e7de79c4b417623960c8484604051610772929190612c18565b60405180910390a35b50505050565b600260655414156107d45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104c8565b6002606555806107e3816118e3565b61082f5760405162461bcd60e51b815260206004820152601760248201527f5072697a65506f6f6c2f756e6b6e6f776e2d746f6b656e00000000000000000060448201526064016104c8565b82610839816119ad565b6108855760405162461bcd60e51b815260206004820152601f60248201527f5072697a65506f6f6c2f657863656564732d6c69717569646974792d6361700060448201526064016104c8565b336108918686866119e3565b6108b081308761089f611a63565b6001600160a01b0316929190611af9565b6108b985611baa565b836001600160a01b0316866001600160a01b0316826001600160a01b03167f4174a9435a04d04d274c76779cad136a41fde6937c56241c09ab9d3c7064a1a98860405161090891815260200190565b60405180910390a45050600160655550505050565b6098546001600160a01b0316336001600160a01b0316146109805760405162461bcd60e51b815260206004820152601c60248201527f5072697a65506f6f6c2f6f6e6c792d7072697a6553747261746567790000000060448201526064016104c8565b61098b838383611850565b1561052f57816001600160a01b0316836001600160a01b03167fc65f48aca3b7a99b7443d04b8ffbb073156179bc628dc3f7def50477489734698360405161052691815260200190565b6033546001600160a01b03163314610a2f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b158015610a8a57600080fd5b505afa158015610a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac29190612b6a565b1115610b3d576040517f5c19a95c0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690635c19a95c90602401600060405180830381600087803b158015610b2457600080fd5b505af1158015610b38573d6000803e3d6000fd5b505050505b5050565b6000806097805480602002602001604051908101604052809291908181526020018280548015610b9a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b7c575b5050505050905080518310610bf15760405162461bcd60e51b815260206004820152601d60248201527f5072697a65506f6f6c2f696e76616c69642d746f6b656e2d696e64657800000060448201526064016104c8565b808381518110610c0357610c03612d0c565b6020026020010151915050919050565b600054610100900460ff1680610c2c575060005460ff16155b610c8f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff16158015610cb1576000805461ffff19166101011790555b6001600160a01b038216610d2d5760405162461bcd60e51b815260206004820152603260248201527f5969656c64536f757263655072697a65506f6f6c2f7969656c642d736f75726360448201527f652d6e6f742d7a65726f2d61646472657373000000000000000000000000000060648201526084016104c8565b610d36836111e0565b609b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517fc89039c50000000000000000000000000000000000000000000000000000000060208201526000919060240160408051601f1981840301815290829052610dab91612baf565b600060405180830381855afa9150503d8060008114610de6576040519150601f19603f3d011682016040523d82523d6000602084013e610deb565b606091505b5050905080610e625760405162461bcd60e51b815260206004820152602960248201527f5969656c64536f757263655072697a65506f6f6c2f696e76616c69642d79696560448201527f6c642d736f75726365000000000000000000000000000000000000000000000060648201526084016104c8565b6040516001600160a01b038416907f7a0ca506edc9fcd36e010dbcaad57dade17bbac71dfeb53269077098e863eeca90600090a250801561052f576000805461ff0019169055505050565b6000610ec882609b546001600160a01b039182169116141590565b92915050565b6098546001600160a01b0316336001600160a01b031614610f315760405162461bcd60e51b815260206004820152601c60248201527f5072697a65506f6f6c2f6f6e6c792d7072697a6553747261746567790000000060448201526064016104c8565b80610f3b816118e3565b610f875760405162461bcd60e51b815260206004820152601760248201527f5072697a65506f6f6c2f756e6b6e6f776e2d746f6b656e00000000000000000060448201526064016104c8565b82610f915761077b565b609a54831115610fe35760405162461bcd60e51b815260206004820152601d60248201527f5072697a65506f6f6c2f61776172642d657863656564732d617661696c00000060448201526064016104c8565b82609a54610ff19190612c98565b609a55610fff8484846119e3565b816001600160a01b0316846001600160a01b03167fe2554529d99ab7a67db6b4cea2b32c7d55ae325f958861e05f304fdded867e318560405161077291815260200190565b6033546001600160a01b0316331461109e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b6110a86000611c53565b565b6000610ec8826118e3565b6033546001600160a01b0316331461110f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b61111881611cb2565b50565b6033546001600160a01b031633146111755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b61111881611ced565b606060978054806020026020016040519081016040528092919081815260200182805480156111d657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111b8575b5050505050905090565b600054610100900460ff16806111f9575060005460ff16155b61125c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff1615801561127e576000805461ffff19166101011790555b81518067ffffffffffffffff81111561129957611299612d22565b6040519080825280602002602001820160405280156112c2578160200160208202803683370190505b5080516112d79160979160209091019061274a565b5060005b8181101561131e5760008482815181106112f7576112f7612d0c565b6020026020010151905061130b8183611d9a565b508061131681612cdb565b9150506112db565b50611327611e8a565b61132f611f4c565b60001961133b81611cb2565b50508015610b3d576000805461ff00191690555050565b6000610464611ff2565b6000600260655414156113b15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104c8565b6002606555816113c0816118e3565b61140c5760405162461bcd60e51b815260206004820152601760248201527f5072697a65506f6f6c2f756e6b6e6f776e2d746f6b656e00000000000000000060448201526064016104c8565b6001600160a01b03831663631b5dfb336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039182166004820152908816602482015260448101879052606401600060405180830381600087803b15801561148457600080fd5b505af1158015611498573d6000803e3d6000fd5b5050505060006114a785612089565b90506114c686826114b6611a63565b6001600160a01b03169190612121565b836001600160a01b0316866001600160a01b03166114e13390565b6001600160a01b03167fe56473357106d0cdea364a045d5ab7abb44b6bd1c0f092ba3734983a43459f8f8885604051611524929190918252602082015260400190565b60405180910390a4600160655595945050505050565b60006002606554141561158f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104c8565b6002606555600061159e61172e565b905060006115aa611ff2565b905060008282116115bc5760006115c6565b6115c68383612c98565b90506000609a5482116115da5760006115e7565b609a546115e79083612c98565b905080156116345780609a546115fd9190612c80565b609a556040518181527fce2b6e507c7ca1a20ce136810f524eefc19ba4c7e4866eb6cc0cba76e778d4be9060200160405180910390a15b609a54945050505050600160655590565b6033546001600160a01b0316331461169f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b6001600160a01b03811661171b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104c8565b61111881611c53565b6000610464611a63565b6000806000609780548060200260200160405190810160405280929190818152602001828054801561178957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161176b575b505083519394506000925050505b81811015611847578281815181106117b1576117b1612d0c565b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118299190612b6a565b6118339085612c80565b93508061183f81612cdb565b915050611797565b50919392505050565b600061186b83609b546001600160a01b039182169116141590565b6118b75760405162461bcd60e51b815260206004820181905260248201527f5072697a65506f6f6c2f696e76616c69642d65787465726e616c2d746f6b656e60448201526064016104c8565b816118c4575060006118dc565b6118d86001600160a01b0384168584612121565b5060015b9392505050565b600080609780548060200260200160405190810160405280929190818152602001828054801561193c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161191e575b505083519394506000925050505b818110156119a257846001600160a01b031683828151811061196e5761196e612d0c565b60200260200101516001600160a01b0316141561199057506001949350505050565b8061199a81612cdb565b91505061194a565b506000949350505050565b6099546000906000198114156119c65750600192915050565b80836119d061172e565b6119da9190612c80565b11159392505050565b6040517f5d7b07580000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260248201849052821690635d7b075890604401600060405180830381600087803b158015611a4657600080fd5b505af1158015611a5a573d6000803e3d6000fd5b50505050505050565b609b54604080517fc89039c500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163c89039c5916004808301926020929190829003018186803b158015611ac157600080fd5b505afa158015611ad5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046491906128a6565b6040516001600160a01b038085166024830152831660448201526064810182905261077b9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261216a565b609b54611bd3906001600160a01b031682611bc3611a63565b6001600160a01b0316919061224f565b609b546040517f87a6eeef000000000000000000000000000000000000000000000000000000008152600481018390523060248201526001600160a01b03909116906387a6eeef90604401600060405180830381600087803b158015611c3857600080fd5b505af1158015611c4c573d6000803e3d6000fd5b5050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60998190556040518181527f3ff20538222f568f27ff436c0c49dfd3e48d5b8f86533a3f759dc1c7089775ab9060200160405180910390a150565b6001600160a01b038116611d435760405162461bcd60e51b815260206004820181905260248201527f5072697a65506f6f6c2f7072697a6553747261746567792d6e6f742d7a65726f60448201526064016104c8565b6098805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f7f58dc86bc2e435cb77ca0edb1df55e25f90caf2d6bd866971715437d456a21290600090a250565b6001600160a01b038216611e165760405162461bcd60e51b815260206004820152602a60248201527f5072697a65506f6f6c2f636f6e74726f6c6c6564546f6b656e2d6e6f742d7a6560448201527f726f2d616464726573730000000000000000000000000000000000000000000060648201526084016104c8565b8160978281548110611e2a57611e2a612d0c565b60009182526020822001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03938416179055604051918416917f460e712b4a5d801d031ed673dea209b73ab854f7ddeb86b6c48082e92c3eee669190a25050565b600054610100900460ff1680611ea3575060005460ff16155b611f065760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff16158015611f28576000805461ffff19166101011790555b611f306123ac565b611f3861245d565b8015611118576000805461ff001916905550565b600054610100900460ff1680611f65575060005460ff16155b611fc85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff16158015611fea576000805461ffff19166101011790555b611f38612504565b609b546040517fb99152d00000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b03169063b99152d090602401602060405180830381600087803b15801561205157600080fd5b505af1158015612065573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104649190612b6a565b609b546040517f013054c2000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b03169063013054c290602401602060405180830381600087803b1580156120e957600080fd5b505af11580156120fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec89190612b6a565b6040516001600160a01b03831660248201526044810182905261052f9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611b46565b60006121bf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125bb9092919063ffffffff16565b80519091501561052f57808060200190518101906121dd9190612b01565b61052f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104c8565b8015806122f157506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156122b757600080fd5b505afa1580156122cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ef9190612b6a565b155b6123635760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016104c8565b6040516001600160a01b03831660248201526044810182905261052f9084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611b46565b600054610100900460ff16806123c5575060005460ff16155b6124285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff16158015611f38576000805461ffff19166101011790558015611118576000805461ff001916905550565b600054610100900460ff1680612476575060005460ff16155b6124d95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff161580156124fb576000805461ffff19166101011790555b611f3833611c53565b600054610100900460ff168061251d575060005460ff16155b6125805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b600054610100900460ff161580156125a2576000805461ffff19166101011790555b60016065558015611118576000805461ff001916905550565b60606125ca84846000856125d2565b949350505050565b60608247101561264a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104c8565b843b6126985760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104c8565b600080866001600160a01b031685876040516126b49190612baf565b60006040518083038185875af1925050503d80600081146126f1576040519150601f19603f3d011682016040523d82523d6000602084013e6126f6565b606091505b5091509150612706828286612711565b979650505050505050565b606083156127205750816118dc565b8251156127305782518084602001fd5b8160405162461bcd60e51b81526004016104c89190612c6d565b8280548282559060005260206000209081019282156127ac579160200282015b828111156127ac578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617825560209092019160019091019061276a565b506127b89291506127bc565b5090565b5b808211156127b857600081556001016127bd565b600082601f8301126127e257600080fd5b8135602067ffffffffffffffff808311156127ff576127ff612d22565b8260051b604051601f19603f8301168101818110848211171561282457612824612d22565b6040528481528381019250868401828801850189101561284357600080fd5b600092505b8583101561286d5761285981612879565b845292840192600192909201918401612848565b50979650505050505050565b803561288481612d38565b919050565b60006020828403121561289b57600080fd5b81356118dc81612d38565b6000602082840312156128b857600080fd5b81516118dc81612d38565b600080600080606085870312156128d957600080fd5b84356128e481612d38565b935060208501356128f481612d38565b9250604085013567ffffffffffffffff8082111561291157600080fd5b818701915087601f83011261292557600080fd5b81358181111561293457600080fd5b8860208260051b850101111561294957600080fd5b95989497505060200194505050565b60008060006060848603121561296d57600080fd5b833561297881612d38565b9250602084013561298881612d38565b929592945050506040919091013590565b6000806000806000608086880312156129b157600080fd5b85356129bc81612d38565b945060208601356129cc81612d38565b935060408601359250606086013567ffffffffffffffff808211156129f057600080fd5b818801915088601f830112612a0457600080fd5b813581811115612a1357600080fd5b896020828501011115612a2557600080fd5b9699959850939650602001949392505050565b600080600060608486031215612a4d57600080fd5b8335612a5881612d38565b9250602084013591506040840135612a6f81612d38565b809150509250925092565b600060208284031215612a8c57600080fd5b813567ffffffffffffffff811115612aa357600080fd5b6125ca848285016127d1565b60008060408385031215612ac257600080fd5b823567ffffffffffffffff811115612ad957600080fd5b612ae5858286016127d1565b9250506020830135612af681612d38565b809150509250929050565b600060208284031215612b1357600080fd5b815180151581146118dc57600080fd5b60008060408385031215612b3657600080fd5b8235612b4181612d38565b91506020830135612af681612d38565b600060208284031215612b6357600080fd5b5035919050565b600060208284031215612b7c57600080fd5b5051919050565b60008151808452612b9b816020860160208601612caf565b601f01601f19169290920160200192915050565b60008251612bc1818460208701612caf565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015612c0c5783516001600160a01b031683529284019291840191600101612be7565b50909695505050505050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612c5157600080fd5b8260051b80856040850137600092016040019182525092915050565b6020815260006118dc6020830184612b83565b60008219821115612c9357612c93612cf6565b500190565b600082821015612caa57612caa612cf6565b500390565b60005b83811015612cca578181015183820152602001612cb2565b8381111561077b5750506000910152565b6000600019821415612cef57612cef612cf6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461111857600080fdfea264697066735822122075b5b8580511e27e91cae40c2c553597e8389e993d02b7c93eec1128b3c06c2e64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountedBalance()": {
        "returns": {
          "_0": "The current total of all tokens"
        }
      },
      "award(address,uint256,address)": {
        "details": "The amount awarded must be less than the awardBalance()",
        "params": {
          "_amount": "The amount of assets to be awarded",
          "_controlledToken": "The address of the asset token being awarded",
          "_to": "The address of the winner that receives the award"
        }
      },
      "awardBalance()": {
        "details": "captureAwardBalance() should be called first",
        "returns": {
          "_0": "The total amount of assets to be awarded for the current prize"
        }
      },
      "awardExternalERC20(address,address,uint256)": {
        "details": "Used to award any arbitrary tokens held by the Prize Pool",
        "params": {
          "_amount": "The amount of external assets to be awarded",
          "_externalToken": "The address of the external asset token being awarded",
          "_to": "The address of the winner that receives the award"
        }
      },
      "awardExternalERC721(address,address,uint256[])": {
        "details": "Used to award any arbitrary NFTs held by the Prize Pool",
        "params": {
          "externalToken": "The address of the external NFT token being awarded",
          "to": "The address of the winner that receives the award",
          "tokenIds": "An array of NFT Token IDs to be transferred"
        }
      },
      "balance()": {
        "details": "Returns the total underlying balance of all assets. This includes both principal and interest.",
        "returns": {
          "_0": "The underlying balance of assets"
        }
      },
      "canAwardExternal(address)": {
        "details": "Checks with the Prize Pool if a specific token type may be awarded as an external prize",
        "params": {
          "_externalToken": "The address of the token to check"
        },
        "returns": {
          "_0": "True if the token may be awarded, false otherwise"
        }
      },
      "captureAwardBalance()": {
        "returns": {
          "_0": "The total amount of assets to be awarded for the current prize"
        }
      },
      "compLikeDelegate(address,address)": {
        "params": {
          "_compLike": "The COMP-like token held by the prize pool that should be delegated",
          "_to": "The address to delegate to"
        }
      },
      "depositTo(address,uint256,address)": {
        "params": {
          "amount": "The amount of assets to deposit",
          "controlledToken": "The address of the type of token the user is minting",
          "to": "The address receiving the newly minted tokens"
        }
      },
      "initialize(address[])": {
        "params": {
          "_controlledTokens": "Array of ControlledTokens that are controlled by this Prize Pool."
        }
      },
      "initializeYieldSourcePrizePool(address[],address)": {
        "params": {
          "_controlledTokens": "Array of addresses for the Ticket and Sponsorship Tokens controlled by the Prize Pool",
          "_yieldSource": "Address of the yield source"
        }
      },
      "isControlled(address)": {
        "details": "Checks if a specific token is controlled by the Prize Pool",
        "params": {
          "controlledToken": "The address of the token to check"
        },
        "returns": {
          "_0": "True if the token is a controlled token, false otherwise"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`.",
          "_from": "The current owner of the NFT",
          "_operator": "The address that acts on behalf of the owner",
          "_tokenId": "The NFT to transfer"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setLiquidityCap(uint256)": {
        "params": {
          "_liquidityCap": "The new liquidity cap for the prize pool"
        }
      },
      "setPrizeStrategy(address)": {
        "params": {
          "_prizeStrategy": "The new prize strategy"
        }
      },
      "token()": {
        "details": "Returns the address of the underlying ERC20 asset",
        "returns": {
          "_0": "The address of the asset"
        }
      },
      "tokenAtIndex(uint256)": {
        "details": "Returns the address of a token in the _tokens array.",
        "returns": {
          "_0": "Address of token"
        }
      },
      "tokens()": {
        "returns": {
          "_0": "An array of controlled token addresses"
        }
      },
      "transferExternalERC20(address,address,uint256)": {
        "details": "Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.",
        "params": {
          "_amount": "The amount of external assets to be awarded",
          "_externalToken": "The address of the external asset token being awarded",
          "_to": "The address of the winner that receives the award"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFrom(address,uint256,address)": {
        "params": {
          "amount": "The amount of tokens to redeem for assets.",
          "controlledToken": "The address of the token to redeem (i.e. ticket or sponsorship)",
          "from": "The address to redeem tokens from."
        },
        "returns": {
          "_0": "The actual exit fee paid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "VERSION()": {
        "notice": "Semver Version"
      },
      "accountedBalance()": {
        "notice": "The total of all controlled tokens"
      },
      "award(address,uint256,address)": {
        "notice": "Called by the prize strategy to award prizes."
      },
      "awardBalance()": {
        "notice": "Returns the balance that is available to award."
      },
      "awardExternalERC20(address,address,uint256)": {
        "notice": "Called by the Prize-Strategy to award external ERC20 prizes"
      },
      "awardExternalERC721(address,address,uint256[])": {
        "notice": "Called by the prize strategy to award external ERC721 prizes"
      },
      "captureAwardBalance()": {
        "notice": "Captures any available interest as award balance."
      },
      "compLikeDelegate(address,address)": {
        "notice": "Delegate the votes for a Compound COMP-like token held by the prize pool"
      },
      "depositTo(address,uint256,address)": {
        "notice": "Deposit assets into the Prize Pool in exchange for tokens"
      },
      "initialize(address[])": {
        "notice": "Initializes the Prize Pool"
      },
      "initializeYieldSourcePrizePool(address[],address)": {
        "notice": "Initializes the Prize Pool and Yield Service with the required contract connections"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Required for ERC721 safe token transfers from smart contracts."
      },
      "setLiquidityCap(uint256)": {
        "notice": "Allows the Governor to set a cap on the amount of liquidity that he pool can hold"
      },
      "setPrizeStrategy(address)": {
        "notice": "Sets the prize strategy of the prize pool.  Only callable by the owner."
      },
      "tokens()": {
        "notice": "An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)"
      },
      "transferExternalERC20(address,address,uint256)": {
        "notice": "Called by the Prize-Strategy to transfer out external ERC20 tokens"
      },
      "withdrawFrom(address,uint256,address)": {
        "notice": "Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol:YieldSourcePrizePool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol:YieldSourcePrizePool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1781,
        "contract": "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol:YieldSourcePrizePool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol:YieldSourcePrizePool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol:YieldSourcePrizePool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 184,
        "contract": "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol:YieldSourcePrizePool",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 227,
        "contract": "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol:YieldSourcePrizePool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9409,
        "contract": "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol:YieldSourcePrizePool",
        "label": "_tokens",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_contract(IControlledToken)7604)dyn_storage"
      },
      {
        "astId": 9412,
        "contract": "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol:YieldSourcePrizePool",
        "label": "prizeStrategy",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 9415,
        "contract": "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol:YieldSourcePrizePool",
        "label": "liquidityCap",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 9418,
        "contract": "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol:YieldSourcePrizePool",
        "label": "_currentAwardBalance",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 10377,
        "contract": "@pooltogether/v4/contracts/prize-pool/YieldSourcePrizePool.sol:YieldSourcePrizePool",
        "label": "yieldSource",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IYieldSource)10641"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IControlledToken)7604)dyn_storage": {
        "base": "t_contract(IControlledToken)7604",
        "encoding": "dynamic_array",
        "label": "contract IControlledToken[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IControlledToken)7604": {
        "encoding": "inplace",
        "label": "contract IControlledToken",
        "numberOfBytes": "20"
      },
      "t_contract(IYieldSource)10641": {
        "encoding": "inplace",
        "label": "contract IYieldSource",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}