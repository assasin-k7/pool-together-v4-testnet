{
  "address": "0xfC8F0ccb22D929104B78841970A8d75f7798459b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_cardinality",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "cardinality",
          "type": "uint8"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "drawId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winningRandomNumber",
          "type": "uint256"
        }
      ],
      "name": "DrawSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "drawId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bitRangeSize",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "matchCardinality",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "drawStartTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawEndTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxPicksPerUser",
              "type": "uint32"
            },
            {
              "internalType": "uint136",
              "name": "numberOfPicks",
              "type": "uint136"
            },
            {
              "internalType": "uint32[]",
              "name": "distributions",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256",
              "name": "prize",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct DrawLib.TsunamiDrawSettings",
          "name": "drawSettings",
          "type": "tuple"
        }
      ],
      "name": "DrawSettingsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "ManagerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipOffered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_drawId",
          "type": "uint32"
        }
      ],
      "name": "getDrawSetting",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bitRangeSize",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "matchCardinality",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "drawStartTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawEndTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxPicksPerUser",
              "type": "uint32"
            },
            {
              "internalType": "uint136",
              "name": "numberOfPicks",
              "type": "uint136"
            },
            {
              "internalType": "uint32[]",
              "name": "distributions",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256",
              "name": "prize",
              "type": "uint256"
            }
          ],
          "internalType": "struct DrawLib.TsunamiDrawSettings",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_drawIds",
          "type": "uint32[]"
        }
      ],
      "name": "getDrawSettings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bitRangeSize",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "matchCardinality",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "drawStartTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawEndTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxPicksPerUser",
              "type": "uint32"
            },
            {
              "internalType": "uint136",
              "name": "numberOfPicks",
              "type": "uint136"
            },
            {
              "internalType": "uint32[]",
              "name": "distributions",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256",
              "name": "prize",
              "type": "uint256"
            }
          ],
          "internalType": "struct DrawLib.TsunamiDrawSettings[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNewestDrawSettings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bitRangeSize",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "matchCardinality",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "drawStartTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawEndTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxPicksPerUser",
              "type": "uint32"
            },
            {
              "internalType": "uint136",
              "name": "numberOfPicks",
              "type": "uint136"
            },
            {
              "internalType": "uint32[]",
              "name": "distributions",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256",
              "name": "prize",
              "type": "uint256"
            }
          ],
          "internalType": "struct DrawLib.TsunamiDrawSettings",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOldestDrawSettings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bitRangeSize",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "matchCardinality",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "drawStartTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawEndTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxPicksPerUser",
              "type": "uint32"
            },
            {
              "internalType": "uint136",
              "name": "numberOfPicks",
              "type": "uint136"
            },
            {
              "internalType": "uint32[]",
              "name": "distributions",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256",
              "name": "prize",
              "type": "uint256"
            }
          ],
          "internalType": "struct DrawLib.TsunamiDrawSettings",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_drawId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bitRangeSize",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "matchCardinality",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "drawStartTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawEndTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxPicksPerUser",
              "type": "uint32"
            },
            {
              "internalType": "uint136",
              "name": "numberOfPicks",
              "type": "uint136"
            },
            {
              "internalType": "uint32[]",
              "name": "distributions",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256",
              "name": "prize",
              "type": "uint256"
            }
          ],
          "internalType": "struct DrawLib.TsunamiDrawSettings",
          "name": "_drawSettings",
          "type": "tuple"
        }
      ],
      "name": "pushDrawSettings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_drawId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bitRangeSize",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "matchCardinality",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "drawStartTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "drawEndTimestampOffset",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxPicksPerUser",
              "type": "uint32"
            },
            {
              "internalType": "uint136",
              "name": "numberOfPicks",
              "type": "uint136"
            },
            {
              "internalType": "uint32[]",
              "name": "distributions",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256",
              "name": "prize",
              "type": "uint256"
            }
          ],
          "internalType": "struct DrawLib.TsunamiDrawSettings",
          "name": "_drawSettings",
          "type": "tuple"
        }
      ],
      "name": "setDrawSetting",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0ecbeed2fe12b36a737de31daae0fd155dd38eeb5015e438a30acdd02343a4a",
  "receipt": {
    "to": null,
    "from": "0xE0F4217390221aF47855E094F6e112D43C8698fE",
    "contractAddress": "0xfC8F0ccb22D929104B78841970A8d75f7798459b",
    "transactionIndex": 10,
    "gasUsed": "1798864",
    "logsBloom": "0x
    "blockHash": "0xe1c4fecd2f539db6a603e0b97aeb92ce13527818ca7a260328bd438ee37b6ab5",
    "transactionHash": "0xd0ecbeed2fe12b36a737de31daae0fd155dd38eeb5015e438a30acdd02343a4a",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 9351120,
        "transactionHash": "0xd0ecbeed2fe12b36a737de31daae0fd155dd38eeb5015e438a30acdd02343a4a",
        "address": "0xfC8F0ccb22D929104B78841970A8d75f7798459b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e0f4217390221af47855e094f6e112d43c8698fe"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0xe1c4fecd2f539db6a603e0b97aeb92ce13527818ca7a260328bd438ee37b6ab5"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 9351120,
        "transactionHash": "0xd0ecbeed2fe12b36a737de31daae0fd155dd38eeb5015e438a30acdd02343a4a",
        "address": "0xfC8F0ccb22D929104B78841970A8d75f7798459b",
        "topics": [
          "0x7da7688769fade6088b3de366e63c95090bc5b0db6e9b43f043dee741d7544fe"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000008",
        "logIndex": 14,
        "blockHash": "0xe1c4fecd2f539db6a603e0b97aeb92ce13527818ca7a260328bd438ee37b6ab5"
      }
    ],
    "blockNumber": 9351120,
    "cumulativeGasUsed": "3470503",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE0F4217390221aF47855E094F6e112D43C8698fE",
    8
  ],
  "solcInputHash": "b0872f2c20298ba87c0d5bbb50dadae3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_cardinality\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cardinality\",\"type\":\"uint8\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningRandomNumber\",\"type\":\"uint256\"}],\"name\":\"DrawSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bitRangeSize\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"matchCardinality\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"drawStartTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawEndTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPicksPerUser\",\"type\":\"uint32\"},{\"internalType\":\"uint136\",\"name\":\"numberOfPicks\",\"type\":\"uint136\"},{\"internalType\":\"uint32[]\",\"name\":\"distributions\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DrawLib.TsunamiDrawSettings\",\"name\":\"drawSettings\",\"type\":\"tuple\"}],\"name\":\"DrawSettingsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_drawId\",\"type\":\"uint32\"}],\"name\":\"getDrawSetting\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bitRangeSize\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"matchCardinality\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"drawStartTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawEndTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPicksPerUser\",\"type\":\"uint32\"},{\"internalType\":\"uint136\",\"name\":\"numberOfPicks\",\"type\":\"uint136\"},{\"internalType\":\"uint32[]\",\"name\":\"distributions\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"internalType\":\"struct DrawLib.TsunamiDrawSettings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_drawIds\",\"type\":\"uint32[]\"}],\"name\":\"getDrawSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bitRangeSize\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"matchCardinality\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"drawStartTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawEndTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPicksPerUser\",\"type\":\"uint32\"},{\"internalType\":\"uint136\",\"name\":\"numberOfPicks\",\"type\":\"uint136\"},{\"internalType\":\"uint32[]\",\"name\":\"distributions\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"internalType\":\"struct DrawLib.TsunamiDrawSettings[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewestDrawSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bitRangeSize\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"matchCardinality\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"drawStartTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawEndTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPicksPerUser\",\"type\":\"uint32\"},{\"internalType\":\"uint136\",\"name\":\"numberOfPicks\",\"type\":\"uint136\"},{\"internalType\":\"uint32[]\",\"name\":\"distributions\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"internalType\":\"struct DrawLib.TsunamiDrawSettings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOldestDrawSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bitRangeSize\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"matchCardinality\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"drawStartTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawEndTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPicksPerUser\",\"type\":\"uint32\"},{\"internalType\":\"uint136\",\"name\":\"numberOfPicks\",\"type\":\"uint136\"},{\"internalType\":\"uint32[]\",\"name\":\"distributions\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"internalType\":\"struct DrawLib.TsunamiDrawSettings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_drawId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bitRangeSize\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"matchCardinality\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"drawStartTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawEndTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPicksPerUser\",\"type\":\"uint32\"},{\"internalType\":\"uint136\",\"name\":\"numberOfPicks\",\"type\":\"uint136\"},{\"internalType\":\"uint32[]\",\"name\":\"distributions\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"internalType\":\"struct DrawLib.TsunamiDrawSettings\",\"name\":\"_drawSettings\",\"type\":\"tuple\"}],\"name\":\"pushDrawSettings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_drawId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bitRangeSize\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"matchCardinality\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"drawStartTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"drawEndTimestampOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPicksPerUser\",\"type\":\"uint32\"},{\"internalType\":\"uint136\",\"name\":\"numberOfPicks\",\"type\":\"uint136\"},{\"internalType\":\"uint32[]\",\"name\":\"distributions\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"internalType\":\"struct DrawLib.TsunamiDrawSettings\",\"name\":\"_drawSettings\",\"type\":\"tuple\"}],\"name\":\"setDrawSetting\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimOwnership()\":{\"details\":\"This function is only callable by the `_pendingOwner`.\"},\"constructor\":{\"params\":{\"_cardinality\":\"Cardinality of the `drawSettingsRingBuffer`\",\"_owner\":\"Address of the TsunamiDrawSettingsHistory owner\"}},\"getDrawSetting(uint32)\":{\"params\":{\"_drawId\":\"The id of the Draw\"}},\"getDrawSettings(uint32[])\":{\"params\":{\"_drawIds\":\"The draw ids to get the settings for\"}},\"getNewestDrawSettings()\":{\"details\":\"Uses the nextDrawIndex to calculate the most recently added Draw.\",\"returns\":{\"_0\":\"DrawLib.TsunamiDrawSettings\"}},\"getOldestDrawSettings()\":{\"details\":\"Finds the oldest Draw by comparing and/or diffing totalDraws with the cardinality.\",\"returns\":{\"_0\":\"DrawLib.TsunamiDrawSettings\"}},\"manager()\":{\"returns\":{\"_0\":\"Current `_manager` address.\"}},\"pendingOwner()\":{\"returns\":{\"_0\":\"Current `_pendingOwner` address.\"}},\"pushDrawSettings(uint32,(uint8,uint8,uint32,uint32,uint32,uint136,uint32[],uint256))\":{\"params\":{\"_drawId\":\"The id of the Draw\",\"_drawSettings\":\"The TsunamiDrawSettingsHistorySettings to set\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDrawSetting(uint32,(uint8,uint8,uint32,uint32,uint32,uint136,uint32[],uint256))\":{\"details\":\"Updating a Draw should be used sparingly and only in the event an incorrect Draw parameter has been stored.\",\"returns\":{\"_0\":\"Draw.drawId\"}},\"setManager(address)\":{\"details\":\"Throws if called by any account other than the owner.\",\"params\":{\"_newManager\":\"New _manager address.\"},\"returns\":{\"_0\":\"Boolean to indicate if the operation was successful or not.\"}},\"transferOwnership(address)\":{\"params\":{\"_newOwner\":\"Address to transfer ownership to.\"}}},\"title\":\"TsunamiDrawSettingsHistory\",\"version\":1},\"userdoc\":{\"events\":{\"DrawSet(uint32,uint32,uint256)\":{\"notice\":\"Emit when a new draw has been created.\"},\"DrawSettingsSet(uint32,(uint8,uint8,uint32,uint32,uint32,uint136,uint32[],uint256))\":{\"notice\":\"Emitted when the DrawParams are set/updated\"}},\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Allows the `_pendingOwner` address to finalize the transfer.\"},\"constructor\":{\"notice\":\"Constructor for TsunamiDrawSettingsHistory\"},\"getDrawSetting(uint32)\":{\"notice\":\"Gets the TsunamiDrawSettingsHistorySettings for a draw id\"},\"getDrawSettings(uint32[])\":{\"notice\":\"Gets the TsunamiDrawSettingsHistorySettings for a draw id\"},\"getNewestDrawSettings()\":{\"notice\":\"Read newest Draw from the draws ring buffer.\"},\"getOldestDrawSettings()\":{\"notice\":\"Read oldest Draw from the draws ring buffer.\"},\"manager()\":{\"notice\":\"Gets current `_manager`.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"notice\":\"Gets current `_pendingOwner`.\"},\"pushDrawSettings(uint32,(uint8,uint8,uint32,uint32,uint32,uint136,uint32[],uint256))\":{\"notice\":\"Sets TsunamiDrawSettingsHistorySettings for a draw id. only callable by the owner or manager\"},\"renounceOwnership()\":{\"notice\":\"Renounce ownership of the contract.\"},\"setDrawSetting(uint32,(uint8,uint8,uint32,uint32,uint32,uint136,uint32[],uint256))\":{\"notice\":\"Set existing Draw in draws ring buffer with new parameters.\"},\"setManager(address)\":{\"notice\":\"Set or change of manager.\"},\"transferOwnership(address)\":{\"notice\":\"Allows current owner to set the `_pendingOwner` address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol\":\"TsunamiDrawSettingsHistory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Abstract manageable contract that can be inherited by other contracts\\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\\n * there is an owner and a manager that can be granted exclusive access to specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyManager`, which can be applied to your functions to restrict their use to\\n * the manager.\\n */\\nabstract contract Manageable is Ownable {\\n    address private _manager;\\n\\n    /**\\n     * @dev Emitted when `_manager` has been changed.\\n     * @param previousManager previous `_manager` address.\\n     * @param newManager new `_manager` address.\\n     */\\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Gets current `_manager`.\\n     * @return Current `_manager` address.\\n     */\\n    function manager() public view virtual returns (address) {\\n        return _manager;\\n    }\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @dev Throws if called by any account other than the owner.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function setManager(address _newManager) external onlyOwner returns (bool) {\\n        return _setManager(_newManager);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function _setManager(address _newManager) private returns (bool) {\\n        address _previousManager = _manager;\\n\\n        require(_newManager != _previousManager, \\\"Manageable/existing-manager-address\\\");\\n\\n        _manager = _newManager;\\n\\n        emit ManagerTransferred(_previousManager, _newManager);\\n        return true;\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        require(manager() == msg.sender, \\\"Manageable/caller-not-manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager or the owner.\\n     */\\n    modifier onlyManagerOrOwner() {\\n        require(manager() == msg.sender || owner() == msg.sender, \\\"Manageable/caller-not-manager-or-owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdd8ac008df192c6aa4df83e7037ab090970fda38e1f9fd712bc0ab5e0485fc04\",\"license\":\"GPL-3.0\"},\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Abstract ownable contract that can be inherited by other contracts\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @dev Emitted when `_pendingOwner` has been changed.\\n     * @param pendingOwner new `_pendingOwner` address.\\n     */\\n    event OwnershipOffered(address indexed pendingOwner);\\n\\n    /**\\n     * @dev Emitted when `_owner` has been changed.\\n     * @param previousOwner previous `_owner` address.\\n     * @param newOwner new `_owner` address.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initializes the contract setting `_initialOwner` as the initial owner.\\n     * @param _initialOwner Initial owner of the contract.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Gets current `_pendingOwner`.\\n     * @return Current `_pendingOwner` address.\\n     */\\n    function pendingOwner() external view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Renounce ownership of the contract.\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n    * @notice Allows current owner to set the `_pendingOwner` address.\\n    * @param _newOwner Address to transfer ownership to.\\n    */\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable/pendingOwner-not-zero-address\\\");\\n\\n        _pendingOwner = _newOwner;\\n\\n        emit OwnershipOffered(_newOwner);\\n    }\\n\\n    /**\\n    * @notice Allows the `_pendingOwner` address to finalize the transfer.\\n    * @dev This function is only callable by the `_pendingOwner`.\\n    */\\n    function claimOwnership() external onlyPendingOwner {\\n        _setOwner(_pendingOwner);\\n        _pendingOwner = address(0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Internal function to set the `_owner` of the contract.\\n     * @param _newOwner New `_owner` address.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable/caller-not-owner\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the `pendingOwner`.\\n    */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == _pendingOwner, \\\"Ownable/caller-not-pendingOwner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfd0fd374812c8af45f2633cc7cc4811ccb7bad0a3902a43aded35939eb4a00d1\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\n\\nimport \\\"./libraries/DrawLib.sol\\\";\\nimport \\\"./libraries/DrawRingBuffer.sol\\\";\\nimport \\\"./interfaces/ITsunamiDrawSettingsHistory.sol\\\";\\n\\n///@title TsunamiDrawSettingsHistory\\ncontract TsunamiDrawSettingsHistory is ITsunamiDrawSettingsHistory, Manageable {\\n  using DrawRingBuffer for DrawRingBuffer.Buffer;\\n\\n  uint256 constant MAX_CARDINALITY = 256;\\n\\n  event Deployed(uint8 cardinality);\\n\\n  ///@notice Emitted when the DrawParams are set/updated\\n  event DrawSettingsSet(uint32 indexed drawId, DrawLib.TsunamiDrawSettings drawSettings);\\n\\n  /// @notice The stored history of draw settings.  Stored as ring buffer.\\n  DrawLib.TsunamiDrawSettings[MAX_CARDINALITY] drawSettings;\\n\\n  /// @notice Ring buffer data\\n  DrawRingBuffer.Buffer internal drawSettingsRingBuffer;\\n\\n  /* ============ Constructor ============ */\\n\\n  /// @notice Constructor for TsunamiDrawSettingsHistory\\n  /// @param _owner Address of the TsunamiDrawSettingsHistory owner\\n  /// @param _cardinality Cardinality of the `drawSettingsRingBuffer`\\n\\n  constructor(\\n    address _owner,\\n    uint8 _cardinality\\n  ) Ownable(_owner) {\\n    drawSettingsRingBuffer.cardinality = _cardinality;\\n\\n    emit Deployed(_cardinality);\\n  }\\n\\n  ///@notice Sets TsunamiDrawSettingsHistorySettings for a draw id. only callable by the owner or manager\\n  ///@param _drawId The id of the Draw\\n  ///@param _drawSettings The TsunamiDrawSettingsHistorySettings to set\\n  function pushDrawSettings(uint32 _drawId, DrawLib.TsunamiDrawSettings calldata _drawSettings) external override onlyManagerOrOwner\\n    returns (bool)\\n  {\\n    return _pushDrawSettings(_drawId, _drawSettings);\\n  }\\n\\n  ///@notice Gets the TsunamiDrawSettingsHistorySettings for a draw id\\n  ///@param _drawId The id of the Draw\\n  function getDrawSetting(uint32 _drawId) external override view returns(DrawLib.TsunamiDrawSettings memory)\\n  {\\n    return _getDrawSettings(drawSettingsRingBuffer, _drawId);\\n  }\\n\\n  ///@notice Gets the TsunamiDrawSettingsHistorySettings for a draw id\\n  ///@param _drawIds The draw ids to get the settings for\\n  function getDrawSettings(uint32[] calldata _drawIds) external override view returns(DrawLib.TsunamiDrawSettings[] memory)\\n  {\\n    DrawRingBuffer.Buffer memory buffer = drawSettingsRingBuffer;\\n    DrawLib.TsunamiDrawSettings[] memory _drawSettings = new DrawLib.TsunamiDrawSettings[](_drawIds.length);\\n    for (uint256 i = 0; i < _drawIds.length; i++) {\\n      _drawSettings[i] = _getDrawSettings(buffer, _drawIds[i]);\\n    }\\n    return _drawSettings;\\n  }\\n\\n  /**\\n    * @notice Read newest Draw from the draws ring buffer.\\n    * @dev    Uses the nextDrawIndex to calculate the most recently added Draw.\\n    * @return DrawLib.TsunamiDrawSettings\\n  */\\n  function getNewestDrawSettings() external override view returns (DrawLib.TsunamiDrawSettings memory) {\\n    DrawRingBuffer.Buffer memory buffer = drawSettingsRingBuffer;\\n    return drawSettings[buffer.getIndex(buffer.lastDrawId)];\\n  }\\n\\n  /**\\n    * @notice Read oldest Draw from the draws ring buffer.\\n    * @dev    Finds the oldest Draw by comparing and/or diffing totalDraws with the cardinality.\\n    * @return DrawLib.TsunamiDrawSettings\\n  */\\n  function getOldestDrawSettings() external override view returns (DrawLib.TsunamiDrawSettings memory) {\\n    // oldest draw should be next available index, otherwise it's at 0\\n    DrawRingBuffer.Buffer memory buffer = drawSettingsRingBuffer;\\n    DrawLib.TsunamiDrawSettings memory drawSet = drawSettings[buffer.nextIndex];\\n    if (drawSet.matchCardinality == 0) { // if draw is not init, then use draw at 0\\n      drawSet = drawSettings[0];\\n    }\\n    return drawSet;\\n  }\\n\\n  /**\\n    * @notice Set existing Draw in draws ring buffer with new parameters.\\n    * @dev    Updating a Draw should be used sparingly and only in the event an incorrect Draw parameter has been stored.\\n    * @return Draw.drawId\\n  */\\n  function setDrawSetting(uint32 _drawId, DrawLib.TsunamiDrawSettings calldata _drawSettings) external override onlyOwner returns (uint32) {\\n    DrawRingBuffer.Buffer memory buffer = drawSettingsRingBuffer;\\n    uint32 index = buffer.getIndex(_drawId);\\n    drawSettings[index] = _drawSettings;\\n    emit DrawSettingsSet(_drawId, _drawSettings);\\n    return _drawId;\\n  }\\n\\n  ///@notice Set the DrawCalculators TsunamiDrawSettingsHistorySettings\\n  ///@dev Distributions must be expressed with Ether decimals (1e18)\\n  ///@param _drawId The id of the Draw\\n  ///@param _drawSettings TsunamiDrawSettingsHistorySettings struct to set\\n  function _pushDrawSettings(uint32 _drawId, DrawLib.TsunamiDrawSettings calldata _drawSettings) internal\\n    returns (bool)\\n  {\\n    uint256 distributionsLength = _drawSettings.distributions.length;\\n\\n    require(_drawSettings.matchCardinality >= distributionsLength, \\\"DrawCalc/matchCardinality-gte-distributions\\\");\\n    require(_drawSettings.bitRangeSize <= 256 / _drawSettings.matchCardinality, \\\"DrawCalc/bitRangeSize-too-large\\\");\\n    require(_drawSettings.bitRangeSize > 0, \\\"DrawCalc/bitRangeSize-gt-0\\\");\\n    require(_drawSettings.maxPicksPerUser > 0, \\\"DrawCalc/maxPicksPerUser-gt-0\\\");\\n\\n    // ensure that the distributions are not gt 100%\\n    uint256 sumTotalDistributions = 0;\\n    for(uint256 index = 0; index < distributionsLength; index++){\\n      sumTotalDistributions += _drawSettings.distributions[index];\\n    }\\n\\n    require(sumTotalDistributions <= 1e9, \\\"DrawCalc/distributions-gt-100%\\\");\\n\\n    DrawRingBuffer.Buffer memory _drawSettingsRingBuffer = drawSettingsRingBuffer;\\n    drawSettings[_drawSettingsRingBuffer.nextIndex] = _drawSettings;\\n    drawSettingsRingBuffer = drawSettingsRingBuffer.push(_drawId);\\n\\n    emit DrawSettingsSet(_drawId, _drawSettings);\\n    return true;\\n  }\\n\\n  function _getDrawSettings(\\n    DrawRingBuffer.Buffer memory _drawSettingsRingBuffer,\\n    uint32 drawId\\n  ) internal view returns (DrawLib.TsunamiDrawSettings memory) {\\n    return drawSettings[_drawSettingsRingBuffer.getIndex(drawId)];\\n  }\\n}\\n\",\"keccak256\":\"0xa4cfbbd82984a30d774a0e6094e1d5d4f025d67b85b3bc9862064f4e2c58ca8a\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/ITsunamiDrawSettingsHistory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/DrawLib.sol\\\";\\n\\ninterface ITsunamiDrawSettingsHistory {\\n\\n  /**\\n    * @notice Emit when a new draw has been created.\\n    * @param drawId       Draw id\\n    * @param timestamp    Epoch timestamp when the draw is created.\\n    * @param winningRandomNumber Randomly generated number used to calculate draw winning numbers\\n  */\\n  event DrawSet (\\n    uint32 drawId,\\n    uint32 timestamp,\\n    uint256 winningRandomNumber\\n  );\\n\\n  function getDrawSettings(uint32[] calldata drawIds) external view returns (DrawLib.TsunamiDrawSettings[] memory);\\n  function getDrawSetting(uint32 drawId) external view returns (DrawLib.TsunamiDrawSettings memory);\\n  function pushDrawSettings(uint32 drawId, DrawLib.TsunamiDrawSettings calldata draw) external returns(bool);\\n  function setDrawSetting(uint32 drawId, DrawLib.TsunamiDrawSettings calldata draw) external returns(uint32); // maybe return drawIndex\\n  function getNewestDrawSettings() external view returns (DrawLib.TsunamiDrawSettings memory);\\n  function getOldestDrawSettings() external view returns (DrawLib.TsunamiDrawSettings memory);\\n}\",\"keccak256\":\"0xd88c3e40125acf0aac71172400bfca5693212c11b61075671cf1da1dd8961eca\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/DrawLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nlibrary DrawLib{\\n\\n    struct Draw {\\n        uint256 winningRandomNumber;\\n        uint32 timestamp;\\n        uint32 drawId;\\n    }\\n\\n    ///@notice Draw settings for the tsunami draw calculator\\n    ///@param bitRangeSize Decimal representation of bitRangeSize\\n    ///@param matchCardinality The bitRangeSize's to consider in the 256 random numbers. Must be > 1 and < 256/bitRangeSize\\n    ///@param numberOfPicks Number of picks this Draw has (may vary network to network)\\n    ///@param maxPicksPerUser Maximum number of picks a user can make in this Draw\\n    ///@param distributions Array of prize distribution percentages, expressed in fraction form with base 1e18. Max sum of these <= 1 Ether. ordering: index0: grandPrize, index1: runnerUp, etc.\\n    ///@param prize Total prize amount available in this draw calculator for this Draw (may vary from network to network)\\n    struct TsunamiDrawSettings {\\n        uint8 bitRangeSize;\\n        uint8 matchCardinality;\\n        uint32 drawStartTimestampOffset;\\n        uint32 drawEndTimestampOffset;\\n        uint32 maxPicksPerUser;\\n        uint136 numberOfPicks;\\n        uint32[] distributions;\\n        uint256 prize;\\n    }\\n}\",\"keccak256\":\"0xb216d3c74904241eb73621750a2d6d561b05bb95489af807c70140ef8579b73b\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/DrawRingBuffer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./RingBuffer.sol\\\";\\n\\n/// @title Library for creating and managing a draw ring buffer.\\nlibrary DrawRingBuffer {\\n\\n  /// @notice Draw buffer struct.\\n  struct Buffer {\\n    uint32 lastDrawId;\\n    uint32 nextIndex;\\n    uint32 cardinality;\\n  }\\n\\n  /// @notice Helper function to know if the draw ring buffer has been initialized.\\n  /// @dev since draws start at 1 and are monotonically increased, we know we are uninitialized if nextIndex = 0 and lastDrawId = 0.\\n  /// @param _buffer The buffer to check.\\n  function isInitialized(Buffer memory _buffer) internal pure returns (bool) {\\n    return !(_buffer.nextIndex == 0 && _buffer.lastDrawId == 0);\\n  }\\n\\n  /// @notice Push a draw to the buffer.\\n  /// @param _buffer The buffer to push to.\\n  /// @param _drawId The draw id to push.\\n  /// @return The new buffer.\\n  function push(Buffer memory _buffer, uint32 _drawId) internal view returns (Buffer memory) {\\n    require(!isInitialized(_buffer) || _drawId == _buffer.lastDrawId + 1, \\\"DRB/must-be-contig\\\");\\n\\n    return Buffer({\\n      lastDrawId: _drawId,\\n      nextIndex: uint32(RingBuffer.nextIndex(_buffer.nextIndex, _buffer.cardinality)),\\n      cardinality: _buffer.cardinality\\n    });\\n  }\\n\\n  /// @notice Get draw ring buffer index pointer.\\n  /// @param _buffer The buffer to get the `nextIndex` from.\\n  /// @param _drawId The draw id to get the index for.\\n  /// @return The draw ring buffer index pointer.\\n  function getIndex(Buffer memory _buffer, uint32 _drawId) internal view returns (uint32) {\\n    require(isInitialized(_buffer) && _drawId <= _buffer.lastDrawId, \\\"DRB/future-draw\\\");\\n\\n    uint32 indexOffset = _buffer.lastDrawId - _drawId;\\n    require(indexOffset < _buffer.cardinality, \\\"DRB/expired-draw\\\");\\n\\n    uint256 mostRecent = RingBuffer.mostRecentIndex(_buffer.nextIndex, _buffer.cardinality);\\n\\n    return uint32(RingBuffer.offset(uint32(mostRecent), indexOffset, _buffer.cardinality));\\n  }\\n}\\n\",\"keccak256\":\"0x0e0316f9a8412e04f9106c881021396fcbb1eeb749c94b38d30277138cb4ab85\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/RingBuffer.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\nlibrary RingBuffer {\\n\\n  /// @notice Returns TWAB index.\\n  /// @dev `twabs` is a circular buffer of `MAX_CARDINALITY` size equal to 32. So the array goes from 0 to 31.\\n  /// @dev In order to navigate the circular buffer, we need to use the modulo operator.\\n  /// @dev For example, if `_index` is equal to 32, `_index % MAX_CARDINALITY` will return 0 and will point to the first element of the array.\\n  /// @param _index Index used to navigate through `twabs` circular buffer.\\n  function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n    return _index % _cardinality;\\n  }\\n\\n  function offset(uint256 _index, uint256 _amount, uint256 _cardinality) internal pure returns (uint256) {\\n    return (_index + _cardinality - _amount) % _cardinality;\\n  }\\n\\n  /// @notice Returns the index of the last recorded TWAB\\n  /// @param _nextAvailableIndex The next available twab index.  This will be recorded to next.\\n  /// @param _cardinality The cardinality of the TWAB history.\\n  /// @return The index of the last recorded TWAB\\n  function mostRecentIndex(uint256 _nextAvailableIndex, uint256 _cardinality) internal pure returns (uint256) {\\n    if (_cardinality == 0) {\\n      return 0;\\n    }\\n    return (_nextAvailableIndex + uint256(_cardinality) - 1) % _cardinality;\\n  }\\n\\n  function nextIndex(uint256 _currentIndex, uint256 _cardinality) internal pure returns (uint256) {\\n    return (_currentIndex + 1) % _cardinality;\\n  }\\n\\n}\",\"keccak256\":\"0xb055c8f88ea11a451d5950eaea35542833e581dbf075224af6adb40fc9dc4ddc\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200200b3803806200200b8339810160408190526200003491620000f2565b816200004081620000a2565b50610303805463ffffffff60401b191660ff8316680100000000000000008102919091179091556040519081527f7da7688769fade6088b3de366e63c95090bc5b0db6e9b43f043dee741d7544fe9060200160405180910390a1505062000141565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156200010657600080fd5b82516001600160a01b03811681146200011e57600080fd5b602084015190925060ff811681146200013657600080fd5b809150509250929050565b611eba80620001516000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063d0ebdbe711610066578063d0ebdbe7146101c8578063db8172b9146101db578063e30c3978146101e3578063f2fde38b146101f457600080fd5b80638da5cb5b146101845780639fde0ae714610195578063a72cdf4e146101b557600080fd5b80635676460d116100bd5780635676460d14610131578063607f004114610154578063715018a61461017c57600080fd5b806315e4a556146100e4578063481c6a75146101025780634e71e0c814610127575b600080fd5b6100ec610207565b6040516100f99190611972565b60405180910390f35b6002546001600160a01b03165b6040516001600160a01b0390911681526020016100f9565b61012f6103d0565b005b61014461013f366004611681565b610463565b60405190151581526020016100f9565b610167610162366004611681565b61052b565b60405163ffffffff90911681526020016100f9565b61012f61065a565b6000546001600160a01b031661010f565b6101a86101a33660046115ef565b6106cf565b6040516100f99190611816565b6100ec6101c3366004611664565b61080c565b6101446101d63660046115bf565b610892565b6100ec61090b565b6001546001600160a01b031661010f565b61012f6102023660046115bf565b610bf8565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082015260e0810191909152604080516060810182526103035463ffffffff80821680845264010000000083048216602085015268010000000000000000909204811693830193909352909160039161029791849190610d3416565b63ffffffff1661010081106102ae576102ae611c18565b60408051610100808201835260039390930293909301805460ff808216865293810490931660208086019190915262010000840463ffffffff9081168685015266010000000000008504811660608701526a010000000000000000000085041660808601526e01000000000000000000000000000090930470ffffffffffffffffffffffffffffffffff1660a0850152600181018054835181860281018601909452808452919360c086019392908301828280156103b757602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161037a5790505b5050505050815260200160028201548152505091505090565b6001546001600160a01b0316331461042f5760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e65720060448201526064015b60405180910390fd5b600154610444906001600160a01b0316610e64565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000336104786002546001600160a01b031690565b6001600160a01b031614806104a657503361049b6000546001600160a01b031690565b6001600160a01b0316145b6105185760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201527f2d6f776e657200000000000000000000000000000000000000000000000000006064820152608401610426565b6105228383610ec1565b90505b92915050565b6000336105406000546001600160a01b031690565b6001600160a01b0316146105965760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610426565b604080516060810182526103035463ffffffff808216835264010000000082048116602084015268010000000000000000909104811692820192909252906000906105e59083908790610d3416565b90508360038263ffffffff16610100811061060257610602611c18565b600302016106108282611c5e565b9050508463ffffffff167f61200abe08d5c25d31be3414a153456b234dc32436a2b509d9e4c60c3136d7c3856040516106499190611896565b60405180910390a250929392505050565b3361066d6000546001600160a01b031690565b6001600160a01b0316146106c35760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610426565b6106cd6000610e64565b565b60408051606081810183526103035463ffffffff808216845264010000000082048116602085015268010000000000000000909104169282019290925260008367ffffffffffffffff81111561072757610727611c2e565b60405190808252806020026020018201604052801561079557816020015b60408051610100810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c083015260e082015282526000199092019101816107455790505b50905060005b84811015610803576107d3838787848181106107b9576107b9611c18565b90506020020160208101906107ce9190611664565b6112d4565b8282815181106107e5576107e5611c18565b602002602001018190525080806107fb90611bbd565b91505061079b565b50949350505050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082015260e0810191909152604080516060810182526103035463ffffffff808216835264010000000082048116602084015268010000000000000000909104169181019190915261052590836112d4565b6000336108a76000546001600160a01b031690565b6001600160a01b0316146108fd5760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610426565b61052582611337565b919050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082015260e0810191909152604080516060810182526103035463ffffffff808216835264010000000082048116602084018190526801000000000000000090920416928201929092529060009060039061010081106109a1576109a1611c18565b60408051610100808201835260039390930293909301805460ff808216865293810490931660208086019190915262010000840463ffffffff9081168685015266010000000000008504811660608701526a010000000000000000000085041660808601526e01000000000000000000000000000090930470ffffffffffffffffffffffffffffffffff1660a0850152600181018054835181860281018601909452808452919360c08601939290830182828015610aaa57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610a6d5790505b505050505081526020016002820154815250509050806020015160ff166000141561052557600360005b60408051610100808201835260039390930293909301805460ff808216865293810490931660208086019190915262010000840463ffffffff9081168685015266010000000000008504811660608701526a010000000000000000000085041660808601526e01000000000000000000000000000090930470ffffffffffffffffffffffffffffffffff1660a0850152600181018054835181860281018601909452808452919360c08601939290830182828015610bdd57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610ba05790505b50505050508152602001600282015481525050905092915050565b33610c0b6000546001600160a01b031690565b6001600160a01b031614610c615760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610426565b6001600160a01b038116610cdd5760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610426565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b6000610d3f83611423565b8015610d5b5750826000015163ffffffff168263ffffffff1611155b610da75760405162461bcd60e51b815260206004820152600f60248201527f4452422f6675747572652d6472617700000000000000000000000000000000006044820152606401610426565b8251600090610db7908490611a97565b9050836040015163ffffffff168163ffffffff1610610e185760405162461bcd60e51b815260206004820152601060248201527f4452422f657870697265642d64726177000000000000000000000000000000006044820152606401610426565b6000610e38856020015163ffffffff16866040015163ffffffff1661144b565b9050610e5b8163ffffffff168363ffffffff16876040015163ffffffff1661147b565b95945050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080610ed160c0840184611985565b9150819050610ee660408501602086016116d9565b60ff161015610f5d5760405162461bcd60e51b815260206004820152602b60248201527f4472617743616c632f6d6174636843617264696e616c6974792d6774652d646960448201527f73747269627574696f6e730000000000000000000000000000000000000000006064820152608401610426565b610f6d60408401602085016116d9565b610f7c9060ff16610100611a5f565b61ffff16610f8d60208501856116d9565b60ff161115610fde5760405162461bcd60e51b815260206004820152601f60248201527f4472617743616c632f62697452616e676553697a652d746f6f2d6c61726765006044820152606401610426565b6000610fed60208501856116d9565b60ff161161103d5760405162461bcd60e51b815260206004820152601a60248201527f4472617743616c632f62697452616e676553697a652d67742d300000000000006044820152606401610426565b600061104f60a0850160808601611664565b63ffffffff16116110a25760405162461bcd60e51b815260206004820152601d60248201527f4472617743616c632f6d61785069636b73506572557365722d67742d300000006044820152606401610426565b6000805b82811015611104576110bb60c0860186611985565b828181106110cb576110cb611c18565b90506020020160208101906110e09190611664565b6110f09063ffffffff1683611a1f565b9150806110fc81611bbd565b9150506110a6565b50633b9aca008111156111595760405162461bcd60e51b815260206004820152601e60248201527f4472617743616c632f646973747269627574696f6e732d67742d3130302500006044820152606401610426565b604080516060810182526103035463ffffffff8082168352640100000000820481166020840181905268010000000000000000909204169282019290925290859060039061010081106111ae576111ae611c18565b600302016111bc8282611c5e565b5050604080516060810182526103035463ffffffff8082168352640100000000820481166020840152680100000000000000009091048116928201929092526112079188906114a516565b80516103038054602084015160409485015163ffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff928216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009094169582169590951792909217169290921790559051908716907f61200abe08d5c25d31be3414a153456b234dc32436a2b509d9e4c60c3136d7c3906112c0908890611896565b60405180910390a250600195945050505050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082015260e081019190915260036113208484610d34565b63ffffffff166101008110610ad457610ad4611c18565b6002546000906001600160a01b039081169083168114156113c05760405162461bcd60e51b815260206004820152602360248201527f4d616e61676561626c652f6578697374696e672d6d616e616765722d6164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610426565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691821790925560405190918316907f9cb45c728de594dab506a1f1a8554e24c8eeaf983618d5ec5dd7bc6f3c49feee90600090a350600192915050565b6000816020015163ffffffff1660001480156114445750815163ffffffff16155b1592915050565b60008161145a57506000610525565b8160016114678286611a1f565b6114719190611a80565b6105229190611bd8565b600081836114898287611a1f565b6114939190611a80565b61149d9190611bd8565b949350505050565b60408051606081018252600080825260208201819052918101919091526114cb83611423565b15806114ee575082516114df906001611a37565b63ffffffff168263ffffffff16145b61153a5760405162461bcd60e51b815260206004820152601260248201527f4452422f6d7573742d62652d636f6e74696700000000000000000000000000006044820152606401610426565b60405180606001604052808363ffffffff16815260200161156f856020015163ffffffff16866040015163ffffffff16611590565b63ffffffff168152602001846040015163ffffffff16815250905092915050565b600081611471846001611a1f565b803561090681611e41565b803561090681611e63565b803561090681611e75565b6000602082840312156115d157600080fd5b81356001600160a01b03811681146115e857600080fd5b9392505050565b6000806020838503121561160257600080fd5b823567ffffffffffffffff8082111561161a57600080fd5b818501915085601f83011261162e57600080fd5b81358181111561163d57600080fd5b8660208260051b850101111561165257600080fd5b60209290920196919550909350505050565b60006020828403121561167657600080fd5b81356115e881611e63565b6000806040838503121561169457600080fd5b823561169f81611e63565b9150602083013567ffffffffffffffff8111156116bb57600080fd5b830161010081860312156116ce57600080fd5b809150509250929050565b6000602082840312156116eb57600080fd5b81356115e881611e75565b8183526000602080850194508260005b8581101561173157813561171981611e63565b63ffffffff1687529582019590820190600101611706565b509495945050505050565b600081518084526020808501945080840160005b8381101561173157815163ffffffff1687529582019590820190600101611750565b600061010060ff835116845260ff6020840151166020850152604083015163ffffffff8082166040870152806060860151166060870152505060808301516117c2608086018263ffffffff169052565b5060a08301516117e760a086018270ffffffffffffffffffffffffffffffffff169052565b5060c08301518160c08601526117ff8286018261173c565b91505060e083015160e08501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611889577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611877858351611772565b9450928501929085019060010161183d565b5092979650505050505050565b60208152600082356118a781611e75565b60ff81166020840152506118bd602084016115b4565b60ff81166040840152506118d3604084016115a9565b63ffffffff81166060840152506118ec606084016115a9565b63ffffffff8116608084015250611905608084016115a9565b63ffffffff811660a08401525061191e60a0840161159e565b70ffffffffffffffffffffffffffffffffff811660c08401525061194560c08401846119d6565b6101008060e086015261195d610120860183856116f6565b60e09690960135940193909352509192915050565b6020815260006105226020830184611772565b6000808335601e1984360301811261199c57600080fd5b83018035915067ffffffffffffffff8211156119b757600080fd5b6020019150600581901b36038213156119cf57600080fd5b9250929050565b6000808335601e198436030181126119ed57600080fd5b830160208101925035905067ffffffffffffffff811115611a0d57600080fd5b8060051b36038313156119cf57600080fd5b60008219821115611a3257611a32611bec565b500190565b600063ffffffff808316818516808303821115611a5657611a56611bec565b01949350505050565b600061ffff80841680611a7457611a74611c02565b92169190910492915050565b600082821015611a9257611a92611bec565b500390565b600063ffffffff83811690831681811015611ab457611ab4611bec565b039392505050565b68010000000000000000831115611ae357634e487b7160e01b600052604160045260246000fd5b805483825580841015611b4a576000828152602081206007860160031c81016007840160031c82019150601c8760021b168015611b31576000198083018054828460200360031b1c16815550505b505b81811015611b4657828155600101611b33565b5050505b506000818152602081208391805b86811015611bb457611b8c611b6c85611c51565b845463ffffffff600386901b81811b801990931693909116901b16178455565b602084019350600482019150601c821115611bac57600091506001830192505b600101611b58565b50505050505050565b6000600019821415611bd157611bd1611bec565b5060010190565b600082611be757611be7611c02565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000813561052581611e41565b6000813561052581611e63565b8135611c6981611e75565b60ff811690508154817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082161783556020840135611ca681611e75565b61ff008160081b16837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000841617178455505050611d1f611ce860408401611c51565b82547fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffff1660109190911b65ffffffff000016178255565b611d69611d2e60608401611c51565b82547fffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffffff1660309190911b69ffffffff00000000000016178255565b611db7611d7860808401611c51565b82547fffffffffffffffffffffffffffffffffffff00000000ffffffffffffffffffff1660509190911b6dffffffff0000000000000000000016178255565b611e16611dc660a08401611c44565b82547fff0000000000000000000000000000000000ffffffffffffffffffffffffffff1660709190911b7effffffffffffffffffffffffffffffffff000000000000000000000000000016178255565b611e2360c0830183611985565b611e31818360018601611abc565b505060e082013560028201555050565b70ffffffffffffffffffffffffffffffffff81168114611e6057600080fd5b50565b63ffffffff81168114611e6057600080fd5b60ff81168114611e6057600080fdfea264697066735822122092903697de40a09e22599cc4f429109f227015760c8b5c44dfbb1551b9cd68dc64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063d0ebdbe711610066578063d0ebdbe7146101c8578063db8172b9146101db578063e30c3978146101e3578063f2fde38b146101f457600080fd5b80638da5cb5b146101845780639fde0ae714610195578063a72cdf4e146101b557600080fd5b80635676460d116100bd5780635676460d14610131578063607f004114610154578063715018a61461017c57600080fd5b806315e4a556146100e4578063481c6a75146101025780634e71e0c814610127575b600080fd5b6100ec610207565b6040516100f99190611972565b60405180910390f35b6002546001600160a01b03165b6040516001600160a01b0390911681526020016100f9565b61012f6103d0565b005b61014461013f366004611681565b610463565b60405190151581526020016100f9565b610167610162366004611681565b61052b565b60405163ffffffff90911681526020016100f9565b61012f61065a565b6000546001600160a01b031661010f565b6101a86101a33660046115ef565b6106cf565b6040516100f99190611816565b6100ec6101c3366004611664565b61080c565b6101446101d63660046115bf565b610892565b6100ec61090b565b6001546001600160a01b031661010f565b61012f6102023660046115bf565b610bf8565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082015260e0810191909152604080516060810182526103035463ffffffff80821680845264010000000083048216602085015268010000000000000000909204811693830193909352909160039161029791849190610d3416565b63ffffffff1661010081106102ae576102ae611c18565b60408051610100808201835260039390930293909301805460ff808216865293810490931660208086019190915262010000840463ffffffff9081168685015266010000000000008504811660608701526a010000000000000000000085041660808601526e01000000000000000000000000000090930470ffffffffffffffffffffffffffffffffff1660a0850152600181018054835181860281018601909452808452919360c086019392908301828280156103b757602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161037a5790505b5050505050815260200160028201548152505091505090565b6001546001600160a01b0316331461042f5760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e65720060448201526064015b60405180910390fd5b600154610444906001600160a01b0316610e64565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000336104786002546001600160a01b031690565b6001600160a01b031614806104a657503361049b6000546001600160a01b031690565b6001600160a01b0316145b6105185760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201527f2d6f776e657200000000000000000000000000000000000000000000000000006064820152608401610426565b6105228383610ec1565b90505b92915050565b6000336105406000546001600160a01b031690565b6001600160a01b0316146105965760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610426565b604080516060810182526103035463ffffffff808216835264010000000082048116602084015268010000000000000000909104811692820192909252906000906105e59083908790610d3416565b90508360038263ffffffff16610100811061060257610602611c18565b600302016106108282611c5e565b9050508463ffffffff167f61200abe08d5c25d31be3414a153456b234dc32436a2b509d9e4c60c3136d7c3856040516106499190611896565b60405180910390a250929392505050565b3361066d6000546001600160a01b031690565b6001600160a01b0316146106c35760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610426565b6106cd6000610e64565b565b60408051606081810183526103035463ffffffff808216845264010000000082048116602085015268010000000000000000909104169282019290925260008367ffffffffffffffff81111561072757610727611c2e565b60405190808252806020026020018201604052801561079557816020015b60408051610100810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c083015260e082015282526000199092019101816107455790505b50905060005b84811015610803576107d3838787848181106107b9576107b9611c18565b90506020020160208101906107ce9190611664565b6112d4565b8282815181106107e5576107e5611c18565b602002602001018190525080806107fb90611bbd565b91505061079b565b50949350505050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082015260e0810191909152604080516060810182526103035463ffffffff808216835264010000000082048116602084015268010000000000000000909104169181019190915261052590836112d4565b6000336108a76000546001600160a01b031690565b6001600160a01b0316146108fd5760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610426565b61052582611337565b919050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082015260e0810191909152604080516060810182526103035463ffffffff808216835264010000000082048116602084018190526801000000000000000090920416928201929092529060009060039061010081106109a1576109a1611c18565b60408051610100808201835260039390930293909301805460ff808216865293810490931660208086019190915262010000840463ffffffff9081168685015266010000000000008504811660608701526a010000000000000000000085041660808601526e01000000000000000000000000000090930470ffffffffffffffffffffffffffffffffff1660a0850152600181018054835181860281018601909452808452919360c08601939290830182828015610aaa57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610a6d5790505b505050505081526020016002820154815250509050806020015160ff166000141561052557600360005b60408051610100808201835260039390930293909301805460ff808216865293810490931660208086019190915262010000840463ffffffff9081168685015266010000000000008504811660608701526a010000000000000000000085041660808601526e01000000000000000000000000000090930470ffffffffffffffffffffffffffffffffff1660a0850152600181018054835181860281018601909452808452919360c08601939290830182828015610bdd57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610ba05790505b50505050508152602001600282015481525050905092915050565b33610c0b6000546001600160a01b031690565b6001600160a01b031614610c615760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e657200000000000000006044820152606401610426565b6001600160a01b038116610cdd5760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610426565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b6000610d3f83611423565b8015610d5b5750826000015163ffffffff168263ffffffff1611155b610da75760405162461bcd60e51b815260206004820152600f60248201527f4452422f6675747572652d6472617700000000000000000000000000000000006044820152606401610426565b8251600090610db7908490611a97565b9050836040015163ffffffff168163ffffffff1610610e185760405162461bcd60e51b815260206004820152601060248201527f4452422f657870697265642d64726177000000000000000000000000000000006044820152606401610426565b6000610e38856020015163ffffffff16866040015163ffffffff1661144b565b9050610e5b8163ffffffff168363ffffffff16876040015163ffffffff1661147b565b95945050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080610ed160c0840184611985565b9150819050610ee660408501602086016116d9565b60ff161015610f5d5760405162461bcd60e51b815260206004820152602b60248201527f4472617743616c632f6d6174636843617264696e616c6974792d6774652d646960448201527f73747269627574696f6e730000000000000000000000000000000000000000006064820152608401610426565b610f6d60408401602085016116d9565b610f7c9060ff16610100611a5f565b61ffff16610f8d60208501856116d9565b60ff161115610fde5760405162461bcd60e51b815260206004820152601f60248201527f4472617743616c632f62697452616e676553697a652d746f6f2d6c61726765006044820152606401610426565b6000610fed60208501856116d9565b60ff161161103d5760405162461bcd60e51b815260206004820152601a60248201527f4472617743616c632f62697452616e676553697a652d67742d300000000000006044820152606401610426565b600061104f60a0850160808601611664565b63ffffffff16116110a25760405162461bcd60e51b815260206004820152601d60248201527f4472617743616c632f6d61785069636b73506572557365722d67742d300000006044820152606401610426565b6000805b82811015611104576110bb60c0860186611985565b828181106110cb576110cb611c18565b90506020020160208101906110e09190611664565b6110f09063ffffffff1683611a1f565b9150806110fc81611bbd565b9150506110a6565b50633b9aca008111156111595760405162461bcd60e51b815260206004820152601e60248201527f4472617743616c632f646973747269627574696f6e732d67742d3130302500006044820152606401610426565b604080516060810182526103035463ffffffff8082168352640100000000820481166020840181905268010000000000000000909204169282019290925290859060039061010081106111ae576111ae611c18565b600302016111bc8282611c5e565b5050604080516060810182526103035463ffffffff8082168352640100000000820481166020840152680100000000000000009091048116928201929092526112079188906114a516565b80516103038054602084015160409485015163ffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff928216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009094169582169590951792909217169290921790559051908716907f61200abe08d5c25d31be3414a153456b234dc32436a2b509d9e4c60c3136d7c3906112c0908890611896565b60405180910390a250600195945050505050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082015260e081019190915260036113208484610d34565b63ffffffff166101008110610ad457610ad4611c18565b6002546000906001600160a01b039081169083168114156113c05760405162461bcd60e51b815260206004820152602360248201527f4d616e61676561626c652f6578697374696e672d6d616e616765722d6164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610426565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691821790925560405190918316907f9cb45c728de594dab506a1f1a8554e24c8eeaf983618d5ec5dd7bc6f3c49feee90600090a350600192915050565b6000816020015163ffffffff1660001480156114445750815163ffffffff16155b1592915050565b60008161145a57506000610525565b8160016114678286611a1f565b6114719190611a80565b6105229190611bd8565b600081836114898287611a1f565b6114939190611a80565b61149d9190611bd8565b949350505050565b60408051606081018252600080825260208201819052918101919091526114cb83611423565b15806114ee575082516114df906001611a37565b63ffffffff168263ffffffff16145b61153a5760405162461bcd60e51b815260206004820152601260248201527f4452422f6d7573742d62652d636f6e74696700000000000000000000000000006044820152606401610426565b60405180606001604052808363ffffffff16815260200161156f856020015163ffffffff16866040015163ffffffff16611590565b63ffffffff168152602001846040015163ffffffff16815250905092915050565b600081611471846001611a1f565b803561090681611e41565b803561090681611e63565b803561090681611e75565b6000602082840312156115d157600080fd5b81356001600160a01b03811681146115e857600080fd5b9392505050565b6000806020838503121561160257600080fd5b823567ffffffffffffffff8082111561161a57600080fd5b818501915085601f83011261162e57600080fd5b81358181111561163d57600080fd5b8660208260051b850101111561165257600080fd5b60209290920196919550909350505050565b60006020828403121561167657600080fd5b81356115e881611e63565b6000806040838503121561169457600080fd5b823561169f81611e63565b9150602083013567ffffffffffffffff8111156116bb57600080fd5b830161010081860312156116ce57600080fd5b809150509250929050565b6000602082840312156116eb57600080fd5b81356115e881611e75565b8183526000602080850194508260005b8581101561173157813561171981611e63565b63ffffffff1687529582019590820190600101611706565b509495945050505050565b600081518084526020808501945080840160005b8381101561173157815163ffffffff1687529582019590820190600101611750565b600061010060ff835116845260ff6020840151166020850152604083015163ffffffff8082166040870152806060860151166060870152505060808301516117c2608086018263ffffffff169052565b5060a08301516117e760a086018270ffffffffffffffffffffffffffffffffff169052565b5060c08301518160c08601526117ff8286018261173c565b91505060e083015160e08501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611889577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611877858351611772565b9450928501929085019060010161183d565b5092979650505050505050565b60208152600082356118a781611e75565b60ff81166020840152506118bd602084016115b4565b60ff81166040840152506118d3604084016115a9565b63ffffffff81166060840152506118ec606084016115a9565b63ffffffff8116608084015250611905608084016115a9565b63ffffffff811660a08401525061191e60a0840161159e565b70ffffffffffffffffffffffffffffffffff811660c08401525061194560c08401846119d6565b6101008060e086015261195d610120860183856116f6565b60e09690960135940193909352509192915050565b6020815260006105226020830184611772565b6000808335601e1984360301811261199c57600080fd5b83018035915067ffffffffffffffff8211156119b757600080fd5b6020019150600581901b36038213156119cf57600080fd5b9250929050565b6000808335601e198436030181126119ed57600080fd5b830160208101925035905067ffffffffffffffff811115611a0d57600080fd5b8060051b36038313156119cf57600080fd5b60008219821115611a3257611a32611bec565b500190565b600063ffffffff808316818516808303821115611a5657611a56611bec565b01949350505050565b600061ffff80841680611a7457611a74611c02565b92169190910492915050565b600082821015611a9257611a92611bec565b500390565b600063ffffffff83811690831681811015611ab457611ab4611bec565b039392505050565b68010000000000000000831115611ae357634e487b7160e01b600052604160045260246000fd5b805483825580841015611b4a576000828152602081206007860160031c81016007840160031c82019150601c8760021b168015611b31576000198083018054828460200360031b1c16815550505b505b81811015611b4657828155600101611b33565b5050505b506000818152602081208391805b86811015611bb457611b8c611b6c85611c51565b845463ffffffff600386901b81811b801990931693909116901b16178455565b602084019350600482019150601c821115611bac57600091506001830192505b600101611b58565b50505050505050565b6000600019821415611bd157611bd1611bec565b5060010190565b600082611be757611be7611c02565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000813561052581611e41565b6000813561052581611e63565b8135611c6981611e75565b60ff811690508154817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082161783556020840135611ca681611e75565b61ff008160081b16837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000841617178455505050611d1f611ce860408401611c51565b82547fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffff1660109190911b65ffffffff000016178255565b611d69611d2e60608401611c51565b82547fffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffffff1660309190911b69ffffffff00000000000016178255565b611db7611d7860808401611c51565b82547fffffffffffffffffffffffffffffffffffff00000000ffffffffffffffffffff1660509190911b6dffffffff0000000000000000000016178255565b611e16611dc660a08401611c44565b82547fff0000000000000000000000000000000000ffffffffffffffffffffffffffff1660709190911b7effffffffffffffffffffffffffffffffff000000000000000000000000000016178255565b611e2360c0830183611985565b611e31818360018601611abc565b505060e082013560028201555050565b70ffffffffffffffffffffffffffffffffff81168114611e6057600080fd5b50565b63ffffffff81168114611e6057600080fd5b60ff81168114611e6057600080fdfea264697066735822122092903697de40a09e22599cc4f429109f227015760c8b5c44dfbb1551b9cd68dc64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimOwnership()": {
        "details": "This function is only callable by the `_pendingOwner`."
      },
      "constructor": {
        "params": {
          "_cardinality": "Cardinality of the `drawSettingsRingBuffer`",
          "_owner": "Address of the TsunamiDrawSettingsHistory owner"
        }
      },
      "getDrawSetting(uint32)": {
        "params": {
          "_drawId": "The id of the Draw"
        }
      },
      "getDrawSettings(uint32[])": {
        "params": {
          "_drawIds": "The draw ids to get the settings for"
        }
      },
      "getNewestDrawSettings()": {
        "details": "Uses the nextDrawIndex to calculate the most recently added Draw.",
        "returns": {
          "_0": "DrawLib.TsunamiDrawSettings"
        }
      },
      "getOldestDrawSettings()": {
        "details": "Finds the oldest Draw by comparing and/or diffing totalDraws with the cardinality.",
        "returns": {
          "_0": "DrawLib.TsunamiDrawSettings"
        }
      },
      "manager()": {
        "returns": {
          "_0": "Current `_manager` address."
        }
      },
      "pendingOwner()": {
        "returns": {
          "_0": "Current `_pendingOwner` address."
        }
      },
      "pushDrawSettings(uint32,(uint8,uint8,uint32,uint32,uint32,uint136,uint32[],uint256))": {
        "params": {
          "_drawId": "The id of the Draw",
          "_drawSettings": "The TsunamiDrawSettingsHistorySettings to set"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDrawSetting(uint32,(uint8,uint8,uint32,uint32,uint32,uint136,uint32[],uint256))": {
        "details": "Updating a Draw should be used sparingly and only in the event an incorrect Draw parameter has been stored.",
        "returns": {
          "_0": "Draw.drawId"
        }
      },
      "setManager(address)": {
        "details": "Throws if called by any account other than the owner.",
        "params": {
          "_newManager": "New _manager address."
        },
        "returns": {
          "_0": "Boolean to indicate if the operation was successful or not."
        }
      },
      "transferOwnership(address)": {
        "params": {
          "_newOwner": "Address to transfer ownership to."
        }
      }
    },
    "title": "TsunamiDrawSettingsHistory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DrawSet(uint32,uint32,uint256)": {
        "notice": "Emit when a new draw has been created."
      },
      "DrawSettingsSet(uint32,(uint8,uint8,uint32,uint32,uint32,uint136,uint32[],uint256))": {
        "notice": "Emitted when the DrawParams are set/updated"
      }
    },
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Allows the `_pendingOwner` address to finalize the transfer."
      },
      "constructor": {
        "notice": "Constructor for TsunamiDrawSettingsHistory"
      },
      "getDrawSetting(uint32)": {
        "notice": "Gets the TsunamiDrawSettingsHistorySettings for a draw id"
      },
      "getDrawSettings(uint32[])": {
        "notice": "Gets the TsunamiDrawSettingsHistorySettings for a draw id"
      },
      "getNewestDrawSettings()": {
        "notice": "Read newest Draw from the draws ring buffer."
      },
      "getOldestDrawSettings()": {
        "notice": "Read oldest Draw from the draws ring buffer."
      },
      "manager()": {
        "notice": "Gets current `_manager`."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "notice": "Gets current `_pendingOwner`."
      },
      "pushDrawSettings(uint32,(uint8,uint8,uint32,uint32,uint32,uint136,uint32[],uint256))": {
        "notice": "Sets TsunamiDrawSettingsHistorySettings for a draw id. only callable by the owner or manager"
      },
      "renounceOwnership()": {
        "notice": "Renounce ownership of the contract."
      },
      "setDrawSetting(uint32,(uint8,uint8,uint32,uint32,uint32,uint136,uint32[],uint256))": {
        "notice": "Set existing Draw in draws ring buffer with new parameters."
      },
      "setManager(address)": {
        "notice": "Set or change of manager."
      },
      "transferOwnership(address)": {
        "notice": "Allows current owner to set the `_pendingOwner` address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3466,
        "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3468,
        "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3364,
        "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
        "label": "_manager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8525,
        "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
        "label": "drawSettings",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(TsunamiDrawSettings)9818_storage)256_storage"
      },
      {
        "astId": 8529,
        "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
        "label": "drawSettingsRingBuffer",
        "offset": 0,
        "slot": "771",
        "type": "t_struct(Buffer)9830_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TsunamiDrawSettings)9818_storage)256_storage": {
        "base": "t_struct(TsunamiDrawSettings)9818_storage",
        "encoding": "inplace",
        "label": "struct DrawLib.TsunamiDrawSettings[256]",
        "numberOfBytes": "24576"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_struct(Buffer)9830_storage": {
        "encoding": "inplace",
        "label": "struct DrawRingBuffer.Buffer",
        "members": [
          {
            "astId": 9825,
            "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
            "label": "lastDrawId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 9827,
            "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
            "label": "nextIndex",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 9829,
            "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
            "label": "cardinality",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TsunamiDrawSettings)9818_storage": {
        "encoding": "inplace",
        "label": "struct DrawLib.TsunamiDrawSettings",
        "members": [
          {
            "astId": 9802,
            "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
            "label": "bitRangeSize",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 9804,
            "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
            "label": "matchCardinality",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 9806,
            "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
            "label": "drawStartTimestampOffset",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 9808,
            "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
            "label": "drawEndTimestampOffset",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 9810,
            "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
            "label": "maxPicksPerUser",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 9812,
            "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
            "label": "numberOfPicks",
            "offset": 14,
            "slot": "0",
            "type": "t_uint136"
          },
          {
            "astId": 9815,
            "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
            "label": "distributions",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 9817,
            "contract": "@pooltogether/v4-core/contracts/TsunamiDrawSettingsHistory.sol:TsunamiDrawSettingsHistory",
            "label": "prize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint136": {
        "encoding": "inplace",
        "label": "uint136",
        "numberOfBytes": "17"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}