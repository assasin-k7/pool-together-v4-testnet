{
  "address": "0x3938AB5846109479dD5a6C8b4DA8EBd2A196570A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "amount",
              "type": "uint224"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct TwabLibrary.Twab",
          "name": "newTotalSupplyTwab",
          "type": "tuple"
        }
      ],
      "name": "NewTotalSupplyTwab",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ticketHolder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "amount",
              "type": "uint224"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct TwabLibrary.Twab",
          "name": "newTwab",
          "type": "tuple"
        }
      ],
      "name": "NewUserTwab",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "TicketInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_CARDINALITY",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWAB_TIME_TO_LIVE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "controllerBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "controllerBurnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "controllerMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "delegateOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAccountDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "balance",
              "type": "uint224"
            },
            {
              "internalType": "uint16",
              "name": "nextTwabIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cardinality",
              "type": "uint16"
            }
          ],
          "internalType": "struct Ticket.AccountDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "getAverageBalanceBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "getBalanceAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "_targets",
          "type": "uint32[]"
        }
      ],
      "name": "getBalancesAt",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_targets",
          "type": "uint32[]"
        }
      ],
      "name": "getTotalSupplies",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_target",
          "type": "uint32"
        }
      ],
      "name": "getTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        }
      ],
      "name": "getTwab",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "amount",
              "type": "uint224"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            }
          ],
          "internalType": "struct TwabLibrary.Twab",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1fa2467a0d72a5c66ee1a13a2c2ed31c349201b00c05060200efbae814b9a506",
  "receipt": {
    "to": null,
    "from": "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "contractAddress": "0x3938AB5846109479dD5a6C8b4DA8EBd2A196570A",
    "transactionIndex": 28,
    "gasUsed": "3569195",
    "logsBloom": "0x
    "blockHash": "0x9c51b4e84594a8bb1c424d20913508f4eb6bc154d55d381d23cde607e684c1e8",
    "transactionHash": "0x1fa2467a0d72a5c66ee1a13a2c2ed31c349201b00c05060200efbae814b9a506",
    "logs": [],
    "blockNumber": 9265078,
    "cumulativeGasUsed": "15541759",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "eb7a0e30f615ca63f4ada054592e23a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct TwabLibrary.Twab\",\"name\":\"newTotalSupplyTwab\",\"type\":\"tuple\"}],\"name\":\"NewTotalSupplyTwab\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ticketHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct TwabLibrary.Twab\",\"name\":\"newTwab\",\"type\":\"tuple\"}],\"name\":\"NewUserTwab\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"TicketInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CARDINALITY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWAB_TIME_TO_LIVE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controllerBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controllerBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controllerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"delegateOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAccountDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"balance\",\"type\":\"uint224\"},{\"internalType\":\"uint16\",\"name\":\"nextTwabIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cardinality\",\"type\":\"uint16\"}],\"internalType\":\"struct Ticket.AccountDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"getAverageBalanceBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"getBalanceAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_targets\",\"type\":\"uint32[]\"}],\"name\":\"getBalancesAt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_targets\",\"type\":\"uint32[]\"}],\"name\":\"getTotalSupplies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_target\",\"type\":\"uint32\"}],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"getTwab\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct TwabLibrary.Twab\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"PoolTogether Inc.\",\"events\":{\"NewTotalSupplyTwab((uint224,uint32))\":{\"params\":{\"newTotalSupplyTwab\":\"Updated TWAB of tickets total supply after a successful total supply TWAB recording.\"}},\"NewUserTwab(address,address,(uint224,uint32))\":{\"params\":{\"newTwab\":\"Updated TWAB of a ticket holder after a successful TWAB recording.\",\"ticketHolder\":\"The Ticket holder address.\",\"user\":\"The recipient of the ticket power (may be the same as the ticketHolder)\"}},\"TicketInitialized(string,string,uint8,address)\":{\"params\":{\"controller\":\"Token controller address.\",\"decimals\":\"Ticket decimals.\",\"name\":\"Ticket name (eg: PoolTogether Dai Ticket (Compound)).\",\"symbol\":\"Ticket symbol (eg: PcDAI).\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"returns\":{\"_0\":\"uint224 `_user` ticket token balance.\"}},\"controllerBurn(address,uint256)\":{\"details\":\"May be overridden to provide more granular control over burning\",\"params\":{\"_amount\":\"Amount of tokens to burn\",\"_user\":\"Address of the holder account to burn tokens from\"}},\"controllerBurnFrom(address,address,uint256)\":{\"details\":\"May be overridden to provide more granular control over operator-burning\",\"params\":{\"_amount\":\"Amount of tokens to burn\",\"_operator\":\"Address of the operator performing the burn action via the controller contract\",\"_user\":\"Address of the holder account to burn tokens from\"}},\"controllerMint(address,uint256)\":{\"details\":\"May be overridden to provide more granular control over minting\",\"params\":{\"_amount\":\"Amount of tokens to mint\",\"_user\":\"Address of the receiver of the minted tokens\"}},\"decimals()\":{\"details\":\"This value should be equal to the decimals of the token used to deposit into the pool.\",\"returns\":{\"_0\":\"uint8 decimals.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getAccountDetails(address)\":{\"params\":{\"_user\":\"The user for whom to fetch the TWAB context\"},\"returns\":{\"_0\":\"The TWAB context, which includes { balance, nextTwabIndex, cardinality }\"}},\"getAverageBalanceBetween(address,uint256,uint256)\":{\"params\":{\"_endTime\":\"The end time of the time frame.\",\"_startTime\":\"The start time of the time frame.\",\"_user\":\"The user whose balance is checked\"},\"returns\":{\"_0\":\"The average balance that the user held during the time frame.\"}},\"getBalanceAt(address,uint256)\":{\"params\":{\"_target\":\"Timestamp at which the reserved TWAB should be for.\",\"_user\":\"Address of the user whose TWAB is being fetched.\"}},\"getBalancesAt(address,uint32[])\":{\"params\":{\"_targets\":\"Timestamps at which the reserved TWABs should be for.\",\"_user\":\"Address of the user whose TWABs are being fetched.\"},\"returns\":{\"_0\":\"uint256[] `_user` TWAB balances.\"}},\"getTotalSupplies(uint32[])\":{\"params\":{\"_targets\":\"Timestamps at which the reserved TWABs should be for.\"},\"returns\":{\"_0\":\"uint256[] ticket TWAB `totalSupplies`.\"}},\"getTotalSupply(uint32)\":{\"params\":{\"_target\":\"Timestamp at which the reserved TWAB should be for.\"}},\"getTwab(address,uint16)\":{\"params\":{\"_index\":\"The index of the TWAB to fetch\",\"_user\":\"The user for whom to fetch the TWAB\"},\"returns\":{\"_0\":\"The TWAB, which includes the twab amount and the timestamp.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(string,string,uint8,address)\":{\"params\":{\"_name\":\"ERC20 ticket token name.\",\"_symbol\":\"ERC20 ticket token symbol.\",\"decimals_\":\"ERC20 ticket token decimals.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"returns\":{\"_0\":\"uint256 Total supply of the ERC20 ticket token.\"}},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"TWAB_TIME_TO_LIVE\":{\"details\":\"Once the twab ttl expires, its storage slot is recycled.\"}},\"title\":\"An ERC20 token that allows you to see user's past balances, and average balance held between timestamps.\",\"version\":1},\"userdoc\":{\"events\":{\"NewTotalSupplyTwab((uint224,uint32))\":{\"notice\":\"Emitted when a new total supply TWAB has been recorded.\"},\"NewUserTwab(address,address,(uint224,uint32))\":{\"notice\":\"Emitted when a new TWAB has been recorded.\"},\"TicketInitialized(string,string,uint8,address)\":{\"notice\":\"Emitted when ticket is initialized.\"}},\"kind\":\"user\",\"methods\":{\"MAX_CARDINALITY()\":{\"notice\":\"The maximum number of twab entries\"},\"TWAB_TIME_TO_LIVE()\":{\"notice\":\"The minimum length of time a twab should exist.\"},\"balanceOf(address)\":{\"notice\":\"Returns the ERC20 ticket token balance of a ticket holder.\"},\"controller()\":{\"notice\":\"Interface to the contract responsible for controlling mint/burn\"},\"controllerBurn(address,uint256)\":{\"notice\":\"Allows the controller to burn tokens from a user account\"},\"controllerBurnFrom(address,address,uint256)\":{\"notice\":\"Allows an operator via the controller to burn tokens on behalf of a user account\"},\"controllerMint(address,uint256)\":{\"notice\":\"Allows the controller to mint tokens for a user account\"},\"decimals()\":{\"notice\":\"Returns the ERC20 ticket token decimals.\"},\"getAccountDetails(address)\":{\"notice\":\"Gets a users twap context.  This is a struct with their balance, next twab index, and cardinality.\"},\"getAverageBalanceBetween(address,uint256,uint256)\":{\"notice\":\"Calculates the average balance held by a user for a given time frame.\"},\"getBalanceAt(address,uint256)\":{\"notice\":\"Retrieves `_user` TWAB balance.\"},\"getBalancesAt(address,uint32[])\":{\"notice\":\"Retrieves `_user` TWAB balances.\"},\"getTotalSupplies(uint32[])\":{\"notice\":\"Retrieves ticket TWAB `totalSupplies`.\"},\"getTotalSupply(uint32)\":{\"notice\":\"Retrieves ticket TWAB `totalSupply`.\"},\"getTwab(address,uint16)\":{\"notice\":\"Gets the TWAB at a specific index for a user.\"},\"initialize(string,string,uint8,address)\":{\"notice\":\"Initializes Ticket with passed parameters.\"},\"totalSupply()\":{\"notice\":\"Returns the ERC20 ticket token total supply.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooltogether/v4/contracts/Ticket.sol\":\"Ticket\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x8570116be0ba91a0e4e48508d8b74afb67baa9446c4cc08e2c54510be07835ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal initializer {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf07c1013d0ecf7a80ff5bf8f59105fc0acc5bf83aa4196b409d9ac3666d37cc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4e321ee7110594e92c1c834d7de2fbdfd01fbed6c06127fe75c5836fe80a24a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37c56d5e4a1c4c65ad0dcc6af28442c5d35c6ca07d9ad6e966e07dceb97e6c8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdddbd304b5a96782965d6c04ea9889734be0691a68fcff10908f48ce330cac7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x30f3940c119b4d93578bac394f43ee9b0b8465ea1e60b316244183be2983a5ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xb92541cd02568981bc3dac94060d542ab3231d8f30ade82aeba0588761c1b649\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x603946f0dc2541ff45f4b5cb1424ed1870eb24f3396cd318b1996e7e65278907\",\"license\":\"MIT\"},\"@pooltogether/v4/contracts/Ticket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./libraries/OverflowSafeComparator.sol\\\";\\nimport \\\"./libraries/TwabLibrary.sol\\\";\\nimport \\\"./interfaces/TicketInterface.sol\\\";\\nimport \\\"./token/ControlledToken.sol\\\";\\n\\n/// @title An ERC20 token that allows you to see user's past balances, and average balance held between timestamps.\\n/// @author PoolTogether Inc.\\ncontract Ticket is ControlledToken, TicketInterface {\\n  /// @notice The minimum length of time a twab should exist.\\n  /// @dev Once the twab ttl expires, its storage slot is recycled.\\n  uint32 public constant TWAB_TIME_TO_LIVE = 24 weeks;\\n  /// @notice The maximum number of twab entries\\n  uint16 public constant MAX_CARDINALITY = 65535;\\n\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  using SafeCastUpgradeable for uint256;\\n\\n  /// @notice A struct containing details for an Account\\n  /// @param balance The current balance for an Account\\n  /// @param nextTwabIndex The next available index to store a new twab\\n  /// @param cardinality The number of recorded twabs (plus one!)\\n  struct AccountDetails {\\n    uint224 balance;\\n    uint16 nextTwabIndex;\\n    uint16 cardinality;\\n  }\\n\\n  /// @notice Combines account details with their twab history\\n  /// @param details The account details\\n  /// @param twabs The history of twabs for this account\\n  struct Account {\\n    AccountDetails details;\\n    TwabLibrary.Twab[MAX_CARDINALITY] twabs;\\n  }\\n\\n  event Delegated(\\n    address indexed user,\\n    address indexed delegate\\n  );\\n\\n  /// @notice Emitted when ticket is initialized.\\n  /// @param name Ticket name (eg: PoolTogether Dai Ticket (Compound)).\\n  /// @param symbol Ticket symbol (eg: PcDAI).\\n  /// @param decimals Ticket decimals.\\n  /// @param controller Token controller address.\\n  event TicketInitialized(\\n    string name,\\n    string symbol,\\n    uint8 decimals,\\n    address controller\\n  );\\n\\n  /// @notice Emitted when a new TWAB has been recorded.\\n  /// @param ticketHolder The Ticket holder address.\\n  /// @param user The recipient of the ticket power (may be the same as the ticketHolder)\\n  /// @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\\n  event NewUserTwab(\\n    address indexed ticketHolder,\\n    address indexed user,\\n    TwabLibrary.Twab newTwab\\n  );\\n\\n  /// @notice Emitted when a new total supply TWAB has been recorded.\\n  /// @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\\n  event NewTotalSupplyTwab(\\n    TwabLibrary.Twab newTotalSupplyTwab\\n  );\\n\\n  /// @notice Record of token holders TWABs for each account.\\n  mapping (address => Account) internal userTwabs;\\n\\n  /// @notice ERC20 ticket token decimals.\\n  uint8 private _decimals;\\n\\n  /// @notice Record of tickets total supply and most recent TWAB index.\\n  Account internal totalSupplyTwab;\\n\\n  /// @notice Mapping of delegates.  Each address can delegate their ticket power to another.\\n  mapping(address => address) delegates;\\n\\n  /// @notice Each address's balance\\n  mapping(address => uint256) balances;\\n\\n  /// @notice Initializes Ticket with passed parameters.\\n  /// @param _name ERC20 ticket token name.\\n  /// @param _symbol ERC20 ticket token symbol.\\n  /// @param decimals_ ERC20 ticket token decimals.\\n  function initialize (\\n    string calldata _name,\\n    string calldata _symbol,\\n    uint8 decimals_,\\n    address _controller\\n  ) public virtual override initializer {\\n    __ERC20_init(_name, _symbol);\\n    __ERC20Permit_init(\\\"PoolTogether Ticket\\\");\\n\\n    require(decimals_ > 0, \\\"Ticket/decimals-gt-zero\\\");\\n    _decimals = decimals_;\\n\\n    require(_controller != address(0), \\\"Ticket/controller-not-zero-address\\\");\\n\\n    ControlledToken.initialize(_name, _symbol, _decimals, _controller);\\n\\n    emit TicketInitialized(_name, _symbol, decimals_, _controller);\\n  }\\n\\n  /// @notice Gets a users twap context.  This is a struct with their balance, next twab index, and cardinality.\\n  /// @param _user The user for whom to fetch the TWAB context\\n  /// @return The TWAB context, which includes { balance, nextTwabIndex, cardinality }\\n  function getAccountDetails(address _user) external view returns (AccountDetails memory) {\\n    return userTwabs[_user].details;\\n  }\\n\\n  /// @notice Gets the TWAB at a specific index for a user.\\n  /// @param _user The user for whom to fetch the TWAB\\n  /// @param _index The index of the TWAB to fetch\\n  /// @return The TWAB, which includes the twab amount and the timestamp.\\n  function getTwab(address _user, uint16 _index) external view returns (TwabLibrary.Twab memory) {\\n    return userTwabs[_user].twabs[_index];\\n  }\\n\\n  /// @notice Retrieves `_user` TWAB balance.\\n  /// @param _user Address of the user whose TWAB is being fetched.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function getBalanceAt(address _user, uint256 _target) external override view returns (uint256) {\\n    Account storage account = userTwabs[_user];\\n    return _getBalanceAt(account.twabs, account.details, _target);\\n  }\\n\\n  /// @notice Retrieves `_user` TWAB balance.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function _getBalanceAt(TwabLibrary.Twab[MAX_CARDINALITY] storage _twabs, AccountDetails memory _details, uint256 _target) internal view returns (uint256) {\\n    return TwabLibrary.getBalanceAt(\\n      _details.cardinality,\\n      _details.nextTwabIndex,\\n      _twabs,\\n      _details.balance,\\n      uint32(_target),\\n      uint32(block.timestamp)\\n    );\\n  }\\n\\n  /// @notice Calculates the average balance held by a user for a given time frame.\\n  /// @param _user The user whose balance is checked\\n  /// @param _startTime The start time of the time frame.\\n  /// @param _endTime The end time of the time frame.\\n  /// @return The average balance that the user held during the time frame.\\n  function getAverageBalanceBetween(address _user, uint256 _startTime, uint256 _endTime) external override view returns (uint256) {\\n    Account storage account = userTwabs[_user];\\n    return _getAverageBalanceBetween(account.twabs, account.details, uint32(_startTime), uint32(_endTime));\\n  }\\n\\n  /// @notice Calculates the average balance held by a user for a given time frame.\\n  /// @param _startTime The start time of the time frame.\\n  /// @param _endTime The end time of the time frame.\\n  /// @return The average balance that the user held during the time frame.\\n  function _getAverageBalanceBetween(TwabLibrary.Twab[MAX_CARDINALITY] storage _twabs, AccountDetails memory _details, uint32 _startTime, uint32 _endTime) internal view returns (uint256) {\\n    return TwabLibrary.getAverageBalanceBetween(\\n      _details.cardinality,\\n      _details.nextTwabIndex,\\n      _twabs,\\n      _details.balance,\\n      _startTime,\\n      _endTime,\\n      uint32(block.timestamp)\\n    );\\n  }\\n\\n  /// @notice Retrieves `_user` TWAB balances.\\n  /// @param _user Address of the user whose TWABs are being fetched.\\n  /// @param _targets Timestamps at which the reserved TWABs should be for.\\n  /// @return uint256[] `_user` TWAB balances.\\n  function getBalancesAt(address _user, uint32[] calldata _targets) external override view returns (uint256[] memory) {\\n    uint256 length = _targets.length;\\n    uint256[] memory balances = new uint256[](length);\\n\\n    Account storage twabContext = userTwabs[_user];\\n    AccountDetails memory details = twabContext.details;\\n\\n    for(uint256 i = 0; i < length; i++) {\\n      balances[i] = _getBalanceAt(twabContext.twabs, details, _targets[i]);\\n    }\\n\\n    return balances;\\n  }\\n\\n  /// @notice Retrieves ticket TWAB `totalSupply`.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function getTotalSupply(uint32 _target) override external view returns (uint256) {\\n    return _getBalanceAt(totalSupplyTwab.twabs, totalSupplyTwab.details, _target);\\n  }\\n\\n  /// @notice Retrieves ticket TWAB `totalSupplies`.\\n  /// @param _targets Timestamps at which the reserved TWABs should be for.\\n  /// @return uint256[] ticket TWAB `totalSupplies`.\\n  function getTotalSupplies(uint32[] calldata _targets) external view override returns (uint256[] memory){\\n    uint256 length = _targets.length;\\n    uint256[] memory totalSupplies = new uint256[](length);\\n\\n    AccountDetails memory details = totalSupplyTwab.details;\\n\\n    for(uint256 i = 0; i < length; i++) {\\n      totalSupplies[i] = _getBalanceAt(totalSupplyTwab.twabs, details, _targets[i]);\\n    }\\n\\n    return totalSupplies;\\n  }\\n\\n  function delegateOf(address _user) external view returns (address) {\\n    return delegates[_user];\\n  }\\n\\n  /// @notice Returns the ERC20 ticket token balance of a ticket holder.\\n  /// @return uint256 `_user` ticket token balance.\\n  function _balanceOf(address _user) internal view returns (uint256) {\\n    return balances[_user];\\n  }\\n\\n  /// @notice Returns the ERC20 ticket token decimals.\\n  /// @dev This value should be equal to the decimals of the token used to deposit into the pool.\\n  /// @return uint8 decimals.\\n  function decimals() public view virtual override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /// @notice Returns the ERC20 ticket token balance of a ticket holder.\\n  /// @return uint224 `_user` ticket token balance.\\n  function balanceOf(address _user) public view override returns (uint256) {\\n    return _balanceOf(_user);\\n  }\\n\\n  /// @notice Returns the ERC20 ticket token total supply.\\n  /// @return uint256 Total supply of the ERC20 ticket token.\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return totalSupplyTwab.details.balance;\\n  }\\n\\n  function delegate(address to) external virtual {\\n    uint224 balance = uint224(_balanceOf(msg.sender));\\n    address currentDelegate = delegates[msg.sender];\\n\\n    if (currentDelegate != address(0)) {\\n      _decreaseUserTwab(msg.sender, currentDelegate, balance);\\n    } else {\\n      _decreaseUserTwab(msg.sender, msg.sender, balance);\\n    }\\n\\n    if (to != address(0)) {\\n      _increaseUserTwab(msg.sender, to, balance);\\n    } else {\\n      _increaseUserTwab(msg.sender, msg.sender, balance);\\n    }\\n\\n    delegates[msg.sender] = to;\\n\\n    emit Delegated(msg.sender, to);\\n  }\\n\\n  /// @notice Overridding of the `_transfer` function of the base ERC20Upgradeable contract.\\n  /// @dev `_sender` cannot be the zero address.\\n  /// @dev `_recipient` cannot be the zero address.\\n  /// @dev `_sender` must have a balance of at least `_amount`.\\n  /// @param _sender Address of the `_sender`that will send `_amount` of tokens.\\n  /// @param _recipient Address of the `_recipient`that will receive `_amount` of tokens.\\n  /// @param _amount Amount of tokens to be transferred from `_sender` to `_recipient`.\\n  function _transfer(\\n    address _sender,\\n    address _recipient,\\n    uint256 _amount\\n  ) internal override virtual {\\n    require(_sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(_recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    uint224 amount = uint224(_amount);\\n\\n    _beforeTokenTransfer(_sender, _recipient, _amount);\\n\\n    if (_sender != _recipient) {\\n\\n      // standard balance update\\n      uint256 senderBalance = balances[_sender];\\n      require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n      unchecked {\\n          balances[_sender] = senderBalance - amount;\\n      }\\n      balances[_recipient] += amount;\\n\\n      // history update\\n      address senderDelegate = delegates[_sender];\\n      if (senderDelegate != address(0)) {\\n        _decreaseUserTwab(_sender, senderDelegate, _amount);\\n      } else {\\n        _decreaseUserTwab(_sender, _sender, _amount);\\n      }\\n\\n      // history update\\n      address recipientDelegate = delegates[_recipient];\\n      if (recipientDelegate != address(0)) {\\n        _increaseUserTwab(_recipient, recipientDelegate, amount);\\n      } else {\\n        _increaseUserTwab(_recipient, _recipient, amount);\\n      }\\n\\n    }\\n\\n    emit Transfer(_sender, _recipient, _amount);\\n\\n    _afterTokenTransfer(_sender, _recipient, _amount);\\n  }\\n\\n  /// @notice Overridding of the `_mint` function of the base ERC20Upgradeable contract.\\n  /// @dev `_to` cannot be the zero address.\\n  /// @param _to Address that will be minted `_amount` of tokens.\\n  /// @param _amount Amount of tokens to be minted to `_to`.\\n  function _mint(address _to, uint256 _amount) internal virtual override {\\n    require(_to != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    uint224 amount = _amount.toUint224();\\n\\n    _beforeTokenTransfer(address(0), _to, _amount);\\n\\n    balances[_to] += amount;\\n\\n    (TwabLibrary.Twab memory totalSupply, bool tsIsNew) = increaseTwab(totalSupplyTwab, amount);\\n    if (tsIsNew) {\\n      emit NewTotalSupplyTwab(totalSupply);\\n    }\\n\\n    address toDelegate = delegates[_to];\\n    if (toDelegate != address(0)) {\\n      _increaseUserTwab(_to, toDelegate, amount);\\n    } else {\\n      _increaseUserTwab(_to, _to, amount);\\n    }\\n\\n    emit Transfer(address(0), _to, _amount);\\n\\n    _afterTokenTransfer(address(0), _to, _amount);\\n  }\\n\\n  /// @notice Overridding of the `_burn` function of the base ERC20Upgradeable contract.\\n  /// @dev `_from` cannot be the zero address.\\n  /// @dev `_from` must have at least `_amount` of tokens.\\n  /// @param _from Address that will be burned `_amount` of tokens.\\n  /// @param _amount Amount of tokens to be burnt from `_from`.\\n  function _burn(address _from, uint256 _amount) internal virtual override {\\n    require(_from != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    uint224 amount = _amount.toUint224();\\n\\n    _beforeTokenTransfer(_from, address(0), _amount);\\n\\n    (TwabLibrary.Twab memory tsTwab, bool tsIsNew) = decreaseTwab(\\n      totalSupplyTwab,\\n      amount,\\n      \\\"ERC20: burn amount exceeds balance\\\"\\n    );\\n    if (tsIsNew) {\\n      emit NewTotalSupplyTwab(tsTwab);\\n    }\\n\\n    uint256 accountBalance = balances[_from];\\n    require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n        balances[_from] = accountBalance - amount;\\n    }\\n\\n    address fromDelegate = delegates[_from];\\n    if (fromDelegate != address(0)) {\\n      _decreaseUserTwab(_from, fromDelegate, amount);\\n    } else {\\n      _decreaseUserTwab(_from, _from, amount);\\n    }\\n\\n    emit Transfer(_from, address(0), _amount);\\n\\n    _afterTokenTransfer(_from, address(0), _amount);\\n  }\\n\\n  function _increaseUserTwab(\\n    address _holder,\\n    address _user,\\n    uint256 _amount\\n  ) internal {\\n    Account storage _account = userTwabs[_user];\\n    // console.log(\\\"_increaseUserTwab \\\", _user);\\n    (TwabLibrary.Twab memory twab, bool isNew) = increaseTwab(_account, _amount);\\n    if (isNew) {\\n      // console.log(\\\"!!! new twab: \\\", twab.timestamp);\\n      emit NewUserTwab(_holder, _user, twab);\\n    }\\n  }\\n\\n  function _decreaseUserTwab(\\n    address _holder,\\n    address _user,\\n    uint256 _amount\\n  ) internal {\\n    Account storage _account = userTwabs[_user];\\n    // console.log(\\\"_decreaseUserTwab \\\", _user);\\n    (TwabLibrary.Twab memory twab, bool isNew) = decreaseTwab(_account, _amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    if (isNew) {\\n      // console.log(\\\"!!! new twab: \\\", twab.timestamp);\\n      emit NewUserTwab(_holder, _user, twab);\\n    }\\n  }\\n\\n  /// @notice Increases an account's balance and records a new twab.\\n  /// @param _account The account whose balance will be increased\\n  /// @param _amount The amount to increase the balance by\\n  /// @return twab The user's latest TWAB\\n  /// @return isNew Whether the TWAB is new\\n  function increaseTwab(\\n    Account storage _account,\\n    uint256 _amount\\n  ) internal returns (TwabLibrary.Twab memory twab, bool isNew) {\\n    uint16 nextTwabIndex;\\n    uint16 cardinality;\\n    AccountDetails memory details = _account.details;\\n    (nextTwabIndex, cardinality, twab, isNew) = TwabLibrary.update(\\n      details.balance,\\n      details.nextTwabIndex,\\n      details.cardinality,\\n      _account.twabs,\\n      uint32(block.timestamp),\\n      TWAB_TIME_TO_LIVE\\n    );\\n    _account.details = AccountDetails({\\n      balance: (details.balance + _amount).toUint224(),\\n      nextTwabIndex: nextTwabIndex,\\n      cardinality: cardinality\\n    });\\n  }\\n\\n  /// @notice Decreases an account's balance and records a new twab.\\n  /// @param _account The account whose balance will be decreased\\n  /// @param _amount The amount to decrease the balance by\\n  /// @param _message The revert message in the event of insufficient balance\\n  /// @return twab The user's latest TWAB\\n  /// @return isNew Whether the TWAB is new\\n  function decreaseTwab(\\n    Account storage _account,\\n    uint256 _amount,\\n    string memory _message\\n  ) internal returns (TwabLibrary.Twab memory twab, bool isNew) {\\n    uint16 nextTwabIndex;\\n    uint16 cardinality;\\n    AccountDetails memory details = _account.details;\\n    require(details.balance >= _amount, _message);\\n    (nextTwabIndex, cardinality, twab, isNew) = TwabLibrary.update(\\n      details.balance,\\n      details.nextTwabIndex,\\n      details.cardinality,\\n      _account.twabs,\\n      uint32(block.timestamp),\\n      TWAB_TIME_TO_LIVE\\n    );\\n    _account.details = AccountDetails({\\n      balance: (details.balance - _amount).toUint224(),\\n      nextTwabIndex: nextTwabIndex,\\n      cardinality: cardinality\\n    });\\n  }\\n\\n}\\n\",\"keccak256\":\"0xc2269507bd9b8838fa5ba15af8260426d738ad497debf68a165de92fd94d87ba\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4/contracts/interfaces/TicketInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\ninterface TicketInterface {\\n  function getBalanceAt(address user, uint256 timestamp) external view returns(uint256);\\n  function getBalancesAt(address user, uint32[] calldata timestamp) external view returns(uint256[] memory);\\n  function getAverageBalanceBetween(address _user, uint256 _startTime, uint256 _endTime) external view returns (uint256);\\n  function getTotalSupply(uint32 timestamp) external view returns(uint256);\\n  function getTotalSupplies(uint32[] calldata timestamp) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0x09c770ac1e12f370a695db74e594709e2b83da6793141d3a61d4a95a0e8ed8b3\",\"license\":\"MIT\"},\"@pooltogether/v4/contracts/libraries/OverflowSafeComparator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/// @title OverflowSafeComparator library to share comparator functions between contracts\\n/// @author PoolTogether Inc.\\nlibrary OverflowSafeComparator {\\n  /// @notice 32-bit timestamps comparator.\\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n  /// @param _b Timestamp to compare against `_a`.\\n  /// @param _timestamp A timestamp truncated to 32 bits.\\n  /// @return bool Whether `_a` is chronologically < `_b`.\\n  function lt(\\n      uint32 _a,\\n      uint32 _b,\\n      uint32 _timestamp\\n  ) internal pure returns (bool) {\\n      // No need to adjust if there hasn't been an overflow\\n      if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\\n\\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n      return aAdjusted < bAdjusted;\\n  }\\n\\n  /// @notice 32-bit timestamps comparator.\\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n  /// @param _b Timestamp to compare against `_a`.\\n  /// @param _timestamp A timestamp truncated to 32 bits.\\n  /// @return bool Whether `_a` is chronologically <= `_b`.\\n  function lte(\\n      uint32 _a,\\n      uint32 _b,\\n      uint32 _timestamp\\n  ) internal pure returns (bool) {\\n      // No need to adjust if there hasn't been an overflow\\n      if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\\n\\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n      return aAdjusted <= bAdjusted;\\n  }\\n\\n  function checkedSub(\\n      uint32 _a,\\n      uint32 _b,\\n      uint32 _timestamp\\n  ) internal pure returns (uint32) {\\n      // No need to adjust if there hasn't been an overflow\\n      if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\\n\\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n      return uint32(aAdjusted - bAdjusted);\\n  }\\n}\\n\",\"keccak256\":\"0xde8b2a91634534f6e24bf470d87304176b828231d18dbde45f23c972bc173d3c\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4/contracts/libraries/TwabLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\n\\nimport \\\"./OverflowSafeComparator.sol\\\";\\n\\n/// @title Time-Weighted Average Balance Library\\n/// @notice This library allows you to efficiently track a user's historic balance.  You can get a\\n/// @author PoolTogether Inc.\\nlibrary TwabLibrary {\\n  using OverflowSafeComparator for uint32;\\n  using SafeCastUpgradeable for uint256;\\n\\n  /// @notice The maximum number of twab entries\\n  uint16 public constant MAX_CARDINALITY = 65535;\\n\\n  /// @notice Time Weighted Average Balance (TWAB).\\n  /// @param amount `amount` at `timestamp`.\\n  /// @param timestamp Recorded `timestamp`.\\n  struct Twab {\\n    uint224 amount;\\n    uint32 timestamp;\\n  }\\n\\n  /// @notice Ensures the passed cardinality is a minimum of 1\\n  /// @param _cardinality The cardinality to ensure a floor of 1\\n  /// @return Returns 1 if the given cardinality is zero, otherwise return the cardinality\\n  function _minCardinality(uint16 _cardinality) internal pure returns (uint16) {\\n    return _cardinality > 0 ? _cardinality : 1;\\n  }\\n\\n  /// @notice Retrieves TWAB balance.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function getBalanceAt(\\n    uint16 _cardinality,\\n    uint16 _nextTwabIndex,\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _balance,\\n    uint32 _target,\\n    uint32 _time\\n  ) internal view returns (uint256) {\\n    uint16 cardinality = _minCardinality(_cardinality);\\n    uint16 recentIndex = mostRecentIndex(_nextTwabIndex, cardinality);\\n    return getBalanceAt(_twabs, _target, _balance, recentIndex, cardinality, _time);\\n  }\\n\\n  /// @notice Calculates the average balance held by an Account for a given time frame.\\n  /// @param _startTime The start time of the time frame.\\n  /// @param _endTime The end time of the time frame.\\n  /// @param _time The current time\\n  /// @return The average balance that the user held during the time frame.\\n  function getAverageBalanceBetween(\\n    uint16 _cardinality,\\n    uint16 _nextTwabIndex,\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _balance,\\n    uint32 _startTime,\\n    uint32 _endTime,\\n    uint32 _time\\n  ) internal view returns (uint256) {\\n    uint16 card = _minCardinality(_cardinality);\\n    uint16 recentIndex = mostRecentIndex(_nextTwabIndex, card);\\n    return getAverageBalanceBetween(\\n      _twabs,\\n      _balance,\\n      recentIndex,\\n      _startTime,\\n      _endTime,\\n      card,\\n      _time\\n    );\\n  }\\n\\n  /// @notice Decreases an account's balance and records a new twab.\\n  /// @param _balance The balance held since the last update\\n  /// @param _time The current time\\n  /// @param _ttl The time-to-live for TWABs. This is essentially how long twabs are kept around.  History is not available longer than the time-to-live.\\n  /// @return nextTwabIndex\\n  /// @return cardinality\\n  /// @return twab The user's latest TWAB\\n  /// @return isNew Whether the TWAB is new\\n  function update(\\n    uint224 _balance,\\n    uint16 _nextTwabIndex,\\n    uint16 _cardinality,\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint32 _time,\\n    uint32 _ttl\\n  ) internal returns (uint16 nextTwabIndex, uint16 cardinality, Twab memory twab, bool isNew) {\\n    (nextTwabIndex, cardinality, twab, isNew) = nextTwabWithExpiry(\\n      _twabs,\\n      _balance,\\n      _nextTwabIndex,\\n      _cardinality,\\n      _time,\\n      _ttl\\n    );\\n  }\\n\\n  /// @dev A struct that just used internally to bypass the stack variable limitation\\n  struct AvgHelper {\\n    uint16 twabIndex;\\n    uint16 oldestTwabIndex;\\n    uint32 startTime;\\n    uint32 endTime;\\n    uint16 cardinality;\\n  }\\n\\n  /// @notice Returns TWAB index.\\n  /// @dev `twabs` is a circular buffer of `MAX_CARDINALITY` size equal to 32. So the array goes from 0 to 31.\\n  /// @dev In order to navigate the circular buffer, we need to use the modulo operator.\\n  /// @dev For example, if `_index` is equal to 32, `_index % MAX_CARDINALITY` will return 0 and will point to the first element of the array.\\n  /// @param _index Index used to navigate through `twabs` circular buffer.\\n  function wrapCardinality(uint256 _index, uint16 _cardinality) internal pure returns (uint16) {\\n    return uint16(_index % _cardinality);\\n  }\\n\\n  /// @notice Returns the index of the last recorded TWAB\\n  /// @param _nextAvailableIndex The next available twab index.  This will be recorded to next.\\n  /// @param _cardinality The cardinality of the TWAB history.\\n  /// @return The index of the last recorded TWAB\\n  function mostRecentIndex(uint256 _nextAvailableIndex, uint16 _cardinality) internal pure returns (uint16) {\\n    if (_cardinality == 0) {\\n      return 0;\\n    }\\n    return wrapCardinality(_nextAvailableIndex + uint256(_cardinality) - 1, _cardinality);\\n  }\\n\\n  /// @notice Fetches TWABs `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\\n  /// The result may be the same TWAB, or adjacent TWABs.\\n  /// @dev The answer must be contained in the array, used when the target is located within the stored TWAB.\\n  /// boundaries: older than the most recent TWAB and younger, or the same age as, the oldest TWAB.\\n  /// @param _twabs List of TWABs to search through.\\n  /// @param _twabIndex Index of the TWAB to start searching from.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  /// @return beforeOrAt TWAB recorded before, or at, the target.\\n  /// @return atOrAfter TWAB recorded at, or after, the target.\\n  function binarySearch(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint16 _twabIndex,\\n    uint16 _oldestTwabIndex,\\n    uint32 _target,\\n    uint16 _cardinality,\\n    uint32 _time\\n  ) internal view returns (Twab memory beforeOrAt, Twab memory atOrAfter) {\\n    uint256 leftSide = _oldestTwabIndex; // Oldest TWAB\\n    uint256 rightSide = _twabIndex < leftSide ? leftSide + _cardinality - 1 : _twabIndex;\\n    uint256 currentIndex;\\n\\n    while (true) {\\n      currentIndex = (leftSide + rightSide) / 2;\\n      beforeOrAt = _twabs[wrapCardinality(currentIndex, _cardinality)];\\n      uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\\n\\n      // We've landed on an uninitialized timestamp, keep searching higher (more recently)\\n      if (beforeOrAtTimestamp == 0) {\\n        leftSide = currentIndex + 1;\\n        continue;\\n      }\\n\\n      atOrAfter = _twabs[wrapCardinality(currentIndex + 1, _cardinality)];\\n\\n      bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\\n\\n      // Check if we've found the corresponding TWAB\\n      if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\\n        break;\\n      }\\n\\n      // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower\\n      if (!targetAtOrAfter) rightSide = currentIndex - 1;\\n\\n      // Otherwise, we keep searching higher\\n      else leftSide = currentIndex + 1;\\n    }\\n  }\\n\\n  /// @notice Calculates the TWAB for a given timestamp.  It interpolates as necessary.\\n  /// @param _twabs The TWAB history\\n  function calculateTwab(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    Twab memory newestTwab,\\n    Twab memory oldestTwab,\\n    uint16 _twabIndex,\\n    uint16 _oldestTwabIndex,\\n    uint32 targetTimestamp,\\n    uint224 _currentBalance,\\n    uint16 _cardinality,\\n    uint32 _time\\n  ) internal view returns (Twab memory) {\\n    // If `targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\\n    if (newestTwab.timestamp.lt(targetTimestamp, _time)) {\\n      return Twab({\\n        amount: newestTwab.amount + _currentBalance*(targetTimestamp - newestTwab.timestamp),\\n        timestamp: targetTimestamp\\n      });\\n    }\\n\\n    if (newestTwab.timestamp == targetTimestamp) {\\n      return newestTwab;\\n    }\\n\\n    if (oldestTwab.timestamp == targetTimestamp) {\\n      return oldestTwab;\\n    }\\n\\n    // If `targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\\n    if (targetTimestamp.lt(oldestTwab.timestamp, _time)) {\\n      return Twab({\\n        amount: 0,\\n        timestamp: targetTimestamp\\n      });\\n    }\\n\\n    // Otherwise, both timestamps must be surrounded by twabs.\\n    (Twab memory beforeOrAtStart, Twab memory afterOrAtStart) = binarySearch(_twabs, _twabIndex, _oldestTwabIndex, targetTimestamp, _cardinality, _time);\\n\\n    uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) / (afterOrAtStart.timestamp - beforeOrAtStart.timestamp);\\n    uint224 amount = beforeOrAtStart.amount + heldBalance * (targetTimestamp - beforeOrAtStart.timestamp);\\n\\n    return Twab({\\n      amount: amount,\\n      timestamp: targetTimestamp\\n    });\\n  }\\n\\n  function getAverageBalanceBetween(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _currentBalance,\\n    uint16 _twabIndex,\\n    uint32 _startTime,\\n    uint32 _endTime,\\n    uint16 _cardinality,\\n    uint32 _time\\n  ) internal view returns (uint256) {\\n    require(_endTime > _startTime, \\\"start time must be greater than end time\\\");\\n\\n    // Find oldest Twab\\n    uint16 oldestTwabIndex = wrapCardinality(_twabIndex + 1, _cardinality);\\n    Twab memory oldestTwab = _twabs[oldestTwabIndex];\\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n    if (oldestTwab.timestamp == 0) {\\n      oldestTwabIndex = 0;\\n      oldestTwab = _twabs[0];\\n    }\\n\\n    return _getAverageBalanceBetween(\\n      _twabs,\\n      _currentBalance,\\n      AvgHelper({\\n        twabIndex: _twabIndex,\\n        oldestTwabIndex: oldestTwabIndex,\\n        startTime: _startTime,\\n        endTime: _endTime,\\n        cardinality: _cardinality\\n      }),\\n      oldestTwab,\\n      _time\\n    );\\n  }\\n\\n  function _getAverageBalanceBetween(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _currentBalance,\\n    AvgHelper memory helper,\\n    Twab memory _oldestTwab,\\n    uint32 _time\\n  ) private view returns (uint256) {\\n    uint32 endTime = helper.endTime > _time ? _time : helper.endTime;\\n\\n    Twab memory newestTwab = _twabs[helper.twabIndex];\\n\\n    Twab memory startTwab = calculateTwab(\\n      _twabs, newestTwab, _oldestTwab, helper.twabIndex, helper.oldestTwabIndex, helper.startTime, _currentBalance, helper.cardinality, _time\\n    );\\n    Twab memory endTwab = calculateTwab(\\n      _twabs, newestTwab, _oldestTwab, helper.twabIndex, helper.oldestTwabIndex, endTime, _currentBalance, helper.cardinality, _time\\n    );\\n\\n    // Difference in amount / time\\n    return (endTwab.amount - startTwab.amount) / (endTwab.timestamp - startTwab.timestamp);\\n  }\\n\\n  /// @notice Retrieves amount at `_target` timestamp\\n  /// @param _twabs List of TWABs to search through.\\n  /// @param _currentBalance Most recent amount recorded.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  /// @param _twabIndex Most recent TWAB index recorded.\\n  /// @return uint256 TWAB amount at `_target`.\\n  function getBalanceAt(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint32 _target,\\n    uint256 _currentBalance,\\n    uint16 _twabIndex,\\n    uint16 _cardinality,\\n    uint32 _time\\n  ) internal view returns (uint256) {\\n    uint32 targetTimestamp = _target > _time ? _time : _target;\\n\\n    Twab memory afterOrAt;\\n    Twab memory beforeOrAt = _twabs[_twabIndex];\\n\\n    // If `targetTimestamp` is chronologically after the newest TWAB, we can simply return the current balance\\n    if (beforeOrAt.timestamp.lte(targetTimestamp, _time)) {\\n      return _currentBalance;\\n    }\\n\\n    // Now, set before to the oldest TWAB\\n    uint16 oldestTwabIndex = wrapCardinality(_twabIndex + 1, _cardinality);\\n    beforeOrAt = _twabs[oldestTwabIndex];\\n\\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n    if (beforeOrAt.timestamp == 0) {\\n      oldestTwabIndex = 0;\\n      beforeOrAt = _twabs[0];\\n    }\\n\\n    // If `targetTimestamp` is chronologically before the oldest TWAB, we can early return\\n    if (targetTimestamp.lt(beforeOrAt.timestamp, _time)) {\\n      return 0;\\n    }\\n\\n    // Otherwise, we perform the `binarySearch`\\n    (beforeOrAt, afterOrAt) = binarySearch(_twabs, _twabIndex, oldestTwabIndex, _target, _cardinality, _time);\\n\\n    // Difference in amount / time\\n    uint224 differenceInAmount = afterOrAt.amount - beforeOrAt.amount;\\n    uint32 differenceInTime = afterOrAt.timestamp - beforeOrAt.timestamp;\\n\\n    return differenceInAmount / differenceInTime;\\n  }\\n\\n  /// @notice Records a new TWAB.\\n  /// @param _currentBalance Current `amount`.\\n  /// @return New TWAB that was recorded.\\n  function nextTwab(\\n    Twab memory _currentTwab,\\n    uint256 _currentBalance,\\n    uint32 _time\\n  ) internal pure returns (Twab memory) {\\n    // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\\n    return Twab({\\n      amount: (uint256(_currentTwab.amount) + (_currentBalance * (_time.checkedSub(_currentTwab.timestamp, _time)))).toUint224(),\\n      timestamp: _time\\n    });\\n  }\\n\\n  function calculateNextWithExpiry(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint16 _nextTwabIndex,\\n    uint16 _cardinality,\\n    uint32 _time,\\n    uint32 _ttl\\n  ) internal view returns (uint16 nextAvailableTwabIndex, uint16 nextCardinality) {\\n    uint16 cardinality = _cardinality > 0 ? _cardinality : 1;\\n/*\\n    TTL: 100\\n\\n    Example 1:\\n      next twab timestamp: 100\\n\\n      existing twab timestamps:\\n      0: 10\\n      1: 90\\n\\n      we should not eliminate 0 or else the history will be 10 seconds long\\n\\n    Example 2:\\n\\n      next twab timestamp: 105\\n\\n      existing twab timestamps\\n      0: 1\\n      1: 5\\n\\n      We can eliminate 0, because the history will be 100 seconds long\\n\\n    Q: when do we eliminate the oldest twab?\\n    A: when current time - second oldest twab >= time to live\\n    */\\n\\n    Twab memory secondOldestTwab;\\n    // if there are two or more records (cardinality is always one greater than # of records)\\n    if (cardinality > 2) {\\n      // get the second oldest twab\\n      secondOldestTwab = _twabs[wrapCardinality(uint32(_nextTwabIndex) + 1, cardinality)];\\n    }\\n\\n    nextCardinality = cardinality;\\n    if (secondOldestTwab.timestamp == 0 || _time.checkedSub(secondOldestTwab.timestamp, _time) < _ttl) {\\n      nextCardinality = cardinality < MAX_CARDINALITY ? cardinality + 1 : MAX_CARDINALITY;\\n    }\\n\\n    nextAvailableTwabIndex = wrapCardinality(uint32(_nextTwabIndex) + 1, nextCardinality);\\n  }\\n\\n  function nextTwabWithExpiry(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _balance,\\n    uint16 _nextTwabIndex,\\n    uint16 _cardinality,\\n    uint32 _time,\\n    uint32 _maxLifetime\\n  ) internal returns (uint16 nextAvailableTwabIndex, uint16 nextCardinality, Twab memory twab, bool isNew) {\\n    Twab memory newestTwab = _twabs[mostRecentIndex(_nextTwabIndex, _cardinality)];\\n\\n    // if we're in the same block, return\\n    if (newestTwab.timestamp == _time) {\\n      return (_nextTwabIndex, _cardinality, newestTwab, false);\\n    }\\n\\n    (nextAvailableTwabIndex, nextCardinality) = calculateNextWithExpiry(_twabs, _nextTwabIndex, _cardinality, _time, _maxLifetime);\\n\\n    Twab memory newTwab = nextTwab(\\n      newestTwab,\\n      _balance,\\n      _time\\n    );\\n\\n    _twabs[_nextTwabIndex] = newTwab;\\n\\n    return (nextAvailableTwabIndex, nextCardinality, newTwab, true);\\n  }\\n}\\n\",\"keccak256\":\"0xed58cf31aef1fcc5a26fcbaffe2c4e69e66bbe86976d40b93e2ef7060b113385\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4/contracts/token/ControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\nimport \\\"./ControlledTokenInterface.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ncontract ControlledToken is ERC20PermitUpgradeable, ControlledTokenInterface {\\n\\n  /// @dev Emitted when an instance is initialized\\n  event Initialized(\\n    string _name,\\n    string _symbol,\\n    uint8 _decimals,\\n    address _controller\\n  );\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  address public override controller;\\n\\n  /// @notice ERC20 controlled token decimals.\\n  uint8 private _decimals;\\n\\n  /// @notice Initializes the Controlled Token with Token Details and the Controller\\n  /// @param _name The name of the Token\\n  /// @param _symbol The symbol for the Token\\n  /// @param decimals_ The number of decimals for the Token\\n  /// @param _controller Address of the Controller contract for minting & burning\\n  function initialize(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 decimals_,\\n    address _controller\\n  )\\n    public\\n    virtual\\n    initializer\\n  {\\n    require(address(_controller) != address(0), \\\"ControlledToken/controller-not-zero\\\");\\n    controller = _controller;\\n\\n    __ERC20_init(_name, _symbol);\\n    __ERC20Permit_init(\\\"PoolTogether ControlledToken\\\");\\n    _decimals = decimals_;\\n\\n    emit Initialized(\\n      _name,\\n      _symbol,\\n      _decimals,\\n      _controller\\n    );\\n  }\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param _user Address of the receiver of the minted tokens\\n  /// @param _amount Amount of tokens to mint\\n  function controllerMint(address _user, uint256 _amount) external virtual override onlyController {\\n    _mint(_user, _amount);\\n  }\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurn(address _user, uint256 _amount) external virtual override onlyController {\\n    _burn(_user, _amount);\\n  }\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param _operator Address of the operator performing the burn action via the controller contract\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external virtual override onlyController {\\n    if (_operator != _user) {\\n      uint256 decreasedAllowance = allowance(_user, _operator) - _amount;\\n      _approve(_user, _operator, decreasedAllowance);\\n    }\\n    _burn(_user, _amount);\\n  }\\n\\n  /// @notice Returns the ERC20 controlled token decimals.\\n  /// @dev This value should be equal to the decimals of the token used to deposit into the pool.\\n  /// @return uint8 decimals.\\n  function decimals() public view virtual override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /// @dev Function modifier to ensure that the caller is the controller contract\\n  modifier onlyController {\\n    require(_msgSender() == address(controller), \\\"ControlledToken/only-controller\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2c8151ee5d71fca61f64889d525c358ea1b33dc583528519f8619f7a314caab8\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4/contracts/token/ControlledTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ninterface ControlledTokenInterface is IERC20Upgradeable {\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  function controller() external view returns (address);\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param _user Address of the receiver of the minted tokens\\n  /// @param _amount Amount of tokens to mint\\n  function controllerMint(address _user, uint256 _amount) external;\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurn(address _user, uint256 _amount) external;\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param _operator Address of the operator performing the burn action via the controller contract\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x66e74431128c44eac8e674367b3b1b488049ba18b8ff75d92a3a762ef0e62d76\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613fbb806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063631b5dfb1161010457806395d89b41116100a2578063d505accf11610071578063d505accf146104f9578063dd62ed3e1461050c578063de7ea79d14610545578063f77c47911461055857600080fd5b806395d89b41146104b8578063a457c2d7146104c0578063a9059cbb146104d3578063cf42dca8146104e657600080fd5b80638200d873116100de5780638200d873146104305780638d22ea2a1461044c5780638f02fee41461049257806390596dd1146104a557600080fd5b8063631b5dfb146103f757806370a082311461040a5780637ecebe001461041d57600080fd5b80633613f9211161017c578063405e22ad1161014b578063405e22ad1461039c5780634382b0f6146103bc5780635c19a95c146103cf5780635d7b0758146103e457600080fd5b80633613f921146103255780633644e5151461034457806336bb2a381461034c578063395093511461038957600080fd5b806323b872dd116101b857806323b872dd1461023b57806326ca8adb1461024e5780632aceb53414610261578063313ce5671461031057600080fd5b806306fdde03146101df578063095ea7b3146101fd57806318160ddd14610220575b600080fd5b6101e761056b565b6040516101f49190613cc8565b60405180910390f35b61021061020b366004613a6a565b6105fd565b60405190151581526020016101f4565b60cf546001600160e01b03165b6040519081526020016101f4565b610210610249366004613933565b610614565b61022d61025c366004613a6a565b6106da565b6102d961026f3660046138e5565b6040805160608082018352600080835260208084018290529284018190526001600160a01b0394909416845260cd82529282902082519384018352546001600160e01b038116845261ffff600160e01b8204811692850192909252600160f01b9004169082015290565b6040805182516001600160e01b0316815260208084015161ffff9081169183019190915292820151909216908201526060016101f4565b60ce5460405160ff90911681526020016101f4565b61032f62dd7c0081565b60405163ffffffff90911681526020016101f4565b61022d610747565b61035f61035a366004613a2c565b610756565b6040805182516001600160e01b0316815260209283015163ffffffff1692810192909252016101f4565b610210610397366004613a6a565b6107cc565b6103af6103aa3660046139d9565b610808565b6040516101f49190613c37565b61022d6103ca366004613b99565b610928565b6103e26103dd3660046138e5565b610978565b005b6103e26103f2366004613a6a565b610a83565b6103e2610405366004613933565b610af4565b61022d6104183660046138e5565b610bc1565b61022d61042b3660046138e5565b610be1565b61043961ffff81565b60405161ffff90911681526020016101f4565b61047a61045a3660046138e5565b6001600160a01b039081166000908152620100cf60205260409020541690565b6040516001600160a01b0390911681526020016101f4565b61022d6104a0366004613a94565b610bff565b6103e26104b3366004613a6a565b610c6e565b6101e7610cdb565b6102106104ce366004613a6a565b610cea565b6102106104e1366004613a6a565b610d9b565b6103af6104f4366004613ac7565b610da8565b6103e261050736600461396f565b610e8a565b61022d61051a366004613900565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6103e2610553366004613b09565b610fd0565b60cc5461047a906001600160a01b031681565b60606036805461057a90613ea7565b80601f01602080910402602001604051908101604052809291908181526020018280546105a690613ea7565b80156105f35780601f106105c8576101008083540402835291602001916105f3565b820191906000526020600020905b8154815290600101906020018083116105d657829003601f168201915b5050505050905090565b600061060a3384846112f2565b5060015b92915050565b600061062184848461144a565b6001600160a01b0384166000908152603460209081526040808320338452909152902054828110156106c05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6106cd85338584036112f2565b60019150505b9392505050565b6001600160a01b038216600090815260cd60209081526040808320815160608101835281546001600160e01b038116825261ffff600160e01b8204811695830195909552600160f01b9004909316918301919091529061073f90600183019085611723565b949350505050565b600061075161173f565b905090565b60408051808201909152600080825260208201526001600160a01b038316600090815260cd6020526040902060010161ffff80841690811061079a5761079a613f37565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201529392505050565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909161060a918590610803908690613d6c565b6112f2565b60608160008167ffffffffffffffff81111561082657610826613f4d565b60405190808252806020026020018201604052801561084f578160200160208202803683370190505b506001600160a01b038716600090815260cd60209081526040808320815160608101835281546001600160e01b038116825261ffff600160e01b8204811695830195909552600160f01b900490931691830191909152929350905b8481101561091b576108ec83600101838a8a858181106108cc576108cc613f37565b90506020020160208101906108e19190613b99565b63ffffffff16611723565b8482815181106108fe576108fe613f37565b60209081029190910101528061091381613edc565b9150506108aa565b5091979650505050505050565b6040805160608101825260cf546001600160e01b038116825261ffff600160e01b820481166020840152600160f01b909104169181019190915260009061060e9060d09063ffffffff8516611723565b336000908152620100d06020908152604080832054620100cf909252909120546001600160a01b031680156109c0576109bb3382846001600160e01b03166117ba565b6109d4565b6109d43333846001600160e01b03166117ba565b6001600160a01b038316156109fc576109f73384846001600160e01b0316611878565b610a10565b610a103333846001600160e01b0316611878565b336000818152620100cf602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03881690811790915590519092917f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea291a3505050565b60cc546001600160a01b0316336001600160a01b031614610ae65760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106b7565b610af0828261189c565b5050565b60cc546001600160a01b0316336001600160a01b031614610b575760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106b7565b816001600160a01b0316836001600160a01b031614610bb2576001600160a01b038281166000908152603460209081526040808320938716835292905290812054610ba3908390613e73565b9050610bb08385836112f2565b505b610bbc8282611a3c565b505050565b6001600160a01b0381166000908152620100d0602052604081205461060e565b6001600160a01b03811660009081526099602052604081205461060e565b6001600160a01b038316600090815260cd60209081526040808320815160608101835281546001600160e01b038116825261ffff600160e01b8204811695830195909552600160f01b90049093169183019190915290610c659060018301908686611c96565b95945050505050565b60cc546001600160a01b0316336001600160a01b031614610cd15760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106b7565b610af08282611a3c565b60606037805461057a90613ea7565b3360009081526034602090815260408083206001600160a01b038616845290915281205482811015610d845760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106b7565b610d9133858584036112f2565b5060019392505050565b600061060a33848461144a565b60608160008167ffffffffffffffff811115610dc657610dc6613f4d565b604051908082528060200260200182016040528015610def578160200160208202803683370190505b506040805160608101825260cf546001600160e01b038116825261ffff600160e01b820481166020840152600160f01b909104169181019190915290915060005b83811015610e7f57610e5060d0838989858181106108cc576108cc613f37565b838281518110610e6257610e62613f37565b602090810291909101015280610e7781613edc565b915050610e30565b509095945050505050565b83421115610eda5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016106b7565b6000609a54888888610eeb8c611cb3565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610f4682611cdb565b90506000610f5682878787611d44565b9050896001600160a01b0316816001600160a01b031614610fb95760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016106b7565b610fc48a8a8a6112f2565b50505050505050505050565b600054610100900460ff1680610fe9575060005460ff16155b61104c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff1615801561106e576000805461ffff19166101011790555b6110e187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250611f1a92505050565b61111f6040518060400160405280601381526020017f506f6f6c546f676574686572205469636b657400000000000000000000000000815250611fe0565b60008360ff16116111725760405162461bcd60e51b815260206004820152601760248201527f5469636b65742f646563696d616c732d67742d7a65726f00000000000000000060448201526064016106b7565b60ce80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff85161790556001600160a01b03821661121b5760405162461bcd60e51b815260206004820152602260248201527f5469636b65742f636f6e74726f6c6c65722d6e6f742d7a65726f2d616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b61129687878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284376000920191909152505060ce5460ff1691508690506120e3565b7f18bb14f696b97c9ff8d44ac723d7b0663bd32189c6e86b9f4cce10bceccbf4898787878787876040516112cf96959493929190613c7b565b60405180910390a180156112e9576000805461ff00191690555b50505050505050565b6001600160a01b03831661136d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106b7565b6001600160a01b0382166113e95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166114c65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106b7565b6001600160a01b0382166115425760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b80826001600160a01b0316846001600160a01b0316146116d0576001600160a01b0384166000908152620100d060205260409020546001600160e01b0382168110156115f65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106b7565b6001600160a01b038086166000908152620100d060205260408082206001600160e01b038616808603909155928716825281208054909190611639908490613d6c565b90915550506001600160a01b038086166000908152620100cf60205260409020541680156116715761166c8682866117ba565b61167c565b61167c8687866117ba565b6001600160a01b038086166000908152620100cf60205260409020541680156116b8576116b38682866001600160e01b0316611878565b6116cc565b6116cc8687866001600160e01b0316611878565b5050505b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161171591815260200190565b60405180910390a350505050565b600061073f83604001518460200151868660000151864261231c565b60006107517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61176e60655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b600060cd6000846001600160a01b03166001600160a01b0316815260200190815260200160002090506000806118098385604051806060016040528060228152602001613f6460229139612362565b915091508015611870576040805183516001600160e01b0316815260208085015163ffffffff16908201526001600160a01b0380881692908916917f56bf5251c21af3be0462e65380f02036c247ea4203fda153f3a9c3e7f8f9318d910160405180910390a35b505050505050565b6001600160a01b038216600090815260cd60205260408120908061180983856124d7565b6001600160a01b0382166118f25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106b7565b60006118fd82612619565b90506001600160a01b0383166000908152620100d06020526040812080546001600160e01b0384169290611932908490613d6c565b90915550600090508061194f60cf6001600160e01b0385166124d7565b9150915080156119a6576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a15b6001600160a01b038086166000908152620100cf60205260409020541680156119e2576119dd8682866001600160e01b0316611878565b6119f6565b6119f68687866001600160e01b0316611878565b6040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3611870565b6001600160a01b038216611ab85760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b6000611ac382612619565b9050600080611af560cf846001600160e01b0316604051806060016040528060228152602001613f6460229139612362565b915091508015611b4c576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a15b6001600160a01b0385166000908152620100d060205260409020546001600160e01b038416811015611be65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b6001600160a01b038087166000908152620100d0602090815260408083206001600160e01b03891686039055620100cf909152902054168015611c3c57611c378782876001600160e01b03166117ba565b611c50565b611c508788876001600160e01b03166117ba565b6040518681526000906001600160a01b038916907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36112e9565b6000610c658460400151856020015187876000015187874261269c565b6001600160a01b03811660009081526099602052604090208054600181018255905b50919050565b600061060e611ce861173f565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611ddc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b8360ff16601b1480611df157508360ff16601c145b611e635760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611eb7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610c655760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106b7565b600054610100900460ff1680611f33575060005460ff16155b611f965760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff16158015611fb8576000805461ffff19166101011790555b611fc06126d9565b611fca838361278c565b8015610bbc576000805461ff0019169055505050565b600054610100900460ff1680611ff9575060005460ff16155b61205c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff1615801561207e576000805461ffff19166101011790555b6120866126d9565b6120c5826040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250612868565b6120ce82612939565b8015610af0576000805461ff00191690555050565b600054610100900460ff16806120fc575060005460ff16155b61215f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff16158015612181576000805461ffff19166101011790555b6001600160a01b0382166121fd5760405162461bcd60e51b815260206004820152602360248201527f436f6e74726f6c6c6564546f6b656e2f636f6e74726f6c6c65722d6e6f742d7a60448201527f65726f000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b60cc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841617905561223a8585611f1a565b6122786040518060400160405280601c81526020017f506f6f6c546f67657468657220436f6e74726f6c6c6564546f6b656e00000000815250611fe0565b60cc80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060ff868116820292909217928390556040517f41bc1176d7b9b7bc036f385a7e5b08b0662a7afa0844af8a599ad431150227e1936122fb938a938a93920416908790613cdb565b60405180910390a18015612315576000805461ff00191690555b5050505050565b60008061232888612a10565b9050600061233a8861ffff1683612a24565b90506123538786886001600160e01b0316848689612a5a565b925050505b9695505050505050565b60408051808201909152600080825260208201526040805160608101825285546001600160e01b03811680835261ffff600160e01b830481166020850152600160f01b909204909116928201929092526000918291829186908811156123db5760405162461bcd60e51b81526004016106b79190613cc8565b506123fc8160000151826020015183604001518b6001014262dd7c00612c28565b6040805160608101909152855192995090975092955090935081906124349061242f908b906001600160e01b0316613e73565b612619565b6001600160e01b03908116825261ffff95861660208084019190915294861660409283015282518b549584015193909201518616600160f01b027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909616600160e01b027fffff0000000000000000000000000000000000000000000000000000000000009095169116179290921791909116919091179095559094909350915050565b60408051808201909152600080825260208201526040805160608101825284546001600160e01b03811680835261ffff600160e01b8304811660208501819052600160f01b909304169383018490526000938493849390926125449290919060018b014262dd7c00612c28565b6040805160608101909152855192995090975092955090935081906125779061242f908a906001600160e01b0316613d6c565b6001600160e01b03908116825261ffff95861660208084019190915294861660409283015282518a549584015193909201518616600160f01b027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909616600160e01b027fffff00000000000000000000000000000000000000000000000000000000000090951691161792909217919091169190911790945590939092509050565b60006001600160e01b038211156126985760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f323420626974730000000000000000000000000000000000000000000000000060648201526084016106b7565b5090565b6000806126a889612a10565b905060006126ba8961ffff1683612a24565b90506126cb8888838989878a612c65565b9a9950505050505050505050565b600054610100900460ff16806126f2575060005460ff16155b6127555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff16158015612777576000805461ffff19166101011790555b8015612789576000805461ff00191690555b50565b600054610100900460ff16806127a5575060005460ff16155b6128085760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff1615801561282a576000805461ffff19166101011790555b825161283d90603690602086019061379a565b50815161285190603790602085019061379a565b508015610bbc576000805461ff0019169055505050565b600054610100900460ff1680612881575060005460ff16155b6128e45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff16158015612906576000805461ffff19166101011790555b82516020808501919091208351918401919091206065919091556066558015610bbc576000805461ff0019169055505050565b600054610100900460ff1680612952575060005460ff16155b6129b55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff161580156129d7576000805461ffff19166101011790555b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9609a558015610af0576000805461ff00191690555050565b6000808261ffff161161269857600161060e565b600061ffff8216612a375750600061060e565b6106d36001612a4a61ffff851686613d6c565b612a549190613e73565b83612dcc565b6000808263ffffffff168763ffffffff1611612a765786612a78565b825b60408051808201909152600080825260208201529091506000898761ffff1661ffff8110612aa857612aa8613f37565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b909104811660208301819052919250612ae9919085908890612ddc16565b15612af957879350505050612358565b6000612b13612b09896001613d24565b61ffff1688612dcc565b90508a8161ffff1661ffff8110612b2c57612b2c613f37565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909250612b8f5750506040805180820190915289546001600160e01b0381168252600160e01b900463ffffffff16602082015260005b612bae8260200151878663ffffffff16612ead9092919063ffffffff16565b15612bc0576000945050505050612358565b612bce8b89838d8b8b612f7c565b81518151919550919350600091612be491613e4b565b9050600083602001518560200151612bfc9190613e8a565b9050612c0e63ffffffff821683613dc3565b6001600160e01b03169d9c50505050505050505050505050565b604080518082019091526000808252602082018190529081906000612c51878b8b8b8a8a613141565b929d919c509a509098509650505050505050565b60008463ffffffff168463ffffffff1611612ce85760405162461bcd60e51b815260206004820152602860248201527f73746172742074696d65206d7573742062652067726561746572207468616e2060448201527f656e642074696d6500000000000000000000000000000000000000000000000060648201526084016106b7565b6000612d02612cf8886001613d24565b61ffff1685612dcc565b90506000898261ffff1661ffff8110612d1d57612d1d613f37565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909150612d815750506040805180820190915288546001600160e01b0381168252600160e01b900463ffffffff1660208201526000905b6126cb8a8a6040518060a001604052808c61ffff1681526020018661ffff1681526020018b63ffffffff1681526020018a63ffffffff1681526020018961ffff168152508488613249565b60006106d361ffff831684613ef7565b60008163ffffffff168463ffffffff1611158015612e0657508163ffffffff168363ffffffff1611155b15612e22578263ffffffff168463ffffffff16111590506106d3565b60008263ffffffff168563ffffffff1611612e5157612e4c63ffffffff8616640100000000613da3565b612e59565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff1611612e9157612e8c63ffffffff8616640100000000613da3565b612e99565b8463ffffffff165b64ffffffffff169091111595945050505050565b60008163ffffffff168463ffffffff1611158015612ed757508163ffffffff168363ffffffff1611155b15612ef2578263ffffffff168463ffffffff161090506106d3565b60008263ffffffff168563ffffffff1611612f2157612f1c63ffffffff8616640100000000613da3565b612f29565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff1611612f6157612f5c63ffffffff8616640100000000613da3565b612f69565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008661ffff1690506000818961ffff1610612fc4578861ffff16612fde565b6001612fd461ffff881684613d6c565b612fde9190613e73565b905060005b6002612fef8385613d6c565b612ff99190613de9565b90508a6130068289612dcc565b61ffff1661ffff811061301b5761301b613f37565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909550806130635761305b826001613d6c565b935050612fe3565b8b613078613072846001613d6c565b8a612dcc565b61ffff1661ffff811061308d5761308d613f37565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b909104811660208301529095506000906130d290838116908c908b90612ddc16565b90508080156130fb57506130fb8660200151898c63ffffffff16612ddc9092919063ffffffff16565b15613107575050613133565b8061311e57613117600184613e73565b935061312c565b613129836001613d6c565b94505b5050612fe3565b505050965096945050505050565b604080518082019091526000808252602082018190529081906000808a61316c8a61ffff168a612a24565b61ffff1661ffff811061318157613181613f37565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b909104811660208301819052919250881614156131cc5788945087935091506000905061323c565b6131d98b8a8a8a8a613359565b909550935060006131f4826001600160e01b038d168a613483565b9050808c8b61ffff1661ffff811061320e5761320e613f37565b825160209093015163ffffffff16600160e01b026001600160e01b0390931692909217910155925060019150505b9650965096509692505050565b6000808263ffffffff16856060015163ffffffff161161326d57846060015161326f565b825b9050600087866000015161ffff1661ffff811061328e5761328e613f37565b60408051808201825291909201546001600160e01b0381168252600160e01b900463ffffffff166020808301919091528851908901519289015160808a01519294506000936132e7938d9387938c9391928f908d61350a565b905060006133088a84898b600001518c60200151898f8f608001518e61350a565b90508160200151816020015161331e9190613e8a565b63ffffffff16826000015182600001516133389190613e4b565b6133429190613dc3565b6001600160e01b03169a9950505050505050505050565b6000806000808661ffff1611613370576001613372565b855b604080518082019091526000808252602082015290915060028261ffff1611156133f857886133b56133a961ffff8b166001613d84565b63ffffffff1684612dcc565b61ffff1661ffff81106133ca576133ca613f37565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff16602082015290505b819250806020015163ffffffff166000148061343d57508463ffffffff166134358260200151888963ffffffff166136d09092919063ffffffff16565b63ffffffff16105b156134635761ffff828116106134555761ffff613460565b613460826001613d24565b92505b6134756133a961ffff8a166001613d84565b935050509550959350505050565b604080518082019091526000808252602082015260405180604001604052806134e96134c48760200151868763ffffffff166136d09092919063ffffffff16565b6134d49063ffffffff1687613e2c565b875161242f91906001600160e01b0316613d6c565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b604080518082019091526000808252602082015261353d85838b6020015163ffffffff16612ead9092919063ffffffff16565b156135985760405180604001604052808a602001518761355d9190613e8a565b61356d9063ffffffff1687613dfd565b8b516135799190613d4a565b6001600160e01b031681526020018663ffffffff1681525090506136c3565b8463ffffffff16896020015163ffffffff1614156135b75750876136c3565b8463ffffffff16886020015163ffffffff1614156135d65750866136c3565b6135f58860200151838763ffffffff16612ead9092919063ffffffff16565b1561361a5750604080518082019091526000815263ffffffff851660208201526136c3565b60008061362b8c8a8a8a8989612f7c565b915091506000826020015182602001516136459190613e8a565b63ffffffff168360000151836000015161365f9190613e4b565b6136699190613dc3565b9050600083602001518961367d9190613e8a565b61368d9063ffffffff1683613dfd565b84516136999190613d4a565b604080518082019091526001600160e01b03909116815263ffffffff8a1660208201529450505050505b9998505050505050505050565b60008163ffffffff168463ffffffff16111580156136fa57508163ffffffff168363ffffffff1611155b15613710576137098385613e8a565b90506106d3565b60008263ffffffff168563ffffffff161161373f5761373a63ffffffff8616640100000000613da3565b613747565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff161161377f5761377a63ffffffff8616640100000000613da3565b613787565b8463ffffffff165b64ffffffffff1690506123588183613e73565b8280546137a690613ea7565b90600052602060002090601f0160209004810192826137c8576000855561380e565b82601f106137e157805160ff191683800117855561380e565b8280016001018555821561380e579182015b8281111561380e5782518255916020019190600101906137f3565b506126989291505b808211156126985760008155600101613816565b80356001600160a01b038116811461384157600080fd5b919050565b60008083601f84011261385857600080fd5b50813567ffffffffffffffff81111561387057600080fd5b6020830191508360208260051b850101111561388b57600080fd5b9250929050565b60008083601f8401126138a457600080fd5b50813567ffffffffffffffff8111156138bc57600080fd5b60208301915083602082850101111561388b57600080fd5b803560ff8116811461384157600080fd5b6000602082840312156138f757600080fd5b6106d38261382a565b6000806040838503121561391357600080fd5b61391c8361382a565b915061392a6020840161382a565b90509250929050565b60008060006060848603121561394857600080fd5b6139518461382a565b925061395f6020850161382a565b9150604084013590509250925092565b600080600080600080600060e0888a03121561398a57600080fd5b6139938861382a565b96506139a16020890161382a565b955060408801359450606088013593506139bd608089016138d4565b925060a0880135915060c0880135905092959891949750929550565b6000806000604084860312156139ee57600080fd5b6139f78461382a565b9250602084013567ffffffffffffffff811115613a1357600080fd5b613a1f86828701613846565b9497909650939450505050565b60008060408385031215613a3f57600080fd5b613a488361382a565b9150602083013561ffff81168114613a5f57600080fd5b809150509250929050565b60008060408385031215613a7d57600080fd5b613a868361382a565b946020939093013593505050565b600080600060608486031215613aa957600080fd5b613ab28461382a565b95602085013595506040909401359392505050565b60008060208385031215613ada57600080fd5b823567ffffffffffffffff811115613af157600080fd5b613afd85828601613846565b90969095509350505050565b60008060008060008060808789031215613b2257600080fd5b863567ffffffffffffffff80821115613b3a57600080fd5b613b468a838b01613892565b90985096506020890135915080821115613b5f57600080fd5b50613b6c89828a01613892565b9095509350613b7f9050604088016138d4565b9150613b8d6060880161382a565b90509295509295509295565b600060208284031215613bab57600080fd5b813563ffffffff811681146106d357600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6000815180845260005b81811015613c1057602081850181015186830182015201613bf4565b81811115613c22576000602083870101525b50601f01601f19169290920160200192915050565b6020808252825182820181905260009190848201906040850190845b81811015613c6f57835183529284019291840191600101613c53565b50909695505050505050565b608081526000613c8f60808301888a613bbf565b8281036020840152613ca2818789613bbf565b91505060ff841660408301526001600160a01b0383166060830152979650505050505050565b6020815260006106d36020830184613bea565b608081526000613cee6080830187613bea565b8281036020840152613d008187613bea565b91505060ff841660408301526001600160a01b038316606083015295945050505050565b600061ffff808316818516808303821115613d4157613d41613f0b565b01949350505050565b60006001600160e01b03808316818516808303821115613d4157613d41613f0b565b60008219821115613d7f57613d7f613f0b565b500190565b600063ffffffff808316818516808303821115613d4157613d41613f0b565b600064ffffffffff808316818516808303821115613d4157613d41613f0b565b60006001600160e01b0380841680613ddd57613ddd613f21565b92169190910492915050565b600082613df857613df8613f21565b500490565b60006001600160e01b0380831681851681830481118215151615613e2357613e23613f0b565b02949350505050565b6000816000190483118215151615613e4657613e46613f0b565b500290565b60006001600160e01b0383811690831681811015613e6b57613e6b613f0b565b039392505050565b600082821015613e8557613e85613f0b565b500390565b600063ffffffff83811690831681811015613e6b57613e6b613f0b565b600181811c90821680613ebb57607f821691505b60208210811415611cd557634e487b7160e01b600052602260045260246000fd5b6000600019821415613ef057613ef0613f0b565b5060010190565b600082613f0657613f06613f21565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365a26469706673582212204bfda4ca9a253212432605378ae9d664d016101f15fbc5576e5d163b3eff9e2f64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063631b5dfb1161010457806395d89b41116100a2578063d505accf11610071578063d505accf146104f9578063dd62ed3e1461050c578063de7ea79d14610545578063f77c47911461055857600080fd5b806395d89b41146104b8578063a457c2d7146104c0578063a9059cbb146104d3578063cf42dca8146104e657600080fd5b80638200d873116100de5780638200d873146104305780638d22ea2a1461044c5780638f02fee41461049257806390596dd1146104a557600080fd5b8063631b5dfb146103f757806370a082311461040a5780637ecebe001461041d57600080fd5b80633613f9211161017c578063405e22ad1161014b578063405e22ad1461039c5780634382b0f6146103bc5780635c19a95c146103cf5780635d7b0758146103e457600080fd5b80633613f921146103255780633644e5151461034457806336bb2a381461034c578063395093511461038957600080fd5b806323b872dd116101b857806323b872dd1461023b57806326ca8adb1461024e5780632aceb53414610261578063313ce5671461031057600080fd5b806306fdde03146101df578063095ea7b3146101fd57806318160ddd14610220575b600080fd5b6101e761056b565b6040516101f49190613cc8565b60405180910390f35b61021061020b366004613a6a565b6105fd565b60405190151581526020016101f4565b60cf546001600160e01b03165b6040519081526020016101f4565b610210610249366004613933565b610614565b61022d61025c366004613a6a565b6106da565b6102d961026f3660046138e5565b6040805160608082018352600080835260208084018290529284018190526001600160a01b0394909416845260cd82529282902082519384018352546001600160e01b038116845261ffff600160e01b8204811692850192909252600160f01b9004169082015290565b6040805182516001600160e01b0316815260208084015161ffff9081169183019190915292820151909216908201526060016101f4565b60ce5460405160ff90911681526020016101f4565b61032f62dd7c0081565b60405163ffffffff90911681526020016101f4565b61022d610747565b61035f61035a366004613a2c565b610756565b6040805182516001600160e01b0316815260209283015163ffffffff1692810192909252016101f4565b610210610397366004613a6a565b6107cc565b6103af6103aa3660046139d9565b610808565b6040516101f49190613c37565b61022d6103ca366004613b99565b610928565b6103e26103dd3660046138e5565b610978565b005b6103e26103f2366004613a6a565b610a83565b6103e2610405366004613933565b610af4565b61022d6104183660046138e5565b610bc1565b61022d61042b3660046138e5565b610be1565b61043961ffff81565b60405161ffff90911681526020016101f4565b61047a61045a3660046138e5565b6001600160a01b039081166000908152620100cf60205260409020541690565b6040516001600160a01b0390911681526020016101f4565b61022d6104a0366004613a94565b610bff565b6103e26104b3366004613a6a565b610c6e565b6101e7610cdb565b6102106104ce366004613a6a565b610cea565b6102106104e1366004613a6a565b610d9b565b6103af6104f4366004613ac7565b610da8565b6103e261050736600461396f565b610e8a565b61022d61051a366004613900565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6103e2610553366004613b09565b610fd0565b60cc5461047a906001600160a01b031681565b60606036805461057a90613ea7565b80601f01602080910402602001604051908101604052809291908181526020018280546105a690613ea7565b80156105f35780601f106105c8576101008083540402835291602001916105f3565b820191906000526020600020905b8154815290600101906020018083116105d657829003601f168201915b5050505050905090565b600061060a3384846112f2565b5060015b92915050565b600061062184848461144a565b6001600160a01b0384166000908152603460209081526040808320338452909152902054828110156106c05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6106cd85338584036112f2565b60019150505b9392505050565b6001600160a01b038216600090815260cd60209081526040808320815160608101835281546001600160e01b038116825261ffff600160e01b8204811695830195909552600160f01b9004909316918301919091529061073f90600183019085611723565b949350505050565b600061075161173f565b905090565b60408051808201909152600080825260208201526001600160a01b038316600090815260cd6020526040902060010161ffff80841690811061079a5761079a613f37565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201529392505050565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909161060a918590610803908690613d6c565b6112f2565b60608160008167ffffffffffffffff81111561082657610826613f4d565b60405190808252806020026020018201604052801561084f578160200160208202803683370190505b506001600160a01b038716600090815260cd60209081526040808320815160608101835281546001600160e01b038116825261ffff600160e01b8204811695830195909552600160f01b900490931691830191909152929350905b8481101561091b576108ec83600101838a8a858181106108cc576108cc613f37565b90506020020160208101906108e19190613b99565b63ffffffff16611723565b8482815181106108fe576108fe613f37565b60209081029190910101528061091381613edc565b9150506108aa565b5091979650505050505050565b6040805160608101825260cf546001600160e01b038116825261ffff600160e01b820481166020840152600160f01b909104169181019190915260009061060e9060d09063ffffffff8516611723565b336000908152620100d06020908152604080832054620100cf909252909120546001600160a01b031680156109c0576109bb3382846001600160e01b03166117ba565b6109d4565b6109d43333846001600160e01b03166117ba565b6001600160a01b038316156109fc576109f73384846001600160e01b0316611878565b610a10565b610a103333846001600160e01b0316611878565b336000818152620100cf602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03881690811790915590519092917f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea291a3505050565b60cc546001600160a01b0316336001600160a01b031614610ae65760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106b7565b610af0828261189c565b5050565b60cc546001600160a01b0316336001600160a01b031614610b575760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106b7565b816001600160a01b0316836001600160a01b031614610bb2576001600160a01b038281166000908152603460209081526040808320938716835292905290812054610ba3908390613e73565b9050610bb08385836112f2565b505b610bbc8282611a3c565b505050565b6001600160a01b0381166000908152620100d0602052604081205461060e565b6001600160a01b03811660009081526099602052604081205461060e565b6001600160a01b038316600090815260cd60209081526040808320815160608101835281546001600160e01b038116825261ffff600160e01b8204811695830195909552600160f01b90049093169183019190915290610c659060018301908686611c96565b95945050505050565b60cc546001600160a01b0316336001600160a01b031614610cd15760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106b7565b610af08282611a3c565b60606037805461057a90613ea7565b3360009081526034602090815260408083206001600160a01b038616845290915281205482811015610d845760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106b7565b610d9133858584036112f2565b5060019392505050565b600061060a33848461144a565b60608160008167ffffffffffffffff811115610dc657610dc6613f4d565b604051908082528060200260200182016040528015610def578160200160208202803683370190505b506040805160608101825260cf546001600160e01b038116825261ffff600160e01b820481166020840152600160f01b909104169181019190915290915060005b83811015610e7f57610e5060d0838989858181106108cc576108cc613f37565b838281518110610e6257610e62613f37565b602090810291909101015280610e7781613edc565b915050610e30565b509095945050505050565b83421115610eda5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016106b7565b6000609a54888888610eeb8c611cb3565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610f4682611cdb565b90506000610f5682878787611d44565b9050896001600160a01b0316816001600160a01b031614610fb95760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016106b7565b610fc48a8a8a6112f2565b50505050505050505050565b600054610100900460ff1680610fe9575060005460ff16155b61104c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff1615801561106e576000805461ffff19166101011790555b6110e187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250611f1a92505050565b61111f6040518060400160405280601381526020017f506f6f6c546f676574686572205469636b657400000000000000000000000000815250611fe0565b60008360ff16116111725760405162461bcd60e51b815260206004820152601760248201527f5469636b65742f646563696d616c732d67742d7a65726f00000000000000000060448201526064016106b7565b60ce80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff85161790556001600160a01b03821661121b5760405162461bcd60e51b815260206004820152602260248201527f5469636b65742f636f6e74726f6c6c65722d6e6f742d7a65726f2d616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b61129687878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284376000920191909152505060ce5460ff1691508690506120e3565b7f18bb14f696b97c9ff8d44ac723d7b0663bd32189c6e86b9f4cce10bceccbf4898787878787876040516112cf96959493929190613c7b565b60405180910390a180156112e9576000805461ff00191690555b50505050505050565b6001600160a01b03831661136d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106b7565b6001600160a01b0382166113e95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166114c65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106b7565b6001600160a01b0382166115425760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b80826001600160a01b0316846001600160a01b0316146116d0576001600160a01b0384166000908152620100d060205260409020546001600160e01b0382168110156115f65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106b7565b6001600160a01b038086166000908152620100d060205260408082206001600160e01b038616808603909155928716825281208054909190611639908490613d6c565b90915550506001600160a01b038086166000908152620100cf60205260409020541680156116715761166c8682866117ba565b61167c565b61167c8687866117ba565b6001600160a01b038086166000908152620100cf60205260409020541680156116b8576116b38682866001600160e01b0316611878565b6116cc565b6116cc8687866001600160e01b0316611878565b5050505b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161171591815260200190565b60405180910390a350505050565b600061073f83604001518460200151868660000151864261231c565b60006107517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61176e60655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b600060cd6000846001600160a01b03166001600160a01b0316815260200190815260200160002090506000806118098385604051806060016040528060228152602001613f6460229139612362565b915091508015611870576040805183516001600160e01b0316815260208085015163ffffffff16908201526001600160a01b0380881692908916917f56bf5251c21af3be0462e65380f02036c247ea4203fda153f3a9c3e7f8f9318d910160405180910390a35b505050505050565b6001600160a01b038216600090815260cd60205260408120908061180983856124d7565b6001600160a01b0382166118f25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106b7565b60006118fd82612619565b90506001600160a01b0383166000908152620100d06020526040812080546001600160e01b0384169290611932908490613d6c565b90915550600090508061194f60cf6001600160e01b0385166124d7565b9150915080156119a6576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a15b6001600160a01b038086166000908152620100cf60205260409020541680156119e2576119dd8682866001600160e01b0316611878565b6119f6565b6119f68687866001600160e01b0316611878565b6040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3611870565b6001600160a01b038216611ab85760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b6000611ac382612619565b9050600080611af560cf846001600160e01b0316604051806060016040528060228152602001613f6460229139612362565b915091508015611b4c576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a15b6001600160a01b0385166000908152620100d060205260409020546001600160e01b038416811015611be65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b6001600160a01b038087166000908152620100d0602090815260408083206001600160e01b03891686039055620100cf909152902054168015611c3c57611c378782876001600160e01b03166117ba565b611c50565b611c508788876001600160e01b03166117ba565b6040518681526000906001600160a01b038916907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36112e9565b6000610c658460400151856020015187876000015187874261269c565b6001600160a01b03811660009081526099602052604090208054600181018255905b50919050565b600061060e611ce861173f565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611ddc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b8360ff16601b1480611df157508360ff16601c145b611e635760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611eb7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610c655760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106b7565b600054610100900460ff1680611f33575060005460ff16155b611f965760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff16158015611fb8576000805461ffff19166101011790555b611fc06126d9565b611fca838361278c565b8015610bbc576000805461ff0019169055505050565b600054610100900460ff1680611ff9575060005460ff16155b61205c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff1615801561207e576000805461ffff19166101011790555b6120866126d9565b6120c5826040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250612868565b6120ce82612939565b8015610af0576000805461ff00191690555050565b600054610100900460ff16806120fc575060005460ff16155b61215f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff16158015612181576000805461ffff19166101011790555b6001600160a01b0382166121fd5760405162461bcd60e51b815260206004820152602360248201527f436f6e74726f6c6c6564546f6b656e2f636f6e74726f6c6c65722d6e6f742d7a60448201527f65726f000000000000000000000000000000000000000000000000000000000060648201526084016106b7565b60cc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841617905561223a8585611f1a565b6122786040518060400160405280601c81526020017f506f6f6c546f67657468657220436f6e74726f6c6c6564546f6b656e00000000815250611fe0565b60cc80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060ff868116820292909217928390556040517f41bc1176d7b9b7bc036f385a7e5b08b0662a7afa0844af8a599ad431150227e1936122fb938a938a93920416908790613cdb565b60405180910390a18015612315576000805461ff00191690555b5050505050565b60008061232888612a10565b9050600061233a8861ffff1683612a24565b90506123538786886001600160e01b0316848689612a5a565b925050505b9695505050505050565b60408051808201909152600080825260208201526040805160608101825285546001600160e01b03811680835261ffff600160e01b830481166020850152600160f01b909204909116928201929092526000918291829186908811156123db5760405162461bcd60e51b81526004016106b79190613cc8565b506123fc8160000151826020015183604001518b6001014262dd7c00612c28565b6040805160608101909152855192995090975092955090935081906124349061242f908b906001600160e01b0316613e73565b612619565b6001600160e01b03908116825261ffff95861660208084019190915294861660409283015282518b549584015193909201518616600160f01b027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909616600160e01b027fffff0000000000000000000000000000000000000000000000000000000000009095169116179290921791909116919091179095559094909350915050565b60408051808201909152600080825260208201526040805160608101825284546001600160e01b03811680835261ffff600160e01b8304811660208501819052600160f01b909304169383018490526000938493849390926125449290919060018b014262dd7c00612c28565b6040805160608101909152855192995090975092955090935081906125779061242f908a906001600160e01b0316613d6c565b6001600160e01b03908116825261ffff95861660208084019190915294861660409283015282518a549584015193909201518616600160f01b027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909616600160e01b027fffff00000000000000000000000000000000000000000000000000000000000090951691161792909217919091169190911790945590939092509050565b60006001600160e01b038211156126985760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f323420626974730000000000000000000000000000000000000000000000000060648201526084016106b7565b5090565b6000806126a889612a10565b905060006126ba8961ffff1683612a24565b90506126cb8888838989878a612c65565b9a9950505050505050505050565b600054610100900460ff16806126f2575060005460ff16155b6127555760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff16158015612777576000805461ffff19166101011790555b8015612789576000805461ff00191690555b50565b600054610100900460ff16806127a5575060005460ff16155b6128085760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff1615801561282a576000805461ffff19166101011790555b825161283d90603690602086019061379a565b50815161285190603790602085019061379a565b508015610bbc576000805461ff0019169055505050565b600054610100900460ff1680612881575060005460ff16155b6128e45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff16158015612906576000805461ffff19166101011790555b82516020808501919091208351918401919091206065919091556066558015610bbc576000805461ff0019169055505050565b600054610100900460ff1680612952575060005460ff16155b6129b55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b7565b600054610100900460ff161580156129d7576000805461ffff19166101011790555b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9609a558015610af0576000805461ff00191690555050565b6000808261ffff161161269857600161060e565b600061ffff8216612a375750600061060e565b6106d36001612a4a61ffff851686613d6c565b612a549190613e73565b83612dcc565b6000808263ffffffff168763ffffffff1611612a765786612a78565b825b60408051808201909152600080825260208201529091506000898761ffff1661ffff8110612aa857612aa8613f37565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b909104811660208301819052919250612ae9919085908890612ddc16565b15612af957879350505050612358565b6000612b13612b09896001613d24565b61ffff1688612dcc565b90508a8161ffff1661ffff8110612b2c57612b2c613f37565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909250612b8f5750506040805180820190915289546001600160e01b0381168252600160e01b900463ffffffff16602082015260005b612bae8260200151878663ffffffff16612ead9092919063ffffffff16565b15612bc0576000945050505050612358565b612bce8b89838d8b8b612f7c565b81518151919550919350600091612be491613e4b565b9050600083602001518560200151612bfc9190613e8a565b9050612c0e63ffffffff821683613dc3565b6001600160e01b03169d9c50505050505050505050505050565b604080518082019091526000808252602082018190529081906000612c51878b8b8b8a8a613141565b929d919c509a509098509650505050505050565b60008463ffffffff168463ffffffff1611612ce85760405162461bcd60e51b815260206004820152602860248201527f73746172742074696d65206d7573742062652067726561746572207468616e2060448201527f656e642074696d6500000000000000000000000000000000000000000000000060648201526084016106b7565b6000612d02612cf8886001613d24565b61ffff1685612dcc565b90506000898261ffff1661ffff8110612d1d57612d1d613f37565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909150612d815750506040805180820190915288546001600160e01b0381168252600160e01b900463ffffffff1660208201526000905b6126cb8a8a6040518060a001604052808c61ffff1681526020018661ffff1681526020018b63ffffffff1681526020018a63ffffffff1681526020018961ffff168152508488613249565b60006106d361ffff831684613ef7565b60008163ffffffff168463ffffffff1611158015612e0657508163ffffffff168363ffffffff1611155b15612e22578263ffffffff168463ffffffff16111590506106d3565b60008263ffffffff168563ffffffff1611612e5157612e4c63ffffffff8616640100000000613da3565b612e59565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff1611612e9157612e8c63ffffffff8616640100000000613da3565b612e99565b8463ffffffff165b64ffffffffff169091111595945050505050565b60008163ffffffff168463ffffffff1611158015612ed757508163ffffffff168363ffffffff1611155b15612ef2578263ffffffff168463ffffffff161090506106d3565b60008263ffffffff168563ffffffff1611612f2157612f1c63ffffffff8616640100000000613da3565b612f29565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff1611612f6157612f5c63ffffffff8616640100000000613da3565b612f69565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008661ffff1690506000818961ffff1610612fc4578861ffff16612fde565b6001612fd461ffff881684613d6c565b612fde9190613e73565b905060005b6002612fef8385613d6c565b612ff99190613de9565b90508a6130068289612dcc565b61ffff1661ffff811061301b5761301b613f37565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909550806130635761305b826001613d6c565b935050612fe3565b8b613078613072846001613d6c565b8a612dcc565b61ffff1661ffff811061308d5761308d613f37565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b909104811660208301529095506000906130d290838116908c908b90612ddc16565b90508080156130fb57506130fb8660200151898c63ffffffff16612ddc9092919063ffffffff16565b15613107575050613133565b8061311e57613117600184613e73565b935061312c565b613129836001613d6c565b94505b5050612fe3565b505050965096945050505050565b604080518082019091526000808252602082018190529081906000808a61316c8a61ffff168a612a24565b61ffff1661ffff811061318157613181613f37565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b909104811660208301819052919250881614156131cc5788945087935091506000905061323c565b6131d98b8a8a8a8a613359565b909550935060006131f4826001600160e01b038d168a613483565b9050808c8b61ffff1661ffff811061320e5761320e613f37565b825160209093015163ffffffff16600160e01b026001600160e01b0390931692909217910155925060019150505b9650965096509692505050565b6000808263ffffffff16856060015163ffffffff161161326d57846060015161326f565b825b9050600087866000015161ffff1661ffff811061328e5761328e613f37565b60408051808201825291909201546001600160e01b0381168252600160e01b900463ffffffff166020808301919091528851908901519289015160808a01519294506000936132e7938d9387938c9391928f908d61350a565b905060006133088a84898b600001518c60200151898f8f608001518e61350a565b90508160200151816020015161331e9190613e8a565b63ffffffff16826000015182600001516133389190613e4b565b6133429190613dc3565b6001600160e01b03169a9950505050505050505050565b6000806000808661ffff1611613370576001613372565b855b604080518082019091526000808252602082015290915060028261ffff1611156133f857886133b56133a961ffff8b166001613d84565b63ffffffff1684612dcc565b61ffff1661ffff81106133ca576133ca613f37565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff16602082015290505b819250806020015163ffffffff166000148061343d57508463ffffffff166134358260200151888963ffffffff166136d09092919063ffffffff16565b63ffffffff16105b156134635761ffff828116106134555761ffff613460565b613460826001613d24565b92505b6134756133a961ffff8a166001613d84565b935050509550959350505050565b604080518082019091526000808252602082015260405180604001604052806134e96134c48760200151868763ffffffff166136d09092919063ffffffff16565b6134d49063ffffffff1687613e2c565b875161242f91906001600160e01b0316613d6c565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b604080518082019091526000808252602082015261353d85838b6020015163ffffffff16612ead9092919063ffffffff16565b156135985760405180604001604052808a602001518761355d9190613e8a565b61356d9063ffffffff1687613dfd565b8b516135799190613d4a565b6001600160e01b031681526020018663ffffffff1681525090506136c3565b8463ffffffff16896020015163ffffffff1614156135b75750876136c3565b8463ffffffff16886020015163ffffffff1614156135d65750866136c3565b6135f58860200151838763ffffffff16612ead9092919063ffffffff16565b1561361a5750604080518082019091526000815263ffffffff851660208201526136c3565b60008061362b8c8a8a8a8989612f7c565b915091506000826020015182602001516136459190613e8a565b63ffffffff168360000151836000015161365f9190613e4b565b6136699190613dc3565b9050600083602001518961367d9190613e8a565b61368d9063ffffffff1683613dfd565b84516136999190613d4a565b604080518082019091526001600160e01b03909116815263ffffffff8a1660208201529450505050505b9998505050505050505050565b60008163ffffffff168463ffffffff16111580156136fa57508163ffffffff168363ffffffff1611155b15613710576137098385613e8a565b90506106d3565b60008263ffffffff168563ffffffff161161373f5761373a63ffffffff8616640100000000613da3565b613747565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff161161377f5761377a63ffffffff8616640100000000613da3565b613787565b8463ffffffff165b64ffffffffff1690506123588183613e73565b8280546137a690613ea7565b90600052602060002090601f0160209004810192826137c8576000855561380e565b82601f106137e157805160ff191683800117855561380e565b8280016001018555821561380e579182015b8281111561380e5782518255916020019190600101906137f3565b506126989291505b808211156126985760008155600101613816565b80356001600160a01b038116811461384157600080fd5b919050565b60008083601f84011261385857600080fd5b50813567ffffffffffffffff81111561387057600080fd5b6020830191508360208260051b850101111561388b57600080fd5b9250929050565b60008083601f8401126138a457600080fd5b50813567ffffffffffffffff8111156138bc57600080fd5b60208301915083602082850101111561388b57600080fd5b803560ff8116811461384157600080fd5b6000602082840312156138f757600080fd5b6106d38261382a565b6000806040838503121561391357600080fd5b61391c8361382a565b915061392a6020840161382a565b90509250929050565b60008060006060848603121561394857600080fd5b6139518461382a565b925061395f6020850161382a565b9150604084013590509250925092565b600080600080600080600060e0888a03121561398a57600080fd5b6139938861382a565b96506139a16020890161382a565b955060408801359450606088013593506139bd608089016138d4565b925060a0880135915060c0880135905092959891949750929550565b6000806000604084860312156139ee57600080fd5b6139f78461382a565b9250602084013567ffffffffffffffff811115613a1357600080fd5b613a1f86828701613846565b9497909650939450505050565b60008060408385031215613a3f57600080fd5b613a488361382a565b9150602083013561ffff81168114613a5f57600080fd5b809150509250929050565b60008060408385031215613a7d57600080fd5b613a868361382a565b946020939093013593505050565b600080600060608486031215613aa957600080fd5b613ab28461382a565b95602085013595506040909401359392505050565b60008060208385031215613ada57600080fd5b823567ffffffffffffffff811115613af157600080fd5b613afd85828601613846565b90969095509350505050565b60008060008060008060808789031215613b2257600080fd5b863567ffffffffffffffff80821115613b3a57600080fd5b613b468a838b01613892565b90985096506020890135915080821115613b5f57600080fd5b50613b6c89828a01613892565b9095509350613b7f9050604088016138d4565b9150613b8d6060880161382a565b90509295509295509295565b600060208284031215613bab57600080fd5b813563ffffffff811681146106d357600080fd5b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6000815180845260005b81811015613c1057602081850181015186830182015201613bf4565b81811115613c22576000602083870101525b50601f01601f19169290920160200192915050565b6020808252825182820181905260009190848201906040850190845b81811015613c6f57835183529284019291840191600101613c53565b50909695505050505050565b608081526000613c8f60808301888a613bbf565b8281036020840152613ca2818789613bbf565b91505060ff841660408301526001600160a01b0383166060830152979650505050505050565b6020815260006106d36020830184613bea565b608081526000613cee6080830187613bea565b8281036020840152613d008187613bea565b91505060ff841660408301526001600160a01b038316606083015295945050505050565b600061ffff808316818516808303821115613d4157613d41613f0b565b01949350505050565b60006001600160e01b03808316818516808303821115613d4157613d41613f0b565b60008219821115613d7f57613d7f613f0b565b500190565b600063ffffffff808316818516808303821115613d4157613d41613f0b565b600064ffffffffff808316818516808303821115613d4157613d41613f0b565b60006001600160e01b0380841680613ddd57613ddd613f21565b92169190910492915050565b600082613df857613df8613f21565b500490565b60006001600160e01b0380831681851681830481118215151615613e2357613e23613f0b565b02949350505050565b6000816000190483118215151615613e4657613e46613f0b565b500290565b60006001600160e01b0383811690831681811015613e6b57613e6b613f0b565b039392505050565b600082821015613e8557613e85613f0b565b500390565b600063ffffffff83811690831681811015613e6b57613e6b613f0b565b600181811c90821680613ebb57607f821691505b60208210811415611cd557634e487b7160e01b600052602260045260246000fd5b6000600019821415613ef057613ef0613f0b565b5060010190565b600082613f0657613f06613f21565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365a26469706673582212204bfda4ca9a253212432605378ae9d664d016101f15fbc5576e5d163b3eff9e2f64736f6c63430008060033",
  "devdoc": {
    "author": "PoolTogether Inc.",
    "events": {
      "NewTotalSupplyTwab((uint224,uint32))": {
        "params": {
          "newTotalSupplyTwab": "Updated TWAB of tickets total supply after a successful total supply TWAB recording."
        }
      },
      "NewUserTwab(address,address,(uint224,uint32))": {
        "params": {
          "newTwab": "Updated TWAB of a ticket holder after a successful TWAB recording.",
          "ticketHolder": "The Ticket holder address.",
          "user": "The recipient of the ticket power (may be the same as the ticketHolder)"
        }
      },
      "TicketInitialized(string,string,uint8,address)": {
        "params": {
          "controller": "Token controller address.",
          "decimals": "Ticket decimals.",
          "name": "Ticket name (eg: PoolTogether Dai Ticket (Compound)).",
          "symbol": "Ticket symbol (eg: PcDAI)."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "uint224 `_user` ticket token balance."
        }
      },
      "controllerBurn(address,uint256)": {
        "details": "May be overridden to provide more granular control over burning",
        "params": {
          "_amount": "Amount of tokens to burn",
          "_user": "Address of the holder account to burn tokens from"
        }
      },
      "controllerBurnFrom(address,address,uint256)": {
        "details": "May be overridden to provide more granular control over operator-burning",
        "params": {
          "_amount": "Amount of tokens to burn",
          "_operator": "Address of the operator performing the burn action via the controller contract",
          "_user": "Address of the holder account to burn tokens from"
        }
      },
      "controllerMint(address,uint256)": {
        "details": "May be overridden to provide more granular control over minting",
        "params": {
          "_amount": "Amount of tokens to mint",
          "_user": "Address of the receiver of the minted tokens"
        }
      },
      "decimals()": {
        "details": "This value should be equal to the decimals of the token used to deposit into the pool.",
        "returns": {
          "_0": "uint8 decimals."
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getAccountDetails(address)": {
        "params": {
          "_user": "The user for whom to fetch the TWAB context"
        },
        "returns": {
          "_0": "The TWAB context, which includes { balance, nextTwabIndex, cardinality }"
        }
      },
      "getAverageBalanceBetween(address,uint256,uint256)": {
        "params": {
          "_endTime": "The end time of the time frame.",
          "_startTime": "The start time of the time frame.",
          "_user": "The user whose balance is checked"
        },
        "returns": {
          "_0": "The average balance that the user held during the time frame."
        }
      },
      "getBalanceAt(address,uint256)": {
        "params": {
          "_target": "Timestamp at which the reserved TWAB should be for.",
          "_user": "Address of the user whose TWAB is being fetched."
        }
      },
      "getBalancesAt(address,uint32[])": {
        "params": {
          "_targets": "Timestamps at which the reserved TWABs should be for.",
          "_user": "Address of the user whose TWABs are being fetched."
        },
        "returns": {
          "_0": "uint256[] `_user` TWAB balances."
        }
      },
      "getTotalSupplies(uint32[])": {
        "params": {
          "_targets": "Timestamps at which the reserved TWABs should be for."
        },
        "returns": {
          "_0": "uint256[] ticket TWAB `totalSupplies`."
        }
      },
      "getTotalSupply(uint32)": {
        "params": {
          "_target": "Timestamp at which the reserved TWAB should be for."
        }
      },
      "getTwab(address,uint16)": {
        "params": {
          "_index": "The index of the TWAB to fetch",
          "_user": "The user for whom to fetch the TWAB"
        },
        "returns": {
          "_0": "The TWAB, which includes the twab amount and the timestamp."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(string,string,uint8,address)": {
        "params": {
          "_name": "ERC20 ticket token name.",
          "_symbol": "ERC20 ticket token symbol.",
          "decimals_": "ERC20 ticket token decimals."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "returns": {
          "_0": "uint256 Total supply of the ERC20 ticket token."
        }
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "stateVariables": {
      "TWAB_TIME_TO_LIVE": {
        "details": "Once the twab ttl expires, its storage slot is recycled."
      }
    },
    "title": "An ERC20 token that allows you to see user's past balances, and average balance held between timestamps.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewTotalSupplyTwab((uint224,uint32))": {
        "notice": "Emitted when a new total supply TWAB has been recorded."
      },
      "NewUserTwab(address,address,(uint224,uint32))": {
        "notice": "Emitted when a new TWAB has been recorded."
      },
      "TicketInitialized(string,string,uint8,address)": {
        "notice": "Emitted when ticket is initialized."
      }
    },
    "kind": "user",
    "methods": {
      "MAX_CARDINALITY()": {
        "notice": "The maximum number of twab entries"
      },
      "TWAB_TIME_TO_LIVE()": {
        "notice": "The minimum length of time a twab should exist."
      },
      "balanceOf(address)": {
        "notice": "Returns the ERC20 ticket token balance of a ticket holder."
      },
      "controller()": {
        "notice": "Interface to the contract responsible for controlling mint/burn"
      },
      "controllerBurn(address,uint256)": {
        "notice": "Allows the controller to burn tokens from a user account"
      },
      "controllerBurnFrom(address,address,uint256)": {
        "notice": "Allows an operator via the controller to burn tokens on behalf of a user account"
      },
      "controllerMint(address,uint256)": {
        "notice": "Allows the controller to mint tokens for a user account"
      },
      "decimals()": {
        "notice": "Returns the ERC20 ticket token decimals."
      },
      "getAccountDetails(address)": {
        "notice": "Gets a users twap context.  This is a struct with their balance, next twab index, and cardinality."
      },
      "getAverageBalanceBetween(address,uint256,uint256)": {
        "notice": "Calculates the average balance held by a user for a given time frame."
      },
      "getBalanceAt(address,uint256)": {
        "notice": "Retrieves `_user` TWAB balance."
      },
      "getBalancesAt(address,uint32[])": {
        "notice": "Retrieves `_user` TWAB balances."
      },
      "getTotalSupplies(uint32[])": {
        "notice": "Retrieves ticket TWAB `totalSupplies`."
      },
      "getTotalSupply(uint32)": {
        "notice": "Retrieves ticket TWAB `totalSupply`."
      },
      "getTwab(address,uint16)": {
        "notice": "Gets the TWAB at a specific index for a user."
      },
      "initialize(string,string,uint8,address)": {
        "notice": "Initializes Ticket with passed parameters."
      },
      "totalSupply()": {
        "notice": "Returns the ERC20 ticket token total supply."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1781,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 247,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 253,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 255,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 257,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 259,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 800,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 2048,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "101",
        "type": "t_bytes32"
      },
      {
        "astId": 2050,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "102",
        "type": "t_bytes32"
      },
      {
        "astId": 2187,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 930,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_nonces",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_struct(Counter)1788_storage)"
      },
      {
        "astId": 932,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_PERMIT_TYPEHASH",
        "offset": 0,
        "slot": "154",
        "type": "t_bytes32"
      },
      {
        "astId": 1100,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11607,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "controller",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 11610,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_decimals",
        "offset": 20,
        "slot": "204",
        "type": "t_uint8"
      },
      {
        "astId": 5682,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "userTwabs",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_struct(Account)5643_storage)"
      },
      {
        "astId": 5685,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "_decimals",
        "offset": 0,
        "slot": "206",
        "type": "t_uint8"
      },
      {
        "astId": 5689,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "totalSupplyTwab",
        "offset": 0,
        "slot": "207",
        "type": "t_struct(Account)5643_storage"
      },
      {
        "astId": 5694,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "delegates",
        "offset": 0,
        "slot": "65743",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5699,
        "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
        "label": "balances",
        "offset": 0,
        "slot": "65744",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Twab)8220_storage)65535_storage": {
        "base": "t_struct(Twab)8220_storage",
        "encoding": "inplace",
        "label": "struct TwabLibrary.Twab[65535]",
        "numberOfBytes": "2097120"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Account)5643_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ticket.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)5643_storage"
      },
      "t_mapping(t_address,t_struct(Counter)1788_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CountersUpgradeable.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)1788_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Account)5643_storage": {
        "encoding": "inplace",
        "label": "struct Ticket.Account",
        "members": [
          {
            "astId": 5637,
            "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
            "label": "details",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AccountDetails)5634_storage"
          },
          {
            "astId": 5642,
            "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
            "label": "twabs",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Twab)8220_storage)65535_storage"
          }
        ],
        "numberOfBytes": "2097152"
      },
      "t_struct(AccountDetails)5634_storage": {
        "encoding": "inplace",
        "label": "struct Ticket.AccountDetails",
        "members": [
          {
            "astId": 5629,
            "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 5631,
            "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
            "label": "nextTwabIndex",
            "offset": 28,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5633,
            "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
            "label": "cardinality",
            "offset": 30,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1788_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1787,
            "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Twab)8220_storage": {
        "encoding": "inplace",
        "label": "struct TwabLibrary.Twab",
        "members": [
          {
            "astId": 8217,
            "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 8219,
            "contract": "@pooltogether/v4/contracts/Ticket.sol:Ticket",
            "label": "timestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}