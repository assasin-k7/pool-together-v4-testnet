{
  "address": "0xdeC5E93b04d7A3c472982B9F6340C778CbA09Afa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "amount",
              "type": "uint224"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct TwabLibrary.Twab",
          "name": "newTotalSupplyTwab",
          "type": "tuple"
        }
      ],
      "name": "NewTotalSupplyTwab",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ticketHolder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "amount",
              "type": "uint224"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct TwabLibrary.Twab",
          "name": "newTwab",
          "type": "tuple"
        }
      ],
      "name": "NewUserTwab",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "TicketInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_CARDINALITY",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWAB_TIME_TO_LIVE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "controllerBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "controllerBurnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "controllerMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "delegateOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAccountDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "balance",
              "type": "uint224"
            },
            {
              "internalType": "uint16",
              "name": "nextTwabIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cardinality",
              "type": "uint16"
            }
          ],
          "internalType": "struct Ticket.AccountDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "getAverageBalanceBetween",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "startTimes",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "endTimes",
          "type": "uint32[]"
        }
      ],
      "name": "getAverageBalancesBetween",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "startTimes",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "endTimes",
          "type": "uint32[]"
        }
      ],
      "name": "getAverageTotalSuppliesBetween",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "getBalanceAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "_targets",
          "type": "uint32[]"
        }
      ],
      "name": "getBalancesAt",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_targets",
          "type": "uint32[]"
        }
      ],
      "name": "getTotalSupplies",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_target",
          "type": "uint32"
        }
      ],
      "name": "getTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        }
      ],
      "name": "getTwab",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "amount",
              "type": "uint224"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            }
          ],
          "internalType": "struct TwabLibrary.Twab",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x46b7196df60d23858e153e1a3e1ce0a2c670921bc67aff441508433768508806",
  "receipt": {
    "to": null,
    "from": "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "contractAddress": "0xdeC5E93b04d7A3c472982B9F6340C778CbA09Afa",
    "transactionIndex": 49,
    "gasUsed": "3283211",
    "logsBloom": "0x
    "blockHash": "0x184c3073fcd619906f1947643f1244dc917ff354c739f1f308e03b5beb703bb6",
    "transactionHash": "0x46b7196df60d23858e153e1a3e1ce0a2c670921bc67aff441508433768508806",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 9332707,
        "transactionHash": "0x46b7196df60d23858e153e1a3e1ce0a2c670921bc67aff441508433768508806",
        "address": "0xdeC5E93b04d7A3c472982B9F6340C778CbA09Afa",
        "topics": [
          "0xde72fc29218361f33503847e6f32be813f9ec92fc7c772bb59e46675c890fd0e"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000f66e1ebb2101a155d0bf58bbb7e4f80a87d3cccd00000000000000000000000000000000000000000000000000000000000000065469636b6574000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045449434b00000000000000000000000000000000000000000000000000000000",
        "logIndex": 59,
        "blockHash": "0x184c3073fcd619906f1947643f1244dc917ff354c739f1f308e03b5beb703bb6"
      }
    ],
    "blockNumber": 9332707,
    "cumulativeGasUsed": "25444262",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Ticket",
    "TICK",
    18,
    "0xF66E1ebB2101a155D0BF58BbB7E4f80a87d3CccD"
  ],
  "solcInputHash": "c10ecf7ed4019ef1b5b277259dc2440b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct TwabLibrary.Twab\",\"name\":\"newTotalSupplyTwab\",\"type\":\"tuple\"}],\"name\":\"NewTotalSupplyTwab\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ticketHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct TwabLibrary.Twab\",\"name\":\"newTwab\",\"type\":\"tuple\"}],\"name\":\"NewUserTwab\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"TicketInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CARDINALITY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWAB_TIME_TO_LIVE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controllerBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controllerBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controllerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"delegateOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAccountDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"balance\",\"type\":\"uint224\"},{\"internalType\":\"uint16\",\"name\":\"nextTwabIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cardinality\",\"type\":\"uint16\"}],\"internalType\":\"struct Ticket.AccountDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"getAverageBalanceBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"startTimes\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"endTimes\",\"type\":\"uint32[]\"}],\"name\":\"getAverageBalancesBetween\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"startTimes\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"endTimes\",\"type\":\"uint32[]\"}],\"name\":\"getAverageTotalSuppliesBetween\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"getBalanceAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_targets\",\"type\":\"uint32[]\"}],\"name\":\"getBalancesAt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_targets\",\"type\":\"uint32[]\"}],\"name\":\"getTotalSupplies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_target\",\"type\":\"uint32\"}],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"getTwab\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct TwabLibrary.Twab\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"PoolTogether Inc.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"returns\":{\"_0\":\"uint224 `_user` ticket token balance.\"}},\"constructor\":{\"params\":{\"_controller\":\"ERC20 ticket controller address (ie: Prize Pool address).\",\"_name\":\"ERC20 ticket token name.\",\"_symbol\":\"ERC20 ticket token symbol.\",\"decimals_\":\"ERC20 ticket token decimals.\"}},\"controllerBurn(address,uint256)\":{\"details\":\"May be overridden to provide more granular control over burning\",\"params\":{\"_amount\":\"Amount of tokens to burn\",\"_user\":\"Address of the holder account to burn tokens from\"}},\"controllerBurnFrom(address,address,uint256)\":{\"details\":\"May be overridden to provide more granular control over operator-burning\",\"params\":{\"_amount\":\"Amount of tokens to burn\",\"_operator\":\"Address of the operator performing the burn action via the controller contract\",\"_user\":\"Address of the holder account to burn tokens from\"}},\"controllerMint(address,uint256)\":{\"details\":\"May be overridden to provide more granular control over minting\",\"params\":{\"_amount\":\"Amount of tokens to mint\",\"_user\":\"Address of the receiver of the minted tokens\"}},\"decimals()\":{\"details\":\"This value should be equal to the decimals of the token used to deposit into the pool.\",\"returns\":{\"_0\":\"uint8 decimals.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getAccountDetails(address)\":{\"params\":{\"_user\":\"The user for whom to fetch the TWAB context\"},\"returns\":{\"_0\":\"The TWAB context, which includes { balance, nextTwabIndex, cardinality }\"}},\"getAverageBalanceBetween(address,uint256,uint256)\":{\"params\":{\"_endTime\":\"The end time of the time frame.\",\"_startTime\":\"The start time of the time frame.\",\"_user\":\"The user whose balance is checked\"},\"returns\":{\"_0\":\"The average balance that the user held during the time frame.\"}},\"getAverageBalancesBetween(address,uint32[],uint32[])\":{\"params\":{\"endTimes\":\"The end time of the time frame.\",\"startTimes\":\"The start time of the time frame.\",\"user\":\"The user whose balance is checked\"},\"returns\":{\"_0\":\"The average balance that the user held during the time frame.\"}},\"getAverageTotalSuppliesBetween(uint32[],uint32[])\":{\"params\":{\"endTimes\":\"Array of end times\",\"startTimes\":\"Array of start times\"},\"returns\":{\"_0\":\"The average total supplies held during the time frame.\"}},\"getBalanceAt(address,uint256)\":{\"params\":{\"_target\":\"Timestamp at which the reserved TWAB should be for.\",\"_user\":\"Address of the user whose TWAB is being fetched.\"}},\"getBalancesAt(address,uint32[])\":{\"params\":{\"_targets\":\"Timestamps at which the reserved TWABs should be for.\",\"_user\":\"Address of the user whose TWABs are being fetched.\"},\"returns\":{\"_0\":\"uint256[] `_user` TWAB balances.\"}},\"getTotalSupplies(uint32[])\":{\"params\":{\"_targets\":\"Timestamps at which the reserved TWABs should be for.\"},\"returns\":{\"_0\":\"uint256[] ticket TWAB `totalSupplies`.\"}},\"getTotalSupply(uint32)\":{\"params\":{\"_target\":\"Timestamp at which the reserved TWAB should be for.\"}},\"getTwab(address,uint16)\":{\"params\":{\"_index\":\"The index of the TWAB to fetch\",\"_user\":\"The user for whom to fetch the TWAB\"},\"returns\":{\"_0\":\"The TWAB, which includes the twab amount and the timestamp.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"returns\":{\"_0\":\"uint256 Total supply of the ERC20 ticket token.\"}},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"TWAB_TIME_TO_LIVE\":{\"details\":\"Once the twab ttl expires, its storage slot is recycled.\"}},\"title\":\"An ERC20 token that allows you to see user's past balances, and average balance held between timestamps.\",\"version\":1},\"userdoc\":{\"events\":{\"NewTotalSupplyTwab((uint224,uint32))\":{\"notice\":\"Emitted when a new total supply TWAB has been recorded.\"},\"NewUserTwab(address,address,(uint224,uint32))\":{\"notice\":\"Emitted when a new TWAB has been recorded.\"},\"TicketInitialized(string,string,uint8,address)\":{\"notice\":\"Emitted when ticket is initialized.\"}},\"kind\":\"user\",\"methods\":{\"MAX_CARDINALITY()\":{\"notice\":\"The maximum number of twab entries\"},\"TWAB_TIME_TO_LIVE()\":{\"notice\":\"The minimum length of time a twab should exist.\"},\"balanceOf(address)\":{\"notice\":\"Returns the ERC20 ticket token balance of a ticket holder.\"},\"constructor\":{\"notice\":\"Constructs Ticket with passed parameters.\"},\"controller()\":{\"notice\":\"Interface to the contract responsible for controlling mint/burn\"},\"controllerBurn(address,uint256)\":{\"notice\":\"Allows the controller to burn tokens from a user account\"},\"controllerBurnFrom(address,address,uint256)\":{\"notice\":\"Allows an operator via the controller to burn tokens on behalf of a user account\"},\"controllerMint(address,uint256)\":{\"notice\":\"Allows the controller to mint tokens for a user account\"},\"decimals()\":{\"notice\":\"Returns the ERC20 controlled token decimals.\"},\"getAccountDetails(address)\":{\"notice\":\"Gets a users twap context.  This is a struct with their balance, next twab index, and cardinality.\"},\"getAverageBalanceBetween(address,uint256,uint256)\":{\"notice\":\"Calculates the average balance held by a user for a given time frame.\"},\"getAverageBalancesBetween(address,uint32[],uint32[])\":{\"notice\":\"Calculates the average balance held by a user for given time frames.\"},\"getAverageTotalSuppliesBetween(uint32[],uint32[])\":{\"notice\":\"Calculates the average total supply balance for a set of given time frames.\"},\"getBalanceAt(address,uint256)\":{\"notice\":\"Retrieves `_user` TWAB balance.\"},\"getBalancesAt(address,uint32[])\":{\"notice\":\"Retrieves `_user` TWAB balances.\"},\"getTotalSupplies(uint32[])\":{\"notice\":\"Retrieves ticket TWAB `totalSupplies`.\"},\"getTotalSupply(uint32)\":{\"notice\":\"Retrieves ticket TWAB `totalSupply`.\"},\"getTwab(address,uint16)\":{\"notice\":\"Gets the TWAB at a specific index for a user.\"},\"totalSupply()\":{\"notice\":\"Returns the ERC20 ticket token total supply.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooltogether/v4-core/contracts/Ticket.sol\":\"Ticket\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x7ce4684ee1fac31ee5671df82b30c10bd2ebf88add2f63524ed00618a8486907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@pooltogether/v4-core/contracts/ControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IControlledToken.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ncontract ControlledToken is ERC20Permit, IControlledToken {\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  address public override controller;\\n\\n  /// @notice ERC20 controlled token decimals.\\n  uint8 private immutable _decimals;\\n\\n  /// @notice Deploy the Controlled Token with Token Details and the Controller\\n  /// @param _name The name of the Token\\n  /// @param _symbol The symbol for the Token\\n  /// @param decimals_ The number of decimals for the Token\\n  /// @param _controller Address of the Controller contract for minting & burning\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 decimals_,\\n    address _controller\\n  )\\n    ERC20Permit(\\\"PoolTogether ControlledToken\\\")\\n    ERC20(_name, _symbol)\\n  {\\n    require(address(_controller) != address(0), \\\"ControlledToken/controller-not-zero-address\\\");\\n    controller = _controller;\\n\\n    require(decimals_ > 0, \\\"ControlledToken/decimals-gt-zero\\\");\\n    _decimals = decimals_;\\n\\n    emit Deployed(\\n      _name,\\n      _symbol,\\n      decimals_,\\n      _controller\\n    );\\n  }\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param _user Address of the receiver of the minted tokens\\n  /// @param _amount Amount of tokens to mint\\n  function controllerMint(address _user, uint256 _amount) external virtual override onlyController {\\n    _mint(_user, _amount);\\n  }\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurn(address _user, uint256 _amount) external virtual override onlyController {\\n    _burn(_user, _amount);\\n  }\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param _operator Address of the operator performing the burn action via the controller contract\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external virtual override onlyController {\\n    if (_operator != _user) {\\n      uint256 decreasedAllowance = allowance(_user, _operator) - _amount;\\n      _approve(_user, _operator, decreasedAllowance);\\n    }\\n    _burn(_user, _amount);\\n  }\\n\\n  /// @notice Returns the ERC20 controlled token decimals.\\n  /// @dev This value should be equal to the decimals of the token used to deposit into the pool.\\n  /// @return uint8 decimals.\\n  function decimals() public view virtual override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /// @dev Function modifier to ensure that the caller is the controller contract\\n  modifier onlyController {\\n    require(msg.sender == address(controller), \\\"ControlledToken/only-controller\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x6038c4e74b3d58a090682b4adc18dfd98e51d7584aa9e69830ff0bbdbd5ef925\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/Ticket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./libraries/OverflowSafeComparator.sol\\\";\\nimport \\\"./libraries/TwabLibrary.sol\\\";\\nimport \\\"./interfaces/ITicket.sol\\\";\\nimport \\\"./ControlledToken.sol\\\";\\n\\n/// @title An ERC20 token that allows you to see user's past balances, and average balance held between timestamps.\\n/// @author PoolTogether Inc.\\ncontract Ticket is ControlledToken, ITicket {\\n  /// @notice The minimum length of time a twab should exist.\\n  /// @dev Once the twab ttl expires, its storage slot is recycled.\\n  uint32 public constant TWAB_TIME_TO_LIVE = 24 weeks;\\n  /// @notice The maximum number of twab entries\\n  uint16 public constant MAX_CARDINALITY = 65535;\\n\\n  using SafeERC20 for IERC20;\\n  using SafeCast for uint256;\\n\\n  /// @notice A struct containing details for an Account\\n  /// @param balance The current balance for an Account\\n  /// @param nextTwabIndex The next available index to store a new twab\\n  /// @param cardinality The number of recorded twabs (plus one!)\\n  struct AccountDetails {\\n    uint224 balance;\\n    uint16 nextTwabIndex;\\n    uint16 cardinality;\\n  }\\n\\n  /// @notice Combines account details with their twab history\\n  /// @param details The account details\\n  /// @param twabs The history of twabs for this account\\n  struct Account {\\n    AccountDetails details;\\n    TwabLibrary.Twab[MAX_CARDINALITY] twabs;\\n  }\\n\\n  /// @notice Record of token holders TWABs for each account.\\n  mapping (address => Account) internal userTwabs;\\n\\n  /// @notice Record of tickets total supply and most recent TWAB index.\\n  Account internal totalSupplyTwab;\\n\\n  /// @notice Mapping of delegates.  Each address can delegate their ticket power to another.\\n  mapping(address => address) delegates;\\n\\n  /// @notice Each address's balance\\n  mapping(address => uint256) balances;\\n\\n  /* ============ Constructor ============ */\\n\\n  /// @notice Constructs Ticket with passed parameters.\\n  /// @param _name ERC20 ticket token name.\\n  /// @param _symbol ERC20 ticket token symbol.\\n  /// @param decimals_ ERC20 ticket token decimals.\\n  /// @param _controller ERC20 ticket controller address (ie: Prize Pool address).\\n  constructor (\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 decimals_,\\n    address _controller\\n  ) ControlledToken(\\n    _name,\\n    _symbol,\\n    decimals_,\\n    _controller\\n  ){}\\n\\n    /* ============ External Functions ============ */\\n\\n  /// @notice Gets a users twap context.  This is a struct with their balance, next twab index, and cardinality.\\n  /// @param _user The user for whom to fetch the TWAB context\\n  /// @return The TWAB context, which includes { balance, nextTwabIndex, cardinality }\\n  function getAccountDetails(address _user) external view returns (AccountDetails memory) {\\n    return userTwabs[_user].details;\\n  }\\n\\n  /// @notice Gets the TWAB at a specific index for a user.\\n  /// @param _user The user for whom to fetch the TWAB\\n  /// @param _index The index of the TWAB to fetch\\n  /// @return The TWAB, which includes the twab amount and the timestamp.\\n  function getTwab(address _user, uint16 _index) external view returns (TwabLibrary.Twab memory) {\\n    return userTwabs[_user].twabs[_index];\\n  }\\n\\n  /// @notice Retrieves `_user` TWAB balance.\\n  /// @param _user Address of the user whose TWAB is being fetched.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function getBalanceAt(address _user, uint256 _target) external override view returns (uint256) {\\n    Account storage account = userTwabs[_user];\\n    return _getBalanceAt(account.twabs, account.details, _target);\\n  }\\n\\n  /// @notice Calculates the average balance held by a user for given time frames.\\n  /// @param user The user whose balance is checked\\n  /// @param startTimes The start time of the time frame.\\n  /// @param endTimes The end time of the time frame.\\n  /// @return The average balance that the user held during the time frame.\\n  function getAverageBalancesBetween(address user, uint32[] calldata startTimes, uint32[] calldata endTimes) external override view\\n    returns (uint256[] memory)\\n  {\\n    require(startTimes.length == endTimes.length, \\\"Ticket/start-end-times-length-match\\\");\\n    Account storage account = userTwabs[user];\\n    uint256[] memory averageBalances = new uint256[](startTimes.length);\\n\\n    for (uint i = 0; i < startTimes.length; i++) {\\n      averageBalances[i] = _getAverageBalanceBetween(account.twabs, account.details, startTimes[i], endTimes[i]);\\n    }\\n    return averageBalances;\\n  }\\n\\n  /// @notice Calculates the average total supply balance for a set of given time frames.\\n  /// @param startTimes Array of start times\\n  /// @param endTimes Array of end times\\n  /// @return The average total supplies held during the time frame.\\n  function getAverageTotalSuppliesBetween(uint32[] calldata startTimes, uint32[] calldata endTimes) external override view\\n    returns (uint256[] memory)\\n  {\\n    require(startTimes.length == endTimes.length, \\\"Ticket/start-end-times-length-match\\\");\\n    Account storage _totalSupplyTwab = totalSupplyTwab;\\n    uint256[] memory averageTotalSupplies = new uint256[](startTimes.length);\\n\\n    for (uint i = 0; i < startTimes.length; i++) {\\n      averageTotalSupplies[i] = _getAverageBalanceBetween(_totalSupplyTwab.twabs, _totalSupplyTwab.details, startTimes[i], endTimes[i]);\\n    }\\n    return averageTotalSupplies;\\n  }\\n\\n  /// @notice Calculates the average balance held by a user for a given time frame.\\n  /// @param _user The user whose balance is checked\\n  /// @param _startTime The start time of the time frame.\\n  /// @param _endTime The end time of the time frame.\\n  /// @return The average balance that the user held during the time frame.\\n  function getAverageBalanceBetween(address _user, uint256 _startTime, uint256 _endTime) external override view returns (uint256) {\\n    Account storage account = userTwabs[_user];\\n    return _getAverageBalanceBetween(account.twabs, account.details, uint32(_startTime), uint32(_endTime));\\n  }\\n\\n  /// @notice Retrieves `_user` TWAB balances.\\n  /// @param _user Address of the user whose TWABs are being fetched.\\n  /// @param _targets Timestamps at which the reserved TWABs should be for.\\n  /// @return uint256[] `_user` TWAB balances.\\n  function getBalancesAt(address _user, uint32[] calldata _targets) external override view returns (uint256[] memory) {\\n    uint256 length = _targets.length;\\n    uint256[] memory balances = new uint256[](length);\\n\\n    Account storage twabContext = userTwabs[_user];\\n    AccountDetails memory details = twabContext.details;\\n\\n    for(uint256 i = 0; i < length; i++) {\\n      balances[i] = _getBalanceAt(twabContext.twabs, details, _targets[i]);\\n    }\\n\\n    return balances;\\n  }\\n\\n  /// @notice Retrieves ticket TWAB `totalSupply`.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function getTotalSupply(uint32 _target) override external view returns (uint256) {\\n    return _getBalanceAt(totalSupplyTwab.twabs, totalSupplyTwab.details, _target);\\n  }\\n\\n  /// @notice Retrieves ticket TWAB `totalSupplies`.\\n  /// @param _targets Timestamps at which the reserved TWABs should be for.\\n  /// @return uint256[] ticket TWAB `totalSupplies`.\\n  function getTotalSupplies(uint32[] calldata _targets) external view override returns (uint256[] memory){\\n    uint256 length = _targets.length;\\n    uint256[] memory totalSupplies = new uint256[](length);\\n\\n    AccountDetails memory details = totalSupplyTwab.details;\\n\\n    for(uint256 i = 0; i < length; i++) {\\n      totalSupplies[i] = _getBalanceAt(totalSupplyTwab.twabs, details, _targets[i]);\\n    }\\n\\n    return totalSupplies;\\n  }\\n\\n  function delegateOf(address _user) external view returns (address) {\\n    return delegates[_user];\\n  }\\n\\n  /// @notice Returns the ERC20 ticket token balance of a ticket holder.\\n  /// @return uint224 `_user` ticket token balance.\\n  function balanceOf(address _user) public view override returns (uint256) {\\n    return _balanceOf(_user);\\n  }\\n\\n  /// @notice Returns the ERC20 ticket token total supply.\\n  /// @return uint256 Total supply of the ERC20 ticket token.\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return totalSupplyTwab.details.balance;\\n  }\\n\\n  function delegate(address to) external virtual {\\n    uint224 balance = uint224(_balanceOf(msg.sender));\\n    address currentDelegate = delegates[msg.sender];\\n\\n    if (currentDelegate != address(0)) {\\n      _decreaseUserTwab(msg.sender, currentDelegate, balance);\\n    } else {\\n      _decreaseUserTwab(msg.sender, msg.sender, balance);\\n    }\\n\\n    if (to != address(0)) {\\n      _increaseUserTwab(msg.sender, to, balance);\\n    } else {\\n      _increaseUserTwab(msg.sender, msg.sender, balance);\\n    }\\n\\n    delegates[msg.sender] = to;\\n\\n    emit Delegated(msg.sender, to);\\n  }\\n\\n  /* ============ Internal Functions ============ */\\n\\n  /// @notice Calculates the average balance held by a user for a given time frame.\\n  /// @param _startTime The start time of the time frame.\\n  /// @param _endTime The end time of the time frame.\\n  /// @return The average balance that the user held during the time frame.\\n  function _getAverageBalanceBetween(TwabLibrary.Twab[MAX_CARDINALITY] storage _twabs, AccountDetails memory _details, uint32 _startTime, uint32 _endTime)\\n    internal view returns (uint256) {\\n    return TwabLibrary.getAverageBalanceBetween(\\n      _details.cardinality,\\n      _details.nextTwabIndex,\\n      _twabs,\\n      _details.balance,\\n      _startTime,\\n      _endTime,\\n      uint32(block.timestamp)\\n    );\\n  }\\n\\n  /// @notice Retrieves `_user` TWAB balance.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function _getBalanceAt(TwabLibrary.Twab[MAX_CARDINALITY] storage _twabs, AccountDetails memory _details, uint256 _target)\\n    internal view returns (uint256) {\\n    return TwabLibrary.getBalanceAt(\\n      _details.cardinality,\\n      _details.nextTwabIndex,\\n      _twabs,\\n      _details.balance,\\n      uint32(_target),\\n      uint32(block.timestamp)\\n    );\\n  }\\n\\n  /// @notice Returns the ERC20 ticket token balance of a ticket holder.\\n  /// @return uint256 `_user` ticket token balance.\\n  function _balanceOf(address _user) internal view returns (uint256) {\\n    return balances[_user];\\n  }\\n\\n  /// @notice Overridding of the `_transfer` function of the base ERC20 contract.\\n  /// @dev `_sender` cannot be the zero address.\\n  /// @dev `_recipient` cannot be the zero address.\\n  /// @dev `_sender` must have a balance of at least `_amount`.\\n  /// @param _sender Address of the `_sender`that will send `_amount` of tokens.\\n  /// @param _recipient Address of the `_recipient`that will receive `_amount` of tokens.\\n  /// @param _amount Amount of tokens to be transferred from `_sender` to `_recipient`.\\n  function _transfer(\\n    address _sender,\\n    address _recipient,\\n    uint256 _amount\\n  ) internal override virtual {\\n    require(_sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(_recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    uint224 amount = uint224(_amount);\\n\\n    _beforeTokenTransfer(_sender, _recipient, _amount);\\n\\n    if (_sender != _recipient) {\\n\\n      // standard balance update\\n      uint256 senderBalance = balances[_sender];\\n      require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n      unchecked {\\n          balances[_sender] = senderBalance - amount;\\n      }\\n      balances[_recipient] += amount;\\n\\n      // history update\\n      address senderDelegate = delegates[_sender];\\n      if (senderDelegate != address(0)) {\\n        _decreaseUserTwab(_sender, senderDelegate, _amount);\\n      } else {\\n        _decreaseUserTwab(_sender, _sender, _amount);\\n      }\\n\\n      // history update\\n      address recipientDelegate = delegates[_recipient];\\n      if (recipientDelegate != address(0)) {\\n        _increaseUserTwab(_recipient, recipientDelegate, amount);\\n      } else {\\n        _increaseUserTwab(_recipient, _recipient, amount);\\n      }\\n\\n    }\\n\\n    emit Transfer(_sender, _recipient, _amount);\\n\\n    _afterTokenTransfer(_sender, _recipient, _amount);\\n  }\\n\\n  /// @notice Overridding of the `_mint` function of the base ERC20 contract.\\n  /// @dev `_to` cannot be the zero address.\\n  /// @param _to Address that will be minted `_amount` of tokens.\\n  /// @param _amount Amount of tokens to be minted to `_to`.\\n  function _mint(address _to, uint256 _amount) internal virtual override {\\n    require(_to != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    uint224 amount = _amount.toUint224();\\n\\n    _beforeTokenTransfer(address(0), _to, _amount);\\n\\n    balances[_to] += amount;\\n\\n    (TwabLibrary.Twab memory totalSupply, bool tsIsNew) = increaseTwab(totalSupplyTwab, amount);\\n    if (tsIsNew) {\\n      emit NewTotalSupplyTwab(totalSupply);\\n    }\\n\\n    address toDelegate = delegates[_to];\\n    if (toDelegate != address(0)) {\\n      _increaseUserTwab(_to, toDelegate, amount);\\n    } else {\\n      _increaseUserTwab(_to, _to, amount);\\n    }\\n\\n    emit Transfer(address(0), _to, _amount);\\n\\n    _afterTokenTransfer(address(0), _to, _amount);\\n  }\\n\\n  /// @notice Overridding of the `_burn` function of the base ERC20 contract.\\n  /// @dev `_from` cannot be the zero address.\\n  /// @dev `_from` must have at least `_amount` of tokens.\\n  /// @param _from Address that will be burned `_amount` of tokens.\\n  /// @param _amount Amount of tokens to be burnt from `_from`.\\n  function _burn(address _from, uint256 _amount) internal virtual override {\\n    require(_from != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    uint224 amount = _amount.toUint224();\\n\\n    _beforeTokenTransfer(_from, address(0), _amount);\\n\\n    (TwabLibrary.Twab memory tsTwab, bool tsIsNew) = decreaseTwab(\\n      totalSupplyTwab,\\n      amount,\\n      \\\"ERC20: burn amount exceeds balance\\\"\\n    );\\n    if (tsIsNew) {\\n      emit NewTotalSupplyTwab(tsTwab);\\n    }\\n\\n    uint256 accountBalance = balances[_from];\\n    require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n        balances[_from] = accountBalance - amount;\\n    }\\n\\n    address fromDelegate = delegates[_from];\\n    if (fromDelegate != address(0)) {\\n      _decreaseUserTwab(_from, fromDelegate, amount);\\n    } else {\\n      _decreaseUserTwab(_from, _from, amount);\\n    }\\n\\n    emit Transfer(_from, address(0), _amount);\\n\\n    _afterTokenTransfer(_from, address(0), _amount);\\n  }\\n\\n  function _increaseUserTwab(\\n    address _holder,\\n    address _user,\\n    uint256 _amount\\n  ) internal {\\n    Account storage _account = userTwabs[_user];\\n    // console.log(\\\"_increaseUserTwab \\\", _user);\\n    (TwabLibrary.Twab memory twab, bool isNew) = increaseTwab(_account, _amount);\\n    if (isNew) {\\n      // console.log(\\\"!!! new twab: \\\", twab.timestamp);\\n      emit NewUserTwab(_holder, _user, twab);\\n    }\\n  }\\n\\n  function _decreaseUserTwab(\\n    address _holder,\\n    address _user,\\n    uint256 _amount\\n  ) internal {\\n    Account storage _account = userTwabs[_user];\\n    // console.log(\\\"_decreaseUserTwab \\\", _user);\\n    (TwabLibrary.Twab memory twab, bool isNew) = decreaseTwab(_account, _amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    if (isNew) {\\n      // console.log(\\\"!!! new twab: \\\", twab.timestamp);\\n      emit NewUserTwab(_holder, _user, twab);\\n    }\\n  }\\n\\n  /// @notice Increases an account's balance and records a new twab.\\n  /// @param _account The account whose balance will be increased\\n  /// @param _amount The amount to increase the balance by\\n  /// @return twab The user's latest TWAB\\n  /// @return isNew Whether the TWAB is new\\n  function increaseTwab(\\n    Account storage _account,\\n    uint256 _amount\\n  ) internal returns (TwabLibrary.Twab memory twab, bool isNew) {\\n    uint16 nextTwabIndex;\\n    uint16 cardinality;\\n    AccountDetails memory details = _account.details;\\n    (nextTwabIndex, cardinality, twab, isNew) = TwabLibrary.update(\\n      details.balance,\\n      details.nextTwabIndex,\\n      details.cardinality,\\n      _account.twabs,\\n      uint32(block.timestamp),\\n      TWAB_TIME_TO_LIVE\\n    );\\n    _account.details = AccountDetails({\\n      balance: (details.balance + _amount).toUint224(),\\n      nextTwabIndex: nextTwabIndex,\\n      cardinality: cardinality\\n    });\\n  }\\n\\n  /// @notice Decreases an account's balance and records a new twab.\\n  /// @param _account The account whose balance will be decreased\\n  /// @param _amount The amount to decrease the balance by\\n  /// @param _message The revert message in the event of insufficient balance\\n  /// @return twab The user's latest TWAB\\n  /// @return isNew Whether the TWAB is new\\n  function decreaseTwab(\\n    Account storage _account,\\n    uint256 _amount,\\n    string memory _message\\n  ) internal returns (TwabLibrary.Twab memory twab, bool isNew) {\\n    uint16 nextTwabIndex;\\n    uint16 cardinality;\\n    AccountDetails memory details = _account.details;\\n    require(details.balance >= _amount, _message);\\n    (nextTwabIndex, cardinality, twab, isNew) = TwabLibrary.update(\\n      details.balance,\\n      details.nextTwabIndex,\\n      details.cardinality,\\n      _account.twabs,\\n      uint32(block.timestamp),\\n      TWAB_TIME_TO_LIVE\\n    );\\n    _account.details = AccountDetails({\\n      balance: (details.balance - _amount).toUint224(),\\n      nextTwabIndex: nextTwabIndex,\\n      cardinality: cardinality\\n    });\\n  }\\n\\n}\\n\",\"keccak256\":\"0xc9586bb612e2863075b68a4ceeea4603868fd9d906509d146e04bad63872eb25\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/IControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ninterface IControlledToken is IERC20 {\\n\\n  /// @dev Emitted when an instance is initialized\\n  event Deployed(\\n    string name,\\n    string symbol,\\n    uint8 decimals,\\n    address controller\\n  );\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  function controller() external view returns (address);\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param user Address of the receiver of the minted tokens\\n  /// @param amount Amount of tokens to mint\\n  function controllerMint(address user, uint256 amount) external;\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param user Address of the holder account to burn tokens from\\n  /// @param amount Amount of tokens to burn\\n  function controllerBurn(address user, uint256 amount) external;\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param operator Address of the operator performing the burn action via the controller contract\\n  /// @param user Address of the holder account to burn tokens from\\n  /// @param amount Amount of tokens to burn\\n  function controllerBurnFrom(address operator, address user, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x4f2aaad7815cbffd1ba3064685ec9ecb6c9ddf14344ddb25394e1ea2f8787bea\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/ITicket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/TwabLibrary.sol\\\";\\n\\ninterface ITicket {\\n\\n  event Delegated(\\n    address indexed user,\\n    address indexed delegate\\n  );\\n\\n  /// @notice Emitted when ticket is initialized.\\n  /// @param name Ticket name (eg: PoolTogether Dai Ticket (Compound)).\\n  /// @param symbol Ticket symbol (eg: PcDAI).\\n  /// @param decimals Ticket decimals.\\n  /// @param controller Token controller address.\\n  event TicketInitialized(\\n    string name,\\n    string symbol,\\n    uint8 decimals,\\n    address controller\\n  );\\n\\n  /// @notice Emitted when a new TWAB has been recorded.\\n  /// @param ticketHolder The Ticket holder address.\\n  /// @param user The recipient of the ticket power (may be the same as the ticketHolder)\\n  /// @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\\n  event NewUserTwab(\\n    address indexed ticketHolder,\\n    address indexed user,\\n    TwabLibrary.Twab newTwab\\n  );\\n\\n  /// @notice Emitted when a new total supply TWAB has been recorded.\\n  /// @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\\n  event NewTotalSupplyTwab(\\n    TwabLibrary.Twab newTotalSupplyTwab\\n  );\\n  \\n  function getBalanceAt(address user, uint256 timestamp) external view returns(uint256);\\n  function getBalancesAt(address user, uint32[] calldata timestamp) external view returns(uint256[] memory);\\n  function getAverageBalanceBetween(address user, uint256 startTime, uint256 endTime) external view returns (uint256);\\n  function getAverageBalancesBetween(address user, uint32[] calldata startTimes, uint32[] calldata endTimes) external view returns (uint256[] memory);\\n  function getTotalSupply(uint32 timestamp) external view returns(uint256);\\n  function getTotalSupplies(uint32[] calldata timestamp) external view returns(uint256[] memory);\\n  function getAverageTotalSuppliesBetween(uint32[] calldata startTimes, uint32[] calldata endTimes) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0x0069a2efee2c7a919570c0a5a466803b5e50a8d79842a9def29e5ca8b6ba10ab\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/OverflowSafeComparator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/// @title OverflowSafeComparator library to share comparator functions between contracts\\n/// @author PoolTogether Inc.\\nlibrary OverflowSafeComparator {\\n  /// @notice 32-bit timestamps comparator.\\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n  /// @param _b Timestamp to compare against `_a`.\\n  /// @param _timestamp A timestamp truncated to 32 bits.\\n  /// @return bool Whether `_a` is chronologically < `_b`.\\n  function lt(\\n      uint32 _a,\\n      uint32 _b,\\n      uint32 _timestamp\\n  ) internal pure returns (bool) {\\n      // No need to adjust if there hasn't been an overflow\\n      if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\\n\\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n      return aAdjusted < bAdjusted;\\n  }\\n\\n  /// @notice 32-bit timestamps comparator.\\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n  /// @param _b Timestamp to compare against `_a`.\\n  /// @param _timestamp A timestamp truncated to 32 bits.\\n  /// @return bool Whether `_a` is chronologically <= `_b`.\\n  function lte(\\n      uint32 _a,\\n      uint32 _b,\\n      uint32 _timestamp\\n  ) internal pure returns (bool) {\\n      // No need to adjust if there hasn't been an overflow\\n      if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\\n\\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n      return aAdjusted <= bAdjusted;\\n  }\\n\\n  function checkedSub(\\n      uint32 _a,\\n      uint32 _b,\\n      uint32 _timestamp\\n  ) internal pure returns (uint32) {\\n      // No need to adjust if there hasn't been an overflow\\n      if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\\n\\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n      return uint32(aAdjusted - bAdjusted);\\n  }\\n}\\n\",\"keccak256\":\"0xde8b2a91634534f6e24bf470d87304176b828231d18dbde45f23c972bc173d3c\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/RingBuffer.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\nlibrary RingBuffer {\\n\\n  /// @notice Returns TWAB index.\\n  /// @dev `twabs` is a circular buffer of `MAX_CARDINALITY` size equal to 32. So the array goes from 0 to 31.\\n  /// @dev In order to navigate the circular buffer, we need to use the modulo operator.\\n  /// @dev For example, if `_index` is equal to 32, `_index % MAX_CARDINALITY` will return 0 and will point to the first element of the array.\\n  /// @param _index Index used to navigate through `twabs` circular buffer.\\n  function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n    return _index % _cardinality;\\n  }\\n\\n  function offset(uint256 _index, uint256 _amount, uint256 _cardinality) internal pure returns (uint256) {\\n    return (_index + _cardinality - _amount) % _cardinality;\\n  }\\n\\n  /// @notice Returns the index of the last recorded TWAB\\n  /// @param _nextAvailableIndex The next available twab index.  This will be recorded to next.\\n  /// @param _cardinality The cardinality of the TWAB history.\\n  /// @return The index of the last recorded TWAB\\n  function mostRecentIndex(uint256 _nextAvailableIndex, uint256 _cardinality) internal pure returns (uint256) {\\n    if (_cardinality == 0) {\\n      return 0;\\n    }\\n    return (_nextAvailableIndex + uint256(_cardinality) - 1) % _cardinality;\\n  }\\n\\n  function nextIndex(uint256 _currentIndex, uint256 _cardinality) internal pure returns (uint256) {\\n    return (_currentIndex + 1) % _cardinality;\\n  }\\n\\n}\",\"keccak256\":\"0xb055c8f88ea11a451d5950eaea35542833e581dbf075224af6adb40fc9dc4ddc\"},\"@pooltogether/v4-core/contracts/libraries/TwabLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./OverflowSafeComparator.sol\\\";\\nimport \\\"./RingBuffer.sol\\\";\\n\\n/// @title Time-Weighted Average Balance Library\\n/// @notice This library allows you to efficiently track a user's historic balance.  You can get a\\n/// @author PoolTogether Inc.\\nlibrary TwabLibrary {\\n  using OverflowSafeComparator for uint32;\\n  using SafeCast for uint256;\\n\\n  /// @notice The maximum number of twab entries\\n  uint16 public constant MAX_CARDINALITY = 65535;\\n\\n  /// @notice Time Weighted Average Balance (TWAB).\\n  /// @param amount `amount` at `timestamp`.\\n  /// @param timestamp Recorded `timestamp`.\\n  struct Twab {\\n    uint224 amount;\\n    uint32 timestamp;\\n  }\\n\\n  /// @notice Ensures the passed cardinality is a minimum of 1\\n  /// @param _cardinality The cardinality to ensure a floor of 1\\n  /// @return Returns 1 if the given cardinality is zero, otherwise return the cardinality\\n  function _minCardinality(uint16 _cardinality) internal pure returns (uint16) {\\n    return _cardinality > 0 ? _cardinality : 1;\\n  }\\n\\n  /// @notice Retrieves TWAB balance.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function getBalanceAt(\\n    uint16 _cardinality,\\n    uint16 _nextTwabIndex,\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _balance,\\n    uint32 _target,\\n    uint32 _time\\n  ) internal view returns (uint256) {\\n    uint16 cardinality = _minCardinality(_cardinality);\\n    uint16 recentIndex = uint16(RingBuffer.mostRecentIndex(_nextTwabIndex, cardinality));\\n    return getBalanceAt(_twabs, _target, _balance, recentIndex, cardinality, _time);\\n  }\\n\\n  /// @notice Calculates the average balance held by an Account for a given time frame.\\n  /// @param _startTime The start time of the time frame.\\n  /// @param _endTime The end time of the time frame.\\n  /// @param _time The current time\\n  /// @return The average balance that the user held during the time frame.\\n  function getAverageBalanceBetween(\\n    uint16 _cardinality,\\n    uint16 _nextTwabIndex,\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _balance,\\n    uint32 _startTime,\\n    uint32 _endTime,\\n    uint32 _time\\n  ) internal view returns (uint256) {\\n    uint16 card = _minCardinality(_cardinality);\\n    uint16 recentIndex = uint16(RingBuffer.mostRecentIndex(_nextTwabIndex, card));\\n    return getAverageBalanceBetween(\\n      _twabs,\\n      _balance,\\n      recentIndex,\\n      _startTime,\\n      _endTime,\\n      card,\\n      _time\\n    );\\n  }\\n\\n  /// @notice Decreases an account's balance and records a new twab.\\n  /// @param _balance The balance held since the last update\\n  /// @param _time The current time\\n  /// @param _ttl The time-to-live for TWABs. This is essentially how long twabs are kept around.  History is not available longer than the time-to-live.\\n  /// @return nextTwabIndex\\n  /// @return cardinality\\n  /// @return twab The user's latest TWAB\\n  /// @return isNew Whether the TWAB is new\\n  function update(\\n    uint224 _balance,\\n    uint16 _nextTwabIndex,\\n    uint16 _cardinality,\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint32 _time,\\n    uint32 _ttl\\n  ) internal returns (uint16 nextTwabIndex, uint16 cardinality, Twab memory twab, bool isNew) {\\n    (nextTwabIndex, cardinality, twab, isNew) = nextTwabWithExpiry(\\n      _twabs,\\n      _balance,\\n      _nextTwabIndex,\\n      _cardinality,\\n      _time,\\n      _ttl\\n    );\\n  }\\n\\n  /// @dev A struct that just used internally to bypass the stack variable limitation\\n  struct AvgHelper {\\n    uint16 twabIndex;\\n    uint16 oldestTwabIndex;\\n    uint32 startTime;\\n    uint32 endTime;\\n    uint16 cardinality;\\n  }\\n\\n  /// @notice Fetches TWABs `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\\n  /// The result may be the same TWAB, or adjacent TWABs.\\n  /// @dev The answer must be contained in the array, used when the target is located within the stored TWAB.\\n  /// boundaries: older than the most recent TWAB and younger, or the same age as, the oldest TWAB.\\n  /// @param _twabs List of TWABs to search through.\\n  /// @param _twabIndex Index of the TWAB to start searching from.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  /// @return beforeOrAt TWAB recorded before, or at, the target.\\n  /// @return atOrAfter TWAB recorded at, or after, the target.\\n  function binarySearch(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint16 _twabIndex,\\n    uint16 _oldestTwabIndex,\\n    uint32 _target,\\n    uint16 _cardinality,\\n    uint32 _time\\n  ) internal view returns (Twab memory beforeOrAt, Twab memory atOrAfter) {\\n    uint256 leftSide = _oldestTwabIndex; // Oldest TWAB\\n    uint256 rightSide = _twabIndex < leftSide ? leftSide + _cardinality - 1 : _twabIndex;\\n    uint256 currentIndex;\\n\\n    while (true) {\\n      currentIndex = (leftSide + rightSide) / 2;\\n      beforeOrAt = _twabs[uint16(RingBuffer.wrap(currentIndex, _cardinality))];\\n      uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\\n\\n      // We've landed on an uninitialized timestamp, keep searching higher (more recently)\\n      if (beforeOrAtTimestamp == 0) {\\n        leftSide = currentIndex + 1;\\n        continue;\\n      }\\n\\n      atOrAfter = _twabs[uint16(RingBuffer.nextIndex(currentIndex, _cardinality))];\\n\\n      bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\\n\\n      // Check if we've found the corresponding TWAB\\n      if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\\n        break;\\n      }\\n\\n      // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower\\n      if (!targetAtOrAfter) rightSide = currentIndex - 1;\\n\\n      // Otherwise, we keep searching higher\\n      else leftSide = currentIndex + 1;\\n    }\\n  }\\n\\n  /// @notice Calculates the TWAB for a given timestamp.  It interpolates as necessary.\\n  /// @param _twabs The TWAB history\\n  function calculateTwab(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    Twab memory newestTwab,\\n    Twab memory oldestTwab,\\n    uint16 _twabIndex,\\n    uint16 _oldestTwabIndex,\\n    uint32 targetTimestamp,\\n    uint224 _currentBalance,\\n    uint16 _cardinality,\\n    uint32 _time\\n  ) internal view returns (Twab memory) {\\n    // If `targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\\n    if (newestTwab.timestamp.lt(targetTimestamp, _time)) {\\n      return Twab({\\n        amount: newestTwab.amount + _currentBalance*(targetTimestamp - newestTwab.timestamp),\\n        timestamp: targetTimestamp\\n      });\\n    }\\n\\n    if (newestTwab.timestamp == targetTimestamp) {\\n      return newestTwab;\\n    }\\n\\n    if (oldestTwab.timestamp == targetTimestamp) {\\n      return oldestTwab;\\n    }\\n\\n    // If `targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\\n    if (targetTimestamp.lt(oldestTwab.timestamp, _time)) {\\n      return Twab({\\n        amount: 0,\\n        timestamp: targetTimestamp\\n      });\\n    }\\n\\n    // Otherwise, both timestamps must be surrounded by twabs.\\n    (\\n      Twab memory beforeOrAtStart,\\n      Twab memory afterOrAtStart\\n    ) = binarySearch(_twabs, _twabIndex, _oldestTwabIndex, targetTimestamp, _cardinality, _time);\\n\\n    uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) / (afterOrAtStart.timestamp - beforeOrAtStart.timestamp);\\n    uint224 amount = beforeOrAtStart.amount + heldBalance * (targetTimestamp - beforeOrAtStart.timestamp);\\n\\n    return Twab({\\n      amount: amount,\\n      timestamp: targetTimestamp\\n    });\\n  }\\n\\n  function getAverageBalanceBetween(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _currentBalance,\\n    uint16 _twabIndex,\\n    uint32 _startTime,\\n    uint32 _endTime,\\n    uint16 _cardinality,\\n    uint32 _time\\n  ) internal view returns (uint256) {\\n    require(_endTime > _startTime, \\\"TWAB/startTime-gt-than-endTime\\\");\\n\\n    // Find oldest Twab\\n    uint16 oldestTwabIndex = uint16(RingBuffer.nextIndex(_twabIndex, _cardinality));\\n    Twab memory oldestTwab = _twabs[oldestTwabIndex];\\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n    if (oldestTwab.timestamp == 0) {\\n      oldestTwabIndex = 0;\\n      oldestTwab = _twabs[0];\\n    }\\n\\n    return _getAverageBalanceBetween(\\n      _twabs,\\n      _currentBalance,\\n      AvgHelper({\\n        twabIndex: _twabIndex,\\n        oldestTwabIndex: oldestTwabIndex,\\n        startTime: _startTime,\\n        endTime: _endTime,\\n        cardinality: _cardinality\\n      }),\\n      oldestTwab,\\n      _time\\n    );\\n  }\\n\\n  function _getAverageBalanceBetween(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _currentBalance,\\n    AvgHelper memory helper,\\n    Twab memory _oldestTwab,\\n    uint32 _time\\n  ) private view returns (uint256) {\\n    uint32 endTime = helper.endTime > _time ? _time : helper.endTime;\\n\\n    Twab memory newestTwab = _twabs[helper.twabIndex];\\n\\n    Twab memory startTwab = calculateTwab(\\n      _twabs, newestTwab, _oldestTwab, helper.twabIndex, helper.oldestTwabIndex, helper.startTime, _currentBalance, helper.cardinality, _time\\n    );\\n    Twab memory endTwab = calculateTwab(\\n      _twabs, newestTwab, _oldestTwab, helper.twabIndex, helper.oldestTwabIndex, endTime, _currentBalance, helper.cardinality, _time\\n    );\\n\\n    // Difference in amount / time\\n    return (endTwab.amount - startTwab.amount) / (endTwab.timestamp - startTwab.timestamp);\\n  }\\n\\n  /// @notice Retrieves amount at `_target` timestamp\\n  /// @param _twabs List of TWABs to search through.\\n  /// @param _currentBalance Most recent amount recorded.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  /// @param _twabIndex Most recent TWAB index recorded.\\n  /// @return uint256 TWAB amount at `_target`.\\n  function getBalanceAt(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint32 _target,\\n    uint256 _currentBalance,\\n    uint16 _twabIndex,\\n    uint16 _cardinality,\\n    uint32 _time\\n  ) internal view returns (uint256) {\\n    uint32 targetTimestamp = _target > _time ? _time : _target;\\n\\n    Twab memory afterOrAt;\\n    Twab memory beforeOrAt = _twabs[_twabIndex];\\n\\n    // If `targetTimestamp` is chronologically after the newest TWAB, we can simply return the current balance\\n    if (beforeOrAt.timestamp.lte(targetTimestamp, _time)) {\\n      return _currentBalance;\\n    }\\n\\n    // Now, set before to the oldest TWAB\\n    uint16 oldestTwabIndex = uint16(RingBuffer.nextIndex(_twabIndex, _cardinality));\\n    beforeOrAt = _twabs[oldestTwabIndex];\\n\\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n    if (beforeOrAt.timestamp == 0) {\\n      oldestTwabIndex = 0;\\n      beforeOrAt = _twabs[0];\\n    }\\n\\n    // If `targetTimestamp` is chronologically before the oldest TWAB, we can early return\\n    if (targetTimestamp.lt(beforeOrAt.timestamp, _time)) {\\n      return 0;\\n    }\\n\\n    // Otherwise, we perform the `binarySearch`\\n    (beforeOrAt, afterOrAt) = binarySearch(_twabs, _twabIndex, oldestTwabIndex, _target, _cardinality, _time);\\n\\n    // Difference in amount / time\\n    uint224 differenceInAmount = afterOrAt.amount - beforeOrAt.amount;\\n    uint32 differenceInTime = afterOrAt.timestamp - beforeOrAt.timestamp;\\n\\n    return differenceInAmount / differenceInTime;\\n  }\\n\\n  /// @notice Records a new TWAB.\\n  /// @param _currentBalance Current `amount`.\\n  /// @return New TWAB that was recorded.\\n  function nextTwab(\\n    Twab memory _currentTwab,\\n    uint256 _currentBalance,\\n    uint32 _time\\n  ) internal pure returns (Twab memory) {\\n    // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\\n    return Twab({\\n      amount: (uint256(_currentTwab.amount) + (_currentBalance * (_time.checkedSub(_currentTwab.timestamp, _time)))).toUint224(),\\n      timestamp: _time\\n    });\\n  }\\n\\n  function calculateNextWithExpiry(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint16 _nextTwabIndex,\\n    uint16 _cardinality,\\n    uint32 _time,\\n    uint32 _ttl\\n  ) internal view returns (uint16 nextAvailableTwabIndex, uint16 nextCardinality) {\\n    uint16 cardinality = _cardinality > 0 ? _cardinality : 1;\\n/*\\n    TTL: 100\\n\\n    Example 1:\\n      next twab timestamp: 100\\n\\n      existing twab timestamps:\\n      0: 10\\n      1: 90\\n\\n      we should not eliminate 0 or else the history will be 10 seconds long\\n\\n    Example 2:\\n\\n      next twab timestamp: 105\\n\\n      existing twab timestamps\\n      0: 1\\n      1: 5\\n\\n      We can eliminate 0, because the history will be 100 seconds long\\n\\n    Q: when do we eliminate the oldest twab?\\n    A: when current time - second oldest twab >= time to live\\n    */\\n\\n    Twab memory secondOldestTwab;\\n    // if there are two or more records (cardinality is always one greater than # of records)\\n    if (cardinality > 2) {\\n      // get the second oldest twab\\n      secondOldestTwab = _twabs[uint16(RingBuffer.nextIndex(_nextTwabIndex, cardinality))];\\n    }\\n\\n    nextCardinality = cardinality;\\n    if (secondOldestTwab.timestamp == 0 || _time.checkedSub(secondOldestTwab.timestamp, _time) < _ttl) {\\n      nextCardinality = cardinality < MAX_CARDINALITY ? cardinality + 1 : MAX_CARDINALITY;\\n    }\\n\\n    nextAvailableTwabIndex = uint16(RingBuffer.nextIndex(_nextTwabIndex, nextCardinality));\\n  }\\n\\n  function nextTwabWithExpiry(\\n    Twab[MAX_CARDINALITY] storage _twabs,\\n    uint224 _balance,\\n    uint16 _nextTwabIndex,\\n    uint16 _cardinality,\\n    uint32 _time,\\n    uint32 _maxLifetime\\n  ) internal returns (uint16 nextAvailableTwabIndex, uint16 nextCardinality, Twab memory twab, bool isNew) {\\n    Twab memory newestTwab = _twabs[uint16(RingBuffer.mostRecentIndex(_nextTwabIndex, _cardinality))];\\n\\n    // if we're in the same block, return\\n    if (newestTwab.timestamp == _time) {\\n      return (_nextTwabIndex, _cardinality, newestTwab, false);\\n    }\\n\\n    (nextAvailableTwabIndex, nextCardinality) = calculateNextWithExpiry(_twabs, _nextTwabIndex, _cardinality, _time, _maxLifetime);\\n\\n    Twab memory newTwab = nextTwab(\\n      newestTwab,\\n      _balance,\\n      _time\\n    );\\n\\n    _twabs[_nextTwabIndex] = newTwab;\\n\\n    return (nextAvailableTwabIndex, nextCardinality, newTwab, true);\\n  }\\n}\\n\",\"keccak256\":\"0x9aa5005e0435bf6e5f5ea714b895747442837a760a12bf6894f176d7140aec88\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101606040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b5060405162003ed038038062003ed08339810160408190526200005a91620003f9565b838383836040518060400160405280601c81526020017f506f6f6c546f67657468657220436f6e74726f6c6c6564546f6b656e0000000081525080604051806040016040528060018152602001603160f81b81525086868160039080519060200190620000c9929190620002c2565b508051620000df906004906020840190620002c2565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a018190528183019890985260608101959095526080808601939093523085830152805180860390920182529390920190925280519401939093209092526101005250506001600160a01b038116620001dc5760405162461bcd60e51b815260206004820152602b60248201527f436f6e74726f6c6c6564546f6b656e2f636f6e74726f6c6c65722d6e6f742d7a60448201526a65726f2d6164647265737360a81b60648201526084015b60405180910390fd5b600680546001600160a01b0319166001600160a01b03831617905560ff8216620002495760405162461bcd60e51b815260206004820181905260248201527f436f6e74726f6c6c6564546f6b656e2f646563696d616c732d67742d7a65726f6044820152606401620001d3565b7fff0000000000000000000000000000000000000000000000000000000000000060f883901b16610140526040517fde72fc29218361f33503847e6f32be813f9ec92fc7c772bb59e46675c890fd0e90620002ac908690869086908690620004cb565b60405180910390a150505050505050506200059f565b828054620002d0906200054c565b90600052602060002090601f016020900481019282620002f457600085556200033f565b82601f106200030f57805160ff19168380011785556200033f565b828001600101855582156200033f579182015b828111156200033f57825182559160200191906001019062000322565b506200034d92915062000351565b5090565b5b808211156200034d576000815560010162000352565b600082601f8301126200037a57600080fd5b81516001600160401b038082111562000397576200039762000589565b604051601f8301601f19908116603f01168101908282118183101715620003c257620003c262000589565b81604052838152866020858801011115620003dc57600080fd5b620003ef84602083016020890162000519565b9695505050505050565b600080600080608085870312156200041057600080fd5b84516001600160401b03808211156200042857600080fd5b620004368883890162000368565b955060208701519150808211156200044d57600080fd5b506200045c8782880162000368565b935050604085015160ff811681146200047457600080fd5b60608601519092506001600160a01b03811681146200049257600080fd5b939692955090935050565b60008151808452620004b781602086016020860162000519565b601f01601f19169290920160200192915050565b608081526000620004e060808301876200049d565b8281036020840152620004f481876200049d565b60ff95909516604084015250506001600160a01b039190911660609091015292915050565b60005b83811015620005365781810151838201526020016200051c565b8381111562000546576000848401525b50505050565b600181811c908216806200056157607f821691505b602082108114156200058357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e05161010051610120516101405160f81c6138d3620005fd600039600061032201526000611206015260006117b901526000611808015260006117e3015260006117670152600061179001526138d36000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063631b5dfb1161010f57806390596dd1116100a2578063cf42dca811610071578063cf42dca814610533578063d505accf14610546578063dd62ed3e14610559578063f77c47911461059257600080fd5b806390596dd1146104f257806395d89b4114610505578063a457c2d71461050d578063a9059cbb1461052057600080fd5b80637ecebe00116100de5780637ecebe001461046a5780638200d8731461047d5780638d22ea2a146104995780638f02fee4146104df57600080fd5b8063631b5dfb1461041e5780636cdd0be21461043157806370a08231146104445780637966cd671461045757600080fd5b80633613f92111610187578063405e22ad11610156578063405e22ad146103c35780634382b0f6146103e35780635c19a95c146103f65780635d7b07581461040b57600080fd5b80633613f9211461034c5780633644e5151461036b57806336bb2a381461037357806339509351146103b057600080fd5b806323b872dd116101c357806323b872dd1461024657806326ca8adb146102595780632aceb5341461026c578063313ce5671461031b57600080fd5b806306fdde03146101ea578063095ea7b31461020857806318160ddd1461022b575b600080fd5b6101f26105a5565b6040516101ff91906135f0565b60405180910390f35b61021b61021636600461347b565b610637565b60405190151581526020016101ff565b6008546001600160e01b03165b6040519081526020016101ff565b61021b6102543660046132ba565b61064e565b61023861026736600461347b565b610714565b6102e461027a36600461326c565b6040805160608082018352600080835260208084018290529284018190526001600160a01b03949094168452600782529282902082519384018352546001600160e01b038116845261ffff600160e01b8204811692850192909252600160f01b9004169082015290565b6040805182516001600160e01b0316815260208084015161ffff9081169183019190915292820151909216908201526060016101ff565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101ff565b61035662dd7c0081565b60405163ffffffff90911681526020016101ff565b610238610781565b61038661038136600461343d565b610790565b6040805182516001600160e01b0316815260209283015163ffffffff1692810192909252016101ff565b61021b6103be36600461347b565b610806565b6103d66103d1366004613369565b610842565b6040516101ff91906135ac565b6102386103f1366004613586565b610962565b61040961040436600461326c565b6109b2565b005b61040961041936600461347b565b610abd565b61040961042c3660046132ba565b610b25565b6103d661043f3660046133bc565b610be9565b61023861045236600461326c565b610d99565b6103d661046536600461351a565b610db9565b61023861047836600461326c565b610f12565b61048661ffff81565b60405161ffff90911681526020016101ff565b6104c76104a736600461326c565b6001600160a01b0390811660009081526201000860205260409020541690565b6040516001600160a01b0390911681526020016101ff565b6102386104ed3660046134a5565b610f30565b61040961050036600461347b565b610f9f565b6101f2611003565b61021b61051b36600461347b565b611012565b61021b61052e36600461347b565b6110c3565b6103d66105413660046134d8565b6110d0565b6104096105543660046132f6565b6111b2565b610238610567366004613287565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6006546104c7906001600160a01b031681565b6060600380546105b4906137a9565b80601f01602080910402602001604051908101604052809291908181526020018280546105e0906137a9565b801561062d5780601f106106025761010080835404028352916020019161062d565b820191906000526020600020905b81548152906001019060200180831161061057829003601f168201915b5050505050905090565b6000610644338484611316565b5060015b92915050565b600061065b84848461146e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106fa5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6107078533858403611316565b60019150505b9392505050565b6001600160a01b0382166000908152600760209081526040808320815160608101835281546001600160e01b038116825261ffff600160e01b8204811695830195909552600160f01b9004909316918301919091529061077990600183019085611747565b949350505050565b600061078b611763565b905090565b60408051808201909152600080825260208201526001600160a01b038316600090815260076020526040902060010161ffff8084169081106107d4576107d461384f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201529392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161064491859061083d90869061368d565b611316565b60608160008167ffffffffffffffff81111561086057610860613865565b604051908082528060200260200182016040528015610889578160200160208202803683370190505b506001600160a01b0387166000908152600760209081526040808320815160608101835281546001600160e01b038116825261ffff600160e01b8204811695830195909552600160f01b900490931691830191909152929350905b848110156109555761092683600101838a8a858181106109065761090661384f565b905060200201602081019061091b9190613586565b63ffffffff16611747565b8482815181106109385761093861384f565b60209081029190910101528061094d816137de565b9150506108e4565b5091979650505050505050565b604080516060810182526008546001600160e01b038116825261ffff600160e01b820481166020840152600160f01b90910416918101919091526000906106489060099063ffffffff8516611747565b33600090815262010009602090815260408083205462010008909252909120546001600160a01b031680156109fa576109f53382846001600160e01b0316611856565b610a0e565b610a0e3333846001600160e01b0316611856565b6001600160a01b03831615610a3657610a313384846001600160e01b0316611914565b610a4a565b610a4a3333846001600160e01b0316611914565b33600081815262010008602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03881690811790915590519092917f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea291a3505050565b6006546001600160a01b03163314610b175760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106f1565b610b218282611938565b5050565b6006546001600160a01b03163314610b7f5760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106f1565b816001600160a01b0316836001600160a01b031614610bda576001600160a01b038281166000908152600160209081526040808320938716835292905290812054610bcb908390613775565b9050610bd8838583611316565b505b610be48282611ad8565b505050565b6060838214610c605760405162461bcd60e51b815260206004820152602360248201527f5469636b65742f73746172742d656e642d74696d65732d6c656e6774682d6d6160448201527f746368000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b6001600160a01b0386166000908152600760205260408120908567ffffffffffffffff811115610c9257610c92613865565b604051908082528060200260200182016040528015610cbb578160200160208202803683370190505b50905060005b86811015610d8d576040805160608101825284546001600160e01b038116825261ffff600160e01b820481166020840152600160f01b9091041691810191909152610d5e9060018501908a8a85818110610d1d57610d1d61384f565b9050602002016020810190610d329190613586565b898986818110610d4457610d4461384f565b9050602002016020810190610d599190613586565b611d36565b828281518110610d7057610d7061384f565b602090810291909101015280610d85816137de565b915050610cc1565b50979650505050505050565b6001600160a01b0381166000908152620100096020526040812054610648565b6060838214610e305760405162461bcd60e51b815260206004820152602360248201527f5469636b65742f73746172742d656e642d74696d65732d6c656e6774682d6d6160448201527f746368000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b600860008567ffffffffffffffff811115610e4d57610e4d613865565b604051908082528060200260200182016040528015610e76578160200160208202803683370190505b50905060005b86811015610f07576040805160608101825284546001600160e01b038116825261ffff600160e01b820481166020840152600160f01b9091041691810191909152610ed89060018501908a8a85818110610d1d57610d1d61384f565b828281518110610eea57610eea61384f565b602090810291909101015280610eff816137de565b915050610e7c565b509695505050505050565b6001600160a01b038116600090815260056020526040812054610648565b6001600160a01b0383166000908152600760209081526040808320815160608101835281546001600160e01b038116825261ffff600160e01b8204811695830195909552600160f01b90049093169183019190915290610f969060018301908686611d36565b95945050505050565b6006546001600160a01b03163314610ff95760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106f1565b610b218282611ad8565b6060600480546105b4906137a9565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156110ac5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106f1565b6110b93385858403611316565b5060019392505050565b600061064433848461146e565b60608160008167ffffffffffffffff8111156110ee576110ee613865565b604051908082528060200260200182016040528015611117578160200160208202803683370190505b50604080516060810182526008546001600160e01b038116825261ffff600160e01b820481166020840152600160f01b909104169181019190915290915060005b838110156111a7576111786009838989858181106109065761090661384f565b83828151811061118a5761118a61384f565b60209081029190910101528061119f816137de565b915050611158565b509095945050505050565b834211156112025760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016106f1565b60007f00000000000000000000000000000000000000000000000000000000000000008888886112318c611d53565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061128c82611d7b565b9050600061129c82878787611de4565b9050896001600160a01b0316816001600160a01b0316146112ff5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016106f1565b61130a8a8a8a611316565b50505050505050505050565b6001600160a01b0383166113915760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106f1565b6001600160a01b03821661140d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166114ea5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106f1565b6001600160a01b0382166115665760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b80826001600160a01b0316846001600160a01b0316146116f4576001600160a01b03841660009081526201000960205260409020546001600160e01b03821681101561161a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106f1565b6001600160a01b0380861660009081526201000960205260408082206001600160e01b03861680860390915592871682528120805490919061165d90849061368d565b90915550506001600160a01b03808616600090815262010008602052604090205416801561169557611690868286611856565b6116a0565b6116a0868786611856565b6001600160a01b0380861660009081526201000860205260409020541680156116dc576116d78682866001600160e01b0316611914565b6116f0565b6116f08687866001600160e01b0316611914565b5050505b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161173991815260200190565b60405180910390a350505050565b6000610779836040015184602001518686600001518642611e0c565b60007f00000000000000000000000000000000000000000000000000000000000000004614156117b257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b600060076000846001600160a01b03166001600160a01b0316815260200190815260200160002090506000806118a5838560405180606001604052806022815260200161387c60229139611e56565b91509150801561190c576040805183516001600160e01b0316815260208085015163ffffffff16908201526001600160a01b0380881692908916917f56bf5251c21af3be0462e65380f02036c247ea4203fda153f3a9c3e7f8f9318d910160405180910390a35b505050505050565b6001600160a01b038216600090815260076020526040812090806118a58385611fcb565b6001600160a01b03821661198e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106f1565b60006119998261210d565b90506001600160a01b0383166000908152620100096020526040812080546001600160e01b03841692906119ce90849061368d565b9091555060009050806119eb60086001600160e01b038516611fcb565b915091508015611a42576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a15b6001600160a01b038086166000908152620100086020526040902054168015611a7e57611a798682866001600160e01b0316611914565b611a92565b611a928687866001600160e01b0316611914565b6040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361190c565b6001600160a01b038216611b545760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b6000611b5f8261210d565b9050600080611b916008846001600160e01b031660405180606001604052806022815260200161387c60229139611e56565b915091508015611be8576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a15b6001600160a01b03851660009081526201000960205260409020546001600160e01b038416811015611c825760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b6001600160a01b03808716600090815262010009602090815260408083206001600160e01b0389168603905562010008909152902054168015611cd857611cd38782876001600160e01b0316611856565b611cec565b611cec8788876001600160e01b0316611856565b6040518681526000906001600160a01b038916907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350505050505050565b6000610f9684604001518560200151878760000151878742612190565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6000610648611d88611763565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611df5878787876121d1565b91509150611e02816122be565b5095945050505050565b600080611e18886124b2565b90506000611e2e8861ffff168361ffff166124c6565b9050611e478786886001600160e01b03168486896124f6565b925050505b9695505050505050565b60408051808201909152600080825260208201526040805160608101825285546001600160e01b03811680835261ffff600160e01b830481166020850152600160f01b90920490911692820192909252600091829182918690881115611ecf5760405162461bcd60e51b81526004016106f191906135f0565b50611ef08160000151826020015183604001518b6001014262dd7c006126be565b604080516060810190915285519299509097509295509093508190611f2890611f23908b906001600160e01b0316613775565b61210d565b6001600160e01b03908116825261ffff95861660208084019190915294861660409283015282518b549584015193909201518616600160f01b027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909616600160e01b027fffff0000000000000000000000000000000000000000000000000000000000009095169116179290921791909116919091179095559094909350915050565b60408051808201909152600080825260208201526040805160608101825284546001600160e01b03811680835261ffff600160e01b8304811660208501819052600160f01b909304169383018490526000938493849390926120389290919060018b014262dd7c006126be565b60408051606081019091528551929950909750929550909350819061206b90611f23908a906001600160e01b031661368d565b6001600160e01b03908116825261ffff95861660208084019190915294861660409283015282518a549584015193909201518616600160f01b027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909616600160e01b027fffff00000000000000000000000000000000000000000000000000000000000090951691161792909217919091169190911790945590939092509050565b60006001600160e01b0382111561218c5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f323420626974730000000000000000000000000000000000000000000000000060648201526084016106f1565b5090565b60008061219c896124b2565b905060006121b28961ffff168361ffff166124c6565b90506121c38888838989878a6126fb565b9a9950505050505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561220857506000905060036122b5565b8460ff16601b1415801561222057508460ff16601c14155b1561223157506000905060046122b5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612285573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166122ae576000600192509250506122b5565b9150600090505b94509492505050565b60008160048111156122d2576122d2613839565b14156122db5750565b60018160048111156122ef576122ef613839565b141561233d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106f1565b600281600481111561235157612351613839565b141561239f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106f1565b60038160048111156123b3576123b3613839565b14156124275760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b600481600481111561243b5761243b613839565b14156124af5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b50565b6000808261ffff161161218c576001610648565b6000816124d557506000610648565b8160016124e2828661368d565b6124ec9190613775565b61070d91906137f9565b6000808263ffffffff168763ffffffff16116125125786612514565b825b60408051808201909152600080825260208201529091506000898761ffff1661ffff81106125445761254461384f565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b90910481166020830181905291925061258591908590889061283616565b1561259557879350505050611e4c565b60006125a98861ffff168861ffff16612907565b90508a8161ffff1661ffff81106125c2576125c261384f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff16602082018190529092506126255750506040805180820190915289546001600160e01b0381168252600160e01b900463ffffffff16602082015260005b6126448260200151878663ffffffff166129159092919063ffffffff16565b15612656576000945050505050611e4c565b6126648b89838d8b8b6129e4565b8151815191955091935060009161267a9161374d565b9050600083602001518560200151612692919061378c565b90506126a463ffffffff8216836136c5565b6001600160e01b03169d9c50505050505050505050505050565b6040805180820190915260008082526020820181905290819060006126e7878b8b8b8a8a612ba7565b929d919c509a509098509650505050505050565b60008463ffffffff168463ffffffff16116127585760405162461bcd60e51b815260206004820152601e60248201527f545741422f737461727454696d652d67742d7468616e2d656e6454696d65000060448201526064016106f1565b600061276c8761ffff168561ffff16612907565b90506000898261ffff1661ffff81106127875761278761384f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff16602082018190529091506127eb5750506040805180820190915288546001600160e01b0381168252600160e01b900463ffffffff1660208201526000905b6121c38a8a6040518060a001604052808c61ffff1681526020018661ffff1681526020018b63ffffffff1681526020018a63ffffffff1681526020018961ffff168152508488612cb3565b60008163ffffffff168463ffffffff161115801561286057508163ffffffff168363ffffffff1611155b1561287c578263ffffffff168463ffffffff161115905061070d565b60008263ffffffff168563ffffffff16116128ab576128a663ffffffff86166401000000006136a5565b6128b3565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116128eb576128e663ffffffff86166401000000006136a5565b6128f3565b8463ffffffff165b64ffffffffff169091111595945050505050565b6000816124ec84600161368d565b60008163ffffffff168463ffffffff161115801561293f57508163ffffffff168363ffffffff1611155b1561295a578263ffffffff168463ffffffff1610905061070d565b60008263ffffffff168563ffffffff16116129895761298463ffffffff86166401000000006136a5565b612991565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116129c9576129c463ffffffff86166401000000006136a5565b6129d1565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008661ffff1690506000818961ffff1610612a2c578861ffff16612a46565b6001612a3c61ffff88168461368d565b612a469190613775565b905060005b6002612a57838561368d565b612a6191906136eb565b90508a612a72828961ffff16612dc3565b61ffff1661ffff8110612a8757612a8761384f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820181905290955080612acf57612ac782600161368d565b935050612a4b565b8b612ade838a61ffff16612907565b61ffff1661ffff8110612af357612af361384f565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b90910481166020830152909550600090612b3890838116908c908b9061283616565b9050808015612b615750612b618660200151898c63ffffffff166128369092919063ffffffff16565b15612b6d575050612b99565b80612b8457612b7d600184613775565b9350612b92565b612b8f83600161368d565b94505b5050612a4b565b505050965096945050505050565b604080518082019091526000808252602082018190529081906000808a612bd68a61ffff168a61ffff166124c6565b61ffff1661ffff8110612beb57612beb61384f565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b90910481166020830181905291925088161415612c3657889450879350915060009050612ca6565b612c438b8a8a8a8a612dcf565b90955093506000612c5e826001600160e01b038d168a612eed565b9050808c8b61ffff1661ffff8110612c7857612c7861384f565b825160209093015163ffffffff16600160e01b026001600160e01b0390931692909217910155925060019150505b9650965096509692505050565b6000808263ffffffff16856060015163ffffffff1611612cd7578460600151612cd9565b825b9050600087866000015161ffff1661ffff8110612cf857612cf861384f565b60408051808201825291909201546001600160e01b0381168252600160e01b900463ffffffff166020808301919091528851908901519289015160808a0151929450600093612d51938d9387938c9391928f908d612f74565b90506000612d728a84898b600001518c60200151898f8f608001518e612f74565b905081602001518160200151612d88919061378c565b63ffffffff1682600001518260000151612da2919061374d565b612dac91906136c5565b6001600160e01b03169a9950505050505050505050565b600061070d82846137f9565b6000806000808661ffff1611612de6576001612de8565b855b604080518082019091526000808252602082015290915060028261ffff161115612e625788612e1f8961ffff168461ffff16612907565b61ffff1661ffff8110612e3457612e3461384f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff16602082015290505b819250806020015163ffffffff1660001480612ea757508463ffffffff16612e9f8260200151888963ffffffff1661313a9092919063ffffffff16565b63ffffffff16105b15612ecd5761ffff82811610612ebf5761ffff612eca565b612eca826001613645565b92505b612edf8861ffff168461ffff16612907565b935050509550959350505050565b60408051808201909152600080825260208201526040518060400160405280612f53612f2e8760200151868763ffffffff1661313a9092919063ffffffff16565b612f3e9063ffffffff168761372e565b8751611f2391906001600160e01b031661368d565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b6040805180820190915260008082526020820152612fa785838b6020015163ffffffff166129159092919063ffffffff16565b156130025760405180604001604052808a6020015187612fc7919061378c565b612fd79063ffffffff16876136ff565b8b51612fe3919061366b565b6001600160e01b031681526020018663ffffffff16815250905061312d565b8463ffffffff16896020015163ffffffff16141561302157508761312d565b8463ffffffff16886020015163ffffffff16141561304057508661312d565b61305f8860200151838763ffffffff166129159092919063ffffffff16565b156130845750604080518082019091526000815263ffffffff8516602082015261312d565b6000806130958c8a8a8a89896129e4565b915091506000826020015182602001516130af919061378c565b63ffffffff16836000015183600001516130c9919061374d565b6130d391906136c5565b905060008360200151896130e7919061378c565b6130f79063ffffffff16836136ff565b8451613103919061366b565b604080518082019091526001600160e01b03909116815263ffffffff8a1660208201529450505050505b9998505050505050505050565b60008163ffffffff168463ffffffff161115801561316457508163ffffffff168363ffffffff1611155b1561317a57613173838561378c565b905061070d565b60008263ffffffff168563ffffffff16116131a9576131a463ffffffff86166401000000006136a5565b6131b1565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116131e9576131e463ffffffff86166401000000006136a5565b6131f1565b8463ffffffff165b64ffffffffff169050611e4c8183613775565b80356001600160a01b038116811461321b57600080fd5b919050565b60008083601f84011261323257600080fd5b50813567ffffffffffffffff81111561324a57600080fd5b6020830191508360208260051b850101111561326557600080fd5b9250929050565b60006020828403121561327e57600080fd5b61070d82613204565b6000806040838503121561329a57600080fd5b6132a383613204565b91506132b160208401613204565b90509250929050565b6000806000606084860312156132cf57600080fd5b6132d884613204565b92506132e660208501613204565b9150604084013590509250925092565b600080600080600080600060e0888a03121561331157600080fd5b61331a88613204565b965061332860208901613204565b95506040880135945060608801359350608088013560ff8116811461334c57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060006040848603121561337e57600080fd5b61338784613204565b9250602084013567ffffffffffffffff8111156133a357600080fd5b6133af86828701613220565b9497909650939450505050565b6000806000806000606086880312156133d457600080fd5b6133dd86613204565b9450602086013567ffffffffffffffff808211156133fa57600080fd5b61340689838a01613220565b9096509450604088013591508082111561341f57600080fd5b5061342c88828901613220565b969995985093965092949392505050565b6000806040838503121561345057600080fd5b61345983613204565b9150602083013561ffff8116811461347057600080fd5b809150509250929050565b6000806040838503121561348e57600080fd5b61349783613204565b946020939093013593505050565b6000806000606084860312156134ba57600080fd5b6134c384613204565b95602085013595506040909401359392505050565b600080602083850312156134eb57600080fd5b823567ffffffffffffffff81111561350257600080fd5b61350e85828601613220565b90969095509350505050565b6000806000806040858703121561353057600080fd5b843567ffffffffffffffff8082111561354857600080fd5b61355488838901613220565b9096509450602087013591508082111561356d57600080fd5b5061357a87828801613220565b95989497509550505050565b60006020828403121561359857600080fd5b813563ffffffff8116811461070d57600080fd5b6020808252825182820181905260009190848201906040850190845b818110156135e4578351835292840192918401916001016135c8565b50909695505050505050565b600060208083528351808285015260005b8181101561361d57858101830151858201604001528201613601565b8181111561362f576000604083870101525b50601f01601f1916929092016040019392505050565b600061ffff8083168185168083038211156136625761366261380d565b01949350505050565b60006001600160e01b038083168185168083038211156136625761366261380d565b600082198211156136a0576136a061380d565b500190565b600064ffffffffff8083168185168083038211156136625761366261380d565b60006001600160e01b03808416806136df576136df613823565b92169190910492915050565b6000826136fa576136fa613823565b500490565b60006001600160e01b03808316818516818304811182151516156137255761372561380d565b02949350505050565b60008160001904831182151516156137485761374861380d565b500290565b60006001600160e01b038381169083168181101561376d5761376d61380d565b039392505050565b6000828210156137875761378761380d565b500390565b600063ffffffff8381169083168181101561376d5761376d61380d565b600181811c908216806137bd57607f821691505b60208210811415611d7557634e487b7160e01b600052602260045260246000fd5b60006000198214156137f2576137f261380d565b5060010190565b60008261380857613808613823565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365a26469706673582212204ed21d98cd3838b524bbba3122992a6d957c0bcc2467d3ad2520a630d350467564736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c8063631b5dfb1161010f57806390596dd1116100a2578063cf42dca811610071578063cf42dca814610533578063d505accf14610546578063dd62ed3e14610559578063f77c47911461059257600080fd5b806390596dd1146104f257806395d89b4114610505578063a457c2d71461050d578063a9059cbb1461052057600080fd5b80637ecebe00116100de5780637ecebe001461046a5780638200d8731461047d5780638d22ea2a146104995780638f02fee4146104df57600080fd5b8063631b5dfb1461041e5780636cdd0be21461043157806370a08231146104445780637966cd671461045757600080fd5b80633613f92111610187578063405e22ad11610156578063405e22ad146103c35780634382b0f6146103e35780635c19a95c146103f65780635d7b07581461040b57600080fd5b80633613f9211461034c5780633644e5151461036b57806336bb2a381461037357806339509351146103b057600080fd5b806323b872dd116101c357806323b872dd1461024657806326ca8adb146102595780632aceb5341461026c578063313ce5671461031b57600080fd5b806306fdde03146101ea578063095ea7b31461020857806318160ddd1461022b575b600080fd5b6101f26105a5565b6040516101ff91906135f0565b60405180910390f35b61021b61021636600461347b565b610637565b60405190151581526020016101ff565b6008546001600160e01b03165b6040519081526020016101ff565b61021b6102543660046132ba565b61064e565b61023861026736600461347b565b610714565b6102e461027a36600461326c565b6040805160608082018352600080835260208084018290529284018190526001600160a01b03949094168452600782529282902082519384018352546001600160e01b038116845261ffff600160e01b8204811692850192909252600160f01b9004169082015290565b6040805182516001600160e01b0316815260208084015161ffff9081169183019190915292820151909216908201526060016101ff565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101ff565b61035662dd7c0081565b60405163ffffffff90911681526020016101ff565b610238610781565b61038661038136600461343d565b610790565b6040805182516001600160e01b0316815260209283015163ffffffff1692810192909252016101ff565b61021b6103be36600461347b565b610806565b6103d66103d1366004613369565b610842565b6040516101ff91906135ac565b6102386103f1366004613586565b610962565b61040961040436600461326c565b6109b2565b005b61040961041936600461347b565b610abd565b61040961042c3660046132ba565b610b25565b6103d661043f3660046133bc565b610be9565b61023861045236600461326c565b610d99565b6103d661046536600461351a565b610db9565b61023861047836600461326c565b610f12565b61048661ffff81565b60405161ffff90911681526020016101ff565b6104c76104a736600461326c565b6001600160a01b0390811660009081526201000860205260409020541690565b6040516001600160a01b0390911681526020016101ff565b6102386104ed3660046134a5565b610f30565b61040961050036600461347b565b610f9f565b6101f2611003565b61021b61051b36600461347b565b611012565b61021b61052e36600461347b565b6110c3565b6103d66105413660046134d8565b6110d0565b6104096105543660046132f6565b6111b2565b610238610567366004613287565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6006546104c7906001600160a01b031681565b6060600380546105b4906137a9565b80601f01602080910402602001604051908101604052809291908181526020018280546105e0906137a9565b801561062d5780601f106106025761010080835404028352916020019161062d565b820191906000526020600020905b81548152906001019060200180831161061057829003601f168201915b5050505050905090565b6000610644338484611316565b5060015b92915050565b600061065b84848461146e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106fa5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6107078533858403611316565b60019150505b9392505050565b6001600160a01b0382166000908152600760209081526040808320815160608101835281546001600160e01b038116825261ffff600160e01b8204811695830195909552600160f01b9004909316918301919091529061077990600183019085611747565b949350505050565b600061078b611763565b905090565b60408051808201909152600080825260208201526001600160a01b038316600090815260076020526040902060010161ffff8084169081106107d4576107d461384f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201529392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161064491859061083d90869061368d565b611316565b60608160008167ffffffffffffffff81111561086057610860613865565b604051908082528060200260200182016040528015610889578160200160208202803683370190505b506001600160a01b0387166000908152600760209081526040808320815160608101835281546001600160e01b038116825261ffff600160e01b8204811695830195909552600160f01b900490931691830191909152929350905b848110156109555761092683600101838a8a858181106109065761090661384f565b905060200201602081019061091b9190613586565b63ffffffff16611747565b8482815181106109385761093861384f565b60209081029190910101528061094d816137de565b9150506108e4565b5091979650505050505050565b604080516060810182526008546001600160e01b038116825261ffff600160e01b820481166020840152600160f01b90910416918101919091526000906106489060099063ffffffff8516611747565b33600090815262010009602090815260408083205462010008909252909120546001600160a01b031680156109fa576109f53382846001600160e01b0316611856565b610a0e565b610a0e3333846001600160e01b0316611856565b6001600160a01b03831615610a3657610a313384846001600160e01b0316611914565b610a4a565b610a4a3333846001600160e01b0316611914565b33600081815262010008602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03881690811790915590519092917f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea291a3505050565b6006546001600160a01b03163314610b175760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106f1565b610b218282611938565b5050565b6006546001600160a01b03163314610b7f5760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106f1565b816001600160a01b0316836001600160a01b031614610bda576001600160a01b038281166000908152600160209081526040808320938716835292905290812054610bcb908390613775565b9050610bd8838583611316565b505b610be48282611ad8565b505050565b6060838214610c605760405162461bcd60e51b815260206004820152602360248201527f5469636b65742f73746172742d656e642d74696d65732d6c656e6774682d6d6160448201527f746368000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b6001600160a01b0386166000908152600760205260408120908567ffffffffffffffff811115610c9257610c92613865565b604051908082528060200260200182016040528015610cbb578160200160208202803683370190505b50905060005b86811015610d8d576040805160608101825284546001600160e01b038116825261ffff600160e01b820481166020840152600160f01b9091041691810191909152610d5e9060018501908a8a85818110610d1d57610d1d61384f565b9050602002016020810190610d329190613586565b898986818110610d4457610d4461384f565b9050602002016020810190610d599190613586565b611d36565b828281518110610d7057610d7061384f565b602090810291909101015280610d85816137de565b915050610cc1565b50979650505050505050565b6001600160a01b0381166000908152620100096020526040812054610648565b6060838214610e305760405162461bcd60e51b815260206004820152602360248201527f5469636b65742f73746172742d656e642d74696d65732d6c656e6774682d6d6160448201527f746368000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b600860008567ffffffffffffffff811115610e4d57610e4d613865565b604051908082528060200260200182016040528015610e76578160200160208202803683370190505b50905060005b86811015610f07576040805160608101825284546001600160e01b038116825261ffff600160e01b820481166020840152600160f01b9091041691810191909152610ed89060018501908a8a85818110610d1d57610d1d61384f565b828281518110610eea57610eea61384f565b602090810291909101015280610eff816137de565b915050610e7c565b509695505050505050565b6001600160a01b038116600090815260056020526040812054610648565b6001600160a01b0383166000908152600760209081526040808320815160608101835281546001600160e01b038116825261ffff600160e01b8204811695830195909552600160f01b90049093169183019190915290610f969060018301908686611d36565b95945050505050565b6006546001600160a01b03163314610ff95760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106f1565b610b218282611ad8565b6060600480546105b4906137a9565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156110ac5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106f1565b6110b93385858403611316565b5060019392505050565b600061064433848461146e565b60608160008167ffffffffffffffff8111156110ee576110ee613865565b604051908082528060200260200182016040528015611117578160200160208202803683370190505b50604080516060810182526008546001600160e01b038116825261ffff600160e01b820481166020840152600160f01b909104169181019190915290915060005b838110156111a7576111786009838989858181106109065761090661384f565b83828151811061118a5761118a61384f565b60209081029190910101528061119f816137de565b915050611158565b509095945050505050565b834211156112025760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016106f1565b60007f00000000000000000000000000000000000000000000000000000000000000008888886112318c611d53565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061128c82611d7b565b9050600061129c82878787611de4565b9050896001600160a01b0316816001600160a01b0316146112ff5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016106f1565b61130a8a8a8a611316565b50505050505050505050565b6001600160a01b0383166113915760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106f1565b6001600160a01b03821661140d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166114ea5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106f1565b6001600160a01b0382166115665760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b80826001600160a01b0316846001600160a01b0316146116f4576001600160a01b03841660009081526201000960205260409020546001600160e01b03821681101561161a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106f1565b6001600160a01b0380861660009081526201000960205260408082206001600160e01b03861680860390915592871682528120805490919061165d90849061368d565b90915550506001600160a01b03808616600090815262010008602052604090205416801561169557611690868286611856565b6116a0565b6116a0868786611856565b6001600160a01b0380861660009081526201000860205260409020541680156116dc576116d78682866001600160e01b0316611914565b6116f0565b6116f08687866001600160e01b0316611914565b5050505b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161173991815260200190565b60405180910390a350505050565b6000610779836040015184602001518686600001518642611e0c565b60007f00000000000000000000000000000000000000000000000000000000000000004614156117b257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b600060076000846001600160a01b03166001600160a01b0316815260200190815260200160002090506000806118a5838560405180606001604052806022815260200161387c60229139611e56565b91509150801561190c576040805183516001600160e01b0316815260208085015163ffffffff16908201526001600160a01b0380881692908916917f56bf5251c21af3be0462e65380f02036c247ea4203fda153f3a9c3e7f8f9318d910160405180910390a35b505050505050565b6001600160a01b038216600090815260076020526040812090806118a58385611fcb565b6001600160a01b03821661198e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106f1565b60006119998261210d565b90506001600160a01b0383166000908152620100096020526040812080546001600160e01b03841692906119ce90849061368d565b9091555060009050806119eb60086001600160e01b038516611fcb565b915091508015611a42576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a15b6001600160a01b038086166000908152620100086020526040902054168015611a7e57611a798682866001600160e01b0316611914565b611a92565b611a928687866001600160e01b0316611914565b6040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a361190c565b6001600160a01b038216611b545760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b6000611b5f8261210d565b9050600080611b916008846001600160e01b031660405180606001604052806022815260200161387c60229139611e56565b915091508015611be8576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a15b6001600160a01b03851660009081526201000960205260409020546001600160e01b038416811015611c825760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b6001600160a01b03808716600090815262010009602090815260408083206001600160e01b0389168603905562010008909152902054168015611cd857611cd38782876001600160e01b0316611856565b611cec565b611cec8788876001600160e01b0316611856565b6040518681526000906001600160a01b038916907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350505050505050565b6000610f9684604001518560200151878760000151878742612190565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6000610648611d88611763565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611df5878787876121d1565b91509150611e02816122be565b5095945050505050565b600080611e18886124b2565b90506000611e2e8861ffff168361ffff166124c6565b9050611e478786886001600160e01b03168486896124f6565b925050505b9695505050505050565b60408051808201909152600080825260208201526040805160608101825285546001600160e01b03811680835261ffff600160e01b830481166020850152600160f01b90920490911692820192909252600091829182918690881115611ecf5760405162461bcd60e51b81526004016106f191906135f0565b50611ef08160000151826020015183604001518b6001014262dd7c006126be565b604080516060810190915285519299509097509295509093508190611f2890611f23908b906001600160e01b0316613775565b61210d565b6001600160e01b03908116825261ffff95861660208084019190915294861660409283015282518b549584015193909201518616600160f01b027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909616600160e01b027fffff0000000000000000000000000000000000000000000000000000000000009095169116179290921791909116919091179095559094909350915050565b60408051808201909152600080825260208201526040805160608101825284546001600160e01b03811680835261ffff600160e01b8304811660208501819052600160f01b909304169383018490526000938493849390926120389290919060018b014262dd7c006126be565b60408051606081019091528551929950909750929550909350819061206b90611f23908a906001600160e01b031661368d565b6001600160e01b03908116825261ffff95861660208084019190915294861660409283015282518a549584015193909201518616600160f01b027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909616600160e01b027fffff00000000000000000000000000000000000000000000000000000000000090951691161792909217919091169190911790945590939092509050565b60006001600160e01b0382111561218c5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f323420626974730000000000000000000000000000000000000000000000000060648201526084016106f1565b5090565b60008061219c896124b2565b905060006121b28961ffff168361ffff166124c6565b90506121c38888838989878a6126fb565b9a9950505050505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561220857506000905060036122b5565b8460ff16601b1415801561222057508460ff16601c14155b1561223157506000905060046122b5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612285573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166122ae576000600192509250506122b5565b9150600090505b94509492505050565b60008160048111156122d2576122d2613839565b14156122db5750565b60018160048111156122ef576122ef613839565b141561233d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106f1565b600281600481111561235157612351613839565b141561239f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106f1565b60038160048111156123b3576123b3613839565b14156124275760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b600481600481111561243b5761243b613839565b14156124af5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106f1565b50565b6000808261ffff161161218c576001610648565b6000816124d557506000610648565b8160016124e2828661368d565b6124ec9190613775565b61070d91906137f9565b6000808263ffffffff168763ffffffff16116125125786612514565b825b60408051808201909152600080825260208201529091506000898761ffff1661ffff81106125445761254461384f565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b90910481166020830181905291925061258591908590889061283616565b1561259557879350505050611e4c565b60006125a98861ffff168861ffff16612907565b90508a8161ffff1661ffff81106125c2576125c261384f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff16602082018190529092506126255750506040805180820190915289546001600160e01b0381168252600160e01b900463ffffffff16602082015260005b6126448260200151878663ffffffff166129159092919063ffffffff16565b15612656576000945050505050611e4c565b6126648b89838d8b8b6129e4565b8151815191955091935060009161267a9161374d565b9050600083602001518560200151612692919061378c565b90506126a463ffffffff8216836136c5565b6001600160e01b03169d9c50505050505050505050505050565b6040805180820190915260008082526020820181905290819060006126e7878b8b8b8a8a612ba7565b929d919c509a509098509650505050505050565b60008463ffffffff168463ffffffff16116127585760405162461bcd60e51b815260206004820152601e60248201527f545741422f737461727454696d652d67742d7468616e2d656e6454696d65000060448201526064016106f1565b600061276c8761ffff168561ffff16612907565b90506000898261ffff1661ffff81106127875761278761384f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff16602082018190529091506127eb5750506040805180820190915288546001600160e01b0381168252600160e01b900463ffffffff1660208201526000905b6121c38a8a6040518060a001604052808c61ffff1681526020018661ffff1681526020018b63ffffffff1681526020018a63ffffffff1681526020018961ffff168152508488612cb3565b60008163ffffffff168463ffffffff161115801561286057508163ffffffff168363ffffffff1611155b1561287c578263ffffffff168463ffffffff161115905061070d565b60008263ffffffff168563ffffffff16116128ab576128a663ffffffff86166401000000006136a5565b6128b3565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116128eb576128e663ffffffff86166401000000006136a5565b6128f3565b8463ffffffff165b64ffffffffff169091111595945050505050565b6000816124ec84600161368d565b60008163ffffffff168463ffffffff161115801561293f57508163ffffffff168363ffffffff1611155b1561295a578263ffffffff168463ffffffff1610905061070d565b60008263ffffffff168563ffffffff16116129895761298463ffffffff86166401000000006136a5565b612991565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116129c9576129c463ffffffff86166401000000006136a5565b6129d1565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008661ffff1690506000818961ffff1610612a2c578861ffff16612a46565b6001612a3c61ffff88168461368d565b612a469190613775565b905060005b6002612a57838561368d565b612a6191906136eb565b90508a612a72828961ffff16612dc3565b61ffff1661ffff8110612a8757612a8761384f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820181905290955080612acf57612ac782600161368d565b935050612a4b565b8b612ade838a61ffff16612907565b61ffff1661ffff8110612af357612af361384f565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b90910481166020830152909550600090612b3890838116908c908b9061283616565b9050808015612b615750612b618660200151898c63ffffffff166128369092919063ffffffff16565b15612b6d575050612b99565b80612b8457612b7d600184613775565b9350612b92565b612b8f83600161368d565b94505b5050612a4b565b505050965096945050505050565b604080518082019091526000808252602082018190529081906000808a612bd68a61ffff168a61ffff166124c6565b61ffff1661ffff8110612beb57612beb61384f565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b90910481166020830181905291925088161415612c3657889450879350915060009050612ca6565b612c438b8a8a8a8a612dcf565b90955093506000612c5e826001600160e01b038d168a612eed565b9050808c8b61ffff1661ffff8110612c7857612c7861384f565b825160209093015163ffffffff16600160e01b026001600160e01b0390931692909217910155925060019150505b9650965096509692505050565b6000808263ffffffff16856060015163ffffffff1611612cd7578460600151612cd9565b825b9050600087866000015161ffff1661ffff8110612cf857612cf861384f565b60408051808201825291909201546001600160e01b0381168252600160e01b900463ffffffff166020808301919091528851908901519289015160808a0151929450600093612d51938d9387938c9391928f908d612f74565b90506000612d728a84898b600001518c60200151898f8f608001518e612f74565b905081602001518160200151612d88919061378c565b63ffffffff1682600001518260000151612da2919061374d565b612dac91906136c5565b6001600160e01b03169a9950505050505050505050565b600061070d82846137f9565b6000806000808661ffff1611612de6576001612de8565b855b604080518082019091526000808252602082015290915060028261ffff161115612e625788612e1f8961ffff168461ffff16612907565b61ffff1661ffff8110612e3457612e3461384f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff16602082015290505b819250806020015163ffffffff1660001480612ea757508463ffffffff16612e9f8260200151888963ffffffff1661313a9092919063ffffffff16565b63ffffffff16105b15612ecd5761ffff82811610612ebf5761ffff612eca565b612eca826001613645565b92505b612edf8861ffff168461ffff16612907565b935050509550959350505050565b60408051808201909152600080825260208201526040518060400160405280612f53612f2e8760200151868763ffffffff1661313a9092919063ffffffff16565b612f3e9063ffffffff168761372e565b8751611f2391906001600160e01b031661368d565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b6040805180820190915260008082526020820152612fa785838b6020015163ffffffff166129159092919063ffffffff16565b156130025760405180604001604052808a6020015187612fc7919061378c565b612fd79063ffffffff16876136ff565b8b51612fe3919061366b565b6001600160e01b031681526020018663ffffffff16815250905061312d565b8463ffffffff16896020015163ffffffff16141561302157508761312d565b8463ffffffff16886020015163ffffffff16141561304057508661312d565b61305f8860200151838763ffffffff166129159092919063ffffffff16565b156130845750604080518082019091526000815263ffffffff8516602082015261312d565b6000806130958c8a8a8a89896129e4565b915091506000826020015182602001516130af919061378c565b63ffffffff16836000015183600001516130c9919061374d565b6130d391906136c5565b905060008360200151896130e7919061378c565b6130f79063ffffffff16836136ff565b8451613103919061366b565b604080518082019091526001600160e01b03909116815263ffffffff8a1660208201529450505050505b9998505050505050505050565b60008163ffffffff168463ffffffff161115801561316457508163ffffffff168363ffffffff1611155b1561317a57613173838561378c565b905061070d565b60008263ffffffff168563ffffffff16116131a9576131a463ffffffff86166401000000006136a5565b6131b1565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116131e9576131e463ffffffff86166401000000006136a5565b6131f1565b8463ffffffff165b64ffffffffff169050611e4c8183613775565b80356001600160a01b038116811461321b57600080fd5b919050565b60008083601f84011261323257600080fd5b50813567ffffffffffffffff81111561324a57600080fd5b6020830191508360208260051b850101111561326557600080fd5b9250929050565b60006020828403121561327e57600080fd5b61070d82613204565b6000806040838503121561329a57600080fd5b6132a383613204565b91506132b160208401613204565b90509250929050565b6000806000606084860312156132cf57600080fd5b6132d884613204565b92506132e660208501613204565b9150604084013590509250925092565b600080600080600080600060e0888a03121561331157600080fd5b61331a88613204565b965061332860208901613204565b95506040880135945060608801359350608088013560ff8116811461334c57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060006040848603121561337e57600080fd5b61338784613204565b9250602084013567ffffffffffffffff8111156133a357600080fd5b6133af86828701613220565b9497909650939450505050565b6000806000806000606086880312156133d457600080fd5b6133dd86613204565b9450602086013567ffffffffffffffff808211156133fa57600080fd5b61340689838a01613220565b9096509450604088013591508082111561341f57600080fd5b5061342c88828901613220565b969995985093965092949392505050565b6000806040838503121561345057600080fd5b61345983613204565b9150602083013561ffff8116811461347057600080fd5b809150509250929050565b6000806040838503121561348e57600080fd5b61349783613204565b946020939093013593505050565b6000806000606084860312156134ba57600080fd5b6134c384613204565b95602085013595506040909401359392505050565b600080602083850312156134eb57600080fd5b823567ffffffffffffffff81111561350257600080fd5b61350e85828601613220565b90969095509350505050565b6000806000806040858703121561353057600080fd5b843567ffffffffffffffff8082111561354857600080fd5b61355488838901613220565b9096509450602087013591508082111561356d57600080fd5b5061357a87828801613220565b95989497509550505050565b60006020828403121561359857600080fd5b813563ffffffff8116811461070d57600080fd5b6020808252825182820181905260009190848201906040850190845b818110156135e4578351835292840192918401916001016135c8565b50909695505050505050565b600060208083528351808285015260005b8181101561361d57858101830151858201604001528201613601565b8181111561362f576000604083870101525b50601f01601f1916929092016040019392505050565b600061ffff8083168185168083038211156136625761366261380d565b01949350505050565b60006001600160e01b038083168185168083038211156136625761366261380d565b600082198211156136a0576136a061380d565b500190565b600064ffffffffff8083168185168083038211156136625761366261380d565b60006001600160e01b03808416806136df576136df613823565b92169190910492915050565b6000826136fa576136fa613823565b500490565b60006001600160e01b03808316818516818304811182151516156137255761372561380d565b02949350505050565b60008160001904831182151516156137485761374861380d565b500290565b60006001600160e01b038381169083168181101561376d5761376d61380d565b039392505050565b6000828210156137875761378761380d565b500390565b600063ffffffff8381169083168181101561376d5761376d61380d565b600181811c908216806137bd57607f821691505b60208210811415611d7557634e487b7160e01b600052602260045260246000fd5b60006000198214156137f2576137f261380d565b5060010190565b60008261380857613808613823565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365a26469706673582212204ed21d98cd3838b524bbba3122992a6d957c0bcc2467d3ad2520a630d350467564736f6c63430008060033",
  "devdoc": {
    "author": "PoolTogether Inc.",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "uint224 `_user` ticket token balance."
        }
      },
      "constructor": {
        "params": {
          "_controller": "ERC20 ticket controller address (ie: Prize Pool address).",
          "_name": "ERC20 ticket token name.",
          "_symbol": "ERC20 ticket token symbol.",
          "decimals_": "ERC20 ticket token decimals."
        }
      },
      "controllerBurn(address,uint256)": {
        "details": "May be overridden to provide more granular control over burning",
        "params": {
          "_amount": "Amount of tokens to burn",
          "_user": "Address of the holder account to burn tokens from"
        }
      },
      "controllerBurnFrom(address,address,uint256)": {
        "details": "May be overridden to provide more granular control over operator-burning",
        "params": {
          "_amount": "Amount of tokens to burn",
          "_operator": "Address of the operator performing the burn action via the controller contract",
          "_user": "Address of the holder account to burn tokens from"
        }
      },
      "controllerMint(address,uint256)": {
        "details": "May be overridden to provide more granular control over minting",
        "params": {
          "_amount": "Amount of tokens to mint",
          "_user": "Address of the receiver of the minted tokens"
        }
      },
      "decimals()": {
        "details": "This value should be equal to the decimals of the token used to deposit into the pool.",
        "returns": {
          "_0": "uint8 decimals."
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getAccountDetails(address)": {
        "params": {
          "_user": "The user for whom to fetch the TWAB context"
        },
        "returns": {
          "_0": "The TWAB context, which includes { balance, nextTwabIndex, cardinality }"
        }
      },
      "getAverageBalanceBetween(address,uint256,uint256)": {
        "params": {
          "_endTime": "The end time of the time frame.",
          "_startTime": "The start time of the time frame.",
          "_user": "The user whose balance is checked"
        },
        "returns": {
          "_0": "The average balance that the user held during the time frame."
        }
      },
      "getAverageBalancesBetween(address,uint32[],uint32[])": {
        "params": {
          "endTimes": "The end time of the time frame.",
          "startTimes": "The start time of the time frame.",
          "user": "The user whose balance is checked"
        },
        "returns": {
          "_0": "The average balance that the user held during the time frame."
        }
      },
      "getAverageTotalSuppliesBetween(uint32[],uint32[])": {
        "params": {
          "endTimes": "Array of end times",
          "startTimes": "Array of start times"
        },
        "returns": {
          "_0": "The average total supplies held during the time frame."
        }
      },
      "getBalanceAt(address,uint256)": {
        "params": {
          "_target": "Timestamp at which the reserved TWAB should be for.",
          "_user": "Address of the user whose TWAB is being fetched."
        }
      },
      "getBalancesAt(address,uint32[])": {
        "params": {
          "_targets": "Timestamps at which the reserved TWABs should be for.",
          "_user": "Address of the user whose TWABs are being fetched."
        },
        "returns": {
          "_0": "uint256[] `_user` TWAB balances."
        }
      },
      "getTotalSupplies(uint32[])": {
        "params": {
          "_targets": "Timestamps at which the reserved TWABs should be for."
        },
        "returns": {
          "_0": "uint256[] ticket TWAB `totalSupplies`."
        }
      },
      "getTotalSupply(uint32)": {
        "params": {
          "_target": "Timestamp at which the reserved TWAB should be for."
        }
      },
      "getTwab(address,uint16)": {
        "params": {
          "_index": "The index of the TWAB to fetch",
          "_user": "The user for whom to fetch the TWAB"
        },
        "returns": {
          "_0": "The TWAB, which includes the twab amount and the timestamp."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "returns": {
          "_0": "uint256 Total supply of the ERC20 ticket token."
        }
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "stateVariables": {
      "TWAB_TIME_TO_LIVE": {
        "details": "Once the twab ttl expires, its storage slot is recycled."
      }
    },
    "title": "An ERC20 token that allows you to see user's past balances, and average balance held between timestamps.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewTotalSupplyTwab((uint224,uint32))": {
        "notice": "Emitted when a new total supply TWAB has been recorded."
      },
      "NewUserTwab(address,address,(uint224,uint32))": {
        "notice": "Emitted when a new TWAB has been recorded."
      },
      "TicketInitialized(string,string,uint8,address)": {
        "notice": "Emitted when ticket is initialized."
      }
    },
    "kind": "user",
    "methods": {
      "MAX_CARDINALITY()": {
        "notice": "The maximum number of twab entries"
      },
      "TWAB_TIME_TO_LIVE()": {
        "notice": "The minimum length of time a twab should exist."
      },
      "balanceOf(address)": {
        "notice": "Returns the ERC20 ticket token balance of a ticket holder."
      },
      "constructor": {
        "notice": "Constructs Ticket with passed parameters."
      },
      "controller()": {
        "notice": "Interface to the contract responsible for controlling mint/burn"
      },
      "controllerBurn(address,uint256)": {
        "notice": "Allows the controller to burn tokens from a user account"
      },
      "controllerBurnFrom(address,address,uint256)": {
        "notice": "Allows an operator via the controller to burn tokens on behalf of a user account"
      },
      "controllerMint(address,uint256)": {
        "notice": "Allows the controller to mint tokens for a user account"
      },
      "decimals()": {
        "notice": "Returns the ERC20 controlled token decimals."
      },
      "getAccountDetails(address)": {
        "notice": "Gets a users twap context.  This is a struct with their balance, next twab index, and cardinality."
      },
      "getAverageBalanceBetween(address,uint256,uint256)": {
        "notice": "Calculates the average balance held by a user for a given time frame."
      },
      "getAverageBalancesBetween(address,uint32[],uint32[])": {
        "notice": "Calculates the average balance held by a user for given time frames."
      },
      "getAverageTotalSuppliesBetween(uint32[],uint32[])": {
        "notice": "Calculates the average total supply balance for a set of given time frames."
      },
      "getBalanceAt(address,uint256)": {
        "notice": "Retrieves `_user` TWAB balance."
      },
      "getBalancesAt(address,uint32[])": {
        "notice": "Retrieves `_user` TWAB balances."
      },
      "getTotalSupplies(uint32[])": {
        "notice": "Retrieves ticket TWAB `totalSupplies`."
      },
      "getTotalSupply(uint32)": {
        "notice": "Retrieves ticket TWAB `totalSupply`."
      },
      "getTwab(address,uint16)": {
        "notice": "Gets the TWAB at a specific index for a user."
      },
      "totalSupply()": {
        "notice": "Returns the ERC20 ticket token total supply."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 55,
        "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 63,
        "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 65,
        "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 67,
        "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 711,
        "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
        "label": "_nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Counter)1576_storage)"
      },
      {
        "astId": 4060,
        "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
        "label": "controller",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5409,
        "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
        "label": "userTwabs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Account)5403_storage)"
      },
      {
        "astId": 5413,
        "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
        "label": "totalSupplyTwab",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Account)5403_storage"
      },
      {
        "astId": 5418,
        "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
        "label": "delegates",
        "offset": 0,
        "slot": "65544",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5423,
        "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
        "label": "balances",
        "offset": 0,
        "slot": "65545",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Twab)9390_storage)65535_storage": {
        "base": "t_struct(Twab)9390_storage",
        "encoding": "inplace",
        "label": "struct TwabLibrary.Twab[65535]",
        "numberOfBytes": "2097120"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Account)5403_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ticket.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)5403_storage"
      },
      "t_mapping(t_address,t_struct(Counter)1576_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)1576_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Account)5403_storage": {
        "encoding": "inplace",
        "label": "struct Ticket.Account",
        "members": [
          {
            "astId": 5397,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "details",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AccountDetails)5394_storage"
          },
          {
            "astId": 5402,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "twabs",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Twab)9390_storage)65535_storage"
          }
        ],
        "numberOfBytes": "2097152"
      },
      "t_struct(AccountDetails)5394_storage": {
        "encoding": "inplace",
        "label": "struct Ticket.AccountDetails",
        "members": [
          {
            "astId": 5389,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 5391,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "nextTwabIndex",
            "offset": 28,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5393,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "cardinality",
            "offset": 30,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1576_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1575,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Twab)9390_storage": {
        "encoding": "inplace",
        "label": "struct TwabLibrary.Twab",
        "members": [
          {
            "astId": 9387,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 9389,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "timestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}