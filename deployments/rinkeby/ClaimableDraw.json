{
  "address": "0x71d6fAa9CB8b1BAcecB07553a8206323f2ad10bE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPayout",
          "type": "uint256"
        }
      ],
      "name": "ClaimedDraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "drawId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IDrawCalculator",
          "name": "calculator",
          "type": "address"
        }
      ],
      "name": "DrawCalculatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IDrawHistory",
          "name": "drawHistory",
          "type": "address"
        }
      ],
      "name": "DrawHistorySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "ManagerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PAYOUT_CARDINALITY",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint32[][]",
          "name": "_drawIds",
          "type": "uint32[][]"
        },
        {
          "internalType": "contract IDrawCalculator[]",
          "name": "_drawCalculators",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_data",
          "type": "bytes[]"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "drawCalculatorAddresses",
      "outputs": [
        {
          "internalType": "contract IDrawCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawHistory",
      "outputs": [
        {
          "internalType": "contract IDrawHistory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_drawCalculatorManager",
          "type": "address"
        },
        {
          "internalType": "contract IDrawHistory",
          "name": "_drawHistory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_drawId",
          "type": "uint32"
        },
        {
          "internalType": "contract IDrawCalculator",
          "name": "_newCalculator",
          "type": "address"
        }
      ],
      "name": "setDrawCalculator",
      "outputs": [
        {
          "internalType": "contract IDrawCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDrawHistory",
          "name": "_drawHistory",
          "type": "address"
        }
      ],
      "name": "setDrawHistory",
      "outputs": [
        {
          "internalType": "contract IDrawHistory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "drawId",
          "type": "uint32"
        }
      ],
      "name": "userDrawPayout",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userDrawPayouts",
      "outputs": [
        {
          "internalType": "uint96[8]",
          "name": "",
          "type": "uint96[8]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_erc20Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfff6f674be60c7e694bfd3bdf03afa4d65fd9a60ef001fddc28885de13bef65c",
  "receipt": {
    "to": null,
    "from": "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "contractAddress": "0x71d6fAa9CB8b1BAcecB07553a8206323f2ad10bE",
    "transactionIndex": 2,
    "gasUsed": "1846730",
    "logsBloom": "0x
    "blockHash": "0x0de35fcb7caf089a0a74d18209d9d2fe4f3b7b13f203f1da03632ad78d82b8ee",
    "transactionHash": "0xfff6f674be60c7e694bfd3bdf03afa4d65fd9a60ef001fddc28885de13bef65c",
    "logs": [],
    "blockNumber": 9265130,
    "cumulativeGasUsed": "2025239",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "eb7a0e30f615ca63f4ada054592e23a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPayout\",\"type\":\"uint256\"}],\"name\":\"ClaimedDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"drawId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IDrawCalculator\",\"name\":\"calculator\",\"type\":\"address\"}],\"name\":\"DrawCalculatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IDrawHistory\",\"name\":\"drawHistory\",\"type\":\"address\"}],\"name\":\"DrawHistorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAYOUT_CARDINALITY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint32[][]\",\"name\":\"_drawIds\",\"type\":\"uint32[][]\"},{\"internalType\":\"contract IDrawCalculator[]\",\"name\":\"_drawCalculators\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"drawCalculatorAddresses\",\"outputs\":[{\"internalType\":\"contract IDrawCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawHistory\",\"outputs\":[{\"internalType\":\"contract IDrawHistory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_drawCalculatorManager\",\"type\":\"address\"},{\"internalType\":\"contract IDrawHistory\",\"name\":\"_drawHistory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_drawId\",\"type\":\"uint32\"},{\"internalType\":\"contract IDrawCalculator\",\"name\":\"_newCalculator\",\"type\":\"address\"}],\"name\":\"setDrawCalculator\",\"outputs\":[{\"internalType\":\"contract IDrawCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDrawHistory\",\"name\":\"_drawHistory\",\"type\":\"address\"}],\"name\":\"setDrawHistory\",\"outputs\":[{\"internalType\":\"contract IDrawHistory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"}],\"name\":\"userDrawPayout\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userDrawPayouts\",\"outputs\":[{\"internalType\":\"uint96[8]\",\"name\":\"\",\"type\":\"uint96[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ClaimedDraw(address,uint256)\":{\"params\":{\"totalPayout\":\"Total award payout calculated using total draw ids and pick indices\",\"user\":\"Address of user receiving draw(s) total award payout\"}},\"DrawCalculatorSet(uint256,address)\":{\"params\":{\"calculator\":\"Address of the new calculator used to calculate award payout\"}},\"DrawHistorySet(address)\":{\"params\":{\"drawHistory\":\"Address of the new draw drawHistory contract\"}},\"ERC20Withdrawn(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens transferred.\",\"to\":\"Address that received funds.\",\"token\":\"ERC20 token transferred.\"}}},\"kind\":\"dev\",\"methods\":{\"claim(address,uint32[][],address[],bytes[])\":{\"params\":{\"_data\":\"The draw pick indices (uint256[][]) passed as a formatted bytes correlating to the draw ids\",\"_drawCalculators\":\"Address of the draw calculator for a set of draw ids\",\"_drawIds\":\"Index of the draw in the draws array\",\"_user\":\"Address of user to claim awards for. Does NOT need to be msg.sender\"},\"returns\":{\"_0\":\"Total claim payout\"}},\"initialize(address,address)\":{\"params\":{\"_drawCalculatorManager\":\"Address of the draw calculator manager\",\"_drawHistory\":\"Address of the draw history contract\"}},\"manager()\":{\"details\":\"Returns current _manager address.1\",\"returns\":{\"_0\":\"Current _manager address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDrawCalculator(uint32,address)\":{\"details\":\"External function to sets a new draw calculator, which is then sequentially stored in new draw structs. Enabling unique prize calculators for individual draws.\",\"params\":{\"_drawId\":\"Draw id\",\"_newCalculator\":\"New draw calculator address\"},\"returns\":{\"_0\":\"New calculator address\"}},\"setDrawHistory(address)\":{\"params\":{\"_drawHistory\":\"Address of the draw history contract\"}},\"setManager(address)\":{\"details\":\"Throws if called by any account other than the owner.\",\"params\":{\"_newManager\":\"New _manager address.\"},\"returns\":{\"_0\":\"Boolean to indicate if the operation was successful or not.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"userDrawPayout(address,uint32)\":{\"details\":\"Checks a claimable status for target draw by reading from a user's claim history in claimedDraws.\",\"params\":{\"drawId\":\"Draw id\",\"user\":\"Address of user\"}},\"userDrawPayouts(address)\":{\"details\":\"Reads a user draw claim history, which is stored in a packed bytes32 \\\"word\\\"\",\"params\":{\"user\":\"Address of user\"}},\"withdrawERC20(address,address,uint256)\":{\"details\":\"This function is only callable by the owner asset manager.\",\"params\":{\"_amount\":\"Amount of tokens to transfer.\",\"_erc20Token\":\"ERC20 token to transfer.\",\"_to\":\"Recipient of the tokens.\"},\"returns\":{\"_0\":\"true if operation is successful.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimedDraw(address,uint256)\":{\"notice\":\"Emitted when a user has claimed N of draw prizes.\"},\"DrawCalculatorSet(uint256,address)\":{\"notice\":\"Emitted when a new draw calculator is set.\"},\"DrawHistorySet(address)\":{\"notice\":\"Emitted when a new draw history address is set.\"},\"ERC20Withdrawn(address,address,uint256)\":{\"notice\":\"Emitted when ERC20 tokens are withdrawn from the claimable draw.\"}},\"kind\":\"user\",\"methods\":{\"PAYOUT_CARDINALITY()\":{\"notice\":\"The cardinality of the users payout/claim history\"},\"claim(address,uint32[][],address[],bytes[])\":{\"notice\":\"External function to claim a user's award by passing in the calculated drawIds, drawCalculators and pickIndices. \"},\"drawCalculatorAddresses(uint32)\":{\"notice\":\"Mapping of drawId to the drawCalculator\"},\"drawHistory()\":{\"notice\":\"DrawHistory address\"},\"initialize(address,address)\":{\"notice\":\"Initialize claimable draw smart contract.\"},\"manager()\":{\"notice\":\"Gets current _manager.\"},\"setDrawCalculator(uint32,address)\":{\"notice\":\"External function to set a new draw calculator.\"},\"setDrawHistory(address)\":{\"notice\":\"External function to set a new draw calculator. Only callable by manager or owner.\"},\"setManager(address)\":{\"notice\":\"Set or change of manager.\"},\"userDrawPayout(address,uint32)\":{\"notice\":\"Allows users to check the claimable status for a target draw. \"},\"userDrawPayouts(address)\":{\"notice\":\"Reads a user draw claim history.\"},\"withdrawERC20(address,address,uint256)\":{\"notice\":\"Transfer ERC20 tokens out of this contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooltogether/v4/contracts/ClaimableDraw.sol\":\"ClaimableDraw\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37c56d5e4a1c4c65ad0dcc6af28442c5d35c6ca07d9ad6e966e07dceb97e6c8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@pooltogether/owner-manager-contracts/contracts/OwnerOrManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >= 0.6.0 <= 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n*  @title Abstract ownable contract with additional manager role\\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\\n * there is an account (a draw manager for example) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyManager`, which can be applied to your functions to restrict their use to\\n * the manager.\\n */\\nabstract contract OwnerOrManager is ContextUpgradeable, OwnableUpgradeable {\\n\\n    address private _manager;\\n\\n    /**\\n     * @dev Emitted when _manager has been changed.\\n     * @param previousManager former _manager address.\\n     * @param newManager new _manager address.\\n     */\\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\\n\\n    /**\\n     * @notice Gets current _manager.\\n     * @dev Returns current _manager address.1\\n     * @return Current _manager address.\\n     */\\n    function manager() public view virtual returns (address) {\\n        return _manager;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManagerOrOwner() {\\n        require(manager() == _msgSender() || owner() == _msgSender(), \\\"Manager/caller-not-manager-or-owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @dev Throws if called by any account other than the owner.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function setManager(address _newManager) public onlyOwner returns (bool) {\\n        _setManager(_newManager);\\n    }\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @dev Throws if called by any account other than the owner.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function _setManager(address _newManager) internal returns (bool) {\\n        address _previousManager = _manager;\\n        require(_newManager != address(0), \\\"Manager/manager-not-zero-address\\\");\\n        require(_newManager != _previousManager, \\\"Manager/existing-manager-address\\\");\\n\\n        _manager = _newManager;\\n\\n        emit ManagerTransferred(_previousManager, _newManager);\\n        return true;\\n    }\\n}\",\"keccak256\":\"0xb54d87428274d38be9f15e29b51b4923601950da3c8c9492fe7d4751efcc2239\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4/contracts/ClaimableDraw.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/OwnerOrManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./interfaces/IDrawCalculator.sol\\\";\\nimport \\\"./interfaces/IDrawHistory.sol\\\";\\n\\nimport \\\"./libraries/DrawLib.sol\\\";\\n\\ncontract ClaimableDraw is OwnerOrManager {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  ///@notice The cardinality of the users payout/claim history\\n  uint16 public constant PAYOUT_CARDINALITY = 8;\\n\\n  ///@notice Mapping of drawId to the drawCalculator\\n  mapping(uint32 => IDrawCalculator) public drawCalculatorAddresses;\\n\\n  // Mapping of user draw payout history\\n  // +---------+-------------------+\\n  // | Address | uint96[]          |\\n  // +---------+-------------------+\\n  // | user    | userPayoutHistory |\\n  // | user    | userPayoutHistory |\\n  // +---------+-------------------+\\n  mapping(address => uint96[PAYOUT_CARDINALITY]) internal userPayoutHistory;\\n\\n  ///@notice DrawHistory address\\n  IDrawHistory public drawHistory;\\n\\n    /* ============ Events ============ */\\n\\n  /**\\n    * @notice Emitted when a user has claimed N of draw prizes.\\n    * @param user             Address of user receiving draw(s) total award payout\\n    * @param totalPayout      Total award payout calculated using total draw ids and pick indices\\n  */\\n  event ClaimedDraw (\\n    address indexed user,\\n    uint256 totalPayout\\n  );\\n\\n  /**\\n    * @notice Emitted when a new draw calculator is set.\\n    * @param calculator Address of the new calculator used to calculate award payout\\n  */\\n  event DrawCalculatorSet (\\n    uint256 drawId,\\n    IDrawCalculator indexed calculator\\n  );\\n\\n  /**\\n    * @notice Emitted when a new draw history address is set.\\n    * @param drawHistory Address of the new draw drawHistory contract\\n  */\\n  event DrawHistorySet (\\n    IDrawHistory indexed drawHistory\\n  );\\n\\n  /**\\n    * @notice Emitted when ERC20 tokens are withdrawn from the claimable draw.\\n    * @param token ERC20 token transferred.\\n    * @param to Address that received funds.\\n    * @param amount Amount of tokens transferred.\\n  */\\n  event ERC20Withdrawn(\\n    IERC20Upgradeable indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n\\n  /* ============ Initialize ============ */\\n\\n  /**\\n    * @notice Initialize claimable draw smart contract.\\n    * @param _drawCalculatorManager  Address of the draw calculator manager\\n    * @param _drawHistory            Address of the draw history contract\\n  */\\n  function initialize (\\n    address _drawCalculatorManager,\\n    IDrawHistory _drawHistory\\n  ) external initializer {\\n    __Ownable_init(); \\n\\n    _setDrawHistory(_drawHistory);\\n    _setManager(_drawCalculatorManager);\\n  }\\n\\n  /* ============ External Functions ============ */\\n\\n  /**\\n    * @notice Allows users to check the claimable status for a target draw. \\n    * @dev    Checks a claimable status for target draw by reading from a user's claim history in claimedDraws.\\n    *\\n    * @param user   Address of user\\n    * @param drawId Draw id\\n  */\\n  function userDrawPayout(address user, uint32 drawId) external view returns (uint96) {\\n    uint96[PAYOUT_CARDINALITY] memory _userPayoutHistory = userPayoutHistory[user];// sload\\n    return _userPayoutHistory[_drawIdToClaimIndex(drawId)];\\n  }\\n\\n  /**\\n    * @notice Reads a user draw claim history.\\n    * @dev    Reads a user draw claim history, which is stored in a packed bytes32 \\\"word\\\"\\n    * @param user Address of user\\n  */\\n  function userDrawPayouts(address user) external view returns(uint96[PAYOUT_CARDINALITY] memory) {\\n    return userPayoutHistory[user];\\n  }\\n\\n  /**\\n    * @notice External function to set a new draw calculator.\\n    * @dev    External function to sets a new draw calculator, which is then sequentially stored in new draw structs. Enabling unique prize calculators for individual draws.\\n    * @param _drawId    Draw id\\n    * @param _newCalculator  New draw calculator address\\n    * @return New calculator address\\n  */\\n  function setDrawCalculator(uint32 _drawId, IDrawCalculator _newCalculator) external onlyManagerOrOwner returns(IDrawCalculator) {\\n    return _setDrawCalculator(_drawId, _newCalculator);\\n  }\\n  \\n  /**\\n    @notice External function to set a new draw calculator. Only callable by manager or owner.\\n    @param _drawHistory Address of the draw history contract\\n  */\\n  function setDrawHistory(IDrawHistory _drawHistory) external onlyManagerOrOwner returns (IDrawHistory) {\\n    return _setDrawHistory(_drawHistory);\\n  }\\n\\n  /**\\n    * @notice External function to claim a user's award by passing in the calculated drawIds, drawCalculators and pickIndices. \\n    *\\n    * @param _user             Address of user to claim awards for. Does NOT need to be msg.sender\\n    * @param _drawIds          Index of the draw in the draws array\\n    * @param _drawCalculators  Address of the draw calculator for a set of draw ids\\n    * @param _data             The draw pick indices (uint256[][]) passed as a formatted bytes correlating to the draw ids\\n    * @return Total claim payout\\n  */\\n  function claim(address _user, uint32[][] calldata _drawIds, IDrawCalculator[] calldata _drawCalculators, bytes[] calldata _data) external returns (uint256) {\\n    return _claim(_user, _drawIds, _drawCalculators, _data);\\n  }\\n\\n  /**\\n    * @notice Transfer ERC20 tokens out of this contract.\\n    * @dev This function is only callable by the owner asset manager.\\n    * @param _erc20Token ERC20 token to transfer.\\n    * @param _to Recipient of the tokens.\\n    * @param _amount Amount of tokens to transfer.\\n    * @return true if operation is successful.\\n  */\\n  function withdrawERC20(IERC20Upgradeable _erc20Token, address _to, uint256 _amount) external onlyManagerOrOwner returns (bool) {\\n    require(address(_to) != address(0), \\\"ClaimableDraw/ERC20-not-zero-address\\\");\\n    require(address(_erc20Token) != address(0), \\\"ClaimableDraw/ERC20-not-zero-address\\\");\\n    _erc20Token.safeTransfer(_to, _amount);\\n    emit ERC20Withdrawn(_erc20Token, _to, _amount);\\n    return true;\\n  }\\n\\n  /* ============ Internal Functions ============ */\\n\\n  /**\\n    * @notice Calculates the claim index using the draw id.\\n    * @dev Calculates the claim index, while accounting for a draws expiration status. \\n    * @param _drawId         Draw id used for calculation\\n    * @return Absolute draw index in draws ring buffer\\n  */\\n  function _drawIdToClaimIndex(uint32 _drawId) internal pure returns (uint8) { \\n    // require(_drawId + PAYOUT_CARDINALITY > _currentDrawId, \\\"ClaimableDraw/claim-expired\\\");\\n    // require(_drawId <= _currentDrawId, \\\"ClaimableDraw/drawid-out-of-bounds\\\");\\n\\n    return uint8(_drawId % PAYOUT_CARDINALITY);\\n  }\\n\\n\\n  /**\\n    * @notice Internal function to set a new draw calculator.\\n    * @dev    Internal function to sets a new draw calculator, which is then sequentially stored in new draw structs. Enabling unique prize calculators for individual draws.\\n    * @param _newCalculator  New draw calculator address\\n    * @return New calculator address\\n   */\\n  function _setDrawCalculator(uint32 _drawId, IDrawCalculator _newCalculator) internal returns(IDrawCalculator) {\\n    require(address(_newCalculator) != address(0), \\\"ClaimableDraw/calculator-not-zero-address\\\");\\n    // do we need a check for not overwriting an existing calculator?\\n\\n    drawCalculatorAddresses[_drawId] = _newCalculator; \\n    emit DrawCalculatorSet(_drawId, _newCalculator);\\n    return _newCalculator;\\n  }\\n\\n  /**\\n    @notice Internal function to set a new draw calculator.\\n    @param _drawHistory Address of the draw history contract\\n  */\\n  function _setDrawHistory(IDrawHistory _drawHistory) internal returns (IDrawHistory) \\n  {\\n    require(address(_drawHistory) != address(0), \\\"ClaimableDraw/draw-history-not-zero-address\\\");\\n    drawHistory = _drawHistory;\\n    emit DrawHistorySet(_drawHistory);\\n    return _drawHistory;\\n  }\\n\\n  /**\\n    * @notice Claim a user's award by passing in the calculated drawIds, drawCalculators and pickIndices. \\n    * @dev Calculates a user's total award by calling an external drawCalculator with winning drawIds and pickIndices. \\n    *\\n    * @param _user             Address of user to claim awards for. Does NOT need to be msg.sender\\n    * @param _drawIds          Index of the draw in the draws array\\n    * @param _drawCalculators  Address of the draw calculator for a set of draw ids\\n    * @param _data             The draw pick indices (uint256[][]) passed as a formatted bytes correlating to the draw ids\\n    * @return Total claim payout\\n  */\\n  function _claim(\\n    address _user, \\n    uint32[][] calldata _drawIds, \\n    IDrawCalculator[] calldata _drawCalculators, \\n    bytes[] calldata _data\\n  ) internal returns (uint256) {\\n    \\n    uint256 drawCalculatorsLength = _drawCalculators.length;\\n    require(drawCalculatorsLength == _drawIds.length, \\\"ClaimableDraw/invalid-calculator-array\\\");\\n    uint256 totalPayout;\\n    uint256 drawCollectionPayout;\\n\\n    for (uint8 calcIndex = 0; calcIndex < drawCalculatorsLength; calcIndex++) {\\n      IDrawCalculator _drawCalculator = _drawCalculators[calcIndex];\\n      drawCollectionPayout = _calculate(_user, _drawIds[calcIndex], _drawCalculator, _data[calcIndex]);\\n      totalPayout += drawCollectionPayout;\\n    }\\n\\n    emit ClaimedDraw(_user, totalPayout);\\n\\n    return totalPayout;\\n  }\\n\\n  /**\\n    * @dev Calculates user payout for a list of draws linked to single draw calculator.\\n    * @param _user            Address of user\\n    * @param _drawIds         Array of draws for target draw calculator\\n    * @param _drawCalculator  Address of draw calculator to determine award payout\\n    * @param _data            Pick indices for target draw\\n    * @return Total draw collection payout\\n  */\\n  function _calculate(\\n    address _user, \\n    uint32[] calldata _drawIds, \\n    IDrawCalculator _drawCalculator, \\n    bytes calldata _data\\n  ) internal returns (uint256) {\\n    \\n    uint256 drawCollectionPayout;\\n    uint96[PAYOUT_CARDINALITY] memory _userPayoutHistory = userPayoutHistory[_user];\\n\\n    (drawCollectionPayout, _userPayoutHistory) = _calculateDrawCollectionPayout(_user, _userPayoutHistory, _drawIds, _drawCalculator, _data);\\n    userPayoutHistory[_user] = _userPayoutHistory;\\n\\n    return drawCollectionPayout;\\n  }\\n\\n  /**\\n    * @dev Calculates user payout for a list of draws linked to single draw calculator.\\n    * @param _user              Address of user\\n    * @param _userPayoutHistory  User draw claim payout history\\n    * @param _drawIds           Array of draws for target draw calculator\\n    * @param _drawCalculator    Address of draw calculator to determine award payout\\n    * @param _data              Pick indices for target draw\\n    * @return totalPayout Total claim payout\\n  */\\n  function _calculateDrawCollectionPayout(\\n    address _user,\\n    uint96[PAYOUT_CARDINALITY] memory _userPayoutHistory, \\n    uint32[] calldata _drawIds, \\n    IDrawCalculator _drawCalculator, \\n    bytes calldata _data\\n  ) internal returns (uint256 totalPayout, uint96[PAYOUT_CARDINALITY] memory userPayoutHistory) {\\n    \\n    uint96[] memory prizesAwardable;\\n    userPayoutHistory = _userPayoutHistory;\\n\\n    DrawLib.Draw[] memory _draws = drawHistory.getDraws(_drawIds); // CALL\\n\\n    prizesAwardable = _drawCalculator.calculate(_user, _draws, _data);  // CALL\\n    \\n    require(_drawIds.length == prizesAwardable.length, \\\"ClaimableDraw/invalid-prizes-awardable\\\");\\n\\n    uint96 prize;\\n    for (uint256 prizeIndex = 0; prizeIndex < prizesAwardable.length; prizeIndex++) {\\n      prize = prizesAwardable[prizeIndex];\\n      (prize, userPayoutHistory) = _validateDrawPayout(userPayoutHistory, (_drawIds[prizeIndex] % PAYOUT_CARDINALITY), prize);\\n      totalPayout += prize;\\n    }\\n  }\\n\\n  /**\\n    * @notice Calculates payout for individual draw.\\n    * @param _userPayoutHistory User draw claim payout history\\n    * @param _drawIndex         Draw index in user claimed draw payout history\\n    * @param _payout            Draw payout amount\\n    * @return Difference between previous draw payout and the current draw payout \\n    * @return Updated user draw claim payout history\\n  */\\n  function _validateDrawPayout(\\n    uint96[PAYOUT_CARDINALITY] memory _userPayoutHistory, \\n    uint256 _drawIndex, \\n    uint96 _payout\\n  ) internal pure returns (uint96, uint96[PAYOUT_CARDINALITY] memory) {\\n    uint96 pastPayout = _userPayoutHistory[_drawIndex];\\n    require(_payout > pastPayout, \\\"ClaimableDraw/payout-below-threshold\\\");\\n    uint96 payoutDiff = _payout - pastPayout;\\n    _userPayoutHistory[_drawIndex] = payoutDiff;\\n    return (payoutDiff, _userPayoutHistory);\\n  }\\n\\n}\",\"keccak256\":\"0x5fadb30ec1c1e66a870ee30872e93dc2d7aba6b96f718adb10b138e69c67ef6c\",\"license\":\"MIT\"},\"@pooltogether/v4/contracts/interfaces/IDrawCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/DrawLib.sol\\\";\\n\\ninterface IDrawCalculator {\\n    \\n  function calculate(address _user, DrawLib.Draw[] calldata _draws, bytes calldata _pickIndicesForDraws)\\n    external view returns (uint96[] memory);\\n}\",\"keccak256\":\"0xa9413571b497d47a49298444e70021b26de09fbc3fb86225ef454f3a7367c6c5\",\"license\":\"MIT\"},\"@pooltogether/v4/contracts/interfaces/IDrawHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/DrawLib.sol\\\";\\n\\ninterface IDrawHistory {\\n  function drawIdToDrawIndex(uint32 drawId) external view returns(uint32);\\n  function getDraws(uint32[] calldata drawIds) external view returns (DrawLib.Draw[] memory);\\n  function getDraw(uint32 drawId) external view returns (DrawLib.Draw memory);\\n  function pushDraw(DrawLib.Draw calldata draw) external returns(uint32);\\n  function setDraw(uint256 drawIndex, DrawLib.Draw calldata draw) external returns(uint32); // maybe return drawIndex\\n}\",\"keccak256\":\"0x531946292bc874072907f606446f07f3b5e056a57947952783e652e0966bd772\",\"license\":\"MIT\"},\"@pooltogether/v4/contracts/libraries/DrawLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nlibrary DrawLib{\\n\\n    struct Draw {\\n        uint256 winningRandomNumber;\\n        uint32 timestamp;\\n        uint32 drawId;\\n    }\\n\\n    ///@notice Draw settings struct\\n    ///@param bitRangeSize Decimal representation of bitRangeSize\\n    ///@param matchCardinality The bitRangeSize's to consider in the 256 random numbers. Must be > 1 and < 256/bitRangeSize\\n    ///@param pickCost Amount of ticket balance required per pick\\n    ///@param distributions Array of prize distribution percentages, expressed in fraction form with base 1e18. Max sum of these <= 1 Ether. ordering: index0: grandPrize, index1: runnerUp, etc.\\n    struct DrawSettings {\\n        uint8 bitRangeSize;\\n        uint16 matchCardinality;\\n        uint224 pickCost;\\n        uint128[] distributions;\\n        uint256 prize;\\n    }\\n\\n}\",\"keccak256\":\"0xdc82c80fb4eb667dd54f37d90754ab598d90713cb2c6c56e5e4548266d6045e6\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612087806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063d0ebdbe711610066578063d0ebdbe714610226578063dac56c4414610239578063f2fde38b14610259578063f8ffeb251461026c57600080fd5b8063715018a6146101e75780637ec77aa4146101ef5780638da5cb5b14610202578063cd74b99a1461021357600080fd5b806344004cc1116100d357806344004cc11461018b578063481c6a75146101ae578063485cc955146101bf5780635ea5c74e146101d457600080fd5b80630656d41c146100fa5780630bee65f21461011a57806314267a561461014a575b600080fd5b610102600881565b60405161ffff90911681526020015b60405180910390f35b61012d610128366004611a01565b61028d565b6040516bffffffffffffffffffffffff9091168152602001610111565b610173610158366004611c10565b6066602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610111565b61019e610199366004611bcf565b61033a565b6040519015158152602001610111565b6065546001600160a01b0316610173565b6101d26101cd3660046119c8565b61051f565b005b6101736101e23660046118fe565b6105ff565b6101d261068c565b606854610173906001600160a01b031681565b6033546001600160a01b0316610173565b610173610221366004611c2d565b6106f2565b61019e6102343660046118fe565b61077a565b61024c6102473660046118fe565b6107e6565b6040516101119190611d67565b6101d26102673660046118fe565b610873565b61027f61027a36600461191b565b610955565b604051908152602001610111565b6001600160a01b038216600090815260676020526040808220815161010081019283905283929091906008908285855b82829054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200190600c0190602082600b010492830192600103820291508084116102bd579050505050505090508061031a84610972565b60ff166008811061032d5761032d611ffe565b6020020151949350505050565b6065546000906001600160a01b031633148061036057506033546001600160a01b031633145b6103bd5760405162461bcd60e51b815260206004820152602360248201527f4d616e616765722f63616c6c65722d6e6f742d6d616e616765722d6f722d6f776044820152623732b960e91b60648201526084015b60405180910390fd5b6001600160a01b0383166104385760405162461bcd60e51b8152602060048201526024808201527f436c61696d61626c65447261772f45524332302d6e6f742d7a65726f2d61646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103b4565b6001600160a01b0384166104b35760405162461bcd60e51b8152602060048201526024808201527f436c61696d61626c65447261772f45524332302d6e6f742d7a65726f2d61646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103b4565b6104c76001600160a01b038516848461097f565b826001600160a01b0316846001600160a01b03167fbfed55bdcd242e3dd0f60ddd7d1e87c67f61c34cd9527b3e6455d841b10253628460405161050c91815260200190565b60405180910390a35060015b9392505050565b600054610100900460ff1680610538575060005460ff16155b6105aa5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103b4565b600054610100900460ff161580156105cc576000805461ffff19166101011790555b6105d46109ff565b6105dd82610ad0565b506105e783610ba6565b5080156105fa576000805461ff00191690555b505050565b6065546000906001600160a01b031633148061062557506033546001600160a01b031633145b61067d5760405162461bcd60e51b815260206004820152602360248201527f4d616e616765722f63616c6c65722d6e6f742d6d616e616765722d6f722d6f776044820152623732b960e91b60648201526084016103b4565b61068682610ad0565b92915050565b6033546001600160a01b031633146106e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b4565b6106f06000610ccb565b565b6065546000906001600160a01b031633148061071857506033546001600160a01b031633145b6107705760405162461bcd60e51b815260206004820152602360248201527f4d616e616765722f63616c6c65722d6e6f742d6d616e616765722d6f722d6f776044820152623732b960e91b60648201526084016103b4565b6105188383610d2a565b6033546000906001600160a01b031633146107d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b4565b6107e082610ba6565b50919050565b6107ee6117ca565b6001600160a01b03821660009081526067602052604080822081516101008101928390529290916008918390855b82829054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200190600c0190602082600b0104928301926001038202915080841161081c575094979650505050505050565b6033546001600160a01b031633146108cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b4565b6001600160a01b0381166109495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103b4565b61095281610ccb565b50565b600061096688888888888888610e22565b98975050505050505050565b6000610686600883611fb7565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526105fa908490610fa5565b600054610100900460ff1680610a18575060005460ff16155b610a8a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103b4565b600054610100900460ff16158015610aac576000805461ffff19166101011790555b610ab461108a565b610abc61114a565b8015610952576000805461ff001916905550565b60006001600160a01b038216610b4e5760405162461bcd60e51b815260206004820152602b60248201527f436c61696d61626c65447261772f647261772d686973746f72792d6e6f742d7a60448201527f65726f2d6164647265737300000000000000000000000000000000000000000060648201526084016103b4565b6068805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517fba0e8f3a74973e2a13826a827919baef53ee4eb218c95ac51cd17e62e7457e6690600090a25090565b6065546000906001600160a01b03908116908316610c065760405162461bcd60e51b815260206004820181905260248201527f4d616e616765722f6d616e616765722d6e6f742d7a65726f2d6164647265737360448201526064016103b4565b806001600160a01b0316836001600160a01b03161415610c685760405162461bcd60e51b815260206004820181905260248201527f4d616e616765722f6578697374696e672d6d616e616765722d6164647265737360448201526064016103b4565b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691821790925560405190918316907f9cb45c728de594dab506a1f1a8554e24c8eeaf983618d5ec5dd7bc6f3c49feee90600090a350600192915050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b038216610da85760405162461bcd60e51b815260206004820152602960248201527f436c61696d61626c65447261772f63616c63756c61746f722d6e6f742d7a657260448201527f6f2d61646472657373000000000000000000000000000000000000000000000060648201526084016103b4565b63ffffffff8316600081815260666020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038716908117909155915192835290917f832b4721c3331849f90653364a8a62f6b1ec454953e11129e18e41b09d97b09f910160405180910390a250919050565b600083868114610e9a5760405162461bcd60e51b815260206004820152602660248201527f436c61696d61626c65447261772f696e76616c69642d63616c63756c61746f7260448201527f2d6172726179000000000000000000000000000000000000000000000000000060648201526084016103b4565b60008060005b838160ff161015610f5357600089898360ff16818110610ec257610ec2611ffe565b9050602002016020810190610ed791906118fe565b9050610f318d8d8d8560ff16818110610ef257610ef2611ffe565b9050602002810190610f049190611dda565b848c8c8860ff16818110610f1a57610f1a611ffe565b9050602002810190610f2c9190611e24565b611200565b9250610f3d8385611ee9565b9350508080610f4b90611f97565b915050610ea0565b508a6001600160a01b03167fa452f302fbdcfcebc95cfa345c0f4cc8833c745ca20d8cd369adde672e6986cf83604051610f8f91815260200190565b60405180910390a2509998505050505050505050565b6000610ffa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112c99092919063ffffffff16565b8051909150156105fa57808060200190518101906110189190611bad565b6105fa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103b4565b600054610100900460ff16806110a3575060005460ff16155b6111155760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103b4565b600054610100900460ff16158015610abc576000805461ffff19166101011790558015610952576000805461ff001916905550565b600054610100900460ff1680611163575060005460ff16155b6111d55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103b4565b600054610100900460ff161580156111f7576000805461ffff19166101011790555b610abc33610ccb565b6001600160a01b038616600090815260676020526040808220815161010081019283905283928392906008908285855b82829054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200190600c0190602082600b010492830192600103820291508084116112305790505050505050905061129289828a8a8a8a8a6112e0565b6001600160a01b038b16600090815260676020526040902091935091506112bb908260086117e9565b509098975050505050505050565b60606112d8848460008561155b565b949350505050565b60006112ea6117ca565b506068546040517fd0bb78f300000000000000000000000000000000000000000000000000000000815288916060916000916001600160a01b03169063d0bb78f39061133c908c908c90600401611d1c565b60006040518083038186803b15801561135457600080fd5b505afa158015611368573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113909190810190611a2f565b6040517f9367baa70000000000000000000000000000000000000000000000000000000081529091506001600160a01b03881690639367baa7906113de908e9085908b908b90600401611c92565b60006040518083038186803b1580156113f657600080fd5b505afa15801561140a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114329190810190611b09565b805190925088146114ab5760405162461bcd60e51b815260206004820152602660248201527f436c61696d61626c65447261772f696e76616c69642d7072697a65732d61776160448201527f726461626c65000000000000000000000000000000000000000000000000000060648201526084016103b4565b6000805b835181101561154b578381815181106114ca576114ca611ffe565b6020026020010151915061151b85600861ffff168d8d858181106114f0576114f0611ffe565b90506020020160208101906115059190611c10565b61150f9190611fb7565b63ffffffff168461169a565b955091506115376bffffffffffffffffffffffff831687611ee9565b95508061154381611f5e565b9150506114af565b5050505097509795505050505050565b6060824710156115d35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103b4565b843b6116215760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103b4565b600080866001600160a01b0316858760405161163d9190611c76565b60006040518083038185875af1925050503d806000811461167a576040519150601f19603f3d011682016040523d82523d6000602084013e61167f565b606091505b509150915061168f828286611791565b979650505050505050565b60006116a46117ca565b60008585600881106116b8576116b8611ffe565b60200201519050806bffffffffffffffffffffffff16846bffffffffffffffffffffffff161161174f5760405162461bcd60e51b8152602060048201526024808201527f436c61696d61626c65447261772f7061796f75742d62656c6f772d746872657360448201527f686f6c640000000000000000000000000000000000000000000000000000000060648201526084016103b4565b600061175b8286611f01565b90508087876008811061177057611770611ffe565b6bffffffffffffffffffffffff929092166020909202015296945050505050565b606083156117a0575081610518565b8251156117b05782518084602001fd5b8160405162461bcd60e51b81526004016103b49190611da7565b6040518061010001604052806008906020820280368337509192915050565b60048301918390821561188d5791602002820160005b8382111561185357835183826101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509260200192600c01602081600b010492830192600103026117ff565b801561188b5782816101000a8154906bffffffffffffffffffffffff0219169055600c01602081600b01049283019260010302611853565b505b5061189992915061189d565b5090565b5b80821115611899576000815560010161189e565b60008083601f8401126118c457600080fd5b50813567ffffffffffffffff8111156118dc57600080fd5b6020830191508360208260051b85010111156118f757600080fd5b9250929050565b60006020828403121561191057600080fd5b81356105188161202a565b60008060008060008060006080888a03121561193657600080fd5b87356119418161202a565b9650602088013567ffffffffffffffff8082111561195e57600080fd5b61196a8b838c016118b2565b909850965060408a013591508082111561198357600080fd5b61198f8b838c016118b2565b909650945060608a01359150808211156119a857600080fd5b506119b58a828b016118b2565b989b979a50959850939692959293505050565b600080604083850312156119db57600080fd5b82356119e68161202a565b915060208301356119f68161202a565b809150509250929050565b60008060408385031215611a1457600080fd5b8235611a1f8161202a565b915060208301356119f68161203f565b60006020808385031215611a4257600080fd5b825167ffffffffffffffff811115611a5957600080fd5b8301601f81018513611a6a57600080fd5b8051611a7d611a7882611ec5565b611e94565b818152838101908385016060808502860187018a1015611a9c57600080fd5b60009550855b85811015611afa5781838c031215611ab8578687fd5b611ac0611e6b565b8351815288840151611ad18161203f565b818a0152604084810151611ae48161203f565b9082015285529387019391810191600101611aa2565b50919998505050505050505050565b60006020808385031215611b1c57600080fd5b825167ffffffffffffffff811115611b3357600080fd5b8301601f81018513611b4457600080fd5b8051611b52611a7882611ec5565b80828252848201915084840188868560051b8701011115611b7257600080fd5b60009450845b848110156112bb5781516bffffffffffffffffffffffff81168114611b9b578687fd5b84529286019290860190600101611b78565b600060208284031215611bbf57600080fd5b8151801515811461051857600080fd5b600080600060608486031215611be457600080fd5b8335611bef8161202a565b92506020840135611bff8161202a565b929592945050506040919091013590565b600060208284031215611c2257600080fd5b81356105188161203f565b60008060408385031215611c4057600080fd5b82356119e68161203f565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60008251611c88818460208701611f2e565b9190910192915050565b600060608083016001600160a01b038816845260208281860152818851808452608087019150828a01935060005b81811015611cf9578451805184528481015163ffffffff9081168686015260409182015116908401529383019391850191600101611cc0565b50508581036040870152611d0e81888a611c4b565b9a9950505050505050505050565b60208082528181018390526000908460408401835b86811015611d5c578235611d448161203f565b63ffffffff1682529183019190830190600101611d31565b509695505050505050565b6101008101818360005b6008811015611d9e5781516bffffffffffffffffffffffff16835260209283019290910190600101611d71565b50505092915050565b6020815260008251806020840152611dc6816040850160208701611f2e565b601f01601f19169190910160400192915050565b6000808335601e19843603018112611df157600080fd5b83018035915067ffffffffffffffff821115611e0c57600080fd5b6020019150600581901b36038213156118f757600080fd5b6000808335601e19843603018112611e3b57600080fd5b83018035915067ffffffffffffffff821115611e5657600080fd5b6020019150368190038213156118f757600080fd5b6040516060810167ffffffffffffffff81118282101715611e8e57611e8e612014565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611ebd57611ebd612014565b604052919050565b600067ffffffffffffffff821115611edf57611edf612014565b5060051b60200190565b60008219821115611efc57611efc611fe8565b500190565b60006bffffffffffffffffffffffff83811690831681811015611f2657611f26611fe8565b039392505050565b60005b83811015611f49578181015183820152602001611f31565b83811115611f58576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f9057611f90611fe8565b5060010190565b600060ff821660ff811415611fae57611fae611fe8565b60010192915050565b600063ffffffff80841680611fdc57634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461095257600080fd5b63ffffffff8116811461095257600080fdfea2646970667358221220c9b79692b718a216e68bc9d2fd08a1c898fb5aa348df48601061966e7f9efffa64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063d0ebdbe711610066578063d0ebdbe714610226578063dac56c4414610239578063f2fde38b14610259578063f8ffeb251461026c57600080fd5b8063715018a6146101e75780637ec77aa4146101ef5780638da5cb5b14610202578063cd74b99a1461021357600080fd5b806344004cc1116100d357806344004cc11461018b578063481c6a75146101ae578063485cc955146101bf5780635ea5c74e146101d457600080fd5b80630656d41c146100fa5780630bee65f21461011a57806314267a561461014a575b600080fd5b610102600881565b60405161ffff90911681526020015b60405180910390f35b61012d610128366004611a01565b61028d565b6040516bffffffffffffffffffffffff9091168152602001610111565b610173610158366004611c10565b6066602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610111565b61019e610199366004611bcf565b61033a565b6040519015158152602001610111565b6065546001600160a01b0316610173565b6101d26101cd3660046119c8565b61051f565b005b6101736101e23660046118fe565b6105ff565b6101d261068c565b606854610173906001600160a01b031681565b6033546001600160a01b0316610173565b610173610221366004611c2d565b6106f2565b61019e6102343660046118fe565b61077a565b61024c6102473660046118fe565b6107e6565b6040516101119190611d67565b6101d26102673660046118fe565b610873565b61027f61027a36600461191b565b610955565b604051908152602001610111565b6001600160a01b038216600090815260676020526040808220815161010081019283905283929091906008908285855b82829054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200190600c0190602082600b010492830192600103820291508084116102bd579050505050505090508061031a84610972565b60ff166008811061032d5761032d611ffe565b6020020151949350505050565b6065546000906001600160a01b031633148061036057506033546001600160a01b031633145b6103bd5760405162461bcd60e51b815260206004820152602360248201527f4d616e616765722f63616c6c65722d6e6f742d6d616e616765722d6f722d6f776044820152623732b960e91b60648201526084015b60405180910390fd5b6001600160a01b0383166104385760405162461bcd60e51b8152602060048201526024808201527f436c61696d61626c65447261772f45524332302d6e6f742d7a65726f2d61646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103b4565b6001600160a01b0384166104b35760405162461bcd60e51b8152602060048201526024808201527f436c61696d61626c65447261772f45524332302d6e6f742d7a65726f2d61646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103b4565b6104c76001600160a01b038516848461097f565b826001600160a01b0316846001600160a01b03167fbfed55bdcd242e3dd0f60ddd7d1e87c67f61c34cd9527b3e6455d841b10253628460405161050c91815260200190565b60405180910390a35060015b9392505050565b600054610100900460ff1680610538575060005460ff16155b6105aa5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103b4565b600054610100900460ff161580156105cc576000805461ffff19166101011790555b6105d46109ff565b6105dd82610ad0565b506105e783610ba6565b5080156105fa576000805461ff00191690555b505050565b6065546000906001600160a01b031633148061062557506033546001600160a01b031633145b61067d5760405162461bcd60e51b815260206004820152602360248201527f4d616e616765722f63616c6c65722d6e6f742d6d616e616765722d6f722d6f776044820152623732b960e91b60648201526084016103b4565b61068682610ad0565b92915050565b6033546001600160a01b031633146106e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b4565b6106f06000610ccb565b565b6065546000906001600160a01b031633148061071857506033546001600160a01b031633145b6107705760405162461bcd60e51b815260206004820152602360248201527f4d616e616765722f63616c6c65722d6e6f742d6d616e616765722d6f722d6f776044820152623732b960e91b60648201526084016103b4565b6105188383610d2a565b6033546000906001600160a01b031633146107d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b4565b6107e082610ba6565b50919050565b6107ee6117ca565b6001600160a01b03821660009081526067602052604080822081516101008101928390529290916008918390855b82829054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200190600c0190602082600b0104928301926001038202915080841161081c575094979650505050505050565b6033546001600160a01b031633146108cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b4565b6001600160a01b0381166109495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103b4565b61095281610ccb565b50565b600061096688888888888888610e22565b98975050505050505050565b6000610686600883611fb7565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526105fa908490610fa5565b600054610100900460ff1680610a18575060005460ff16155b610a8a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103b4565b600054610100900460ff16158015610aac576000805461ffff19166101011790555b610ab461108a565b610abc61114a565b8015610952576000805461ff001916905550565b60006001600160a01b038216610b4e5760405162461bcd60e51b815260206004820152602b60248201527f436c61696d61626c65447261772f647261772d686973746f72792d6e6f742d7a60448201527f65726f2d6164647265737300000000000000000000000000000000000000000060648201526084016103b4565b6068805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517fba0e8f3a74973e2a13826a827919baef53ee4eb218c95ac51cd17e62e7457e6690600090a25090565b6065546000906001600160a01b03908116908316610c065760405162461bcd60e51b815260206004820181905260248201527f4d616e616765722f6d616e616765722d6e6f742d7a65726f2d6164647265737360448201526064016103b4565b806001600160a01b0316836001600160a01b03161415610c685760405162461bcd60e51b815260206004820181905260248201527f4d616e616765722f6578697374696e672d6d616e616765722d6164647265737360448201526064016103b4565b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691821790925560405190918316907f9cb45c728de594dab506a1f1a8554e24c8eeaf983618d5ec5dd7bc6f3c49feee90600090a350600192915050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b038216610da85760405162461bcd60e51b815260206004820152602960248201527f436c61696d61626c65447261772f63616c63756c61746f722d6e6f742d7a657260448201527f6f2d61646472657373000000000000000000000000000000000000000000000060648201526084016103b4565b63ffffffff8316600081815260666020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038716908117909155915192835290917f832b4721c3331849f90653364a8a62f6b1ec454953e11129e18e41b09d97b09f910160405180910390a250919050565b600083868114610e9a5760405162461bcd60e51b815260206004820152602660248201527f436c61696d61626c65447261772f696e76616c69642d63616c63756c61746f7260448201527f2d6172726179000000000000000000000000000000000000000000000000000060648201526084016103b4565b60008060005b838160ff161015610f5357600089898360ff16818110610ec257610ec2611ffe565b9050602002016020810190610ed791906118fe565b9050610f318d8d8d8560ff16818110610ef257610ef2611ffe565b9050602002810190610f049190611dda565b848c8c8860ff16818110610f1a57610f1a611ffe565b9050602002810190610f2c9190611e24565b611200565b9250610f3d8385611ee9565b9350508080610f4b90611f97565b915050610ea0565b508a6001600160a01b03167fa452f302fbdcfcebc95cfa345c0f4cc8833c745ca20d8cd369adde672e6986cf83604051610f8f91815260200190565b60405180910390a2509998505050505050505050565b6000610ffa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112c99092919063ffffffff16565b8051909150156105fa57808060200190518101906110189190611bad565b6105fa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103b4565b600054610100900460ff16806110a3575060005460ff16155b6111155760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103b4565b600054610100900460ff16158015610abc576000805461ffff19166101011790558015610952576000805461ff001916905550565b600054610100900460ff1680611163575060005460ff16155b6111d55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103b4565b600054610100900460ff161580156111f7576000805461ffff19166101011790555b610abc33610ccb565b6001600160a01b038616600090815260676020526040808220815161010081019283905283928392906008908285855b82829054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200190600c0190602082600b010492830192600103820291508084116112305790505050505050905061129289828a8a8a8a8a6112e0565b6001600160a01b038b16600090815260676020526040902091935091506112bb908260086117e9565b509098975050505050505050565b60606112d8848460008561155b565b949350505050565b60006112ea6117ca565b506068546040517fd0bb78f300000000000000000000000000000000000000000000000000000000815288916060916000916001600160a01b03169063d0bb78f39061133c908c908c90600401611d1c565b60006040518083038186803b15801561135457600080fd5b505afa158015611368573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113909190810190611a2f565b6040517f9367baa70000000000000000000000000000000000000000000000000000000081529091506001600160a01b03881690639367baa7906113de908e9085908b908b90600401611c92565b60006040518083038186803b1580156113f657600080fd5b505afa15801561140a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114329190810190611b09565b805190925088146114ab5760405162461bcd60e51b815260206004820152602660248201527f436c61696d61626c65447261772f696e76616c69642d7072697a65732d61776160448201527f726461626c65000000000000000000000000000000000000000000000000000060648201526084016103b4565b6000805b835181101561154b578381815181106114ca576114ca611ffe565b6020026020010151915061151b85600861ffff168d8d858181106114f0576114f0611ffe565b90506020020160208101906115059190611c10565b61150f9190611fb7565b63ffffffff168461169a565b955091506115376bffffffffffffffffffffffff831687611ee9565b95508061154381611f5e565b9150506114af565b5050505097509795505050505050565b6060824710156115d35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103b4565b843b6116215760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103b4565b600080866001600160a01b0316858760405161163d9190611c76565b60006040518083038185875af1925050503d806000811461167a576040519150601f19603f3d011682016040523d82523d6000602084013e61167f565b606091505b509150915061168f828286611791565b979650505050505050565b60006116a46117ca565b60008585600881106116b8576116b8611ffe565b60200201519050806bffffffffffffffffffffffff16846bffffffffffffffffffffffff161161174f5760405162461bcd60e51b8152602060048201526024808201527f436c61696d61626c65447261772f7061796f75742d62656c6f772d746872657360448201527f686f6c640000000000000000000000000000000000000000000000000000000060648201526084016103b4565b600061175b8286611f01565b90508087876008811061177057611770611ffe565b6bffffffffffffffffffffffff929092166020909202015296945050505050565b606083156117a0575081610518565b8251156117b05782518084602001fd5b8160405162461bcd60e51b81526004016103b49190611da7565b6040518061010001604052806008906020820280368337509192915050565b60048301918390821561188d5791602002820160005b8382111561185357835183826101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509260200192600c01602081600b010492830192600103026117ff565b801561188b5782816101000a8154906bffffffffffffffffffffffff0219169055600c01602081600b01049283019260010302611853565b505b5061189992915061189d565b5090565b5b80821115611899576000815560010161189e565b60008083601f8401126118c457600080fd5b50813567ffffffffffffffff8111156118dc57600080fd5b6020830191508360208260051b85010111156118f757600080fd5b9250929050565b60006020828403121561191057600080fd5b81356105188161202a565b60008060008060008060006080888a03121561193657600080fd5b87356119418161202a565b9650602088013567ffffffffffffffff8082111561195e57600080fd5b61196a8b838c016118b2565b909850965060408a013591508082111561198357600080fd5b61198f8b838c016118b2565b909650945060608a01359150808211156119a857600080fd5b506119b58a828b016118b2565b989b979a50959850939692959293505050565b600080604083850312156119db57600080fd5b82356119e68161202a565b915060208301356119f68161202a565b809150509250929050565b60008060408385031215611a1457600080fd5b8235611a1f8161202a565b915060208301356119f68161203f565b60006020808385031215611a4257600080fd5b825167ffffffffffffffff811115611a5957600080fd5b8301601f81018513611a6a57600080fd5b8051611a7d611a7882611ec5565b611e94565b818152838101908385016060808502860187018a1015611a9c57600080fd5b60009550855b85811015611afa5781838c031215611ab8578687fd5b611ac0611e6b565b8351815288840151611ad18161203f565b818a0152604084810151611ae48161203f565b9082015285529387019391810191600101611aa2565b50919998505050505050505050565b60006020808385031215611b1c57600080fd5b825167ffffffffffffffff811115611b3357600080fd5b8301601f81018513611b4457600080fd5b8051611b52611a7882611ec5565b80828252848201915084840188868560051b8701011115611b7257600080fd5b60009450845b848110156112bb5781516bffffffffffffffffffffffff81168114611b9b578687fd5b84529286019290860190600101611b78565b600060208284031215611bbf57600080fd5b8151801515811461051857600080fd5b600080600060608486031215611be457600080fd5b8335611bef8161202a565b92506020840135611bff8161202a565b929592945050506040919091013590565b600060208284031215611c2257600080fd5b81356105188161203f565b60008060408385031215611c4057600080fd5b82356119e68161203f565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60008251611c88818460208701611f2e565b9190910192915050565b600060608083016001600160a01b038816845260208281860152818851808452608087019150828a01935060005b81811015611cf9578451805184528481015163ffffffff9081168686015260409182015116908401529383019391850191600101611cc0565b50508581036040870152611d0e81888a611c4b565b9a9950505050505050505050565b60208082528181018390526000908460408401835b86811015611d5c578235611d448161203f565b63ffffffff1682529183019190830190600101611d31565b509695505050505050565b6101008101818360005b6008811015611d9e5781516bffffffffffffffffffffffff16835260209283019290910190600101611d71565b50505092915050565b6020815260008251806020840152611dc6816040850160208701611f2e565b601f01601f19169190910160400192915050565b6000808335601e19843603018112611df157600080fd5b83018035915067ffffffffffffffff821115611e0c57600080fd5b6020019150600581901b36038213156118f757600080fd5b6000808335601e19843603018112611e3b57600080fd5b83018035915067ffffffffffffffff821115611e5657600080fd5b6020019150368190038213156118f757600080fd5b6040516060810167ffffffffffffffff81118282101715611e8e57611e8e612014565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611ebd57611ebd612014565b604052919050565b600067ffffffffffffffff821115611edf57611edf612014565b5060051b60200190565b60008219821115611efc57611efc611fe8565b500190565b60006bffffffffffffffffffffffff83811690831681811015611f2657611f26611fe8565b039392505050565b60005b83811015611f49578181015183820152602001611f31565b83811115611f58576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f9057611f90611fe8565b5060010190565b600060ff821660ff811415611fae57611fae611fe8565b60010192915050565b600063ffffffff80841680611fdc57634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461095257600080fd5b63ffffffff8116811461095257600080fdfea2646970667358221220c9b79692b718a216e68bc9d2fd08a1c898fb5aa348df48601061966e7f9efffa64736f6c63430008060033",
  "devdoc": {
    "events": {
      "ClaimedDraw(address,uint256)": {
        "params": {
          "totalPayout": "Total award payout calculated using total draw ids and pick indices",
          "user": "Address of user receiving draw(s) total award payout"
        }
      },
      "DrawCalculatorSet(uint256,address)": {
        "params": {
          "calculator": "Address of the new calculator used to calculate award payout"
        }
      },
      "DrawHistorySet(address)": {
        "params": {
          "drawHistory": "Address of the new draw drawHistory contract"
        }
      },
      "ERC20Withdrawn(address,address,uint256)": {
        "params": {
          "amount": "Amount of tokens transferred.",
          "to": "Address that received funds.",
          "token": "ERC20 token transferred."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claim(address,uint32[][],address[],bytes[])": {
        "params": {
          "_data": "The draw pick indices (uint256[][]) passed as a formatted bytes correlating to the draw ids",
          "_drawCalculators": "Address of the draw calculator for a set of draw ids",
          "_drawIds": "Index of the draw in the draws array",
          "_user": "Address of user to claim awards for. Does NOT need to be msg.sender"
        },
        "returns": {
          "_0": "Total claim payout"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_drawCalculatorManager": "Address of the draw calculator manager",
          "_drawHistory": "Address of the draw history contract"
        }
      },
      "manager()": {
        "details": "Returns current _manager address.1",
        "returns": {
          "_0": "Current _manager address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDrawCalculator(uint32,address)": {
        "details": "External function to sets a new draw calculator, which is then sequentially stored in new draw structs. Enabling unique prize calculators for individual draws.",
        "params": {
          "_drawId": "Draw id",
          "_newCalculator": "New draw calculator address"
        },
        "returns": {
          "_0": "New calculator address"
        }
      },
      "setDrawHistory(address)": {
        "params": {
          "_drawHistory": "Address of the draw history contract"
        }
      },
      "setManager(address)": {
        "details": "Throws if called by any account other than the owner.",
        "params": {
          "_newManager": "New _manager address."
        },
        "returns": {
          "_0": "Boolean to indicate if the operation was successful or not."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "userDrawPayout(address,uint32)": {
        "details": "Checks a claimable status for target draw by reading from a user's claim history in claimedDraws.",
        "params": {
          "drawId": "Draw id",
          "user": "Address of user"
        }
      },
      "userDrawPayouts(address)": {
        "details": "Reads a user draw claim history, which is stored in a packed bytes32 \"word\"",
        "params": {
          "user": "Address of user"
        }
      },
      "withdrawERC20(address,address,uint256)": {
        "details": "This function is only callable by the owner asset manager.",
        "params": {
          "_amount": "Amount of tokens to transfer.",
          "_erc20Token": "ERC20 token to transfer.",
          "_to": "Recipient of the tokens."
        },
        "returns": {
          "_0": "true if operation is successful."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ClaimedDraw(address,uint256)": {
        "notice": "Emitted when a user has claimed N of draw prizes."
      },
      "DrawCalculatorSet(uint256,address)": {
        "notice": "Emitted when a new draw calculator is set."
      },
      "DrawHistorySet(address)": {
        "notice": "Emitted when a new draw history address is set."
      },
      "ERC20Withdrawn(address,address,uint256)": {
        "notice": "Emitted when ERC20 tokens are withdrawn from the claimable draw."
      }
    },
    "kind": "user",
    "methods": {
      "PAYOUT_CARDINALITY()": {
        "notice": "The cardinality of the users payout/claim history"
      },
      "claim(address,uint32[][],address[],bytes[])": {
        "notice": "External function to claim a user's award by passing in the calculated drawIds, drawCalculators and pickIndices. "
      },
      "drawCalculatorAddresses(uint32)": {
        "notice": "Mapping of drawId to the drawCalculator"
      },
      "drawHistory()": {
        "notice": "DrawHistory address"
      },
      "initialize(address,address)": {
        "notice": "Initialize claimable draw smart contract."
      },
      "manager()": {
        "notice": "Gets current _manager."
      },
      "setDrawCalculator(uint32,address)": {
        "notice": "External function to set a new draw calculator."
      },
      "setDrawHistory(address)": {
        "notice": "External function to set a new draw calculator. Only callable by manager or owner."
      },
      "setManager(address)": {
        "notice": "Set or change of manager."
      },
      "userDrawPayout(address,uint32)": {
        "notice": "Allows users to check the claimable status for a target draw. "
      },
      "userDrawPayouts(address)": {
        "notice": "Reads a user draw claim history."
      },
      "withdrawERC20(address,address,uint256)": {
        "notice": "Transfer ERC20 tokens out of this contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "@pooltogether/v4/contracts/ClaimableDraw.sol:ClaimableDraw",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "@pooltogether/v4/contracts/ClaimableDraw.sol:ClaimableDraw",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1781,
        "contract": "@pooltogether/v4/contracts/ClaimableDraw.sol:ClaimableDraw",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "@pooltogether/v4/contracts/ClaimableDraw.sol:ClaimableDraw",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "@pooltogether/v4/contracts/ClaimableDraw.sol:ClaimableDraw",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3498,
        "contract": "@pooltogether/v4/contracts/ClaimableDraw.sol:ClaimableDraw",
        "label": "_manager",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 3671,
        "contract": "@pooltogether/v4/contracts/ClaimableDraw.sol:ClaimableDraw",
        "label": "drawCalculatorAddresses",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint32,t_contract(IDrawCalculator)7722)"
      },
      {
        "astId": 3677,
        "contract": "@pooltogether/v4/contracts/ClaimableDraw.sol:ClaimableDraw",
        "label": "userPayoutHistory",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_array(t_uint96)8_storage)"
      },
      {
        "astId": 3681,
        "contract": "@pooltogether/v4/contracts/ClaimableDraw.sol:ClaimableDraw",
        "label": "drawHistory",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IDrawHistory)7769"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint96)8_storage": {
        "base": "t_uint96",
        "encoding": "inplace",
        "label": "uint96[8]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDrawCalculator)7722": {
        "encoding": "inplace",
        "label": "contract IDrawCalculator",
        "numberOfBytes": "20"
      },
      "t_contract(IDrawHistory)7769": {
        "encoding": "inplace",
        "label": "contract IDrawHistory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint96)8_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96[8])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint96)8_storage"
      },
      "t_mapping(t_uint32,t_contract(IDrawCalculator)7722)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => contract IDrawCalculator)",
        "numberOfBytes": "32",
        "value": "t_contract(IDrawCalculator)7722"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}