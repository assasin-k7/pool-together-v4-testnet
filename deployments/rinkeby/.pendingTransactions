{
  "0xe96e02f3ead9993b33d139ff83ea7bf704defef465cab608a33b93a722deb82e": {
    "name": "Ticket",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Ticket",
      "sourceName": "@pooltogether/v4-core/contracts/Ticket.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals_",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "_controller",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "delegator",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "name": "Delegated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "controller",
              "type": "address"
            }
          ],
          "name": "Deployed",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "components": [
                {
                  "internalType": "uint224",
                  "name": "amount",
                  "type": "uint224"
                },
                {
                  "internalType": "uint32",
                  "name": "timestamp",
                  "type": "uint32"
                }
              ],
              "indexed": false,
              "internalType": "struct ObservationLib.Observation",
              "name": "newTotalSupplyTwab",
              "type": "tuple"
            }
          ],
          "name": "NewTotalSupplyTwab",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint224",
                  "name": "amount",
                  "type": "uint224"
                },
                {
                  "internalType": "uint32",
                  "name": "timestamp",
                  "type": "uint32"
                }
              ],
              "indexed": false,
              "internalType": "struct ObservationLib.Observation",
              "name": "newTwab",
              "type": "tuple"
            }
          ],
          "name": "NewUserTwab",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "controller",
              "type": "address"
            }
          ],
          "name": "TicketInitialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "DOMAIN_SEPARATOR",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "controller",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "controllerBurn",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "controllerBurnFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            }
          ],
          "name": "controllerDelegateFor",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "controllerMint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            }
          ],
          "name": "delegate",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            }
          ],
          "name": "delegateOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_newDelegate",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "_v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "_r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_s",
              "type": "bytes32"
            }
          ],
          "name": "delegateWithSignature",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            }
          ],
          "name": "getAccountDetails",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "uint208",
                  "name": "balance",
                  "type": "uint208"
                },
                {
                  "internalType": "uint24",
                  "name": "nextTwabIndex",
                  "type": "uint24"
                },
                {
                  "internalType": "uint24",
                  "name": "cardinality",
                  "type": "uint24"
                }
              ],
              "internalType": "struct TwabLib.AccountDetails",
              "name": "",
              "type": "tuple"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "_startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "_endTime",
              "type": "uint64"
            }
          ],
          "name": "getAverageBalanceBetween",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            },
            {
              "internalType": "uint64[]",
              "name": "_startTimes",
              "type": "uint64[]"
            },
            {
              "internalType": "uint64[]",
              "name": "_endTimes",
              "type": "uint64[]"
            }
          ],
          "name": "getAverageBalancesBetween",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint64[]",
              "name": "_startTimes",
              "type": "uint64[]"
            },
            {
              "internalType": "uint64[]",
              "name": "_endTimes",
              "type": "uint64[]"
            }
          ],
          "name": "getAverageTotalSuppliesBetween",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "_target",
              "type": "uint64"
            }
          ],
          "name": "getBalanceAt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            },
            {
              "internalType": "uint64[]",
              "name": "_targets",
              "type": "uint64[]"
            }
          ],
          "name": "getBalancesAt",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint64[]",
              "name": "_targets",
              "type": "uint64[]"
            }
          ],
          "name": "getTotalSuppliesAt",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "_target",
              "type": "uint64"
            }
          ],
          "name": "getTotalSupplyAt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "_index",
              "type": "uint16"
            }
          ],
          "name": "getTwab",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "uint224",
                  "name": "amount",
                  "type": "uint224"
                },
                {
                  "internalType": "uint32",
                  "name": "timestamp",
                  "type": "uint32"
                }
              ],
              "internalType": "struct ObservationLib.Observation",
              "name": "",
              "type": "tuple"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "nonces",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "name": "permit",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x6101806040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120527f94019368dc6b2ee4ac32010c9d0081ec29874325b541829d001d22c296b5246c610160523480156200005c57600080fd5b5060405162003c7438038062003c748339810160408190526200007f9162000427565b838383836040518060400160405280601c81526020017f506f6f6c546f67657468657220436f6e74726f6c6c6564546f6b656e0000000081525080604051806040016040528060018152602001603160f81b81525086868160039080519060200190620000ee929190620002f0565b50805162000104906004906020840190620002f0565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a018190528183019890985260608101959095526080808601939093523085830152805180860390920182529390920190925280519401939093209092526101005250506001600160a01b038116620002015760405162461bcd60e51b815260206004820152602b60248201527f436f6e74726f6c6c6564546f6b656e2f636f6e74726f6c6c65722d6e6f742d7a60448201526a65726f2d6164647265737360a81b60648201526084015b60405180910390fd5b600680546001600160a01b0319166001600160a01b03831617905560ff82166200026e5760405162461bcd60e51b815260206004820181905260248201527f436f6e74726f6c6c6564546f6b656e2f646563696d616c732d67742d7a65726f6044820152606401620001f8565b7fff0000000000000000000000000000000000000000000000000000000000000060f883901b16610140526040516001600160a01b038216907fde72fc29218361f33503847e6f32be813f9ec92fc7c772bb59e46675c890fd0e90620002da90879087908790620004f9565b60405180910390a25050505050505050620005bc565b828054620002fe9062000569565b90600052602060002090601f0160209004810192826200032257600085556200036d565b82601f106200033d57805160ff19168380011785556200036d565b828001600101855582156200036d579182015b828111156200036d57825182559160200191906001019062000350565b506200037b9291506200037f565b5090565b5b808211156200037b576000815560010162000380565b600082601f830112620003a857600080fd5b81516001600160401b0380821115620003c557620003c5620005a6565b604051601f8301601f19908116603f01168101908282118183101715620003f057620003f0620005a6565b816040528381528660208588010111156200040a57600080fd5b6200041d84602083016020890162000536565b9695505050505050565b600080600080608085870312156200043e57600080fd5b84516001600160401b03808211156200045657600080fd5b620004648883890162000396565b955060208701519150808211156200047b57600080fd5b506200048a8782880162000396565b935050604085015160ff81168114620004a257600080fd5b60608601519092506001600160a01b0381168114620004c057600080fd5b939692955090935050565b60008151808452620004e581602086016020860162000536565b601f01601f19169290920160200192915050565b6060815260006200050e6060830186620004cb565b8281036020840152620005228186620004cb565b91505060ff83166040830152949350505050565b60005b838110156200055357818101518382015260200162000539565b8381111562000563576000848401525b50505050565b600181811c908216806200057e57607f821691505b60208210811415620005a057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e05161010051610120516101405160f81c6101605161364f620006256000396000610cd40152600061031b01526000610ff9015260006115dd0152600061162c015260006116070152600061158b015260006115b4015261364f6000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806368c7fd571161010f57806395d89b41116100a2578063a9059cbb11610071578063a9059cbb1461052e578063d505accf14610541578063dd62ed3e14610554578063f77c47911461058d57600080fd5b806395d89b41146104ed57806398b16f36146104f55780639ecb037014610508578063a457c2d71461051b57600080fd5b80638d22ea2a116100de5780638d22ea2a1461046d5780638e6d536a146104b457806390596dd1146104c7578063919974dc146104da57600080fd5b806368c7fd571461040b57806370a082311461041e5780637ecebe001461044757806385beb5f11461045a57600080fd5b806333e39b61116101875780635c19a95c116101565780635c19a95c146103b25780635d7b0758146103c5578063613ed6bd146103d8578063631b5dfb146103f857600080fd5b806333e39b61146103455780633644e5151461035a57806336bb2a3814610362578063395093511461039f57600080fd5b806323b872dd116101c357806323b872dd1461023d5780632aceb534146102505780632d0dd68614610301578063313ce5671461031457600080fd5b806306fdde03146101ea578063095ea7b31461020857806318160ddd1461022b575b600080fd5b6101f26105a0565b6040516101ff91906132fe565b60405180910390f35b61021b61021636600461315a565b610632565b60405190151581526020016101ff565b6002545b6040519081526020016101ff565b61021b61024b366004612f43565b610649565b6102c961025e366004612ef5565b6040805160608082018352600080835260208084018290529284018190526001600160a01b03949094168452600782529282902082519384018352546001600160d01b038116845262ffffff600160d01b8204811692850192909252600160e81b9004169082015290565b6040805182516001600160d01b0316815260208084015162ffffff9081169183019190915292820151909216908201526060016101ff565b61022f61030f36600461329f565b61070f565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101ff565b610358610353366004612f10565b61075b565b005b61022f6107c3565b61037561037036600461311c565b6107d2565b6040805182516001600160e01b0316815260209283015163ffffffff1692810192909252016101ff565b61021b6103ad36600461315a565b61084a565b6103586103c0366004612ef5565b610886565b6103586103d336600461315a565b610893565b6103eb6103e6366004613048565b6108f7565b6040516101ff91906132ba565b610358610406366004612f43565b610a13565b6103eb61041936600461309b565b610ace565b61022f61042c366004612ef5565b6001600160a01b031660009081526020819052604090205490565b61022f610455366004612ef5565b610b00565b6103eb6104683660046131f1565b610b1e565b61049c61047b366004612ef5565b6001600160a01b039081166000908152630100000860205260409020541690565b6040516001600160a01b0390911681526020016101ff565b6103eb6104c2366004613233565b610c01565b6103586104d536600461315a565b610c1c565b6103586104e8366004612fe9565b610c80565b6101f2610e00565b61022f6105033660046131ae565b610e0f565b61022f610516366004613184565b610e80565b61021b61052936600461315a565b610ee7565b61021b61053c36600461315a565b610f98565b61035861054f366004612f7f565b610fa5565b61022f610562366004612f10565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60065461049c906001600160a01b031681565b6060600380546105af906134db565b80601f01602080910402602001604051908101604052809291908181526020018280546105db906134db565b80156106285780601f106105fd57610100808354040283529160200191610628565b820191906000526020600020905b81548152906001019060200180831161060b57829003601f168201915b5050505050905090565b600061063f338484611109565b5060015b92915050565b6000610656848484611261565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106f55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6107028533858403611109565b60019150505b9392505050565b604080516060810182526008546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b9091041691810191909152600090610643906009908442611485565b6006546001600160a01b031633146107b55760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf82826114b1565b5050565b60006107cd611587565b905090565b60408051808201909152600080825260208201526001600160a01b038316600090815260076020526040902060010161ffff831662ffffff81106108185761081861359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201529392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161063f9185906108819086906133be565b611109565b61089033826114b1565b50565b6006546001600160a01b031633146108ed5760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf828261167a565b60608160008167ffffffffffffffff811115610915576109156135b5565b60405190808252806020026020018201604052801561093e578160200160208202803683370190505b506001600160a01b0387166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b900490931691830191909152929350905b84811015610a06576109d783600101838a8a858181106109bc576109bc61359f565b90506020020160208101906109d1919061329f565b42611485565b8482815181106109e9576109e961359f565b6020908102919091010152806109fe81613510565b91505061099a565b5091979650505050505050565b6006546001600160a01b03163314610a6d5760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b816001600160a01b0316836001600160a01b031614610abf576001600160a01b03828116600090815260016020908152604080832093871683529290522054610abf90839085906108819085906134a7565b610ac98282611765565b505050565b6001600160a01b0385166000908152600760205260409020606090610af690868686866118f6565b9695505050505050565b6001600160a01b038116600090815260056020526040812054610643565b60608160008167ffffffffffffffff811115610b3c57610b3c6135b5565b604051908082528060200260200182016040528015610b65578160200160208202803683370190505b50604080516060810182526008546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915290915060005b83811015610bf657610bc76009838989858181106109bc576109bc61359f565b838281518110610bd957610bd961359f565b602090810291909101015280610bee81613510565b915050610ba7565b509095945050505050565b6060610c116008868686866118f6565b90505b949350505050565b6006546001600160a01b03163314610c765760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf8282611765565b83421115610cd05760405162461bcd60e51b815260206004820181905260248201527f5469636b65742f64656c65676174652d657870697265642d646561646c696e6560448201526064016106ec565b60007f00000000000000000000000000000000000000000000000000000000000000008787610cfe8a611a93565b6040805160208101959095526001600160a01b039384169085015291166060830152608082015260a0810186905260c0016040516020818303038152906040528051906020012090506000610d5282611abb565b90506000610d6282878787611b24565b9050886001600160a01b0316816001600160a01b031614610deb5760405162461bcd60e51b815260206004820152602160248201527f5469636b65742f64656c65676174652d696e76616c69642d7369676e6174757260448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b610df589896114b1565b505050505050505050565b6060600480546105af906134db565b6001600160a01b0383166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b90049093169183019190915290610e77906001830190868642611b4c565b95945050505050565b6001600160a01b0382166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b90049093169183019190915290610c149060018301908542611485565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610f815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106ec565b610f8e3385858403611109565b5060019392505050565b600061063f338484611261565b83421115610ff55760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016106ec565b60007f00000000000000000000000000000000000000000000000000000000000000008888886110248c611a93565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061107f82611abb565b9050600061108f82878787611b24565b9050896001600160a01b0316816001600160a01b0316146110f25760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016106ec565b6110fd8a8a8a611109565b50505050505050505050565b6001600160a01b0383166111845760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0382166112005760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166112dd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0382166113595760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b611364838383611b84565b6001600160a01b038316600090815260208190526040902054818110156113f35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061142a9084906133be565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161147691815260200190565b60405180910390a35b50505050565b6000808263ffffffff168463ffffffff16116114a157836114a3565b825b9050610af686868386611c17565b6001600160a01b038281166000908152602081815260408083205463010000089092529091205490919081169083168114156114ed5750505050565b6001600160a01b03848116600090815263010000086020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918516919091179055611541818484611d30565b826001600160a01b0316846001600160a01b03167f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea260405160405180910390a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156115d657507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b0382166116d05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106ec565b6116dc60008383611b84565b80600260008282546116ee91906133be565b90915550506001600160a01b0382166000908152602081905260408120805483929061171b9084906133be565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166117e15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6117ed82600083611b84565b6001600160a01b0382166000908152602081905260409020548181101561187c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b03831660009081526020819052604081208383039055600280548492906118ab9084906134a7565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b606083821461196d5760405162461bcd60e51b815260206004820152602360248201527f5469636b65742f73746172742d656e642d74696d65732d6c656e6774682d6d6160448201527f746368000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6040805160608101825287546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915260008567ffffffffffffffff8111156119c2576119c26135b5565b6040519080825280602002602001820160405280156119eb578160200160208202803683370190505b5090504260005b87811015611a8557611a568a600101858b8b85818110611a1457611a1461359f565b9050602002016020810190611a29919061329f565b8a8a86818110611a3b57611a3b61359f565b9050602002016020810190611a50919061329f565b86611b4c565b838281518110611a6857611a6861359f565b602090810291909101015280611a7d81613510565b9150506119f2565b509098975050505050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6000610643611ac8611587565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611b3587878787611dc1565b91509150611b4281611eae565b5095945050505050565b6000808263ffffffff168463ffffffff1611611b685783611b6a565b825b9050611b79878787848761209f565b979650505050505050565b816001600160a01b0316836001600160a01b03161415611ba357505050565b60006001600160a01b03841615611bd457506001600160a01b03808416600090815263010000086020526040902054165b60006001600160a01b03841615611c0557506001600160a01b03808416600090815263010000086020526040902054165b611c10828285611d30565b5050505050565b604080518082019091526000808252602082018190529081906040805180820190915260008082526020820152611c4e888861213b565b60208101519194509150611c6f9063ffffffff90811690889088906121bb16565b15611c8a57505084516001600160d01b03169150610c149050565b6000611c96898961228c565b6020810151909350909150611cb79063ffffffff808a169190899061230916565b15611cc9576000945050505050610c14565b611cdb8985838a8c604001518b6123d8565b8094508193505050611cf683602001518360200151886125a5565b63ffffffff1682600001518460000151611d109190613487565b611d1a91906133f6565b6001600160e01b03169998505050505050505050565b6001600160a01b038316158015611d4f57506001600160a01b03821615155b15611d6257611d5d8161266f565b611d8f565b6001600160a01b03831615801590611d8157506001600160a01b038216155b15611d8f57611d8f8161276f565b6001600160a01b03831615611da857611da883826127a9565b6001600160a01b03821615610ac957610ac982826128e1565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611df85750600090506003611ea5565b8460ff16601b14158015611e1057508460ff16601c14155b15611e215750600090506004611ea5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611e75573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611e9e57600060019250925050611ea5565b9150600090505b94509492505050565b6000816004811115611ec257611ec2613589565b1415611ecb5750565b6001816004811115611edf57611edf613589565b1415611f2d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106ec565b6002816004811115611f4157611f41613589565b1415611f8f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106ec565b6003816004811115611fa357611fa3613589565b14156120175760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b600481600481111561202b5761202b613589565b14156108905760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b60008060006120ae888861228c565b915091506000806120bf8a8a61213b565b9150915060006120d58b8b8487878a8f8e612912565b905060006120e98c8c8588888b8f8f612912565b90506120fe816020015183602001518a6125a5565b63ffffffff16826000015182600001516121189190613487565b61212291906133f6565b6001600160e01b03169c9b505050505050505050505050565b604080518082019091526000808252602082018190529061216a836020015162ffffff1662ffffff8016612a5c565b9150838262ffffff1662ffffff81106121855761218561359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820152919491935090915050565b60008163ffffffff168463ffffffff16111580156121e557508163ffffffff168363ffffffff1611155b15612201578263ffffffff168463ffffffff1611159050610708565b60008263ffffffff168563ffffffff16116122305761222b63ffffffff86166401000000006133d6565b612238565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116122705761226b63ffffffff86166401000000006133d6565b612278565b8463ffffffff165b64ffffffffff169091111595945050505050565b604080518082019091526000808252602082018190529082602001519150838262ffffff1662ffffff81106122c3576122c361359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820181905290915061230257600091508382612185565b9250929050565b60008163ffffffff168463ffffffff161115801561233357508163ffffffff168363ffffffff1611155b1561234e578263ffffffff168463ffffffff16109050610708565b60008263ffffffff168563ffffffff161161237d5761237863ffffffff86166401000000006133d6565b612385565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116123bd576123b863ffffffff86166401000000006133d6565b6123c5565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008662ffffff1690506000818962ffffff1610612423578862ffffff1661243e565b600161243462ffffff8816846133be565b61243e91906134a7565b905060005b600261244f83856133be565b612459919061341c565b90508a61246b828962ffffff16612a86565b62ffffff1662ffffff81106124825761248261359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909550806124ca576124c28260016133be565b935050612443565b8b6124da838a62ffffff16612a92565b62ffffff1662ffffff81106124f1576124f161359f565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b9091048116602083015290955060009061253690838116908c908b906121bb16565b905080801561255f575061255f8660200151898c63ffffffff166121bb9092919063ffffffff16565b1561256b575050612597565b806125825761257b6001846134a7565b9350612590565b61258d8360016133be565b94505b5050612443565b505050965096945050505050565b60008163ffffffff168463ffffffff16111580156125cf57508163ffffffff168363ffffffff1611155b156125e5576125de83856134be565b9050610708565b60008263ffffffff168563ffffffff16116126145761260f63ffffffff86166401000000006133d6565b61261c565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116126545761264f63ffffffff86166401000000006133d6565b61265c565b8463ffffffff165b64ffffffffff169050610af681836134a7565b806126775750565b6000806000612690600861268a86612aa2565b42612b25565b825160088054602086015160408701516001600160d01b039094167fffffff000000000000000000000000000000000000000000000000000000000090921691909117600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b919093160291909117905591945092509050801561147f576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a150505050565b806127775750565b6000806000612690600861278a86612aa2565b6040518060600160405280602c81526020016135ee602c913942612bce565b806127b2575050565b6001600160a01b03821660009081526007602052604081209080806127f9846127da87612aa2565b6040518060600160405280602281526020016135cc6022913942612bce565b82518754602085015160408601516001600160d01b039093167fffffff000000000000000000000000000000000000000000000000000000000090921691909117600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b91909216021787559194509250905080156128d9576040805183516001600160e01b0316815260208085015163ffffffff16908201526001600160a01b038816917fdd3e7cd3a260a292b0b3306b2ca62f30a7349619a9d09c58109318774c6b627d910160405180910390a25b505050505050565b806128ea575050565b6001600160a01b03821660009081526007602052604081209080806127f98461268a87612aa2565b60408051808201909152600080825260208201526129458383896020015163ffffffff166123099092919063ffffffff16565b15612969576129628789600001516001600160d01b031685612ca1565b9050612a50565b8263ffffffff16876020015163ffffffff161415612988575085612a50565b8263ffffffff16866020015163ffffffff1614156129a7575084612a50565b6129c68660200151838563ffffffff166123099092919063ffffffff16565b156129eb5750604080518082019091526000815263ffffffff83166020820152612a50565b600080612a008b8888888e60400151896123d8565b915091506000612a1982602001518460200151876125a5565b63ffffffff1683600001518360000151612a339190613487565b612a3d91906133f6565b9050612a4a838288612ca1565b93505050505b98975050505050505050565b600081612a6b57506000610643565b6107086001612a7a84866133be565b612a8491906134a7565b835b60006107088284613549565b6000610708612a848460016133be565b60006001600160d01b03821115612b215760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f303820626974730000000000000000000000000000000000000000000000000060648201526084016106ec565b5090565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825286546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b9091041691810191909152600090612ba1600188018287612d1c565b83519296509094509250612bb6908790613353565b6001600160d01b031684525091959094509092509050565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825287546001600160d01b0380821680845262ffffff600160d01b840481166020860152600160e81b9093049092169383019390935260009287919089161115612c645760405162461bcd60e51b81526004016106ec91906132fe565b50612c73886001018287612d1c565b83519296509094509250612c8890889061345f565b6001600160d01b03168452509196909550909350915050565b60408051808201909152600080825260208201526040518060400160405280612cdf8660200151858663ffffffff166125a59092919063ffffffff16565b612cef9063ffffffff1686613430565b8651612cfb919061337e565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b60408051606081018252600080825260208201819052918101919091526040805180820190915260008082526020820152600080612d5a878761213b565b9150508463ffffffff16816020015163ffffffff161415612d8357859350915060009050612dfa565b6000612d9d8288600001516001600160d01b031688612ca1565b90508088886020015162ffffff1662ffffff8110612dbd57612dbd61359f565b825160209093015163ffffffff16600160e01b026001600160e01b03909316929092179101556000612dee88612e03565b95509093506001925050505b93509350939050565b60408051606081018252600080825260208083018290529282015290820151612e339062ffffff90811690612a92565b62ffffff9081166020840152604083015181161015612b2157600182604001818151612e5f91906133a0565b62ffffff169052505090565b80356001600160a01b0381168114612e8257600080fd5b919050565b60008083601f840112612e9957600080fd5b50813567ffffffffffffffff811115612eb157600080fd5b6020830191508360208260051b850101111561230257600080fd5b803567ffffffffffffffff81168114612e8257600080fd5b803560ff81168114612e8257600080fd5b600060208284031215612f0757600080fd5b61070882612e6b565b60008060408385031215612f2357600080fd5b612f2c83612e6b565b9150612f3a60208401612e6b565b90509250929050565b600080600060608486031215612f5857600080fd5b612f6184612e6b565b9250612f6f60208501612e6b565b9150604084013590509250925092565b600080600080600080600060e0888a031215612f9a57600080fd5b612fa388612e6b565b9650612fb160208901612e6b565b95506040880135945060608801359350612fcd60808901612ee4565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060c0878903121561300257600080fd5b61300b87612e6b565b955061301960208801612e6b565b94506040870135935061302e60608801612ee4565b92506080870135915060a087013590509295509295509295565b60008060006040848603121561305d57600080fd5b61306684612e6b565b9250602084013567ffffffffffffffff81111561308257600080fd5b61308e86828701612e87565b9497909650939450505050565b6000806000806000606086880312156130b357600080fd5b6130bc86612e6b565b9450602086013567ffffffffffffffff808211156130d957600080fd5b6130e589838a01612e87565b909650945060408801359150808211156130fe57600080fd5b5061310b88828901612e87565b969995985093965092949392505050565b6000806040838503121561312f57600080fd5b61313883612e6b565b9150602083013561ffff8116811461314f57600080fd5b809150509250929050565b6000806040838503121561316d57600080fd5b61317683612e6b565b946020939093013593505050565b6000806040838503121561319757600080fd5b6131a083612e6b565b9150612f3a60208401612ecc565b6000806000606084860312156131c357600080fd5b6131cc84612e6b565b92506131da60208501612ecc565b91506131e860408501612ecc565b90509250925092565b6000806020838503121561320457600080fd5b823567ffffffffffffffff81111561321b57600080fd5b61322785828601612e87565b90969095509350505050565b6000806000806040858703121561324957600080fd5b843567ffffffffffffffff8082111561326157600080fd5b61326d88838901612e87565b9096509450602087013591508082111561328657600080fd5b5061329387828801612e87565b95989497509550505050565b6000602082840312156132b157600080fd5b61070882612ecc565b6020808252825182820181905260009190848201906040850190845b818110156132f2578351835292840192918401916001016132d6565b50909695505050505050565b600060208083528351808285015260005b8181101561332b5785810183015185820160400152820161330f565b8181111561333d576000604083870101525b50601f01601f1916929092016040019392505050565b60006001600160d01b038083168185168083038211156133755761337561355d565b01949350505050565b60006001600160e01b038083168185168083038211156133755761337561355d565b600062ffffff8083168185168083038211156133755761337561355d565b600082198211156133d1576133d161355d565b500190565b600064ffffffffff8083168185168083038211156133755761337561355d565b60006001600160e01b038084168061341057613410613573565b92169190910492915050565b60008261342b5761342b613573565b500490565b60006001600160e01b03808316818516818304811182151516156134565761345661355d565b02949350505050565b60006001600160d01b038381169083168181101561347f5761347f61355d565b039392505050565b60006001600160e01b038381169083168181101561347f5761347f61355d565b6000828210156134b9576134b961355d565b500390565b600063ffffffff8381169083168181101561347f5761347f61355d565b600181811c908216806134ef57607f821691505b60208210811415611ab557634e487b7160e01b600052602260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135425761354261355d565b5060010190565b60008261355857613558613573565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63655469636b65742f6275726e2d616d6f756e742d657863656564732d746f74616c2d737570706c792d74776162a26469706673582212207222193ed5d2d8f5956c3459884b91b0e3292657da8569928c1d5de06432574764736f6c63430008060033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c806368c7fd571161010f57806395d89b41116100a2578063a9059cbb11610071578063a9059cbb1461052e578063d505accf14610541578063dd62ed3e14610554578063f77c47911461058d57600080fd5b806395d89b41146104ed57806398b16f36146104f55780639ecb037014610508578063a457c2d71461051b57600080fd5b80638d22ea2a116100de5780638d22ea2a1461046d5780638e6d536a146104b457806390596dd1146104c7578063919974dc146104da57600080fd5b806368c7fd571461040b57806370a082311461041e5780637ecebe001461044757806385beb5f11461045a57600080fd5b806333e39b61116101875780635c19a95c116101565780635c19a95c146103b25780635d7b0758146103c5578063613ed6bd146103d8578063631b5dfb146103f857600080fd5b806333e39b61146103455780633644e5151461035a57806336bb2a3814610362578063395093511461039f57600080fd5b806323b872dd116101c357806323b872dd1461023d5780632aceb534146102505780632d0dd68614610301578063313ce5671461031457600080fd5b806306fdde03146101ea578063095ea7b31461020857806318160ddd1461022b575b600080fd5b6101f26105a0565b6040516101ff91906132fe565b60405180910390f35b61021b61021636600461315a565b610632565b60405190151581526020016101ff565b6002545b6040519081526020016101ff565b61021b61024b366004612f43565b610649565b6102c961025e366004612ef5565b6040805160608082018352600080835260208084018290529284018190526001600160a01b03949094168452600782529282902082519384018352546001600160d01b038116845262ffffff600160d01b8204811692850192909252600160e81b9004169082015290565b6040805182516001600160d01b0316815260208084015162ffffff9081169183019190915292820151909216908201526060016101ff565b61022f61030f36600461329f565b61070f565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101ff565b610358610353366004612f10565b61075b565b005b61022f6107c3565b61037561037036600461311c565b6107d2565b6040805182516001600160e01b0316815260209283015163ffffffff1692810192909252016101ff565b61021b6103ad36600461315a565b61084a565b6103586103c0366004612ef5565b610886565b6103586103d336600461315a565b610893565b6103eb6103e6366004613048565b6108f7565b6040516101ff91906132ba565b610358610406366004612f43565b610a13565b6103eb61041936600461309b565b610ace565b61022f61042c366004612ef5565b6001600160a01b031660009081526020819052604090205490565b61022f610455366004612ef5565b610b00565b6103eb6104683660046131f1565b610b1e565b61049c61047b366004612ef5565b6001600160a01b039081166000908152630100000860205260409020541690565b6040516001600160a01b0390911681526020016101ff565b6103eb6104c2366004613233565b610c01565b6103586104d536600461315a565b610c1c565b6103586104e8366004612fe9565b610c80565b6101f2610e00565b61022f6105033660046131ae565b610e0f565b61022f610516366004613184565b610e80565b61021b61052936600461315a565b610ee7565b61021b61053c36600461315a565b610f98565b61035861054f366004612f7f565b610fa5565b61022f610562366004612f10565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60065461049c906001600160a01b031681565b6060600380546105af906134db565b80601f01602080910402602001604051908101604052809291908181526020018280546105db906134db565b80156106285780601f106105fd57610100808354040283529160200191610628565b820191906000526020600020905b81548152906001019060200180831161060b57829003601f168201915b5050505050905090565b600061063f338484611109565b5060015b92915050565b6000610656848484611261565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106f55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6107028533858403611109565b60019150505b9392505050565b604080516060810182526008546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b9091041691810191909152600090610643906009908442611485565b6006546001600160a01b031633146107b55760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf82826114b1565b5050565b60006107cd611587565b905090565b60408051808201909152600080825260208201526001600160a01b038316600090815260076020526040902060010161ffff831662ffffff81106108185761081861359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201529392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161063f9185906108819086906133be565b611109565b61089033826114b1565b50565b6006546001600160a01b031633146108ed5760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf828261167a565b60608160008167ffffffffffffffff811115610915576109156135b5565b60405190808252806020026020018201604052801561093e578160200160208202803683370190505b506001600160a01b0387166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b900490931691830191909152929350905b84811015610a06576109d783600101838a8a858181106109bc576109bc61359f565b90506020020160208101906109d1919061329f565b42611485565b8482815181106109e9576109e961359f565b6020908102919091010152806109fe81613510565b91505061099a565b5091979650505050505050565b6006546001600160a01b03163314610a6d5760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b816001600160a01b0316836001600160a01b031614610abf576001600160a01b03828116600090815260016020908152604080832093871683529290522054610abf90839085906108819085906134a7565b610ac98282611765565b505050565b6001600160a01b0385166000908152600760205260409020606090610af690868686866118f6565b9695505050505050565b6001600160a01b038116600090815260056020526040812054610643565b60608160008167ffffffffffffffff811115610b3c57610b3c6135b5565b604051908082528060200260200182016040528015610b65578160200160208202803683370190505b50604080516060810182526008546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915290915060005b83811015610bf657610bc76009838989858181106109bc576109bc61359f565b838281518110610bd957610bd961359f565b602090810291909101015280610bee81613510565b915050610ba7565b509095945050505050565b6060610c116008868686866118f6565b90505b949350505050565b6006546001600160a01b03163314610c765760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf8282611765565b83421115610cd05760405162461bcd60e51b815260206004820181905260248201527f5469636b65742f64656c65676174652d657870697265642d646561646c696e6560448201526064016106ec565b60007f00000000000000000000000000000000000000000000000000000000000000008787610cfe8a611a93565b6040805160208101959095526001600160a01b039384169085015291166060830152608082015260a0810186905260c0016040516020818303038152906040528051906020012090506000610d5282611abb565b90506000610d6282878787611b24565b9050886001600160a01b0316816001600160a01b031614610deb5760405162461bcd60e51b815260206004820152602160248201527f5469636b65742f64656c65676174652d696e76616c69642d7369676e6174757260448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b610df589896114b1565b505050505050505050565b6060600480546105af906134db565b6001600160a01b0383166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b90049093169183019190915290610e77906001830190868642611b4c565b95945050505050565b6001600160a01b0382166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b90049093169183019190915290610c149060018301908542611485565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610f815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106ec565b610f8e3385858403611109565b5060019392505050565b600061063f338484611261565b83421115610ff55760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016106ec565b60007f00000000000000000000000000000000000000000000000000000000000000008888886110248c611a93565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061107f82611abb565b9050600061108f82878787611b24565b9050896001600160a01b0316816001600160a01b0316146110f25760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016106ec565b6110fd8a8a8a611109565b50505050505050505050565b6001600160a01b0383166111845760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0382166112005760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166112dd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0382166113595760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b611364838383611b84565b6001600160a01b038316600090815260208190526040902054818110156113f35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061142a9084906133be565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161147691815260200190565b60405180910390a35b50505050565b6000808263ffffffff168463ffffffff16116114a157836114a3565b825b9050610af686868386611c17565b6001600160a01b038281166000908152602081815260408083205463010000089092529091205490919081169083168114156114ed5750505050565b6001600160a01b03848116600090815263010000086020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918516919091179055611541818484611d30565b826001600160a01b0316846001600160a01b03167f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea260405160405180910390a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156115d657507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b0382166116d05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106ec565b6116dc60008383611b84565b80600260008282546116ee91906133be565b90915550506001600160a01b0382166000908152602081905260408120805483929061171b9084906133be565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166117e15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6117ed82600083611b84565b6001600160a01b0382166000908152602081905260409020548181101561187c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b03831660009081526020819052604081208383039055600280548492906118ab9084906134a7565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b606083821461196d5760405162461bcd60e51b815260206004820152602360248201527f5469636b65742f73746172742d656e642d74696d65732d6c656e6774682d6d6160448201527f746368000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6040805160608101825287546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915260008567ffffffffffffffff8111156119c2576119c26135b5565b6040519080825280602002602001820160405280156119eb578160200160208202803683370190505b5090504260005b87811015611a8557611a568a600101858b8b85818110611a1457611a1461359f565b9050602002016020810190611a29919061329f565b8a8a86818110611a3b57611a3b61359f565b9050602002016020810190611a50919061329f565b86611b4c565b838281518110611a6857611a6861359f565b602090810291909101015280611a7d81613510565b9150506119f2565b509098975050505050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6000610643611ac8611587565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611b3587878787611dc1565b91509150611b4281611eae565b5095945050505050565b6000808263ffffffff168463ffffffff1611611b685783611b6a565b825b9050611b79878787848761209f565b979650505050505050565b816001600160a01b0316836001600160a01b03161415611ba357505050565b60006001600160a01b03841615611bd457506001600160a01b03808416600090815263010000086020526040902054165b60006001600160a01b03841615611c0557506001600160a01b03808416600090815263010000086020526040902054165b611c10828285611d30565b5050505050565b604080518082019091526000808252602082018190529081906040805180820190915260008082526020820152611c4e888861213b565b60208101519194509150611c6f9063ffffffff90811690889088906121bb16565b15611c8a57505084516001600160d01b03169150610c149050565b6000611c96898961228c565b6020810151909350909150611cb79063ffffffff808a169190899061230916565b15611cc9576000945050505050610c14565b611cdb8985838a8c604001518b6123d8565b8094508193505050611cf683602001518360200151886125a5565b63ffffffff1682600001518460000151611d109190613487565b611d1a91906133f6565b6001600160e01b03169998505050505050505050565b6001600160a01b038316158015611d4f57506001600160a01b03821615155b15611d6257611d5d8161266f565b611d8f565b6001600160a01b03831615801590611d8157506001600160a01b038216155b15611d8f57611d8f8161276f565b6001600160a01b03831615611da857611da883826127a9565b6001600160a01b03821615610ac957610ac982826128e1565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611df85750600090506003611ea5565b8460ff16601b14158015611e1057508460ff16601c14155b15611e215750600090506004611ea5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611e75573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611e9e57600060019250925050611ea5565b9150600090505b94509492505050565b6000816004811115611ec257611ec2613589565b1415611ecb5750565b6001816004811115611edf57611edf613589565b1415611f2d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106ec565b6002816004811115611f4157611f41613589565b1415611f8f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106ec565b6003816004811115611fa357611fa3613589565b14156120175760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b600481600481111561202b5761202b613589565b14156108905760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b60008060006120ae888861228c565b915091506000806120bf8a8a61213b565b9150915060006120d58b8b8487878a8f8e612912565b905060006120e98c8c8588888b8f8f612912565b90506120fe816020015183602001518a6125a5565b63ffffffff16826000015182600001516121189190613487565b61212291906133f6565b6001600160e01b03169c9b505050505050505050505050565b604080518082019091526000808252602082018190529061216a836020015162ffffff1662ffffff8016612a5c565b9150838262ffffff1662ffffff81106121855761218561359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820152919491935090915050565b60008163ffffffff168463ffffffff16111580156121e557508163ffffffff168363ffffffff1611155b15612201578263ffffffff168463ffffffff1611159050610708565b60008263ffffffff168563ffffffff16116122305761222b63ffffffff86166401000000006133d6565b612238565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116122705761226b63ffffffff86166401000000006133d6565b612278565b8463ffffffff165b64ffffffffff169091111595945050505050565b604080518082019091526000808252602082018190529082602001519150838262ffffff1662ffffff81106122c3576122c361359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820181905290915061230257600091508382612185565b9250929050565b60008163ffffffff168463ffffffff161115801561233357508163ffffffff168363ffffffff1611155b1561234e578263ffffffff168463ffffffff16109050610708565b60008263ffffffff168563ffffffff161161237d5761237863ffffffff86166401000000006133d6565b612385565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116123bd576123b863ffffffff86166401000000006133d6565b6123c5565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008662ffffff1690506000818962ffffff1610612423578862ffffff1661243e565b600161243462ffffff8816846133be565b61243e91906134a7565b905060005b600261244f83856133be565b612459919061341c565b90508a61246b828962ffffff16612a86565b62ffffff1662ffffff81106124825761248261359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909550806124ca576124c28260016133be565b935050612443565b8b6124da838a62ffffff16612a92565b62ffffff1662ffffff81106124f1576124f161359f565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b9091048116602083015290955060009061253690838116908c908b906121bb16565b905080801561255f575061255f8660200151898c63ffffffff166121bb9092919063ffffffff16565b1561256b575050612597565b806125825761257b6001846134a7565b9350612590565b61258d8360016133be565b94505b5050612443565b505050965096945050505050565b60008163ffffffff168463ffffffff16111580156125cf57508163ffffffff168363ffffffff1611155b156125e5576125de83856134be565b9050610708565b60008263ffffffff168563ffffffff16116126145761260f63ffffffff86166401000000006133d6565b61261c565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116126545761264f63ffffffff86166401000000006133d6565b61265c565b8463ffffffff165b64ffffffffff169050610af681836134a7565b806126775750565b6000806000612690600861268a86612aa2565b42612b25565b825160088054602086015160408701516001600160d01b039094167fffffff000000000000000000000000000000000000000000000000000000000090921691909117600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b919093160291909117905591945092509050801561147f576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a150505050565b806127775750565b6000806000612690600861278a86612aa2565b6040518060600160405280602c81526020016135ee602c913942612bce565b806127b2575050565b6001600160a01b03821660009081526007602052604081209080806127f9846127da87612aa2565b6040518060600160405280602281526020016135cc6022913942612bce565b82518754602085015160408601516001600160d01b039093167fffffff000000000000000000000000000000000000000000000000000000000090921691909117600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b91909216021787559194509250905080156128d9576040805183516001600160e01b0316815260208085015163ffffffff16908201526001600160a01b038816917fdd3e7cd3a260a292b0b3306b2ca62f30a7349619a9d09c58109318774c6b627d910160405180910390a25b505050505050565b806128ea575050565b6001600160a01b03821660009081526007602052604081209080806127f98461268a87612aa2565b60408051808201909152600080825260208201526129458383896020015163ffffffff166123099092919063ffffffff16565b15612969576129628789600001516001600160d01b031685612ca1565b9050612a50565b8263ffffffff16876020015163ffffffff161415612988575085612a50565b8263ffffffff16866020015163ffffffff1614156129a7575084612a50565b6129c68660200151838563ffffffff166123099092919063ffffffff16565b156129eb5750604080518082019091526000815263ffffffff83166020820152612a50565b600080612a008b8888888e60400151896123d8565b915091506000612a1982602001518460200151876125a5565b63ffffffff1683600001518360000151612a339190613487565b612a3d91906133f6565b9050612a4a838288612ca1565b93505050505b98975050505050505050565b600081612a6b57506000610643565b6107086001612a7a84866133be565b612a8491906134a7565b835b60006107088284613549565b6000610708612a848460016133be565b60006001600160d01b03821115612b215760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f303820626974730000000000000000000000000000000000000000000000000060648201526084016106ec565b5090565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825286546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b9091041691810191909152600090612ba1600188018287612d1c565b83519296509094509250612bb6908790613353565b6001600160d01b031684525091959094509092509050565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825287546001600160d01b0380821680845262ffffff600160d01b840481166020860152600160e81b9093049092169383019390935260009287919089161115612c645760405162461bcd60e51b81526004016106ec91906132fe565b50612c73886001018287612d1c565b83519296509094509250612c8890889061345f565b6001600160d01b03168452509196909550909350915050565b60408051808201909152600080825260208201526040518060400160405280612cdf8660200151858663ffffffff166125a59092919063ffffffff16565b612cef9063ffffffff1686613430565b8651612cfb919061337e565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b60408051606081018252600080825260208201819052918101919091526040805180820190915260008082526020820152600080612d5a878761213b565b9150508463ffffffff16816020015163ffffffff161415612d8357859350915060009050612dfa565b6000612d9d8288600001516001600160d01b031688612ca1565b90508088886020015162ffffff1662ffffff8110612dbd57612dbd61359f565b825160209093015163ffffffff16600160e01b026001600160e01b03909316929092179101556000612dee88612e03565b95509093506001925050505b93509350939050565b60408051606081018252600080825260208083018290529282015290820151612e339062ffffff90811690612a92565b62ffffff9081166020840152604083015181161015612b2157600182604001818151612e5f91906133a0565b62ffffff169052505090565b80356001600160a01b0381168114612e8257600080fd5b919050565b60008083601f840112612e9957600080fd5b50813567ffffffffffffffff811115612eb157600080fd5b6020830191508360208260051b850101111561230257600080fd5b803567ffffffffffffffff81168114612e8257600080fd5b803560ff81168114612e8257600080fd5b600060208284031215612f0757600080fd5b61070882612e6b565b60008060408385031215612f2357600080fd5b612f2c83612e6b565b9150612f3a60208401612e6b565b90509250929050565b600080600060608486031215612f5857600080fd5b612f6184612e6b565b9250612f6f60208501612e6b565b9150604084013590509250925092565b600080600080600080600060e0888a031215612f9a57600080fd5b612fa388612e6b565b9650612fb160208901612e6b565b95506040880135945060608801359350612fcd60808901612ee4565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060c0878903121561300257600080fd5b61300b87612e6b565b955061301960208801612e6b565b94506040870135935061302e60608801612ee4565b92506080870135915060a087013590509295509295509295565b60008060006040848603121561305d57600080fd5b61306684612e6b565b9250602084013567ffffffffffffffff81111561308257600080fd5b61308e86828701612e87565b9497909650939450505050565b6000806000806000606086880312156130b357600080fd5b6130bc86612e6b565b9450602086013567ffffffffffffffff808211156130d957600080fd5b6130e589838a01612e87565b909650945060408801359150808211156130fe57600080fd5b5061310b88828901612e87565b969995985093965092949392505050565b6000806040838503121561312f57600080fd5b61313883612e6b565b9150602083013561ffff8116811461314f57600080fd5b809150509250929050565b6000806040838503121561316d57600080fd5b61317683612e6b565b946020939093013593505050565b6000806040838503121561319757600080fd5b6131a083612e6b565b9150612f3a60208401612ecc565b6000806000606084860312156131c357600080fd5b6131cc84612e6b565b92506131da60208501612ecc565b91506131e860408501612ecc565b90509250925092565b6000806020838503121561320457600080fd5b823567ffffffffffffffff81111561321b57600080fd5b61322785828601612e87565b90969095509350505050565b6000806000806040858703121561324957600080fd5b843567ffffffffffffffff8082111561326157600080fd5b61326d88838901612e87565b9096509450602087013591508082111561328657600080fd5b5061329387828801612e87565b95989497509550505050565b6000602082840312156132b157600080fd5b61070882612ecc565b6020808252825182820181905260009190848201906040850190845b818110156132f2578351835292840192918401916001016132d6565b50909695505050505050565b600060208083528351808285015260005b8181101561332b5785810183015185820160400152820161330f565b8181111561333d576000604083870101525b50601f01601f1916929092016040019392505050565b60006001600160d01b038083168185168083038211156133755761337561355d565b01949350505050565b60006001600160e01b038083168185168083038211156133755761337561355d565b600062ffffff8083168185168083038211156133755761337561355d565b600082198211156133d1576133d161355d565b500190565b600064ffffffffff8083168185168083038211156133755761337561355d565b60006001600160e01b038084168061341057613410613573565b92169190910492915050565b60008261342b5761342b613573565b500490565b60006001600160e01b03808316818516818304811182151516156134565761345661355d565b02949350505050565b60006001600160d01b038381169083168181101561347f5761347f61355d565b039392505050565b60006001600160e01b038381169083168181101561347f5761347f61355d565b6000828210156134b9576134b961355d565b500390565b600063ffffffff8381169083168181101561347f5761347f61355d565b600181811c908216806134ef57607f821691505b60208210811415611ab557634e487b7160e01b600052602260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135425761354261355d565b5060010190565b60008261355857613558613573565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63655469636b65742f6275726e2d616d6f756e742d657863656564732d746f74616c2d737570706c792d74776162a26469706673582212207222193ed5d2d8f5956c3459884b91b0e3292657da8569928c1d5de06432574764736f6c63430008060033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "author": "PoolTogether Inc Team",
        "kind": "dev",
        "methods": {
          "DOMAIN_SEPARATOR()": {
            "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
          },
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "constructor": {
            "params": {
              "_controller": "ERC20 ticket controller address (ie: Prize Pool address).",
              "_name": "ERC20 ticket token name.",
              "_symbol": "ERC20 ticket token symbol.",
              "decimals_": "ERC20 ticket token decimals."
            }
          },
          "controllerBurn(address,uint256)": {
            "details": "May be overridden to provide more granular control over burning",
            "params": {
              "_amount": "Amount of tokens to burn",
              "_user": "Address of the holder account to burn tokens from"
            }
          },
          "controllerBurnFrom(address,address,uint256)": {
            "details": "May be overridden to provide more granular control over operator-burning",
            "params": {
              "_amount": "Amount of tokens to burn",
              "_operator": "Address of the operator performing the burn action via the controller contract",
              "_user": "Address of the holder account to burn tokens from"
            }
          },
          "controllerDelegateFor(address,address)": {
            "params": {
              "delegate": "The new delegate",
              "user": "The user for whom to delegate"
            }
          },
          "controllerMint(address,uint256)": {
            "details": "May be overridden to provide more granular control over minting",
            "params": {
              "_amount": "Amount of tokens to mint",
              "_user": "Address of the receiver of the minted tokens"
            }
          },
          "decimals()": {
            "details": "This value should be equal to the decimals of the token used to deposit into the pool.",
            "returns": {
              "_0": "uint8 decimals."
            }
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "delegate(address)": {
            "details": "Transfers (including mints) trigger the storage of a TWAB in delegate(s) account, instead of the targetted sender and/or recipient address(s).To reset the delegate, pass the zero address (0x000.000) as `to` parameter.Current delegate address should be different from the new delegate address `to`.",
            "params": {
              "to": "Recipient of delegated TWAB."
            }
          },
          "delegateOf(address)": {
            "details": "Address of the delegate will be the zero address if `user` has not delegated their tickets.",
            "params": {
              "user": "Address of the delegator."
            },
            "returns": {
              "_0": "Address of the delegate."
            }
          },
          "delegateWithSignature(address,address,uint256,uint8,bytes32,bytes32)": {
            "params": {
              "deadline": "The timestamp by which this must be submitted",
              "delegate": "The new delegate",
              "r": "The r portion of the ECDSA sig",
              "s": "The s portion of the ECDSA sig",
              "user": "The user who is delegating",
              "v": "The v portion of the ECDSA sig"
            }
          },
          "getAccountDetails(address)": {
            "params": {
              "user": "The user for whom to fetch the TWAB context."
            },
            "returns": {
              "_0": "The TWAB context, which includes { balance, nextTwabIndex, cardinality }"
            }
          },
          "getAverageBalanceBetween(address,uint64,uint64)": {
            "params": {
              "endTime": "The end time of the time frame.",
              "startTime": "The start time of the time frame.",
              "user": "The user whose balance is checked."
            },
            "returns": {
              "_0": "The average balance that the user held during the time frame."
            }
          },
          "getAverageBalancesBetween(address,uint64[],uint64[])": {
            "params": {
              "endTimes": "The end time of the time frame.",
              "startTimes": "The start time of the time frame.",
              "user": "The user whose balance is checked."
            },
            "returns": {
              "_0": "The average balance that the user held during the time frame."
            }
          },
          "getAverageTotalSuppliesBetween(uint64[],uint64[])": {
            "params": {
              "endTimes": "Array of end times.",
              "startTimes": "Array of start times."
            },
            "returns": {
              "_0": "The average total supplies held during the time frame."
            }
          },
          "getBalanceAt(address,uint64)": {
            "params": {
              "timestamp": "Timestamp at which we want to retrieve the TWAB balance.",
              "user": "Address of the user whose TWAB is being fetched."
            },
            "returns": {
              "_0": "The TWAB balance at the given timestamp."
            }
          },
          "getBalancesAt(address,uint64[])": {
            "params": {
              "timestamps": "Timestamps range at which we want to retrieve the TWAB balances.",
              "user": "Address of the user whose TWABs are being fetched."
            },
            "returns": {
              "_0": "`user` TWAB balances."
            }
          },
          "getTotalSuppliesAt(uint64[])": {
            "params": {
              "timestamps": "Timestamps range at which we want to retrieve the total supply TWAB balance."
            },
            "returns": {
              "_0": "Total supply TWAB balances."
            }
          },
          "getTotalSupplyAt(uint64)": {
            "params": {
              "timestamp": "Timestamp at which we want to retrieve the total supply TWAB balance."
            },
            "returns": {
              "_0": "The total supply TWAB balance at the given timestamp."
            }
          },
          "getTwab(address,uint16)": {
            "params": {
              "index": "The index of the TWAB to fetch.",
              "user": "The user for whom to fetch the TWAB."
            },
            "returns": {
              "_0": "The TWAB, which includes the twab amount and the timestamp."
            }
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "nonces(address)": {
            "details": "See {IERC20Permit-nonces}."
          },
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
            "details": "See {IERC20Permit-permit}."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
          }
        },
        "title": "PoolTogether V4 Ticket",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_2083": {
              "entryPoint": null,
              "id": 2083,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_3170": {
              "entryPoint": null,
              "id": 3170,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_6852": {
              "entryPoint": null,
              "id": 6852,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_727": {
              "entryPoint": null,
              "id": 727,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_84": {
              "entryPoint": null,
              "id": 84,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_buildDomainSeparator_2132": {
              "entryPoint": null,
              "id": 2132,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_string_fromMemory": {
              "entryPoint": 918,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint8t_address_fromMemory": {
              "entryPoint": 1063,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_encode_string": {
              "entryPoint": 1227,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint8__to_t_string_memory_ptr_t_string_memory_ptr_t_uint8__fromStack_reversed": {
              "entryPoint": 1273,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_39ddb2ff9bb2156ccdd7a7c5e12a2934405240522f8e0e9387326954ad27f9f0__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7d588014210ba31b9120514699359e6ab0aa94fda2860a199e21904680ca2a54__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 1334,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 1385,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x41": {
              "entryPoint": 1446,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:4371:72",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:72",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "78:622:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "127:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "136:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "139:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "129:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "129:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "129:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "106:6:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "114:4:72",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "102:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "102:17:72"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "121:3:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "98:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "98:27:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "91:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "91:35:72"
                          },
                          "nodeType": "YulIf",
                          "src": "88:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "152:23:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "168:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "162:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "162:13:72"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "156:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "184:28:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "202:2:72",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "206:1:72",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "198:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "198:10:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "210:1:72",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "194:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "194:18:72"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "188:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "235:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "237:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "237:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "237:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "227:2:72"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "231:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "224:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "224:10:72"
                          },
                          "nodeType": "YulIf",
                          "src": "221:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "266:17:72",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "280:2:72",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "276:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "276:7:72"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "270:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "292:23:72",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "312:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "306:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "306:9:72"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "296:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "324:71:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "346:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "370:2:72"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "374:4:72",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "366:3:72"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "366:13:72"
                                          },
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "381:2:72"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "362:3:72"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "362:22:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "386:2:72",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "358:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "358:31:72"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "391:2:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "354:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "354:40:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "342:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "342:53:72"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "328:10:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "454:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "456:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "456:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "456:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "413:10:72"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "425:2:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "410:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "410:18:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "433:10:72"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "445:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "430:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "430:22:72"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "407:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "407:46:72"
                          },
                          "nodeType": "YulIf",
                          "src": "404:2:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "492:2:72",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "496:10:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "485:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "485:22:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "485:22:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "523:6:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "531:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "516:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "516:18:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "516:18:72"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "582:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "591:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "594:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "584:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "584:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "584:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "557:6:72"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "565:2:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "553:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "553:15:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "570:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "549:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "549:26:72"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "577:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "546:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "546:35:72"
                          },
                          "nodeType": "YulIf",
                          "src": "543:2:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "633:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "641:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "629:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "629:17:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "652:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "660:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "648:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "648:17:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "667:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "607:21:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "607:63:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "607:63:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "679:15:72",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "688:6:72"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "679:5:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_string_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "52:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "60:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "68:5:72",
                        "type": ""
                      }
                    ],
                    "src": "14:686:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "855:738:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "902:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "911:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "914:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "904:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "904:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "904:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "876:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "885:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "872:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "872:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "897:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "868:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "868:33:72"
                          },
                          "nodeType": "YulIf",
                          "src": "865:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "927:30:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "947:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "941:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "941:16:72"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "931:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "966:28:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "984:2:72",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "988:1:72",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "980:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "980:10:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "992:1:72",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "976:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "976:18:72"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "970:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1021:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1030:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1033:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1023:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1023:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1023:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1009:6:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1017:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1006:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1006:14:72"
                          },
                          "nodeType": "YulIf",
                          "src": "1003:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1046:71:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1089:9:72"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1100:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1085:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1085:22:72"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1109:7:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "1056:28:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1056:61:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1046:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1126:41:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1152:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1163:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1148:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1148:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1142:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1142:25:72"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "1130:8:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1196:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1205:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1208:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1198:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1198:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1198:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "1182:8:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1192:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1179:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1179:16:72"
                          },
                          "nodeType": "YulIf",
                          "src": "1176:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1221:73:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1264:9:72"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1275:8:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1260:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1260:24:72"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1286:7:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "1231:28:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1231:63:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1221:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1303:38:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1326:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1337:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1322:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1322:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1316:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1316:25:72"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1307:5:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1389:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1398:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1401:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1391:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1391:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1391:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1363:5:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1374:5:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1381:4:72",
                                        "type": "",
                                        "value": "0xff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1370:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1370:16:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1360:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1360:27:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1353:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1353:35:72"
                          },
                          "nodeType": "YulIf",
                          "src": "1350:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1414:15:72",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1424:5:72"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1414:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1438:40:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1463:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1474:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1459:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1459:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1453:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1453:25:72"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "1442:7:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1545:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1554:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1557:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1547:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1547:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1547:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1500:7:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1513:7:72"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1530:3:72",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1535:1:72",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1526:3:72"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1526:11:72"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1539:1:72",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "1522:3:72"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1522:19:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1509:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1509:33:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1497:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1497:46:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1490:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1490:54:72"
                          },
                          "nodeType": "YulIf",
                          "src": "1487:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1570:17:72",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "1580:7:72"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "1570:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint8t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "797:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "808:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "820:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "828:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "836:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "844:6:72",
                        "type": ""
                      }
                    ],
                    "src": "705:888:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1648:208:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1658:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1678:5:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1672:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1672:12:72"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1662:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1700:3:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1705:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1693:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1693:19:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1693:19:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1747:5:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1754:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1743:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1743:16:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "1765:3:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1770:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1761:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1761:14:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1777:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1721:21:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1721:63:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1721:63:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1793:57:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "1808:3:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "1821:6:72"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1829:2:72",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1817:3:72"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1817:15:72"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1838:2:72",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "1834:3:72"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1834:7:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1813:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1813:29:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1804:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1804:39:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1845:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1800:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1800:50:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "1793:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1625:5:72",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "1632:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1640:3:72",
                        "type": ""
                      }
                    ],
                    "src": "1598:258:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2074:276:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2084:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2096:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2107:3:72",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2092:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2092:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2084:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2127:9:72"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2138:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2120:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2120:25:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2120:25:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2165:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2176:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2161:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2161:18:72"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "2181:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2154:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2154:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2154:34:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2208:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2219:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2204:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2204:18:72"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "2224:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2197:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2197:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2197:34:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2251:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2262:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2247:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2247:18:72"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "2267:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2240:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2240:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2240:34:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2294:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2305:3:72",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2290:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2290:19:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value4",
                                    "nodeType": "YulIdentifier",
                                    "src": "2315:6:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2331:3:72",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2336:1:72",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "2327:3:72"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2327:11:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2340:1:72",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2323:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2323:19:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2311:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2311:32:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2283:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2283:61:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2283:61:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2011:9:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "2022:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "2030:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2038:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2046:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2054:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2065:4:72",
                        "type": ""
                      }
                    ],
                    "src": "1861:489:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2548:268:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2565:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2576:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2558:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2558:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2558:21:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2588:59:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2620:6:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2632:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2643:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2628:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2628:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "2602:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2602:45:72"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "2592:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2667:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2678:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2663:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2663:18:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2687:6:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2695:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2683:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2683:22:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2656:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2656:50:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2656:50:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2715:41:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "2741:6:72"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "2749:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "2723:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2723:33:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2715:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2776:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2787:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2772:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2772:18:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "2796:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2804:4:72",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2792:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2792:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2765:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2765:45:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2765:45:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint8__to_t_string_memory_ptr_t_string_memory_ptr_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2501:9:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2512:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2520:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2528:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2539:4:72",
                        "type": ""
                      }
                    ],
                    "src": "2355:461:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2995:182:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3012:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3023:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3005:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3005:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3005:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3046:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3057:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3042:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3042:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3062:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3035:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3035:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3035:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3085:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3096:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3081:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3081:18:72"
                              },
                              {
                                "hexValue": "436f6e74726f6c6c6564546f6b656e2f646563696d616c732d67742d7a65726f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3101:34:72",
                                "type": "",
                                "value": "ControlledToken/decimals-gt-zero"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3074:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3074:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3074:62:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3145:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3157:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3168:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3153:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3153:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3145:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_39ddb2ff9bb2156ccdd7a7c5e12a2934405240522f8e0e9387326954ad27f9f0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2972:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2986:4:72",
                        "type": ""
                      }
                    ],
                    "src": "2821:356:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3356:233:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3373:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3384:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3366:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3366:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3366:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3407:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3418:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3403:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3403:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3423:2:72",
                                "type": "",
                                "value": "43"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3396:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3396:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3396:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3446:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3457:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3442:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3442:18:72"
                              },
                              {
                                "hexValue": "436f6e74726f6c6c6564546f6b656e2f636f6e74726f6c6c65722d6e6f742d7a",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3462:34:72",
                                "type": "",
                                "value": "ControlledToken/controller-not-z"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3435:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3435:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3435:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3517:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3528:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3513:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3513:18:72"
                              },
                              {
                                "hexValue": "65726f2d61646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3533:13:72",
                                "type": "",
                                "value": "ero-address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3506:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3506:41:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3506:41:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3556:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3568:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3579:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3564:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3564:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3556:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7d588014210ba31b9120514699359e6ab0aa94fda2860a199e21904680ca2a54__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3333:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3347:4:72",
                        "type": ""
                      }
                    ],
                    "src": "3182:407:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3647:205:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3657:10:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3666:1:72",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "3661:1:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3726:63:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "3751:3:72"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "3756:1:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3747:3:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3747:11:72"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "3770:3:72"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3775:1:72"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3766:3:72"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3766:11:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3760:5:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3760:18:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3740:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3740:39:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3740:39:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3687:1:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3690:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3684:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3684:13:72"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "3698:19:72",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3700:15:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "3709:1:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3712:2:72",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3705:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3705:10:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "3700:1:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "3680:3:72",
                            "statements": []
                          },
                          "src": "3676:113:72"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3815:31:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "3828:3:72"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "3833:6:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3824:3:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3824:16:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3842:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3817:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3817:27:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3817:27:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3804:1:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3807:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3801:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3801:13:72"
                          },
                          "nodeType": "YulIf",
                          "src": "3798:2:72"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "3625:3:72",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "3630:3:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "3635:6:72",
                        "type": ""
                      }
                    ],
                    "src": "3594:258:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3912:325:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3922:22:72",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3936:1:72",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "3939:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "3932:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3932:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "3922:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3953:38:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "3983:4:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3989:1:72",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3979:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3979:12:72"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "3957:18:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4030:31:72",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "4032:27:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "4046:6:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4054:4:72",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "4042:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4042:17:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4032:6:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "4010:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4003:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4003:26:72"
                          },
                          "nodeType": "YulIf",
                          "src": "4000:2:72"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4120:111:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4141:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4148:3:72",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4153:10:72",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "4144:3:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4144:20:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4134:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4134:31:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4134:31:72"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4185:1:72",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4188:4:72",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4178:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4178:15:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4178:15:72"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4213:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4216:4:72",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4206:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4206:15:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4206:15:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "4076:18:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4099:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4107:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4096:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4096:14:72"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "4073:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4073:38:72"
                          },
                          "nodeType": "YulIf",
                          "src": "4070:2:72"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "3892:4:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "3901:6:72",
                        "type": ""
                      }
                    ],
                    "src": "3857:380:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4274:95:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4291:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4298:3:72",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4303:10:72",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "4294:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4294:20:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4284:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4284:31:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4284:31:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4331:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4334:4:72",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4324:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4324:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4324:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4355:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4358:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "4348:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4348:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4348:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "4242:127:72"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory(add(offset, 0x20), add(memPtr, 0x20), _1)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint8t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let value := mload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value2 := value\n        let value_1 := mload(add(headStart, 96))\n        if iszero(eq(value_1, and(value_1, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value3 := value_1\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint8__to_t_string_memory_ptr_t_string_memory_ptr_t_uint8__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_string(value0, add(headStart, 96))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_string(value1, tail_1)\n        mstore(add(headStart, 64), and(value2, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_39ddb2ff9bb2156ccdd7a7c5e12a2934405240522f8e0e9387326954ad27f9f0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ControlledToken/decimals-gt-zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7d588014210ba31b9120514699359e6ab0aa94fda2860a199e21904680ca2a54__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"ControlledToken/controller-not-z\")\n        mstore(add(headStart, 96), \"ero-address\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
              "id": 72,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "6101806040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120527f94019368dc6b2ee4ac32010c9d0081ec29874325b541829d001d22c296b5246c610160523480156200005c57600080fd5b5060405162003c7438038062003c748339810160408190526200007f9162000427565b838383836040518060400160405280601c81526020017f506f6f6c546f67657468657220436f6e74726f6c6c6564546f6b656e0000000081525080604051806040016040528060018152602001603160f81b81525086868160039080519060200190620000ee929190620002f0565b50805162000104906004906020840190620002f0565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a018190528183019890985260608101959095526080808601939093523085830152805180860390920182529390920190925280519401939093209092526101005250506001600160a01b038116620002015760405162461bcd60e51b815260206004820152602b60248201527f436f6e74726f6c6c6564546f6b656e2f636f6e74726f6c6c65722d6e6f742d7a60448201526a65726f2d6164647265737360a81b60648201526084015b60405180910390fd5b600680546001600160a01b0319166001600160a01b03831617905560ff82166200026e5760405162461bcd60e51b815260206004820181905260248201527f436f6e74726f6c6c6564546f6b656e2f646563696d616c732d67742d7a65726f6044820152606401620001f8565b7fff0000000000000000000000000000000000000000000000000000000000000060f883901b16610140526040516001600160a01b038216907fde72fc29218361f33503847e6f32be813f9ec92fc7c772bb59e46675c890fd0e90620002da90879087908790620004f9565b60405180910390a25050505050505050620005bc565b828054620002fe9062000569565b90600052602060002090601f0160209004810192826200032257600085556200036d565b82601f106200033d57805160ff19168380011785556200036d565b828001600101855582156200036d579182015b828111156200036d57825182559160200191906001019062000350565b506200037b9291506200037f565b5090565b5b808211156200037b576000815560010162000380565b600082601f830112620003a857600080fd5b81516001600160401b0380821115620003c557620003c5620005a6565b604051601f8301601f19908116603f01168101908282118183101715620003f057620003f0620005a6565b816040528381528660208588010111156200040a57600080fd5b6200041d84602083016020890162000536565b9695505050505050565b600080600080608085870312156200043e57600080fd5b84516001600160401b03808211156200045657600080fd5b620004648883890162000396565b955060208701519150808211156200047b57600080fd5b506200048a8782880162000396565b935050604085015160ff81168114620004a257600080fd5b60608601519092506001600160a01b0381168114620004c057600080fd5b939692955090935050565b60008151808452620004e581602086016020860162000536565b601f01601f19169290920160200192915050565b6060815260006200050e6060830186620004cb565b8281036020840152620005228186620004cb565b91505060ff83166040830152949350505050565b60005b838110156200055357818101518382015260200162000539565b8381111562000563576000848401525b50505050565b600181811c908216806200057e57607f821691505b60208210811415620005a057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e05161010051610120516101405160f81c6101605161364f620006256000396000610cd40152600061031b01526000610ff9015260006115dd0152600061162c015260006116070152600061158b015260006115b4015261364f6000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806368c7fd571161010f57806395d89b41116100a2578063a9059cbb11610071578063a9059cbb1461052e578063d505accf14610541578063dd62ed3e14610554578063f77c47911461058d57600080fd5b806395d89b41146104ed57806398b16f36146104f55780639ecb037014610508578063a457c2d71461051b57600080fd5b80638d22ea2a116100de5780638d22ea2a1461046d5780638e6d536a146104b457806390596dd1146104c7578063919974dc146104da57600080fd5b806368c7fd571461040b57806370a082311461041e5780637ecebe001461044757806385beb5f11461045a57600080fd5b806333e39b61116101875780635c19a95c116101565780635c19a95c146103b25780635d7b0758146103c5578063613ed6bd146103d8578063631b5dfb146103f857600080fd5b806333e39b61146103455780633644e5151461035a57806336bb2a3814610362578063395093511461039f57600080fd5b806323b872dd116101c357806323b872dd1461023d5780632aceb534146102505780632d0dd68614610301578063313ce5671461031457600080fd5b806306fdde03146101ea578063095ea7b31461020857806318160ddd1461022b575b600080fd5b6101f26105a0565b6040516101ff91906132fe565b60405180910390f35b61021b61021636600461315a565b610632565b60405190151581526020016101ff565b6002545b6040519081526020016101ff565b61021b61024b366004612f43565b610649565b6102c961025e366004612ef5565b6040805160608082018352600080835260208084018290529284018190526001600160a01b03949094168452600782529282902082519384018352546001600160d01b038116845262ffffff600160d01b8204811692850192909252600160e81b9004169082015290565b6040805182516001600160d01b0316815260208084015162ffffff9081169183019190915292820151909216908201526060016101ff565b61022f61030f36600461329f565b61070f565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101ff565b610358610353366004612f10565b61075b565b005b61022f6107c3565b61037561037036600461311c565b6107d2565b6040805182516001600160e01b0316815260209283015163ffffffff1692810192909252016101ff565b61021b6103ad36600461315a565b61084a565b6103586103c0366004612ef5565b610886565b6103586103d336600461315a565b610893565b6103eb6103e6366004613048565b6108f7565b6040516101ff91906132ba565b610358610406366004612f43565b610a13565b6103eb61041936600461309b565b610ace565b61022f61042c366004612ef5565b6001600160a01b031660009081526020819052604090205490565b61022f610455366004612ef5565b610b00565b6103eb6104683660046131f1565b610b1e565b61049c61047b366004612ef5565b6001600160a01b039081166000908152630100000860205260409020541690565b6040516001600160a01b0390911681526020016101ff565b6103eb6104c2366004613233565b610c01565b6103586104d536600461315a565b610c1c565b6103586104e8366004612fe9565b610c80565b6101f2610e00565b61022f6105033660046131ae565b610e0f565b61022f610516366004613184565b610e80565b61021b61052936600461315a565b610ee7565b61021b61053c36600461315a565b610f98565b61035861054f366004612f7f565b610fa5565b61022f610562366004612f10565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60065461049c906001600160a01b031681565b6060600380546105af906134db565b80601f01602080910402602001604051908101604052809291908181526020018280546105db906134db565b80156106285780601f106105fd57610100808354040283529160200191610628565b820191906000526020600020905b81548152906001019060200180831161060b57829003601f168201915b5050505050905090565b600061063f338484611109565b5060015b92915050565b6000610656848484611261565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106f55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6107028533858403611109565b60019150505b9392505050565b604080516060810182526008546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b9091041691810191909152600090610643906009908442611485565b6006546001600160a01b031633146107b55760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf82826114b1565b5050565b60006107cd611587565b905090565b60408051808201909152600080825260208201526001600160a01b038316600090815260076020526040902060010161ffff831662ffffff81106108185761081861359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201529392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161063f9185906108819086906133be565b611109565b61089033826114b1565b50565b6006546001600160a01b031633146108ed5760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf828261167a565b60608160008167ffffffffffffffff811115610915576109156135b5565b60405190808252806020026020018201604052801561093e578160200160208202803683370190505b506001600160a01b0387166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b900490931691830191909152929350905b84811015610a06576109d783600101838a8a858181106109bc576109bc61359f565b90506020020160208101906109d1919061329f565b42611485565b8482815181106109e9576109e961359f565b6020908102919091010152806109fe81613510565b91505061099a565b5091979650505050505050565b6006546001600160a01b03163314610a6d5760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b816001600160a01b0316836001600160a01b031614610abf576001600160a01b03828116600090815260016020908152604080832093871683529290522054610abf90839085906108819085906134a7565b610ac98282611765565b505050565b6001600160a01b0385166000908152600760205260409020606090610af690868686866118f6565b9695505050505050565b6001600160a01b038116600090815260056020526040812054610643565b60608160008167ffffffffffffffff811115610b3c57610b3c6135b5565b604051908082528060200260200182016040528015610b65578160200160208202803683370190505b50604080516060810182526008546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915290915060005b83811015610bf657610bc76009838989858181106109bc576109bc61359f565b838281518110610bd957610bd961359f565b602090810291909101015280610bee81613510565b915050610ba7565b509095945050505050565b6060610c116008868686866118f6565b90505b949350505050565b6006546001600160a01b03163314610c765760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf8282611765565b83421115610cd05760405162461bcd60e51b815260206004820181905260248201527f5469636b65742f64656c65676174652d657870697265642d646561646c696e6560448201526064016106ec565b60007f00000000000000000000000000000000000000000000000000000000000000008787610cfe8a611a93565b6040805160208101959095526001600160a01b039384169085015291166060830152608082015260a0810186905260c0016040516020818303038152906040528051906020012090506000610d5282611abb565b90506000610d6282878787611b24565b9050886001600160a01b0316816001600160a01b031614610deb5760405162461bcd60e51b815260206004820152602160248201527f5469636b65742f64656c65676174652d696e76616c69642d7369676e6174757260448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b610df589896114b1565b505050505050505050565b6060600480546105af906134db565b6001600160a01b0383166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b90049093169183019190915290610e77906001830190868642611b4c565b95945050505050565b6001600160a01b0382166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b90049093169183019190915290610c149060018301908542611485565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610f815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106ec565b610f8e3385858403611109565b5060019392505050565b600061063f338484611261565b83421115610ff55760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016106ec565b60007f00000000000000000000000000000000000000000000000000000000000000008888886110248c611a93565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061107f82611abb565b9050600061108f82878787611b24565b9050896001600160a01b0316816001600160a01b0316146110f25760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016106ec565b6110fd8a8a8a611109565b50505050505050505050565b6001600160a01b0383166111845760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0382166112005760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166112dd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0382166113595760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b611364838383611b84565b6001600160a01b038316600090815260208190526040902054818110156113f35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061142a9084906133be565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161147691815260200190565b60405180910390a35b50505050565b6000808263ffffffff168463ffffffff16116114a157836114a3565b825b9050610af686868386611c17565b6001600160a01b038281166000908152602081815260408083205463010000089092529091205490919081169083168114156114ed5750505050565b6001600160a01b03848116600090815263010000086020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918516919091179055611541818484611d30565b826001600160a01b0316846001600160a01b03167f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea260405160405180910390a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156115d657507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b0382166116d05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106ec565b6116dc60008383611b84565b80600260008282546116ee91906133be565b90915550506001600160a01b0382166000908152602081905260408120805483929061171b9084906133be565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166117e15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6117ed82600083611b84565b6001600160a01b0382166000908152602081905260409020548181101561187c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b03831660009081526020819052604081208383039055600280548492906118ab9084906134a7565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b606083821461196d5760405162461bcd60e51b815260206004820152602360248201527f5469636b65742f73746172742d656e642d74696d65732d6c656e6774682d6d6160448201527f746368000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6040805160608101825287546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915260008567ffffffffffffffff8111156119c2576119c26135b5565b6040519080825280602002602001820160405280156119eb578160200160208202803683370190505b5090504260005b87811015611a8557611a568a600101858b8b85818110611a1457611a1461359f565b9050602002016020810190611a29919061329f565b8a8a86818110611a3b57611a3b61359f565b9050602002016020810190611a50919061329f565b86611b4c565b838281518110611a6857611a6861359f565b602090810291909101015280611a7d81613510565b9150506119f2565b509098975050505050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6000610643611ac8611587565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611b3587878787611dc1565b91509150611b4281611eae565b5095945050505050565b6000808263ffffffff168463ffffffff1611611b685783611b6a565b825b9050611b79878787848761209f565b979650505050505050565b816001600160a01b0316836001600160a01b03161415611ba357505050565b60006001600160a01b03841615611bd457506001600160a01b03808416600090815263010000086020526040902054165b60006001600160a01b03841615611c0557506001600160a01b03808416600090815263010000086020526040902054165b611c10828285611d30565b5050505050565b604080518082019091526000808252602082018190529081906040805180820190915260008082526020820152611c4e888861213b565b60208101519194509150611c6f9063ffffffff90811690889088906121bb16565b15611c8a57505084516001600160d01b03169150610c149050565b6000611c96898961228c565b6020810151909350909150611cb79063ffffffff808a169190899061230916565b15611cc9576000945050505050610c14565b611cdb8985838a8c604001518b6123d8565b8094508193505050611cf683602001518360200151886125a5565b63ffffffff1682600001518460000151611d109190613487565b611d1a91906133f6565b6001600160e01b03169998505050505050505050565b6001600160a01b038316158015611d4f57506001600160a01b03821615155b15611d6257611d5d8161266f565b611d8f565b6001600160a01b03831615801590611d8157506001600160a01b038216155b15611d8f57611d8f8161276f565b6001600160a01b03831615611da857611da883826127a9565b6001600160a01b03821615610ac957610ac982826128e1565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611df85750600090506003611ea5565b8460ff16601b14158015611e1057508460ff16601c14155b15611e215750600090506004611ea5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611e75573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611e9e57600060019250925050611ea5565b9150600090505b94509492505050565b6000816004811115611ec257611ec2613589565b1415611ecb5750565b6001816004811115611edf57611edf613589565b1415611f2d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106ec565b6002816004811115611f4157611f41613589565b1415611f8f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106ec565b6003816004811115611fa357611fa3613589565b14156120175760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b600481600481111561202b5761202b613589565b14156108905760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b60008060006120ae888861228c565b915091506000806120bf8a8a61213b565b9150915060006120d58b8b8487878a8f8e612912565b905060006120e98c8c8588888b8f8f612912565b90506120fe816020015183602001518a6125a5565b63ffffffff16826000015182600001516121189190613487565b61212291906133f6565b6001600160e01b03169c9b505050505050505050505050565b604080518082019091526000808252602082018190529061216a836020015162ffffff1662ffffff8016612a5c565b9150838262ffffff1662ffffff81106121855761218561359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820152919491935090915050565b60008163ffffffff168463ffffffff16111580156121e557508163ffffffff168363ffffffff1611155b15612201578263ffffffff168463ffffffff1611159050610708565b60008263ffffffff168563ffffffff16116122305761222b63ffffffff86166401000000006133d6565b612238565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116122705761226b63ffffffff86166401000000006133d6565b612278565b8463ffffffff165b64ffffffffff169091111595945050505050565b604080518082019091526000808252602082018190529082602001519150838262ffffff1662ffffff81106122c3576122c361359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820181905290915061230257600091508382612185565b9250929050565b60008163ffffffff168463ffffffff161115801561233357508163ffffffff168363ffffffff1611155b1561234e578263ffffffff168463ffffffff16109050610708565b60008263ffffffff168563ffffffff161161237d5761237863ffffffff86166401000000006133d6565b612385565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116123bd576123b863ffffffff86166401000000006133d6565b6123c5565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008662ffffff1690506000818962ffffff1610612423578862ffffff1661243e565b600161243462ffffff8816846133be565b61243e91906134a7565b905060005b600261244f83856133be565b612459919061341c565b90508a61246b828962ffffff16612a86565b62ffffff1662ffffff81106124825761248261359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909550806124ca576124c28260016133be565b935050612443565b8b6124da838a62ffffff16612a92565b62ffffff1662ffffff81106124f1576124f161359f565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b9091048116602083015290955060009061253690838116908c908b906121bb16565b905080801561255f575061255f8660200151898c63ffffffff166121bb9092919063ffffffff16565b1561256b575050612597565b806125825761257b6001846134a7565b9350612590565b61258d8360016133be565b94505b5050612443565b505050965096945050505050565b60008163ffffffff168463ffffffff16111580156125cf57508163ffffffff168363ffffffff1611155b156125e5576125de83856134be565b9050610708565b60008263ffffffff168563ffffffff16116126145761260f63ffffffff86166401000000006133d6565b61261c565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116126545761264f63ffffffff86166401000000006133d6565b61265c565b8463ffffffff165b64ffffffffff169050610af681836134a7565b806126775750565b6000806000612690600861268a86612aa2565b42612b25565b825160088054602086015160408701516001600160d01b039094167fffffff000000000000000000000000000000000000000000000000000000000090921691909117600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b919093160291909117905591945092509050801561147f576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a150505050565b806127775750565b6000806000612690600861278a86612aa2565b6040518060600160405280602c81526020016135ee602c913942612bce565b806127b2575050565b6001600160a01b03821660009081526007602052604081209080806127f9846127da87612aa2565b6040518060600160405280602281526020016135cc6022913942612bce565b82518754602085015160408601516001600160d01b039093167fffffff000000000000000000000000000000000000000000000000000000000090921691909117600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b91909216021787559194509250905080156128d9576040805183516001600160e01b0316815260208085015163ffffffff16908201526001600160a01b038816917fdd3e7cd3a260a292b0b3306b2ca62f30a7349619a9d09c58109318774c6b627d910160405180910390a25b505050505050565b806128ea575050565b6001600160a01b03821660009081526007602052604081209080806127f98461268a87612aa2565b60408051808201909152600080825260208201526129458383896020015163ffffffff166123099092919063ffffffff16565b15612969576129628789600001516001600160d01b031685612ca1565b9050612a50565b8263ffffffff16876020015163ffffffff161415612988575085612a50565b8263ffffffff16866020015163ffffffff1614156129a7575084612a50565b6129c68660200151838563ffffffff166123099092919063ffffffff16565b156129eb5750604080518082019091526000815263ffffffff83166020820152612a50565b600080612a008b8888888e60400151896123d8565b915091506000612a1982602001518460200151876125a5565b63ffffffff1683600001518360000151612a339190613487565b612a3d91906133f6565b9050612a4a838288612ca1565b93505050505b98975050505050505050565b600081612a6b57506000610643565b6107086001612a7a84866133be565b612a8491906134a7565b835b60006107088284613549565b6000610708612a848460016133be565b60006001600160d01b03821115612b215760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f303820626974730000000000000000000000000000000000000000000000000060648201526084016106ec565b5090565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825286546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b9091041691810191909152600090612ba1600188018287612d1c565b83519296509094509250612bb6908790613353565b6001600160d01b031684525091959094509092509050565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825287546001600160d01b0380821680845262ffffff600160d01b840481166020860152600160e81b9093049092169383019390935260009287919089161115612c645760405162461bcd60e51b81526004016106ec91906132fe565b50612c73886001018287612d1c565b83519296509094509250612c8890889061345f565b6001600160d01b03168452509196909550909350915050565b60408051808201909152600080825260208201526040518060400160405280612cdf8660200151858663ffffffff166125a59092919063ffffffff16565b612cef9063ffffffff1686613430565b8651612cfb919061337e565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b60408051606081018252600080825260208201819052918101919091526040805180820190915260008082526020820152600080612d5a878761213b565b9150508463ffffffff16816020015163ffffffff161415612d8357859350915060009050612dfa565b6000612d9d8288600001516001600160d01b031688612ca1565b90508088886020015162ffffff1662ffffff8110612dbd57612dbd61359f565b825160209093015163ffffffff16600160e01b026001600160e01b03909316929092179101556000612dee88612e03565b95509093506001925050505b93509350939050565b60408051606081018252600080825260208083018290529282015290820151612e339062ffffff90811690612a92565b62ffffff9081166020840152604083015181161015612b2157600182604001818151612e5f91906133a0565b62ffffff169052505090565b80356001600160a01b0381168114612e8257600080fd5b919050565b60008083601f840112612e9957600080fd5b50813567ffffffffffffffff811115612eb157600080fd5b6020830191508360208260051b850101111561230257600080fd5b803567ffffffffffffffff81168114612e8257600080fd5b803560ff81168114612e8257600080fd5b600060208284031215612f0757600080fd5b61070882612e6b565b60008060408385031215612f2357600080fd5b612f2c83612e6b565b9150612f3a60208401612e6b565b90509250929050565b600080600060608486031215612f5857600080fd5b612f6184612e6b565b9250612f6f60208501612e6b565b9150604084013590509250925092565b600080600080600080600060e0888a031215612f9a57600080fd5b612fa388612e6b565b9650612fb160208901612e6b565b95506040880135945060608801359350612fcd60808901612ee4565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060c0878903121561300257600080fd5b61300b87612e6b565b955061301960208801612e6b565b94506040870135935061302e60608801612ee4565b92506080870135915060a087013590509295509295509295565b60008060006040848603121561305d57600080fd5b61306684612e6b565b9250602084013567ffffffffffffffff81111561308257600080fd5b61308e86828701612e87565b9497909650939450505050565b6000806000806000606086880312156130b357600080fd5b6130bc86612e6b565b9450602086013567ffffffffffffffff808211156130d957600080fd5b6130e589838a01612e87565b909650945060408801359150808211156130fe57600080fd5b5061310b88828901612e87565b969995985093965092949392505050565b6000806040838503121561312f57600080fd5b61313883612e6b565b9150602083013561ffff8116811461314f57600080fd5b809150509250929050565b6000806040838503121561316d57600080fd5b61317683612e6b565b946020939093013593505050565b6000806040838503121561319757600080fd5b6131a083612e6b565b9150612f3a60208401612ecc565b6000806000606084860312156131c357600080fd5b6131cc84612e6b565b92506131da60208501612ecc565b91506131e860408501612ecc565b90509250925092565b6000806020838503121561320457600080fd5b823567ffffffffffffffff81111561321b57600080fd5b61322785828601612e87565b90969095509350505050565b6000806000806040858703121561324957600080fd5b843567ffffffffffffffff8082111561326157600080fd5b61326d88838901612e87565b9096509450602087013591508082111561328657600080fd5b5061329387828801612e87565b95989497509550505050565b6000602082840312156132b157600080fd5b61070882612ecc565b6020808252825182820181905260009190848201906040850190845b818110156132f2578351835292840192918401916001016132d6565b50909695505050505050565b600060208083528351808285015260005b8181101561332b5785810183015185820160400152820161330f565b8181111561333d576000604083870101525b50601f01601f1916929092016040019392505050565b60006001600160d01b038083168185168083038211156133755761337561355d565b01949350505050565b60006001600160e01b038083168185168083038211156133755761337561355d565b600062ffffff8083168185168083038211156133755761337561355d565b600082198211156133d1576133d161355d565b500190565b600064ffffffffff8083168185168083038211156133755761337561355d565b60006001600160e01b038084168061341057613410613573565b92169190910492915050565b60008261342b5761342b613573565b500490565b60006001600160e01b03808316818516818304811182151516156134565761345661355d565b02949350505050565b60006001600160d01b038381169083168181101561347f5761347f61355d565b039392505050565b60006001600160e01b038381169083168181101561347f5761347f61355d565b6000828210156134b9576134b961355d565b500390565b600063ffffffff8381169083168181101561347f5761347f61355d565b600181811c908216806134ef57607f821691505b60208210811415611ab557634e487b7160e01b600052602260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135425761354261355d565b5060010190565b60008261355857613558613573565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63655469636b65742f6275726e2d616d6f756e742d657863656564732d746f74616c2d737570706c792d74776162a26469706673582212207222193ed5d2d8f5956c3459884b91b0e3292657da8569928c1d5de06432574764736f6c63430008060033",
          "opcodes": "PUSH2 0x180 PUSH1 0x40 MSTORE PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 PUSH2 0x120 MSTORE PUSH32 0x94019368DC6B2EE4AC32010C9D0081EC29874325B541829D001D22C296B5246C PUSH2 0x160 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3C74 CODESIZE SUB DUP1 PUSH3 0x3C74 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x7F SWAP2 PUSH3 0x427 JUMP JUMPDEST DUP4 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x506F6F6C546F67657468657220436F6E74726F6C6C6564546F6B656E00000000 DUP2 MSTORE POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP DUP7 DUP7 DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xEE SWAP3 SWAP2 SWAP1 PUSH3 0x2F0 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x104 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x2F0 JUMP JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 SWAP4 DUP5 ADD KECCAK256 DUP3 MLOAD SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 KECCAK256 PUSH1 0xC0 DUP4 DUP2 MSTORE PUSH1 0xE0 DUP3 SWAP1 MSTORE CHAINID PUSH1 0xA0 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP2 DUP11 ADD DUP2 SWAP1 MSTORE DUP2 DUP4 ADD SWAP9 SWAP1 SWAP9 MSTORE PUSH1 0x60 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x80 DUP1 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE ADDRESS DUP6 DUP4 ADD MSTORE DUP1 MLOAD DUP1 DUP7 SUB SWAP1 SWAP3 ADD DUP3 MSTORE SWAP4 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP5 ADD SWAP4 SWAP1 SWAP4 KECCAK256 SWAP1 SWAP3 MSTORE PUSH2 0x100 MSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x201 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74726F6C6C6564546F6B656E2F636F6E74726F6C6C65722D6E6F742D7A PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x65726F2D61646472657373 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0xFF DUP3 AND PUSH3 0x26E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74726F6C6C6564546F6B656E2F646563696D616C732D67742D7A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x1F8 JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF8 DUP4 SWAP1 SHL AND PUSH2 0x140 MSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xDE72FC29218361F33503847E6F32BE813F9EC92FC7C772BB59E46675C890FD0E SWAP1 PUSH3 0x2DA SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH3 0x4F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP PUSH3 0x5BC JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x2FE SWAP1 PUSH3 0x569 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x322 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x36D JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x33D JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x36D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x36D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x36D JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x350 JUMP JUMPDEST POP PUSH3 0x37B SWAP3 SWAP2 POP PUSH3 0x37F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x37B JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x380 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x3C5 JUMPI PUSH3 0x3C5 PUSH3 0x5A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x3F0 JUMPI PUSH3 0x3F0 PUSH3 0x5A6 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x40A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x41D DUP5 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP10 ADD PUSH3 0x536 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x43E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x464 DUP9 DUP4 DUP10 ADD PUSH3 0x396 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x47B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x48A DUP8 DUP3 DUP9 ADD PUSH3 0x396 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH3 0x4A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x4E5 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x536 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH3 0x50E PUSH1 0x60 DUP4 ADD DUP7 PUSH3 0x4CB JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x522 DUP2 DUP7 PUSH3 0x4CB JUMP JUMPDEST SWAP2 POP POP PUSH1 0xFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x553 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x539 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x563 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x57E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x5A0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH1 0xF8 SHR PUSH2 0x160 MLOAD PUSH2 0x364F PUSH3 0x625 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0xCD4 ADD MSTORE PUSH1 0x0 PUSH2 0x31B ADD MSTORE PUSH1 0x0 PUSH2 0xFF9 ADD MSTORE PUSH1 0x0 PUSH2 0x15DD ADD MSTORE PUSH1 0x0 PUSH2 0x162C ADD MSTORE PUSH1 0x0 PUSH2 0x1607 ADD MSTORE PUSH1 0x0 PUSH2 0x158B ADD MSTORE PUSH1 0x0 PUSH2 0x15B4 ADD MSTORE PUSH2 0x364F PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x68C7FD57 GT PUSH2 0x10F JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x52E JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x541 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x554 JUMPI DUP1 PUSH4 0xF77C4791 EQ PUSH2 0x58D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0x98B16F36 EQ PUSH2 0x4F5 JUMPI DUP1 PUSH4 0x9ECB0370 EQ PUSH2 0x508 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x51B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8D22EA2A GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x8D22EA2A EQ PUSH2 0x46D JUMPI DUP1 PUSH4 0x8E6D536A EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0x90596DD1 EQ PUSH2 0x4C7 JUMPI DUP1 PUSH4 0x919974DC EQ PUSH2 0x4DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x68C7FD57 EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x447 JUMPI DUP1 PUSH4 0x85BEB5F1 EQ PUSH2 0x45A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x33E39B61 GT PUSH2 0x187 JUMPI DUP1 PUSH4 0x5C19A95C GT PUSH2 0x156 JUMPI DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x5D7B0758 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x613ED6BD EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0x631B5DFB EQ PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x33E39B61 EQ PUSH2 0x345 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0x36BB2A38 EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x2ACEB534 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x2D0DD686 EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x22B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F2 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x32FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21B PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x315A JUMP JUMPDEST PUSH2 0x632 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x21B PUSH2 0x24B CALLDATASIZE PUSH1 0x4 PUSH2 0x2F43 JUMP JUMPDEST PUSH2 0x649 JUMP JUMPDEST PUSH2 0x2C9 PUSH2 0x25E CALLDATASIZE PUSH1 0x4 PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE SWAP3 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x7 DUP3 MSTORE SWAP3 DUP3 SWAP1 KECCAK256 DUP3 MLOAD SWAP4 DUP5 ADD DUP4 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP5 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND SWAP3 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 DIV AND SWAP1 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH3 0xFFFFFF SWAP1 DUP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 DUP3 ADD MLOAD SWAP1 SWAP3 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x22F PUSH2 0x30F CALLDATASIZE PUSH1 0x4 PUSH2 0x329F JUMP JUMPDEST PUSH2 0x70F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF PUSH32 0x0 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x358 PUSH2 0x353 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F10 JUMP JUMPDEST PUSH2 0x75B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22F PUSH2 0x7C3 JUMP JUMPDEST PUSH2 0x375 PUSH2 0x370 CALLDATASIZE PUSH1 0x4 PUSH2 0x311C JUMP JUMPDEST PUSH2 0x7D2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x21B PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x315A JUMP JUMPDEST PUSH2 0x84A JUMP JUMPDEST PUSH2 0x358 PUSH2 0x3C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2EF5 JUMP JUMPDEST PUSH2 0x886 JUMP JUMPDEST PUSH2 0x358 PUSH2 0x3D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x315A JUMP JUMPDEST PUSH2 0x893 JUMP JUMPDEST PUSH2 0x3EB PUSH2 0x3E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3048 JUMP JUMPDEST PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x32BA JUMP JUMPDEST PUSH2 0x358 PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F43 JUMP JUMPDEST PUSH2 0xA13 JUMP JUMPDEST PUSH2 0x3EB PUSH2 0x419 CALLDATASIZE PUSH1 0x4 PUSH2 0x309B JUMP JUMPDEST PUSH2 0xACE JUMP JUMPDEST PUSH2 0x22F PUSH2 0x42C CALLDATASIZE PUSH1 0x4 PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x455 CALLDATASIZE PUSH1 0x4 PUSH2 0x2EF5 JUMP JUMPDEST PUSH2 0xB00 JUMP JUMPDEST PUSH2 0x3EB PUSH2 0x468 CALLDATASIZE PUSH1 0x4 PUSH2 0x31F1 JUMP JUMPDEST PUSH2 0xB1E JUMP JUMPDEST PUSH2 0x49C PUSH2 0x47B CALLDATASIZE PUSH1 0x4 PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH4 0x1000008 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x3EB PUSH2 0x4C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3233 JUMP JUMPDEST PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x358 PUSH2 0x4D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x315A JUMP JUMPDEST PUSH2 0xC1C JUMP JUMPDEST PUSH2 0x358 PUSH2 0x4E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FE9 JUMP JUMPDEST PUSH2 0xC80 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0xE00 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x31AE JUMP JUMPDEST PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x22F PUSH2 0x516 CALLDATASIZE PUSH1 0x4 PUSH2 0x3184 JUMP JUMPDEST PUSH2 0xE80 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x529 CALLDATASIZE PUSH1 0x4 PUSH2 0x315A JUMP JUMPDEST PUSH2 0xEE7 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x53C CALLDATASIZE PUSH1 0x4 PUSH2 0x315A JUMP JUMPDEST PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x358 PUSH2 0x54F CALLDATASIZE PUSH1 0x4 PUSH2 0x2F7F JUMP JUMPDEST PUSH2 0xFA5 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x562 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x49C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x5AF SWAP1 PUSH2 0x34DB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5DB SWAP1 PUSH2 0x34DB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x628 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x628 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x60B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63F CALLER DUP5 DUP5 PUSH2 0x1109 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x656 DUP5 DUP5 DUP5 PUSH2 0x1261 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x6F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6C6F77616E6365000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x702 DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x1109 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x643 SWAP1 PUSH1 0x9 SWAP1 DUP5 TIMESTAMP PUSH2 0x1485 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74726F6C6C6564546F6B656E2F6F6E6C792D636F6E74726F6C6C657200 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x7BF DUP3 DUP3 PUSH2 0x14B1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7CD PUSH2 0x1587 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH2 0xFFFF DUP4 AND PUSH3 0xFFFFFF DUP2 LT PUSH2 0x818 JUMPI PUSH2 0x818 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x63F SWAP2 DUP6 SWAP1 PUSH2 0x881 SWAP1 DUP7 SWAP1 PUSH2 0x33BE JUMP JUMPDEST PUSH2 0x1109 JUMP JUMPDEST PUSH2 0x890 CALLER DUP3 PUSH2 0x14B1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8ED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74726F6C6C6564546F6B656E2F6F6E6C792D636F6E74726F6C6C657200 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x7BF DUP3 DUP3 PUSH2 0x167A JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x915 JUMPI PUSH2 0x915 PUSH2 0x35B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x93E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 DIV SWAP1 SWAP4 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP4 POP SWAP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA06 JUMPI PUSH2 0x9D7 DUP4 PUSH1 0x1 ADD DUP4 DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x9BC JUMPI PUSH2 0x9BC PUSH2 0x359F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9D1 SWAP2 SWAP1 PUSH2 0x329F JUMP JUMPDEST TIMESTAMP PUSH2 0x1485 JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9E9 JUMPI PUSH2 0x9E9 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x9FE DUP2 PUSH2 0x3510 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x99A JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA6D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74726F6C6C6564546F6B656E2F6F6E6C792D636F6E74726F6C6C657200 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xABF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0xABF SWAP1 DUP4 SWAP1 DUP6 SWAP1 PUSH2 0x881 SWAP1 DUP6 SWAP1 PUSH2 0x34A7 JUMP JUMPDEST PUSH2 0xAC9 DUP3 DUP3 PUSH2 0x1765 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x60 SWAP1 PUSH2 0xAF6 SWAP1 DUP7 DUP7 DUP7 DUP7 PUSH2 0x18F6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x643 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB3C JUMPI PUSH2 0xB3C PUSH2 0x35B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB65 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBF6 JUMPI PUSH2 0xBC7 PUSH1 0x9 DUP4 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x9BC JUMPI PUSH2 0x9BC PUSH2 0x359F JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBD9 JUMPI PUSH2 0xBD9 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0xBEE DUP2 PUSH2 0x3510 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBA7 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xC11 PUSH1 0x8 DUP7 DUP7 DUP7 DUP7 PUSH2 0x18F6 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC76 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74726F6C6C6564546F6B656E2F6F6E6C792D636F6E74726F6C6C657200 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x7BF DUP3 DUP3 PUSH2 0x1765 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xCD0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5469636B65742F64656C65676174652D657870697265642D646561646C696E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP8 DUP8 PUSH2 0xCFE DUP11 PUSH2 0x1A93 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP1 DUP6 ADD MSTORE SWAP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0xD52 DUP3 PUSH2 0x1ABB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD62 DUP3 DUP8 DUP8 DUP8 PUSH2 0x1B24 JUMP JUMPDEST SWAP1 POP DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5469636B65742F64656C65676174652D696E76616C69642D7369676E61747572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6500000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0xDF5 DUP10 DUP10 PUSH2 0x14B1 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x5AF SWAP1 PUSH2 0x34DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 DIV SWAP1 SWAP4 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 PUSH2 0xE77 SWAP1 PUSH1 0x1 DUP4 ADD SWAP1 DUP7 DUP7 TIMESTAMP PUSH2 0x1B4C JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 DIV SWAP1 SWAP4 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 PUSH2 0xC14 SWAP1 PUSH1 0x1 DUP4 ADD SWAP1 DUP6 TIMESTAMP PUSH2 0x1485 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0xF81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0xF8E CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x1109 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63F CALLER DUP5 DUP5 PUSH2 0x1261 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xFF5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP9 DUP9 DUP9 PUSH2 0x1024 DUP13 PUSH2 0x1A93 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x107F DUP3 PUSH2 0x1ABB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x108F DUP3 DUP8 DUP8 DUP8 PUSH2 0x1B24 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x10F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x10FD DUP11 DUP11 DUP11 PUSH2 0x1109 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1184 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1200 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x12DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1359 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x1364 DUP4 DUP4 DUP4 PUSH2 0x1B84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x13F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x142A SWAP1 DUP5 SWAP1 PUSH2 0x33BE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x1476 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT PUSH2 0x14A1 JUMPI DUP4 PUSH2 0x14A3 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP PUSH2 0xAF6 DUP7 DUP7 DUP4 DUP7 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH4 0x1000008 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ ISZERO PUSH2 0x14ED JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH4 0x1000008 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1541 DUP2 DUP5 DUP5 PUSH2 0x1D30 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4BC154DD35D6A5CB9206482ECB473CDBF2473006D6BCE728B9CC0741BCC59EA2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 CHAINID EQ ISZERO PUSH2 0x15D6 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 DUP3 DUP5 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP4 ADD MSTORE CHAINID PUSH1 0x80 DUP4 ADD MSTORE ADDRESS PUSH1 0xA0 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x16D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x16DC PUSH1 0x0 DUP4 DUP4 PUSH2 0x1B84 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x16EE SWAP2 SWAP1 PUSH2 0x33BE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x171B SWAP1 DUP5 SWAP1 PUSH2 0x33BE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x17E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x17ED DUP3 PUSH1 0x0 DUP4 PUSH2 0x1B84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x187C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x18AB SWAP1 DUP5 SWAP1 PUSH2 0x34A7 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 DUP3 EQ PUSH2 0x196D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5469636B65742F73746172742D656E642D74696D65732D6C656E6774682D6D61 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7463680000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19C2 JUMPI PUSH2 0x19C2 PUSH2 0x35B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19EB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP TIMESTAMP PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x1A85 JUMPI PUSH2 0x1A56 DUP11 PUSH1 0x1 ADD DUP6 DUP12 DUP12 DUP6 DUP2 DUP2 LT PUSH2 0x1A14 JUMPI PUSH2 0x1A14 PUSH2 0x359F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1A29 SWAP2 SWAP1 PUSH2 0x329F JUMP JUMPDEST DUP11 DUP11 DUP7 DUP2 DUP2 LT PUSH2 0x1A3B JUMPI PUSH2 0x1A3B PUSH2 0x359F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1A50 SWAP2 SWAP1 PUSH2 0x329F JUMP JUMPDEST DUP7 PUSH2 0x1B4C JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1A68 JUMPI PUSH2 0x1A68 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x1A7D DUP2 PUSH2 0x3510 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x19F2 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x643 PUSH2 0x1AC8 PUSH2 0x1587 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1B35 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1DC1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1B42 DUP2 PUSH2 0x1EAE JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT PUSH2 0x1B68 JUMPI DUP4 PUSH2 0x1B6A JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP PUSH2 0x1B79 DUP8 DUP8 DUP8 DUP5 DUP8 PUSH2 0x209F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1BA3 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1BD4 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH4 0x1000008 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1C05 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH4 0x1000008 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND JUMPDEST PUSH2 0x1C10 DUP3 DUP3 DUP6 PUSH2 0x1D30 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1C4E DUP9 DUP9 PUSH2 0x213B JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD SWAP2 SWAP5 POP SWAP2 POP PUSH2 0x1C6F SWAP1 PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x21BB AND JUMP JUMPDEST ISZERO PUSH2 0x1C8A JUMPI POP POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP PUSH2 0xC14 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C96 DUP10 DUP10 PUSH2 0x228C JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD SWAP1 SWAP4 POP SWAP1 SWAP2 POP PUSH2 0x1CB7 SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP11 AND SWAP2 SWAP1 DUP10 SWAP1 PUSH2 0x2309 AND JUMP JUMPDEST ISZERO PUSH2 0x1CC9 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0xC14 JUMP JUMPDEST PUSH2 0x1CDB DUP10 DUP6 DUP4 DUP11 DUP13 PUSH1 0x40 ADD MLOAD DUP12 PUSH2 0x23D8 JUMP JUMPDEST DUP1 SWAP5 POP DUP2 SWAP4 POP POP POP PUSH2 0x1CF6 DUP4 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP9 PUSH2 0x25A5 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x1D10 SWAP2 SWAP1 PUSH2 0x3487 JUMP JUMPDEST PUSH2 0x1D1A SWAP2 SWAP1 PUSH2 0x33F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO PUSH2 0x1D4F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1D62 JUMPI PUSH2 0x1D5D DUP2 PUSH2 0x266F JUMP JUMPDEST PUSH2 0x1D8F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1D81 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO JUMPDEST ISZERO PUSH2 0x1D8F JUMPI PUSH2 0x1D8F DUP2 PUSH2 0x276F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x1DA8 JUMPI PUSH2 0x1DA8 DUP4 DUP3 PUSH2 0x27A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xAC9 JUMPI PUSH2 0xAC9 DUP3 DUP3 PUSH2 0x28E1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x1DF8 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1EA5 JUMP JUMPDEST DUP5 PUSH1 0xFF AND PUSH1 0x1B EQ ISZERO DUP1 ISZERO PUSH2 0x1E10 JUMPI POP DUP5 PUSH1 0xFF AND PUSH1 0x1C EQ ISZERO JUMPDEST ISZERO PUSH2 0x1E21 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x4 PUSH2 0x1EA5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1E9E JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1EA5 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1EC2 JUMPI PUSH2 0x1EC2 PUSH2 0x3589 JUMP JUMPDEST EQ ISZERO PUSH2 0x1ECB JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1EDF JUMPI PUSH2 0x1EDF PUSH2 0x3589 JUMP JUMPDEST EQ ISZERO PUSH2 0x1F2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1F41 JUMPI PUSH2 0x1F41 PUSH2 0x3589 JUMP JUMPDEST EQ ISZERO PUSH2 0x1F8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1FA3 JUMPI PUSH2 0x1FA3 PUSH2 0x3589 JUMP JUMPDEST EQ ISZERO PUSH2 0x2017 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x202B JUMPI PUSH2 0x202B PUSH2 0x3589 JUMP JUMPDEST EQ ISZERO PUSH2 0x890 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x20AE DUP9 DUP9 PUSH2 0x228C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH2 0x20BF DUP11 DUP11 PUSH2 0x213B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x20D5 DUP12 DUP12 DUP5 DUP8 DUP8 DUP11 DUP16 DUP15 PUSH2 0x2912 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x20E9 DUP13 DUP13 DUP6 DUP9 DUP9 DUP12 DUP16 DUP16 PUSH2 0x2912 JUMP JUMPDEST SWAP1 POP PUSH2 0x20FE DUP2 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP11 PUSH2 0x25A5 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x2118 SWAP2 SWAP1 PUSH2 0x3487 JUMP JUMPDEST PUSH2 0x2122 SWAP2 SWAP1 PUSH2 0x33F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH2 0x216A DUP4 PUSH1 0x20 ADD MLOAD PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF DUP1 AND PUSH2 0x2A5C JUMP JUMPDEST SWAP2 POP DUP4 DUP3 PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF DUP2 LT PUSH2 0x2185 JUMPI PUSH2 0x2185 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP5 SWAP2 SWAP4 POP SWAP1 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT ISZERO DUP1 ISZERO PUSH2 0x21E5 JUMPI POP DUP2 PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x2201 JUMPI DUP3 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT ISZERO SWAP1 POP PUSH2 0x708 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF AND DUP6 PUSH4 0xFFFFFFFF AND GT PUSH2 0x2230 JUMPI PUSH2 0x222B PUSH4 0xFFFFFFFF DUP7 AND PUSH5 0x100000000 PUSH2 0x33D6 JUMP JUMPDEST PUSH2 0x2238 JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP4 PUSH4 0xFFFFFFFF AND DUP6 PUSH4 0xFFFFFFFF AND GT PUSH2 0x2270 JUMPI PUSH2 0x226B PUSH4 0xFFFFFFFF DUP7 AND PUSH5 0x100000000 PUSH2 0x33D6 JUMP JUMPDEST PUSH2 0x2278 JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 SWAP2 GT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 DUP3 PUSH1 0x20 ADD MLOAD SWAP2 POP DUP4 DUP3 PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF DUP2 LT PUSH2 0x22C3 JUMPI PUSH2 0x22C3 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH2 0x2302 JUMPI PUSH1 0x0 SWAP2 POP DUP4 DUP3 PUSH2 0x2185 JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT ISZERO DUP1 ISZERO PUSH2 0x2333 JUMPI POP DUP2 PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x234E JUMPI DUP3 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND LT SWAP1 POP PUSH2 0x708 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF AND DUP6 PUSH4 0xFFFFFFFF AND GT PUSH2 0x237D JUMPI PUSH2 0x2378 PUSH4 0xFFFFFFFF DUP7 AND PUSH5 0x100000000 PUSH2 0x33D6 JUMP JUMPDEST PUSH2 0x2385 JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP4 PUSH4 0xFFFFFFFF AND DUP6 PUSH4 0xFFFFFFFF AND GT PUSH2 0x23BD JUMPI PUSH2 0x23B8 PUSH4 0xFFFFFFFF DUP7 AND PUSH5 0x100000000 PUSH2 0x33D6 JUMP JUMPDEST PUSH2 0x23C5 JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 SWAP2 LT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP7 PUSH3 0xFFFFFF AND SWAP1 POP PUSH1 0x0 DUP2 DUP10 PUSH3 0xFFFFFF AND LT PUSH2 0x2423 JUMPI DUP9 PUSH3 0xFFFFFF AND PUSH2 0x243E JUMP JUMPDEST PUSH1 0x1 PUSH2 0x2434 PUSH3 0xFFFFFF DUP9 AND DUP5 PUSH2 0x33BE JUMP JUMPDEST PUSH2 0x243E SWAP2 SWAP1 PUSH2 0x34A7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x2 PUSH2 0x244F DUP4 DUP6 PUSH2 0x33BE JUMP JUMPDEST PUSH2 0x2459 SWAP2 SWAP1 PUSH2 0x341C JUMP JUMPDEST SWAP1 POP DUP11 PUSH2 0x246B DUP3 DUP10 PUSH3 0xFFFFFF AND PUSH2 0x2A86 JUMP JUMPDEST PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF DUP2 LT PUSH2 0x2482 JUMPI PUSH2 0x2482 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP6 POP DUP1 PUSH2 0x24CA JUMPI PUSH2 0x24C2 DUP3 PUSH1 0x1 PUSH2 0x33BE JUMP JUMPDEST SWAP4 POP POP PUSH2 0x2443 JUMP JUMPDEST DUP12 PUSH2 0x24DA DUP4 DUP11 PUSH3 0xFFFFFF AND PUSH2 0x2A92 JUMP JUMPDEST PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF DUP2 LT PUSH2 0x24F1 JUMPI PUSH2 0x24F1 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND DUP3 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP6 POP PUSH1 0x0 SWAP1 PUSH2 0x2536 SWAP1 DUP4 DUP2 AND SWAP1 DUP13 SWAP1 DUP12 SWAP1 PUSH2 0x21BB AND JUMP JUMPDEST SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x255F JUMPI POP PUSH2 0x255F DUP7 PUSH1 0x20 ADD MLOAD DUP10 DUP13 PUSH4 0xFFFFFFFF AND PUSH2 0x21BB SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x256B JUMPI POP POP PUSH2 0x2597 JUMP JUMPDEST DUP1 PUSH2 0x2582 JUMPI PUSH2 0x257B PUSH1 0x1 DUP5 PUSH2 0x34A7 JUMP JUMPDEST SWAP4 POP PUSH2 0x2590 JUMP JUMPDEST PUSH2 0x258D DUP4 PUSH1 0x1 PUSH2 0x33BE JUMP JUMPDEST SWAP5 POP JUMPDEST POP POP PUSH2 0x2443 JUMP JUMPDEST POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT ISZERO DUP1 ISZERO PUSH2 0x25CF JUMPI POP DUP2 PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x25E5 JUMPI PUSH2 0x25DE DUP4 DUP6 PUSH2 0x34BE JUMP JUMPDEST SWAP1 POP PUSH2 0x708 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF AND DUP6 PUSH4 0xFFFFFFFF AND GT PUSH2 0x2614 JUMPI PUSH2 0x260F PUSH4 0xFFFFFFFF DUP7 AND PUSH5 0x100000000 PUSH2 0x33D6 JUMP JUMPDEST PUSH2 0x261C JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP4 PUSH4 0xFFFFFFFF AND DUP6 PUSH4 0xFFFFFFFF AND GT PUSH2 0x2654 JUMPI PUSH2 0x264F PUSH4 0xFFFFFFFF DUP7 AND PUSH5 0x100000000 PUSH2 0x33D6 JUMP JUMPDEST PUSH2 0x265C JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 POP PUSH2 0xAF6 DUP2 DUP4 PUSH2 0x34A7 JUMP JUMPDEST DUP1 PUSH2 0x2677 JUMPI POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2690 PUSH1 0x8 PUSH2 0x268A DUP7 PUSH2 0x2AA2 JUMP JUMPDEST TIMESTAMP PUSH2 0x2B25 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x8 DUP1 SLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB SWAP1 SWAP5 AND PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0xD0 SHL PUSH3 0xFFFFFF SWAP3 DUP4 AND MUL OR PUSH29 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xE8 SHL SWAP2 SWAP1 SWAP4 AND MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x147F JUMPI PUSH1 0x40 DUP1 MLOAD DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP6 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP3 ADD MSTORE PUSH32 0x3375B905D617084FA6B7531688CC8046FEB1F1A0B8BA2273DE03C59D8D84416C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x2777 JUMPI POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2690 PUSH1 0x8 PUSH2 0x278A DUP7 PUSH2 0x2AA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x35EE PUSH1 0x2C SWAP2 CODECOPY TIMESTAMP PUSH2 0x2BCE JUMP JUMPDEST DUP1 PUSH2 0x27B2 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 DUP1 DUP1 PUSH2 0x27F9 DUP5 PUSH2 0x27DA DUP8 PUSH2 0x2AA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x35CC PUSH1 0x22 SWAP2 CODECOPY TIMESTAMP PUSH2 0x2BCE JUMP JUMPDEST DUP3 MLOAD DUP8 SLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB SWAP1 SWAP4 AND PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0xD0 SHL PUSH3 0xFFFFFF SWAP3 DUP4 AND MUL OR PUSH29 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xE8 SHL SWAP2 SWAP1 SWAP3 AND MUL OR DUP8 SSTORE SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x28D9 JUMPI PUSH1 0x40 DUP1 MLOAD DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP6 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH32 0xDD3E7CD3A260A292B0B3306B2CA62F30A7349619A9D09C58109318774C6B627D SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x28EA JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 DUP1 DUP1 PUSH2 0x27F9 DUP5 PUSH2 0x268A DUP8 PUSH2 0x2AA2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2945 DUP4 DUP4 DUP10 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x2309 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x2969 JUMPI PUSH2 0x2962 DUP8 DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND DUP6 PUSH2 0x2CA1 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A50 JUMP JUMPDEST DUP3 PUSH4 0xFFFFFFFF AND DUP8 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x2988 JUMPI POP DUP6 PUSH2 0x2A50 JUMP JUMPDEST DUP3 PUSH4 0xFFFFFFFF AND DUP7 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x29A7 JUMPI POP DUP5 PUSH2 0x2A50 JUMP JUMPDEST PUSH2 0x29C6 DUP7 PUSH1 0x20 ADD MLOAD DUP4 DUP6 PUSH4 0xFFFFFFFF AND PUSH2 0x2309 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x29EB JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH4 0xFFFFFFFF DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2A50 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2A00 DUP12 DUP9 DUP9 DUP9 DUP15 PUSH1 0x40 ADD MLOAD DUP10 PUSH2 0x23D8 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x2A19 DUP3 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP8 PUSH2 0x25A5 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x2A33 SWAP2 SWAP1 PUSH2 0x3487 JUMP JUMPDEST PUSH2 0x2A3D SWAP2 SWAP1 PUSH2 0x33F6 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A4A DUP4 DUP3 DUP9 PUSH2 0x2CA1 JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2A6B JUMPI POP PUSH1 0x0 PUSH2 0x643 JUMP JUMPDEST PUSH2 0x708 PUSH1 0x1 PUSH2 0x2A7A DUP5 DUP7 PUSH2 0x33BE JUMP JUMPDEST PUSH2 0x2A84 SWAP2 SWAP1 PUSH2 0x34A7 JUMP JUMPDEST DUP4 JUMPDEST PUSH1 0x0 PUSH2 0x708 DUP3 DUP5 PUSH2 0x3549 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x708 PUSH2 0x2A84 DUP5 PUSH1 0x1 PUSH2 0x33BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP3 GT ISZERO PUSH2 0x2B21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x3038206269747300000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2BA1 PUSH1 0x1 DUP9 ADD DUP3 DUP8 PUSH2 0x2D1C JUMP JUMPDEST DUP4 MLOAD SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP PUSH2 0x2BB6 SWAP1 DUP8 SWAP1 PUSH2 0x3353 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND DUP5 MSTORE POP SWAP2 SWAP6 SWAP1 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP3 AND DUP1 DUP5 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP5 DIV DUP2 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 SWAP4 DIV SWAP1 SWAP3 AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x0 SWAP3 DUP8 SWAP2 SWAP1 DUP10 AND GT ISZERO PUSH2 0x2C64 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EC SWAP2 SWAP1 PUSH2 0x32FE JUMP JUMPDEST POP PUSH2 0x2C73 DUP9 PUSH1 0x1 ADD DUP3 DUP8 PUSH2 0x2D1C JUMP JUMPDEST DUP4 MLOAD SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP PUSH2 0x2C88 SWAP1 DUP9 SWAP1 PUSH2 0x345F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND DUP5 MSTORE POP SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x2CDF DUP7 PUSH1 0x20 ADD MLOAD DUP6 DUP7 PUSH4 0xFFFFFFFF AND PUSH2 0x25A5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2CEF SWAP1 PUSH4 0xFFFFFFFF AND DUP7 PUSH2 0x3430 JUMP JUMPDEST DUP7 MLOAD PUSH2 0x2CFB SWAP2 SWAP1 PUSH2 0x337E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH2 0x2D5A DUP8 DUP8 PUSH2 0x213B JUMP JUMPDEST SWAP2 POP POP DUP5 PUSH4 0xFFFFFFFF AND DUP2 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x2D83 JUMPI DUP6 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 POP PUSH2 0x2DFA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D9D DUP3 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND DUP9 PUSH2 0x2CA1 JUMP JUMPDEST SWAP1 POP DUP1 DUP9 DUP9 PUSH1 0x20 ADD MLOAD PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF DUP2 LT PUSH2 0x2DBD JUMPI PUSH2 0x2DBD PUSH2 0x359F JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 SWAP1 SWAP4 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH1 0x1 PUSH1 0xE0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 ADD SSTORE PUSH1 0x0 PUSH2 0x2DEE DUP9 PUSH2 0x2E03 JUMP JUMPDEST SWAP6 POP SWAP1 SWAP4 POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE SWAP1 DUP3 ADD MLOAD PUSH2 0x2E33 SWAP1 PUSH3 0xFFFFFF SWAP1 DUP2 AND SWAP1 PUSH2 0x2A92 JUMP JUMPDEST PUSH3 0xFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP2 AND LT ISZERO PUSH2 0x2B21 JUMPI PUSH1 0x1 DUP3 PUSH1 0x40 ADD DUP2 DUP2 MLOAD PUSH2 0x2E5F SWAP2 SWAP1 PUSH2 0x33A0 JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE POP POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2E82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2E99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2EB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2302 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2E82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2E82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x708 DUP3 PUSH2 0x2E6B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F2C DUP4 PUSH2 0x2E6B JUMP JUMPDEST SWAP2 POP PUSH2 0x2F3A PUSH1 0x20 DUP5 ADD PUSH2 0x2E6B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2F58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F61 DUP5 PUSH2 0x2E6B JUMP JUMPDEST SWAP3 POP PUSH2 0x2F6F PUSH1 0x20 DUP6 ADD PUSH2 0x2E6B JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2F9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2FA3 DUP9 PUSH2 0x2E6B JUMP JUMPDEST SWAP7 POP PUSH2 0x2FB1 PUSH1 0x20 DUP10 ADD PUSH2 0x2E6B JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2FCD PUSH1 0x80 DUP10 ADD PUSH2 0x2EE4 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3002 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x300B DUP8 PUSH2 0x2E6B JUMP JUMPDEST SWAP6 POP PUSH2 0x3019 PUSH1 0x20 DUP9 ADD PUSH2 0x2E6B JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x302E PUSH1 0x60 DUP9 ADD PUSH2 0x2EE4 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x305D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3066 DUP5 PUSH2 0x2E6B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3082 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x308E DUP7 DUP3 DUP8 ADD PUSH2 0x2E87 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x30B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30BC DUP7 PUSH2 0x2E6B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x30D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30E5 DUP10 DUP4 DUP11 ADD PUSH2 0x2E87 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x30FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x310B DUP9 DUP3 DUP10 ADD PUSH2 0x2E87 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x312F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3138 DUP4 PUSH2 0x2E6B JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x314F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x316D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3176 DUP4 PUSH2 0x2E6B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x31A0 DUP4 PUSH2 0x2E6B JUMP JUMPDEST SWAP2 POP PUSH2 0x2F3A PUSH1 0x20 DUP5 ADD PUSH2 0x2ECC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x31C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x31CC DUP5 PUSH2 0x2E6B JUMP JUMPDEST SWAP3 POP PUSH2 0x31DA PUSH1 0x20 DUP6 ADD PUSH2 0x2ECC JUMP JUMPDEST SWAP2 POP PUSH2 0x31E8 PUSH1 0x40 DUP6 ADD PUSH2 0x2ECC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x321B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3227 DUP6 DUP3 DUP7 ADD PUSH2 0x2E87 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x326D DUP9 DUP4 DUP10 ADD PUSH2 0x2E87 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3293 DUP8 DUP3 DUP9 ADD PUSH2 0x2E87 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x32B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x708 DUP3 PUSH2 0x2ECC JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x32F2 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x32D6 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x332B JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x330F JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x333D JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x3375 JUMPI PUSH2 0x3375 PUSH2 0x355D JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x3375 JUMPI PUSH2 0x3375 PUSH2 0x355D JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x3375 JUMPI PUSH2 0x3375 PUSH2 0x355D JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x33D1 JUMPI PUSH2 0x33D1 PUSH2 0x355D JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH5 0xFFFFFFFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x3375 JUMPI PUSH2 0x3375 PUSH2 0x355D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP5 AND DUP1 PUSH2 0x3410 JUMPI PUSH2 0x3410 PUSH2 0x3573 JUMP JUMPDEST SWAP3 AND SWAP2 SWAP1 SWAP2 DIV SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x342B JUMPI PUSH2 0x342B PUSH2 0x3573 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP2 DUP4 DIV DUP2 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3456 JUMPI PUSH2 0x3456 PUSH2 0x355D JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP4 DUP2 AND SWAP1 DUP4 AND DUP2 DUP2 LT ISZERO PUSH2 0x347F JUMPI PUSH2 0x347F PUSH2 0x355D JUMP JUMPDEST SUB SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 AND SWAP1 DUP4 AND DUP2 DUP2 LT ISZERO PUSH2 0x347F JUMPI PUSH2 0x347F PUSH2 0x355D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x34B9 JUMPI PUSH2 0x34B9 PUSH2 0x355D JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP4 DUP2 AND SWAP1 DUP4 AND DUP2 DUP2 LT ISZERO PUSH2 0x347F JUMPI PUSH2 0x347F PUSH2 0x355D JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x34EF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1AB5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x3542 JUMPI PUSH2 0x3542 PUSH2 0x355D JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3558 JUMPI PUSH2 0x3558 PUSH2 0x3573 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH3 0x75726E KECCAK256 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E63655469636B PUSH6 0x742F6275726E 0x2D PUSH2 0x6D6F PUSH22 0x6E742D657863656564732D746F74616C2D737570706C PUSH26 0x2D74776162A26469706673582212207222193ED5D2D8F5956C34 MSIZE DUP9 0x4B SWAP2 0xB0 0xE3 0x29 0x26 JUMPI 0xDA DUP6 PUSH10 0x928C1D5DE06432574764 PUSH20 0x6F6C634300080600330000000000000000000000 ",
          "sourceMap": "898:12651:27:-:0;;;1049:95:4;996:148;;1131:83:27;1076:138;;1989:190;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2137:5;2144:7;2153:9;2164:11;1376:52:4;;;;;;;;;;;;;;;;;1415:4;2340:564:13;;;;;;;;;;;;;-1:-1:-1;;;2340:564:13;;;1672:5:20;1679:7;1980:5:1;1972;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1995:17:1;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;2426:22:13;;;;;;;2482:25;;;;;;;;;2663;;;;2698:31;;;;2758:13;2739:32;;;;-1:-1:-1;3447:73:13;;2536:117;3447:73;;;2120:25:72;;;2161:18;;;2154:34;;;;2204:18;;;2197:34;;;;2247:18;;;;2240:34;;;;3514:4:13;2290:19:72;;;2283:61;3447:73:13;;;;;;;;;;2092:19:72;;;;3447:73:13;;;3437:84;;;;;;;;2781:85;;;2876:21;;-1:-1:-1;;;;;;;1706:34:20;::::2;1698:90;;;::::0;-1:-1:-1;;;1698:90:20;;3384:2:72;1698:90:20::2;::::0;::::2;3366:21:72::0;3423:2;3403:18;;;3396:30;3462:34;3442:18;;;3435:62;-1:-1:-1;;;3513:18:72;;;3506:41;3564:19;;1698:90:20::2;;;;;;;;;1798:10;:24:::0;;-1:-1:-1;;;;;;1798:24:20::2;-1:-1:-1::0;;;;;1798:24:20;::::2;;::::0;;1841:13:::2;::::0;::::2;1833:58;;;::::0;-1:-1:-1;;;1833:58:20;;3023:2:72;1833:58:20::2;::::0;::::2;3005:21:72::0;;;3042:18;;;3035:30;3101:34;3081:18;;;3074:62;3153:18;;1833:58:20::2;2995:182:72::0;1833:58:20::2;1901:21:::0;::::2;::::0;;;;::::2;::::0;1938:48:::2;::::0;-1:-1:-1;;;;;1938:48:20;::::2;::::0;::::2;::::0;::::2;::::0;1947:5;;1954:7;;1913:9;;1938:48:::2;:::i;:::-;;;;;;;;1490:503:::0;;;;1989:190:27;;;;898:12651;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;898:12651:27;;;-1:-1:-1;898:12651:27;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:686:72;68:5;121:3;114:4;106:6;102:17;98:27;88:2;;139:1;136;129:12;88:2;162:13;;-1:-1:-1;;;;;224:10:72;;;221:2;;;237:18;;:::i;:::-;312:2;306:9;280:2;366:13;;-1:-1:-1;;362:22:72;;;386:2;358:31;354:40;342:53;;;410:18;;;430:22;;;407:46;404:2;;;456:18;;:::i;:::-;496:10;492:2;485:22;531:2;523:6;516:18;577:3;570:4;565:2;557:6;553:15;549:26;546:35;543:2;;;594:1;591;584:12;543:2;607:63;667:2;660:4;652:6;648:17;641:4;633:6;629:17;607:63;:::i;:::-;688:6;78:622;-1:-1:-1;;;;;;78:622:72:o;705:888::-;820:6;828;836;844;897:3;885:9;876:7;872:23;868:33;865:2;;;914:1;911;904:12;865:2;941:16;;-1:-1:-1;;;;;1006:14:72;;;1003:2;;;1033:1;1030;1023:12;1003:2;1056:61;1109:7;1100:6;1089:9;1085:22;1056:61;:::i;:::-;1046:71;;1163:2;1152:9;1148:18;1142:25;1126:41;;1192:2;1182:8;1179:16;1176:2;;;1208:1;1205;1198:12;1176:2;;1231:63;1286:7;1275:8;1264:9;1260:24;1231:63;:::i;:::-;1221:73;;;1337:2;1326:9;1322:18;1316:25;1381:4;1374:5;1370:16;1363:5;1360:27;1350:2;;1401:1;1398;1391:12;1350:2;1474;1459:18;;1453:25;1424:5;;-1:-1:-1;;;;;;1509:33:72;;1497:46;;1487:2;;1557:1;1554;1547:12;1487:2;855:738;;;;-1:-1:-1;855:738:72;;-1:-1:-1;;855:738:72:o;1598:258::-;1640:3;1678:5;1672:12;1705:6;1700:3;1693:19;1721:63;1777:6;1770:4;1765:3;1761:14;1754:4;1747:5;1743:16;1721:63;:::i;:::-;1838:2;1817:15;-1:-1:-1;;1813:29:72;1804:39;;;;1845:4;1800:50;;1648:208;-1:-1:-1;;1648:208:72:o;2355:461::-;2576:2;2565:9;2558:21;2539:4;2602:45;2643:2;2632:9;2628:18;2620:6;2602:45;:::i;:::-;2695:9;2687:6;2683:22;2678:2;2667:9;2663:18;2656:50;2723:33;2749:6;2741;2723:33;:::i;:::-;2715:41;;;2804:4;2796:6;2792:17;2787:2;2776:9;2772:18;2765:45;2548:268;;;;;;:::o;3594:258::-;3666:1;3676:113;3690:6;3687:1;3684:13;3676:113;;;3766:11;;;3760:18;3747:11;;;3740:39;3712:2;3705:10;3676:113;;;3807:6;3804:1;3801:13;3798:2;;;3842:1;3833:6;3828:3;3824:16;3817:27;3798:2;;3647:205;;;:::o;3857:380::-;3936:1;3932:12;;;;3979;;;4000:2;;4054:4;4046:6;4042:17;4032:27;;4000:2;4107;4099:6;4096:14;4076:18;4073:38;4070:2;;;4153:10;4148:3;4144:20;4141:1;4134:31;4188:4;4185:1;4178:15;4216:4;4213:1;4206:15;4070:2;;3912:325;;;:::o;4242:127::-;4303:10;4298:3;4294:20;4291:1;4284:31;4334:4;4331:1;4324:15;4358:4;4355:1;4348:15;4274:95;898:12651:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@DOMAIN_SEPARATOR_827": {
              "entryPoint": 1987,
              "id": 827,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_afterTokenTransfer_584": {
              "entryPoint": null,
              "id": 584,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_approve_562": {
              "entryPoint": 4361,
              "id": 562,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_beforeTokenTransfer_7506": {
              "entryPoint": 7044,
              "id": 7506,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_buildDomainSeparator_2132": {
              "entryPoint": null,
              "id": 2132,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_burn_517": {
              "entryPoint": 5989,
              "id": 517,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_calculateTwab_10212": {
              "entryPoint": 10514,
              "id": 10212,
              "parameterSlots": 8,
              "returnSlots": 1
            },
            "@_computeNextTwab_10244": {
              "entryPoint": 11425,
              "id": 10244,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_decreaseTotalSupplyTwab_7754": {
              "entryPoint": 10095,
              "id": 7754,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_decreaseUserTwab_7704": {
              "entryPoint": 10153,
              "id": 7704,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_delegate_7356": {
              "entryPoint": 5297,
              "id": 7356,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_domainSeparatorV4_2105": {
              "entryPoint": 5511,
              "id": 2105,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_getAverageBalanceBetween_9987": {
              "entryPoint": 8351,
              "id": 9987,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@_getAverageBalancesBetween_7449": {
              "entryPoint": 6390,
              "id": 7449,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@_getBalanceAt_10094": {
              "entryPoint": 7191,
              "id": 10094,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@_hashTypedDataV4_2148": {
              "entryPoint": 6843,
              "id": 2148,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_increaseTotalSupplyTwab_7803": {
              "entryPoint": 9839,
              "id": 7803,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_increaseUserTwab_7642": {
              "entryPoint": 10465,
              "id": 7642,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_mint_445": {
              "entryPoint": 5754,
              "id": 445,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_1560": {
              "entryPoint": null,
              "id": 1560,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_nextTwab_10319": {
              "entryPoint": 11548,
              "id": 10319,
              "parameterSlots": 3,
              "returnSlots": 3
            },
            "@_throwError_1707": {
              "entryPoint": 7854,
              "id": 1707,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transferTwab_7581": {
              "entryPoint": 7472,
              "id": 7581,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_transfer_389": {
              "entryPoint": 4705,
              "id": 389,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_useNonce_856": {
              "entryPoint": 6803,
              "id": 856,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@allowance_177": {
              "entryPoint": null,
              "id": 177,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@approve_198": {
              "entryPoint": 1586,
              "id": 198,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@balanceOf_138": {
              "entryPoint": null,
              "id": 138,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@binarySearch_9349": {
              "entryPoint": 9176,
              "id": 9349,
              "parameterSlots": 6,
              "returnSlots": 2
            },
            "@checkedSub_9521": {
              "entryPoint": 9637,
              "id": 9521,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@controllerBurnFrom_3239": {
              "entryPoint": 2579,
              "id": 3239,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@controllerBurn_3204": {
              "entryPoint": 3100,
              "id": 3204,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@controllerDelegateFor_7229": {
              "entryPoint": 1883,
              "id": 7229,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@controllerMint_3187": {
              "entryPoint": 2195,
              "id": 3187,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@controller_3085": {
              "entryPoint": null,
              "id": 3085,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@current_1588": {
              "entryPoint": null,
              "id": 1588,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@decimals_3249": {
              "entryPoint": null,
              "id": 3249,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@decreaseAllowance_312": {
              "entryPoint": 3815,
              "id": 312,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@decreaseBalance_9744": {
              "entryPoint": 11214,
              "id": 9744,
              "parameterSlots": 4,
              "returnSlots": 3
            },
            "@delegateOf_7212": {
              "entryPoint": null,
              "id": 7212,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@delegateWithSignature_7298": {
              "entryPoint": 3200,
              "id": 7298,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@delegate_7312": {
              "entryPoint": 2182,
              "id": 7312,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@getAccountDetails_6868": {
              "entryPoint": null,
              "id": 6868,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getAverageBalanceBetween_7016": {
              "entryPoint": 3599,
              "id": 7016,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@getAverageBalanceBetween_9782": {
              "entryPoint": 6988,
              "id": 9782,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@getAverageBalancesBetween_6951": {
              "entryPoint": 2766,
              "id": 6951,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@getAverageTotalSuppliesBetween_6972": {
              "entryPoint": 3073,
              "id": 6972,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@getBalanceAt_6926": {
              "entryPoint": 3712,
              "id": 6926,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getBalanceAt_9898": {
              "entryPoint": 5253,
              "id": 9898,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@getBalancesAt_7099": {
              "entryPoint": 2295,
              "id": 7099,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@getTotalSuppliesAt_7198": {
              "entryPoint": 2846,
              "id": 7198,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getTotalSupplyAt_7126": {
              "entryPoint": 1807,
              "id": 7126,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getTwab_6888": {
              "entryPoint": 2002,
              "id": 6888,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@increaseAllowance_273": {
              "entryPoint": 2122,
              "id": 273,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@increaseBalance_9687": {
              "entryPoint": 11045,
              "id": 9687,
              "parameterSlots": 3,
              "returnSlots": 3
            },
            "@increment_1602": {
              "entryPoint": null,
              "id": 1602,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@lt_9408": {
              "entryPoint": 8969,
              "id": 9408,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@lte_9463": {
              "entryPoint": 8635,
              "id": 9463,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@name_94": {
              "entryPoint": 1440,
              "id": 94,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@newestIndex_9588": {
              "entryPoint": 10844,
              "id": 9588,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@newestTwab_9863": {
              "entryPoint": 8507,
              "id": 9863,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@nextIndex_9606": {
              "entryPoint": 10898,
              "id": 9606,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@nonces_816": {
              "entryPoint": 2816,
              "id": 816,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@oldestTwab_9827": {
              "entryPoint": 8844,
              "id": 9827,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@permit_800": {
              "entryPoint": 4005,
              "id": 800,
              "parameterSlots": 7,
              "returnSlots": 0
            },
            "@push_10358": {
              "entryPoint": 11779,
              "id": 10358,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@recover_1973": {
              "entryPoint": 6948,
              "id": 1973,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@symbol_104": {
              "entryPoint": 3584,
              "id": 104,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@toTypedDataHash_2010": {
              "entryPoint": null,
              "id": 2010,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@toUint208_9165": {
              "entryPoint": 10914,
              "id": 9165,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@totalSupply_124": {
              "entryPoint": null,
              "id": 124,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@transferFrom_246": {
              "entryPoint": 1609,
              "id": 246,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@transfer_159": {
              "entryPoint": 3992,
              "id": 159,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@tryRecover_1940": {
              "entryPoint": 7617,
              "id": 1940,
              "parameterSlots": 4,
              "returnSlots": 2
            },
            "@wrap_9539": {
              "entryPoint": 10886,
              "id": 9539,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_address": {
              "entryPoint": 11883,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_array_uint64_dyn_calldata": {
              "entryPoint": 11911,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 12021,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 12048,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_uint256": {
              "entryPoint": 12099,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
              "entryPoint": 12159,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 7
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_uint8t_bytes32t_bytes32": {
              "entryPoint": 12265,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 6
            },
            "abi_decode_tuple_t_addresst_array$_t_uint64_$dyn_calldata_ptr": {
              "entryPoint": 12360,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_array$_t_uint64_$dyn_calldata_ptrt_array$_t_uint64_$dyn_calldata_ptr": {
              "entryPoint": 12443,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_addresst_uint16": {
              "entryPoint": 12572,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 12634,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint64": {
              "entryPoint": 12676,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint64t_uint64": {
              "entryPoint": 12718,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_array$_t_uint64_$dyn_calldata_ptr": {
              "entryPoint": 12785,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_array$_t_uint64_$dyn_calldata_ptrt_array$_t_uint64_$dyn_calldata_ptr": {
              "entryPoint": 12851,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_uint64": {
              "entryPoint": 12959,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_uint64": {
              "entryPoint": 11980,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_uint8": {
              "entryPoint": 12004,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 12986,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 7,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 13054,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_39ab2e4ed03130f2bab737445eefa0170013f2d5d6416c5398200851ee691d09__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c485dc2a924c6dd174a7f3539c902d57d6264aa0653fd1afa5b4084da601fff7__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d26de55e8ec40107d038a21c3ec11785680740c032de3f1a47bf117807198f53__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_ef56e6eb544946d3498735fdd4428248a65a688b6ca702fa3dbce5b90141cb35__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_AccountDetails_$9631_memory_ptr__to_t_struct$_AccountDetails_$9631_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_Observation_$9212_memory_ptr__to_t_struct$_Observation_$9212_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint208": {
              "entryPoint": 13139,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint224": {
              "entryPoint": 13182,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint24": {
              "entryPoint": 13216,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 13246,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint40": {
              "entryPoint": 13270,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint224": {
              "entryPoint": 13302,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 13340,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint224": {
              "entryPoint": 13360,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint208": {
              "entryPoint": 13407,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint224": {
              "entryPoint": 13447,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 13479,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint32": {
              "entryPoint": 13502,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 13531,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 13584,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mod_t_uint256": {
              "entryPoint": 13641,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 13661,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 13683,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x21": {
              "entryPoint": 13705,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 13727,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 13749,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:25189:72",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:72",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "63:147:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "73:29:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "95:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "82:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "82:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "73:5:72"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "188:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "197:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "200:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "190:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "190:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "190:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "124:5:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "135:5:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "142:42:72",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "131:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "131:54:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "121:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "121:65:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "114:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "114:73:72"
                          },
                          "nodeType": "YulIf",
                          "src": "111:2:72"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "42:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "53:5:72",
                        "type": ""
                      }
                    ],
                    "src": "14:196:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "298:283:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "347:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "356:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "359:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "349:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "349:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "349:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "326:6:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "334:4:72",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "322:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "322:17:72"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "341:3:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "318:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "318:27:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "311:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "311:35:72"
                          },
                          "nodeType": "YulIf",
                          "src": "308:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "372:30:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "395:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "382:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "382:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "372:6:72"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "445:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "454:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "457:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "447:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "447:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "447:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "417:6:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "425:18:72",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "414:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "414:30:72"
                          },
                          "nodeType": "YulIf",
                          "src": "411:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "470:29:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "486:6:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "494:4:72",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "482:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "482:17:72"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nodeType": "YulIdentifier",
                              "src": "470:8:72"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "559:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "568:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "571:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "561:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "561:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "561:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "522:6:72"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "534:1:72",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "537:6:72"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "530:3:72"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "530:14:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "518:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "518:27:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "547:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "514:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "514:38:72"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "554:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "511:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "511:47:72"
                          },
                          "nodeType": "YulIf",
                          "src": "508:2:72"
                        }
                      ]
                    },
                    "name": "abi_decode_array_uint64_dyn_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "261:6:72",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "269:3:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nodeType": "YulTypedName",
                        "src": "277:8:72",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "287:6:72",
                        "type": ""
                      }
                    ],
                    "src": "215:366:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "634:123:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "644:29:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "666:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "653:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "653:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "644:5:72"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "735:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "744:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "747:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "737:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "737:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "737:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "695:5:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "706:5:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "713:18:72",
                                        "type": "",
                                        "value": "0xffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "702:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "702:30:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "692:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "692:41:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "685:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "685:49:72"
                          },
                          "nodeType": "YulIf",
                          "src": "682:2:72"
                        }
                      ]
                    },
                    "name": "abi_decode_uint64",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "613:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "624:5:72",
                        "type": ""
                      }
                    ],
                    "src": "586:171:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "809:109:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "819:29:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "841:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "828:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "828:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "819:5:72"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "896:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "905:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "908:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "898:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "898:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "898:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "870:5:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "881:5:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "888:4:72",
                                        "type": "",
                                        "value": "0xff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "877:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "877:16:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "867:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "867:27:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "860:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "860:35:72"
                          },
                          "nodeType": "YulIf",
                          "src": "857:2:72"
                        }
                      ]
                    },
                    "name": "abi_decode_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "788:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "799:5:72",
                        "type": ""
                      }
                    ],
                    "src": "762:156:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "993:116:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1039:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1048:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1051:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1041:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1041:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1041:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1014:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1023:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1010:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1010:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1035:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1006:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1006:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "1003:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1064:39:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1093:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1074:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1074:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1064:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "959:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "970:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "982:6:72",
                        "type": ""
                      }
                    ],
                    "src": "923:186:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1201:173:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1247:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1256:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1259:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1249:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1249:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1249:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1222:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1231:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1218:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1218:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1243:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1214:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1214:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "1211:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1272:39:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1301:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1282:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1282:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1272:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1320:48:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1353:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1364:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1349:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1349:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1330:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1330:38:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1320:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1159:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1170:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1182:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1190:6:72",
                        "type": ""
                      }
                    ],
                    "src": "1114:260:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1483:224:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1529:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1538:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1541:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1531:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1531:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1531:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1504:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1513:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1500:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1500:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1525:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1496:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1496:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "1493:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1554:39:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1583:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1564:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1564:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1554:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1602:48:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1635:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1646:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1631:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1631:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1612:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1612:38:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1602:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1659:42:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1686:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1697:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1682:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1682:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1669:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1669:32:72"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1659:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1433:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1444:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1456:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1464:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1472:6:72",
                        "type": ""
                      }
                    ],
                    "src": "1379:328:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1882:436:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1929:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1938:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1941:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1931:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1931:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1931:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1903:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1912:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1899:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1899:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1924:3:72",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1895:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1895:33:72"
                          },
                          "nodeType": "YulIf",
                          "src": "1892:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1954:39:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1983:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1964:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1964:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1954:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2002:48:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2035:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2046:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2031:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2031:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2012:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2012:38:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2002:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2059:42:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2086:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2097:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2082:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2082:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2069:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2069:32:72"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "2059:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2110:42:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2137:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2148:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2133:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2133:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2120:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2120:32:72"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "2110:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2161:47:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2192:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2203:3:72",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2188:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2188:19:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "2171:16:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2171:37:72"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "2161:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2217:43:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2244:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2255:3:72",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2240:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2240:19:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2227:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2227:33:72"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "2217:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2269:43:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2296:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2307:3:72",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2292:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2292:19:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2279:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2279:33:72"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "2269:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1800:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1811:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1823:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1831:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1839:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "1847:6:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "1855:6:72",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "1863:6:72",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "1871:6:72",
                        "type": ""
                      }
                    ],
                    "src": "1712:606:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2476:384:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2523:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2532:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2535:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2525:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2525:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2525:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2497:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2506:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2493:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2493:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2518:3:72",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2489:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2489:33:72"
                          },
                          "nodeType": "YulIf",
                          "src": "2486:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2548:39:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2577:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2558:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2558:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2548:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2596:48:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2629:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2640:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2625:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2625:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2606:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2606:38:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2596:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2653:42:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2680:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2691:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2676:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2676:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2663:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2663:32:72"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "2653:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2704:46:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2735:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2746:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2731:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2731:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "2714:16:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2714:36:72"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "2704:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2759:43:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2786:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2797:3:72",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2782:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2782:19:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2769:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2769:33:72"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "2759:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2811:43:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2838:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2849:3:72",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2834:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2834:19:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2821:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2821:33:72"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "2811:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint8t_bytes32t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2402:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2413:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2425:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2433:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2441:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "2449:6:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "2457:6:72",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "2465:6:72",
                        "type": ""
                      }
                    ],
                    "src": "2323:537:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2986:388:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3032:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3041:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3044:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3034:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3034:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3034:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3007:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3016:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3003:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3003:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3028:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2999:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2999:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "2996:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3057:39:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3086:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "3067:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3067:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3057:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3105:46:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3136:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3147:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3132:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3132:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3119:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3119:32:72"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3109:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3194:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3203:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3206:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3196:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3196:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3196:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3166:6:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3174:18:72",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3163:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3163:30:72"
                          },
                          "nodeType": "YulIf",
                          "src": "3160:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3219:95:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3286:9:72"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3297:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3282:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3282:22:72"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3306:7:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint64_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "3245:36:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3245:69:72"
                          },
                          "variables": [
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "3223:8:72",
                              "type": ""
                            },
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "3233:8:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3323:18:72",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "3333:8:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3323:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3350:18:72",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "3360:8:72"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "3350:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_array$_t_uint64_$dyn_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2936:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2947:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2959:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2967:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2975:6:72",
                        "type": ""
                      }
                    ],
                    "src": "2865:509:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3551:671:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3597:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3606:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3609:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3599:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3599:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3599:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3572:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3581:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3568:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3568:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3593:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3564:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3564:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "3561:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3622:39:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3651:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "3632:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3632:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3622:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3670:46:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3701:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3712:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3697:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3697:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3684:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3684:32:72"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3674:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3725:28:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3735:18:72",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3729:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3780:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3789:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3792:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3782:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3782:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3782:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3768:6:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3776:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3765:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3765:14:72"
                          },
                          "nodeType": "YulIf",
                          "src": "3762:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3805:95:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3872:9:72"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3883:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3868:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3868:22:72"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3892:7:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint64_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "3831:36:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3831:69:72"
                          },
                          "variables": [
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "3809:8:72",
                              "type": ""
                            },
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "3819:8:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3909:18:72",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "3919:8:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3909:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3936:18:72",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "3946:8:72"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "3936:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3963:48:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3996:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4007:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3992:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3992:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3979:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3979:32:72"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "3967:8:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4040:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4049:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4052:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4042:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4042:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4042:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "4026:8:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4036:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4023:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4023:16:72"
                          },
                          "nodeType": "YulIf",
                          "src": "4020:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4065:97:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4132:9:72"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4143:8:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4128:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4128:24:72"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4154:7:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint64_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "4091:36:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4091:71:72"
                          },
                          "variables": [
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "4069:8:72",
                              "type": ""
                            },
                            {
                              "name": "value4_1",
                              "nodeType": "YulTypedName",
                              "src": "4079:8:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4171:18:72",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "4181:8:72"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "4171:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4198:18:72",
                          "value": {
                            "name": "value4_1",
                            "nodeType": "YulIdentifier",
                            "src": "4208:8:72"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "4198:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_array$_t_uint64_$dyn_calldata_ptrt_array$_t_uint64_$dyn_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3485:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3496:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3508:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3516:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "3524:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "3532:6:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "3540:6:72",
                        "type": ""
                      }
                    ],
                    "src": "3379:843:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4313:260:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4359:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4368:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4371:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4361:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4361:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4361:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4334:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4343:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4330:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4330:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4355:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4326:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4326:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "4323:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4384:39:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4413:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4394:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4394:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4384:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4432:45:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4462:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4473:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4458:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4458:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4445:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4445:32:72"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4436:5:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4527:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4536:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4539:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4529:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4529:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4529:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4499:5:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4510:5:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4517:6:72",
                                        "type": "",
                                        "value": "0xffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4506:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4506:18:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "4496:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4496:29:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4489:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4489:37:72"
                          },
                          "nodeType": "YulIf",
                          "src": "4486:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4552:15:72",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4562:5:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4552:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint16",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4271:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4282:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4294:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4302:6:72",
                        "type": ""
                      }
                    ],
                    "src": "4227:346:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4665:167:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4711:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4720:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4723:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4713:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4713:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4713:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4686:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4695:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4682:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4682:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4707:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4678:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4678:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "4675:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4736:39:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4765:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4746:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4746:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4736:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4784:42:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4811:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4822:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4807:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4807:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4794:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4794:32:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4784:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4623:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4634:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4646:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4654:6:72",
                        "type": ""
                      }
                    ],
                    "src": "4578:254:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4923:172:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4969:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4978:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4981:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4971:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4971:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4971:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4944:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4953:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4940:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4940:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4965:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4936:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4936:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "4933:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4994:39:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5023:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "5004:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5004:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4994:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5042:47:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5074:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5085:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5070:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5070:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint64",
                              "nodeType": "YulIdentifier",
                              "src": "5052:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5052:37:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5042:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint64",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4881:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4892:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4904:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4912:6:72",
                        "type": ""
                      }
                    ],
                    "src": "4837:258:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5202:228:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5248:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5257:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5260:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5250:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5250:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5250:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5223:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5232:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5219:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5219:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5244:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5215:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5215:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "5212:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5273:39:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5302:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "5283:18:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5283:29:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5273:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5321:47:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5353:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5364:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5349:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5349:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint64",
                              "nodeType": "YulIdentifier",
                              "src": "5331:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5331:37:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5321:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5377:47:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5409:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5420:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5405:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5405:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint64",
                              "nodeType": "YulIdentifier",
                              "src": "5387:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5387:37:72"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "5377:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint64t_uint64",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5152:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5163:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5175:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5183:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5191:6:72",
                        "type": ""
                      }
                    ],
                    "src": "5100:330:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5539:331:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5585:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5594:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5597:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5587:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5587:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5587:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5560:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5569:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5556:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5556:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5581:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5552:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5552:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "5549:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5610:37:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5637:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5624:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5624:23:72"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "5614:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5690:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5699:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5702:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5692:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5692:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5692:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5662:6:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5670:18:72",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5659:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5659:30:72"
                          },
                          "nodeType": "YulIf",
                          "src": "5656:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5715:95:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5782:9:72"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5793:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5778:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5778:22:72"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5802:7:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint64_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "5741:36:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5741:69:72"
                          },
                          "variables": [
                            {
                              "name": "value0_1",
                              "nodeType": "YulTypedName",
                              "src": "5719:8:72",
                              "type": ""
                            },
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "5729:8:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5819:18:72",
                          "value": {
                            "name": "value0_1",
                            "nodeType": "YulIdentifier",
                            "src": "5829:8:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5819:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5846:18:72",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "5856:8:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5846:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_uint64_$dyn_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5497:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5508:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5520:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5528:6:72",
                        "type": ""
                      }
                    ],
                    "src": "5435:435:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6030:614:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6076:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6085:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6088:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6078:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6078:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6078:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6051:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6060:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6047:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6047:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6072:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6043:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6043:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "6040:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6101:37:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6128:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6115:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6115:23:72"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "6105:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6147:28:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6157:18:72",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6151:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6202:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6211:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6214:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6204:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6204:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6204:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6190:6:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6198:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6187:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6187:14:72"
                          },
                          "nodeType": "YulIf",
                          "src": "6184:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6227:95:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6294:9:72"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "6305:6:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6290:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6290:22:72"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6314:7:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint64_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "6253:36:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6253:69:72"
                          },
                          "variables": [
                            {
                              "name": "value0_1",
                              "nodeType": "YulTypedName",
                              "src": "6231:8:72",
                              "type": ""
                            },
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "6241:8:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6331:18:72",
                          "value": {
                            "name": "value0_1",
                            "nodeType": "YulIdentifier",
                            "src": "6341:8:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6331:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6358:18:72",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "6368:8:72"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "6358:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6385:48:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6418:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6429:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6414:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6414:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6401:12:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6401:32:72"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "6389:8:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6462:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6471:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6474:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6464:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6464:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6464:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "6448:8:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6458:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6445:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6445:16:72"
                          },
                          "nodeType": "YulIf",
                          "src": "6442:2:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6487:97:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6554:9:72"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6565:8:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6550:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6550:24:72"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6576:7:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint64_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "6513:36:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6513:71:72"
                          },
                          "variables": [
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "6491:8:72",
                              "type": ""
                            },
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "6501:8:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6593:18:72",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "6603:8:72"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "6593:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6620:18:72",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "6630:8:72"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "6620:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_uint64_$dyn_calldata_ptrt_array$_t_uint64_$dyn_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5972:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5983:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5995:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6003:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "6011:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "6019:6:72",
                        "type": ""
                      }
                    ],
                    "src": "5875:769:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6718:115:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6764:16:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6773:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6776:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6766:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6766:12:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6766:12:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6739:7:72"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6748:9:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6735:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6735:23:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6760:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6731:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6731:32:72"
                          },
                          "nodeType": "YulIf",
                          "src": "6728:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6789:38:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6817:9:72"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint64",
                              "nodeType": "YulIdentifier",
                              "src": "6799:17:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6799:28:72"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6789:6:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint64",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6684:9:72",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6695:7:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6707:6:72",
                        "type": ""
                      }
                    ],
                    "src": "6649:184:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7086:196:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7103:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7108:66:72",
                                "type": "",
                                "value": "0x1901000000000000000000000000000000000000000000000000000000000000"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7096:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7096:79:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7096:79:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7195:3:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7200:1:72",
                                    "type": "",
                                    "value": "2"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7191:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7191:11:72"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7204:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7184:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7184:27:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7184:27:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7231:3:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7236:2:72",
                                    "type": "",
                                    "value": "34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7227:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7227:12:72"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7241:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7220:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7220:28:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7220:28:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7257:19:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7268:3:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7273:2:72",
                                "type": "",
                                "value": "66"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7264:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7264:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "7257:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7054:3:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7059:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7067:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "7078:3:72",
                        "type": ""
                      }
                    ],
                    "src": "6838:444:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7388:125:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7398:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7410:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7421:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7406:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7406:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7398:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7440:9:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7455:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7463:42:72",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7451:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7451:55:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7433:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7433:74:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7433:74:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7357:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7368:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7379:4:72",
                        "type": ""
                      }
                    ],
                    "src": "7287:226:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7669:481:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7679:12:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7689:2:72",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7683:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7700:32:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7718:9:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7729:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7714:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7714:18:72"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "7704:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7748:9:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7759:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7741:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7741:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7741:21:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7771:17:72",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "7782:6:72"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "7775:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7797:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7817:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7811:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7811:13:72"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "7801:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "7840:6:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7848:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7833:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7833:22:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7833:22:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7864:25:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7875:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7886:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7871:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7871:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "7864:3:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7898:29:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7916:6:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7924:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7912:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7912:15:72"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "7902:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7936:10:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7945:1:72",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "7940:1:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8004:120:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "8025:3:72"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "8036:6:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "8030:5:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8030:13:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "8018:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8018:26:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8018:26:72"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "8057:19:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "8068:3:72"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8073:2:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "8064:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8064:12:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8057:3:72"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "8089:25:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "8103:6:72"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8111:2:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "8099:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8099:15:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "8089:6:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "7966:1:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7969:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "7963:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7963:13:72"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "7977:18:72",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "7979:14:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "7988:1:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7991:1:72",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7984:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7984:9:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "7979:1:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "7959:3:72",
                            "statements": []
                          },
                          "src": "7955:169:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8133:11:72",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "8141:3:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8133:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7638:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7649:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7660:4:72",
                        "type": ""
                      }
                    ],
                    "src": "7518:632:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8250:92:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8260:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8272:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8283:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8268:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8268:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8260:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8302:9:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "8327:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "8320:6:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8320:14:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "8313:6:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8313:22:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8295:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8295:41:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8295:41:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8219:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8230:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8241:4:72",
                        "type": ""
                      }
                    ],
                    "src": "8155:187:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8448:76:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8458:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8470:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8481:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8466:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8466:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8458:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8500:9:72"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8511:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8493:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8493:25:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8493:25:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8417:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8428:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8439:4:72",
                        "type": ""
                      }
                    ],
                    "src": "8347:177:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8742:329:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8752:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8764:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8775:3:72",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8760:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8760:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8752:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8795:9:72"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8806:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8788:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8788:25:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8788:25:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8822:52:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8832:42:72",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "8826:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8894:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8905:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8890:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8890:18:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8914:6:72"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8922:2:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8910:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8910:15:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8883:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8883:43:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8883:43:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8946:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8957:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8942:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8942:18:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8966:6:72"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8974:2:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8962:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8962:15:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8935:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8935:43:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8935:43:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8998:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9009:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8994:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8994:18:72"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "9014:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8987:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8987:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8987:34:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9041:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9052:3:72",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9037:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9037:19:72"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "9058:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9030:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9030:35:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9030:35:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8679:9:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "8690:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "8698:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8706:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8714:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8722:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8733:4:72",
                        "type": ""
                      }
                    ],
                    "src": "8529:542:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9317:373:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9327:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9339:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9350:3:72",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9335:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9335:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9327:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9370:9:72"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9381:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9363:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9363:25:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9363:25:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9397:52:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9407:42:72",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "9401:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9469:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9480:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9465:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9465:18:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9489:6:72"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9497:2:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "9485:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9485:15:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9458:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9458:43:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9458:43:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9521:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9532:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9517:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9517:18:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "9541:6:72"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9549:2:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "9537:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9537:15:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9510:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9510:43:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9510:43:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9573:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9584:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9569:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9569:18:72"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "9589:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9562:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9562:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9562:34:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9616:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9627:3:72",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9612:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9612:19:72"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "9633:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9605:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9605:35:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9605:35:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9660:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9671:3:72",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9656:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9656:19:72"
                              },
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "9677:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9649:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9649:35:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9649:35:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9246:9:72",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "9257:6:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "9265:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "9273:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "9281:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9289:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9297:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9308:4:72",
                        "type": ""
                      }
                    ],
                    "src": "9076:614:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9908:299:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9918:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9930:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9941:3:72",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9926:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9926:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9918:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9961:9:72"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9972:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9954:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9954:25:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9954:25:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9999:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10010:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9995:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9995:18:72"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "10015:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9988:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9988:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9988:34:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10042:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10053:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10038:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10038:18:72"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "10058:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10031:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10031:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10031:34:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10085:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10096:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10081:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10081:18:72"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "10101:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10074:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10074:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10074:34:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10128:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10139:3:72",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10124:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10124:19:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value4",
                                    "nodeType": "YulIdentifier",
                                    "src": "10149:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10157:42:72",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10145:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10145:55:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10117:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10117:84:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10117:84:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9845:9:72",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "9856:6:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "9864:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "9872:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9880:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9888:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9899:4:72",
                        "type": ""
                      }
                    ],
                    "src": "9695:512:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10393:217:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10403:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10415:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10426:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10411:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10411:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10403:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10446:9:72"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "10457:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10439:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10439:25:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10439:25:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10484:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10495:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10480:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10480:18:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10504:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10512:4:72",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10500:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10500:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10473:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10473:45:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10473:45:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10538:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10549:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10534:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10534:18:72"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "10554:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10527:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10527:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10527:34:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10581:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10592:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10577:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10577:18:72"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "10597:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10570:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10570:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10570:34:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10338:9:72",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "10349:6:72",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "10357:6:72",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10365:6:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10373:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10384:4:72",
                        "type": ""
                      }
                    ],
                    "src": "10212:398:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10736:535:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10746:12:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10756:2:72",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10750:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10774:9:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10785:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10767:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10767:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10767:21:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10797:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "10817:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10811:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10811:13:72"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "10801:6:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10844:9:72"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10855:2:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10840:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10840:18:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "10860:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10833:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10833:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10833:34:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10876:10:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10885:1:72",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "10880:1:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10945:90:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "10974:9:72"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "10985:1:72"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "10970:3:72"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "10970:17:72"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10989:2:72",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "10966:3:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10966:26:72"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value0",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "11008:6:72"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "11016:1:72"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "11004:3:72"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "11004:14:72"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "11020:2:72"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "11000:3:72"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "11000:23:72"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "10994:5:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10994:30:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "10959:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10959:66:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10959:66:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "10906:1:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "10909:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "10903:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10903:13:72"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "10917:19:72",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "10919:15:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "10928:1:72"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "10931:2:72"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "10924:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10924:10:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "10919:1:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "10899:3:72",
                            "statements": []
                          },
                          "src": "10895:140:72"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11069:66:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "11098:9:72"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "11109:6:72"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "11094:3:72"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "11094:22:72"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11118:2:72",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "11090:3:72"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11090:31:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11123:1:72",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "11083:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11083:42:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11083:42:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "11050:1:72"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "11053:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11047:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11047:13:72"
                          },
                          "nodeType": "YulIf",
                          "src": "11044:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11144:121:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11160:9:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "11179:6:72"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11187:2:72",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "11175:3:72"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11175:15:72"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11192:66:72",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "11171:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11171:88:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11156:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11156:104:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11262:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11152:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11152:113:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11144:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10705:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10716:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10727:4:72",
                        "type": ""
                      }
                    ],
                    "src": "10615:656:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11450:174:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11467:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11478:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11460:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11460:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11460:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11501:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11512:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11497:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11497:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11517:2:72",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11490:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11490:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11490:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11540:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11551:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11536:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11536:18:72"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11556:26:72",
                                "type": "",
                                "value": "ECDSA: invalid signature"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11529:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11529:54:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11529:54:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11592:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11604:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11615:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11600:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11600:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11592:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11427:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11441:4:72",
                        "type": ""
                      }
                    ],
                    "src": "11276:348:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11803:225:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11820:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11831:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11813:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11813:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11813:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11854:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11865:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11850:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11850:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11870:2:72",
                                "type": "",
                                "value": "35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11843:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11843:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11843:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11893:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11904:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11889:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11889:18:72"
                              },
                              {
                                "hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11909:34:72",
                                "type": "",
                                "value": "ERC20: transfer to the zero addr"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11882:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11882:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11882:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11964:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11975:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11960:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11960:18:72"
                              },
                              {
                                "hexValue": "657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11980:5:72",
                                "type": "",
                                "value": "ess"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11953:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11953:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11953:33:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11995:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12007:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12018:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12003:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12003:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11995:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11780:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11794:4:72",
                        "type": ""
                      }
                    ],
                    "src": "11629:399:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12207:224:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12224:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12235:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12217:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12217:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12217:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12258:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12269:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12254:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12254:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12274:2:72",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12247:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12247:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12247:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12297:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12308:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12293:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12293:18:72"
                              },
                              {
                                "hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12313:34:72",
                                "type": "",
                                "value": "ERC20: burn amount exceeds balan"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12286:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12286:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12286:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12368:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12379:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12364:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12364:18:72"
                              },
                              {
                                "hexValue": "6365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12384:4:72",
                                "type": "",
                                "value": "ce"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12357:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12357:32:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12357:32:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12398:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12410:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12421:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12406:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12406:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12398:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12184:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12198:4:72",
                        "type": ""
                      }
                    ],
                    "src": "12033:398:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12610:181:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12627:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12638:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12620:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12620:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12620:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12661:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12672:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12657:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12657:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12677:2:72",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12650:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12650:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12650:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12700:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12711:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12696:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12696:18:72"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12716:33:72",
                                "type": "",
                                "value": "ECDSA: invalid signature length"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12689:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12689:61:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12689:61:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12759:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12771:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12782:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12767:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12767:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12759:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12587:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12601:4:72",
                        "type": ""
                      }
                    ],
                    "src": "12436:355:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12970:224:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12987:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12998:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12980:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12980:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12980:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13021:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13032:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13017:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13017:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13037:2:72",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13010:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13010:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13010:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13060:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13071:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13056:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13056:18:72"
                              },
                              {
                                "hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13076:34:72",
                                "type": "",
                                "value": "ERC20: approve to the zero addre"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13049:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13049:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13049:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13131:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13142:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13127:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13127:18:72"
                              },
                              {
                                "hexValue": "7373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13147:4:72",
                                "type": "",
                                "value": "ss"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13120:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13120:32:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13120:32:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13161:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13173:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13184:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13169:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13169:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13161:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12947:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12961:4:72",
                        "type": ""
                      }
                    ],
                    "src": "12796:398:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13373:182:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13390:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13401:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13383:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13383:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13383:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13424:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13435:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13420:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13420:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13440:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13413:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13413:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13413:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13463:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13474:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13459:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13459:18:72"
                              },
                              {
                                "hexValue": "5469636b65742f64656c65676174652d657870697265642d646561646c696e65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13479:34:72",
                                "type": "",
                                "value": "Ticket/delegate-expired-deadline"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13452:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13452:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13452:62:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13523:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13535:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13546:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13531:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13531:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13523:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_39ab2e4ed03130f2bab737445eefa0170013f2d5d6416c5398200851ee691d09__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13350:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13364:4:72",
                        "type": ""
                      }
                    ],
                    "src": "13199:356:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13734:179:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13751:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13762:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13744:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13744:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13744:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13785:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13796:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13781:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13781:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13801:2:72",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13774:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13774:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13774:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13824:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13835:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13820:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13820:18:72"
                              },
                              {
                                "hexValue": "45524332305065726d69743a206578706972656420646561646c696e65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13840:31:72",
                                "type": "",
                                "value": "ERC20Permit: expired deadline"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13813:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13813:59:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13813:59:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13881:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13893:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13904:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13889:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13889:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13881:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13711:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13725:4:72",
                        "type": ""
                      }
                    ],
                    "src": "13560:353:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14092:228:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14109:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14120:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14102:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14102:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14102:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14143:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14154:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14139:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14139:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14159:2:72",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14132:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14132:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14132:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14182:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14193:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14178:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14178:18:72"
                              },
                              {
                                "hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14198:34:72",
                                "type": "",
                                "value": "ERC20: transfer amount exceeds b"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14171:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14171:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14171:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14253:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14264:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14249:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14249:18:72"
                              },
                              {
                                "hexValue": "616c616e6365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14269:8:72",
                                "type": "",
                                "value": "alance"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14242:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14242:36:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14242:36:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14287:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14299:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14310:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14295:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14295:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14287:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14069:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14083:4:72",
                        "type": ""
                      }
                    ],
                    "src": "13918:402:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14499:229:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14516:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14527:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14509:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14509:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14509:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14550:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14561:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14546:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14546:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14566:2:72",
                                "type": "",
                                "value": "39"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14539:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14539:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14539:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14589:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14600:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14585:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14585:18:72"
                              },
                              {
                                "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2032",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14605:34:72",
                                "type": "",
                                "value": "SafeCast: value doesn't fit in 2"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14578:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14578:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14578:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14660:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14671:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14656:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14656:18:72"
                              },
                              {
                                "hexValue": "30382062697473",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14676:9:72",
                                "type": "",
                                "value": "08 bits"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14649:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14649:37:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14649:37:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14695:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14707:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14718:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14703:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14703:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14695:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14476:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14490:4:72",
                        "type": ""
                      }
                    ],
                    "src": "14325:403:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14907:224:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14924:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14935:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14917:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14917:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14917:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14958:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14969:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14954:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14954:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14974:2:72",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14947:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14947:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14947:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14997:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15008:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14993:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14993:18:72"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15013:34:72",
                                "type": "",
                                "value": "ECDSA: invalid signature 's' val"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14986:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14986:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14986:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15068:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15079:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15064:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15064:18:72"
                              },
                              {
                                "hexValue": "7565",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15084:4:72",
                                "type": "",
                                "value": "ue"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15057:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15057:32:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15057:32:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15098:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15110:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15121:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15106:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15106:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15098:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14884:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14898:4:72",
                        "type": ""
                      }
                    ],
                    "src": "14733:398:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15310:224:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15327:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15338:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15320:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15320:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15320:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15361:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15372:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15357:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15357:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15377:2:72",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15350:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15350:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15350:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15400:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15411:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15396:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15396:18:72"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265202776272076616c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15416:34:72",
                                "type": "",
                                "value": "ECDSA: invalid signature 'v' val"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15389:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15389:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15389:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15471:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15482:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15467:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15467:18:72"
                              },
                              {
                                "hexValue": "7565",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15487:4:72",
                                "type": "",
                                "value": "ue"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15460:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15460:32:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15460:32:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15501:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15513:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15524:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15509:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15509:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15501:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15287:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15301:4:72",
                        "type": ""
                      }
                    ],
                    "src": "15136:398:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15713:180:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15730:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15741:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15723:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15723:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15723:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15764:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15775:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15760:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15760:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15780:2:72",
                                "type": "",
                                "value": "30"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15753:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15753:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15753:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15803:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15814:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15799:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15799:18:72"
                              },
                              {
                                "hexValue": "45524332305065726d69743a20696e76616c6964207369676e6174757265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15819:32:72",
                                "type": "",
                                "value": "ERC20Permit: invalid signature"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15792:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15792:60:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15792:60:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15861:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15873:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15884:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15869:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15869:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15861:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15690:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15704:4:72",
                        "type": ""
                      }
                    ],
                    "src": "15539:354:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16072:230:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16089:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16100:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16082:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16082:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16082:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16123:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16134:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16119:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16119:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16139:2:72",
                                "type": "",
                                "value": "40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16112:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16112:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16112:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16162:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16173:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16158:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16158:18:72"
                              },
                              {
                                "hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732061",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16178:34:72",
                                "type": "",
                                "value": "ERC20: transfer amount exceeds a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16151:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16151:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16151:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16233:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16244:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16229:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16229:18:72"
                              },
                              {
                                "hexValue": "6c6c6f77616e6365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16249:10:72",
                                "type": "",
                                "value": "llowance"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16222:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16222:38:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16222:38:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16269:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16281:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16292:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16277:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16277:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16269:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16049:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16063:4:72",
                        "type": ""
                      }
                    ],
                    "src": "15898:404:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16481:223:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16498:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16509:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16491:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16491:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16491:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16532:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16543:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16528:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16528:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16548:2:72",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16521:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16521:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16521:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16571:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16582:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16567:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16567:18:72"
                              },
                              {
                                "hexValue": "45524332303a206275726e2066726f6d20746865207a65726f20616464726573",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16587:34:72",
                                "type": "",
                                "value": "ERC20: burn from the zero addres"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16560:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16560:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16560:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16642:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16653:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16638:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16638:18:72"
                              },
                              {
                                "hexValue": "73",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16658:3:72",
                                "type": "",
                                "value": "s"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16631:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16631:31:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16631:31:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16671:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16683:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16694:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16679:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16679:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16671:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16458:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16472:4:72",
                        "type": ""
                      }
                    ],
                    "src": "16307:397:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16883:227:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16900:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16911:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16893:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16893:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16893:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16934:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16945:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16930:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16930:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16950:2:72",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16923:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16923:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16923:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16973:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16984:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16969:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16969:18:72"
                              },
                              {
                                "hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16989:34:72",
                                "type": "",
                                "value": "ERC20: transfer from the zero ad"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16962:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16962:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16962:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17044:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17055:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17040:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17040:18:72"
                              },
                              {
                                "hexValue": "6472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17060:7:72",
                                "type": "",
                                "value": "dress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17033:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17033:35:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17033:35:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17077:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17089:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17100:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17085:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17085:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17077:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16860:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16874:4:72",
                        "type": ""
                      }
                    ],
                    "src": "16709:401:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17289:225:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17306:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17317:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17299:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17299:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17299:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17340:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17351:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17336:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17336:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17356:2:72",
                                "type": "",
                                "value": "35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17329:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17329:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17329:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17379:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17390:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17375:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17375:18:72"
                              },
                              {
                                "hexValue": "5469636b65742f73746172742d656e642d74696d65732d6c656e6774682d6d61",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17395:34:72",
                                "type": "",
                                "value": "Ticket/start-end-times-length-ma"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17368:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17368:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17368:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17450:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17461:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17446:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17446:18:72"
                              },
                              {
                                "hexValue": "746368",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17466:5:72",
                                "type": "",
                                "value": "tch"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17439:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17439:33:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17439:33:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17481:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17493:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17504:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17489:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17489:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17481:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c485dc2a924c6dd174a7f3539c902d57d6264aa0653fd1afa5b4084da601fff7__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17266:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17280:4:72",
                        "type": ""
                      }
                    ],
                    "src": "17115:399:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17693:226:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17710:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17721:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17703:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17703:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17703:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17744:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17755:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17740:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17740:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17760:2:72",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17733:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17733:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17733:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17783:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17794:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17779:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17779:18:72"
                              },
                              {
                                "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17799:34:72",
                                "type": "",
                                "value": "ERC20: approve from the zero add"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17772:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17772:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17772:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17854:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17865:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17850:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17850:18:72"
                              },
                              {
                                "hexValue": "72657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17870:6:72",
                                "type": "",
                                "value": "ress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17843:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17843:34:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17843:34:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17886:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17898:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17909:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17894:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17894:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17886:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17670:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17684:4:72",
                        "type": ""
                      }
                    ],
                    "src": "17519:400:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18098:223:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18115:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18126:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18108:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18108:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18108:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18149:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18160:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18145:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18145:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18165:2:72",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18138:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18138:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18138:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18188:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18199:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18184:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18184:18:72"
                              },
                              {
                                "hexValue": "5469636b65742f64656c65676174652d696e76616c69642d7369676e61747572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18204:34:72",
                                "type": "",
                                "value": "Ticket/delegate-invalid-signatur"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18177:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18177:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18177:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18259:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18270:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18255:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18255:18:72"
                              },
                              {
                                "hexValue": "65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18275:3:72",
                                "type": "",
                                "value": "e"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18248:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18248:31:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18248:31:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18288:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18300:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18311:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18296:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18296:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18288:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d26de55e8ec40107d038a21c3ec11785680740c032de3f1a47bf117807198f53__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18075:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18089:4:72",
                        "type": ""
                      }
                    ],
                    "src": "17924:397:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18500:181:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18517:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18528:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18510:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18510:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18510:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18551:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18562:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18547:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18547:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18567:2:72",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18540:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18540:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18540:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18590:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18601:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18586:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18586:18:72"
                              },
                              {
                                "hexValue": "436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18606:33:72",
                                "type": "",
                                "value": "ControlledToken/only-controller"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18579:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18579:61:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18579:61:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18649:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18661:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18672:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18657:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18657:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18649:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ef56e6eb544946d3498735fdd4428248a65a688b6ca702fa3dbce5b90141cb35__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18477:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18491:4:72",
                        "type": ""
                      }
                    ],
                    "src": "18326:355:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18860:227:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18877:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18888:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18870:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18870:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18870:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18911:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18922:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18907:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18907:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18927:2:72",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18900:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18900:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18900:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18950:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18961:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18946:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18946:18:72"
                              },
                              {
                                "hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18966:34:72",
                                "type": "",
                                "value": "ERC20: decreased allowance below"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18939:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18939:62:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18939:62:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19021:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19032:2:72",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19017:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19017:18:72"
                              },
                              {
                                "hexValue": "207a65726f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19037:7:72",
                                "type": "",
                                "value": " zero"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19010:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19010:35:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19010:35:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19054:27:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19066:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19077:3:72",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19062:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19062:19:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19054:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18837:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18851:4:72",
                        "type": ""
                      }
                    ],
                    "src": "18686:401:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19266:181:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19283:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19294:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19276:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19276:21:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19276:21:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19317:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19328:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19313:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19313:18:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19333:2:72",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19306:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19306:30:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19306:30:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19356:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19367:2:72",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19352:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19352:18:72"
                              },
                              {
                                "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19372:33:72",
                                "type": "",
                                "value": "ERC20: mint to the zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19345:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19345:61:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19345:61:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19415:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19427:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19438:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19423:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19423:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19415:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19243:9:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19257:4:72",
                        "type": ""
                      }
                    ],
                    "src": "19092:355:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19617:356:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19627:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19639:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19650:2:72",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19635:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19635:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19627:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19669:9:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "19690:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "19684:5:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19684:13:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19699:54:72",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19680:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19680:74:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19662:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19662:93:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19662:93:72"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19764:44:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "19794:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19802:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19790:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19790:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19784:5:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19784:24:72"
                          },
                          "variables": [
                            {
                              "name": "memberValue0",
                              "nodeType": "YulTypedName",
                              "src": "19768:12:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19817:18:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19827:8:72",
                            "type": "",
                            "value": "0xffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "19821:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19855:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19866:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19851:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19851:20:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "memberValue0",
                                    "nodeType": "YulIdentifier",
                                    "src": "19877:12:72"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "19891:2:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19873:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19873:21:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19844:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19844:51:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19844:51:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19915:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19926:4:72",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19911:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19911:20:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "19947:6:72"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "19955:4:72",
                                            "type": "",
                                            "value": "0x40"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "19943:3:72"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "19943:17:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "19937:5:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19937:24:72"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "19963:2:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19933:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19933:33:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19904:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19904:63:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19904:63:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_AccountDetails_$9631_memory_ptr__to_t_struct$_AccountDetails_$9631_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19586:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19597:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19608:4:72",
                        "type": ""
                      }
                    ],
                    "src": "19452:521:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20137:228:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20147:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20159:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20170:2:72",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20155:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20155:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20147:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20189:9:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "20210:6:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "20204:5:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20204:13:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20219:58:72",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20200:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20200:78:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20182:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20182:97:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20182:97:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20299:9:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20310:4:72",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20295:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20295:20:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "20331:6:72"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "20339:4:72",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "20327:3:72"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "20327:17:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "20321:5:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20321:24:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20347:10:72",
                                    "type": "",
                                    "value": "0xffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20317:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20317:41:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20288:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20288:71:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20288:71:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_Observation_$9212_memory_ptr__to_t_struct$_Observation_$9212_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20106:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20117:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20128:4:72",
                        "type": ""
                      }
                    ],
                    "src": "19978:387:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20471:76:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20481:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20493:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20504:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20489:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20489:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20481:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20523:9:72"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20534:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20516:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20516:25:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20516:25:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20440:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20451:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20462:4:72",
                        "type": ""
                      }
                    ],
                    "src": "20370:177:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20649:87:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20659:26:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20671:9:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20682:2:72",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20667:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20667:18:72"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20659:4:72"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20701:9:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "20716:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20724:4:72",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20712:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20712:17:72"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20694:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20694:36:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20694:36:72"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20618:9:72",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20629:6:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20640:4:72",
                        "type": ""
                      }
                    ],
                    "src": "20552:184:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20789:225:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20799:64:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20809:54:72",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "20803:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20872:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "20887:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "20890:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "20883:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20883:10:72"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "20876:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20902:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "20917:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "20920:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "20913:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20913:10:72"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "20906:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20957:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "20959:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20959:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20959:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "20938:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20947:2:72"
                                  },
                                  {
                                    "name": "y_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20951:3:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "20943:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20943:12:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "20935:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20935:21:72"
                          },
                          "nodeType": "YulIf",
                          "src": "20932:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20988:20:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "20999:3:72"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "21004:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20995:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20995:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "20988:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint208",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "20772:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "20775:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "20781:3:72",
                        "type": ""
                      }
                    ],
                    "src": "20741:273:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21067:229:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21077:68:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21087:58:72",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "21081:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21154:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "21169:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "21172:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "21165:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21165:10:72"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "21158:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21184:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "21199:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "21202:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "21195:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21195:10:72"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "21188:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21239:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "21241:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21241:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21241:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "21220:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21229:2:72"
                                  },
                                  {
                                    "name": "y_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21233:3:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "21225:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21225:12:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "21217:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21217:21:72"
                          },
                          "nodeType": "YulIf",
                          "src": "21214:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21270:20:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "21281:3:72"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "21286:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21277:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21277:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "21270:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint224",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "21050:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "21053:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "21059:3:72",
                        "type": ""
                      }
                    ],
                    "src": "21019:277:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21348:179:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21358:18:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21368:8:72",
                            "type": "",
                            "value": "0xffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "21362:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21385:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "21400:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "21403:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "21396:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21396:10:72"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "21389:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21415:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "21430:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "21433:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "21426:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21426:10:72"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "21419:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21470:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "21472:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21472:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21472:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "21451:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21460:2:72"
                                  },
                                  {
                                    "name": "y_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21464:3:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "21456:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21456:12:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "21448:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21448:21:72"
                          },
                          "nodeType": "YulIf",
                          "src": "21445:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21501:20:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "21512:3:72"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "21517:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21508:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21508:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "21501:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint24",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "21331:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "21334:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "21340:3:72",
                        "type": ""
                      }
                    ],
                    "src": "21301:226:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21580:80:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21607:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "21609:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21609:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21609:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "21596:1:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "21603:1:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "21599:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21599:6:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "21593:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21593:13:72"
                          },
                          "nodeType": "YulIf",
                          "src": "21590:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21638:16:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "21649:1:72"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "21652:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21645:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21645:9:72"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "21638:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "21563:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "21566:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "21572:3:72",
                        "type": ""
                      }
                    ],
                    "src": "21532:128:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21712:183:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21722:22:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21732:12:72",
                            "type": "",
                            "value": "0xffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "21726:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21753:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "21768:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "21771:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "21764:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21764:10:72"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "21757:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21783:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "21798:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "21801:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "21794:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21794:10:72"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "21787:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21838:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "21840:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21840:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21840:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "21819:3:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21828:2:72"
                                  },
                                  {
                                    "name": "y_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21832:3:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "21824:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21824:12:72"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "21816:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21816:21:72"
                          },
                          "nodeType": "YulIf",
                          "src": "21813:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21869:20:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "21880:3:72"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "21885:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21876:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21876:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "21869:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint40",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "21695:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "21698:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "21704:3:72",
                        "type": ""
                      }
                    ],
                    "src": "21665:230:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21946:194:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21956:68:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21966:58:72",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "21960:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22033:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "22048:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "22051:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "22044:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22044:10:72"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "22037:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22078:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "22080:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22080:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22080:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "22073:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "22066:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22066:11:72"
                          },
                          "nodeType": "YulIf",
                          "src": "22063:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22109:25:72",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "22122:1:72"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22125:2:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22118:3:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22118:10:72"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "22130:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "22114:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22114:20:72"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "22109:1:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint224",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "21931:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "21934:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "21940:1:72",
                        "type": ""
                      }
                    ],
                    "src": "21900:240:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22191:74:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22214:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "22216:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22216:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22216:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "22211:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "22204:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22204:9:72"
                          },
                          "nodeType": "YulIf",
                          "src": "22201:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22245:14:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "22254:1:72"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "22257:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "22250:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22250:9:72"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "22245:1:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "22176:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "22179:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "22185:1:72",
                        "type": ""
                      }
                    ],
                    "src": "22145:120:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22322:259:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22332:68:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22342:58:72",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "22336:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22409:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "22424:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "22427:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "22420:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22420:10:72"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "22413:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22439:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "22454:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "22457:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "22450:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22450:10:72"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "22443:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22520:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "22522:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22522:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22522:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "22490:3:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "22483:6:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "22483:11:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "22476:6:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22476:19:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22500:3:72"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "22509:2:72"
                                      },
                                      {
                                        "name": "x_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "22513:3:72"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "22505:3:72"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "22505:12:72"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "22497:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22497:21:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "22472:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22472:47:72"
                          },
                          "nodeType": "YulIf",
                          "src": "22469:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22551:24:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "22566:3:72"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "22571:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "22562:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22562:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "22551:7:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint224",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "22301:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "22304:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "22310:7:72",
                        "type": ""
                      }
                    ],
                    "src": "22270:311:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22635:217:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22645:64:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22655:54:72",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "22649:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22718:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "22733:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "22736:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "22729:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22729:10:72"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "22722:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22748:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "22763:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "22766:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "22759:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22759:10:72"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "22752:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22794:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "22796:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22796:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22796:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "22784:3:72"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "22789:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "22781:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22781:12:72"
                          },
                          "nodeType": "YulIf",
                          "src": "22778:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22825:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "22837:3:72"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "22842:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "22833:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22833:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "22825:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint208",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "22617:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "22620:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "22626:4:72",
                        "type": ""
                      }
                    ],
                    "src": "22586:266:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22906:221:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22916:68:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22926:58:72",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "22920:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22993:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "23008:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "23011:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "23004:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23004:10:72"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "22997:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23023:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "23038:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "23041:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "23034:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23034:10:72"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "23027:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23069:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "23071:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23071:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23071:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "23059:3:72"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "23064:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "23056:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23056:12:72"
                          },
                          "nodeType": "YulIf",
                          "src": "23053:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23100:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "23112:3:72"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "23117:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "23108:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23108:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "23100:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint224",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "22888:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "22891:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "22897:4:72",
                        "type": ""
                      }
                    ],
                    "src": "22857:270:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23181:76:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23203:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "23205:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23205:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23205:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "23197:1:72"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "23200:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "23194:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23194:8:72"
                          },
                          "nodeType": "YulIf",
                          "src": "23191:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23234:17:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "23246:1:72"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "23249:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "23242:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23242:9:72"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "23234:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "23163:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "23166:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "23172:4:72",
                        "type": ""
                      }
                    ],
                    "src": "23132:125:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23310:173:72",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23320:20:72",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23330:10:72",
                            "type": "",
                            "value": "0xffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "23324:2:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23349:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "23364:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "23367:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "23360:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23360:10:72"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "23353:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23379:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "23394:1:72"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "23397:2:72"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "23390:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23390:10:72"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "23383:3:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23425:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "23427:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23427:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23427:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "23415:3:72"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "23420:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "23412:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23412:12:72"
                          },
                          "nodeType": "YulIf",
                          "src": "23409:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23456:21:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "23468:3:72"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "23473:3:72"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "23464:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23464:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "23456:4:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "23292:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "23295:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "23301:4:72",
                        "type": ""
                      }
                    ],
                    "src": "23262:221:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23543:382:72",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "23553:22:72",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23567:1:72",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "23570:4:72"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "23563:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23563:12:72"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "23553:6:72"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23584:38:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "23614:4:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23620:1:72",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "23610:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23610:12:72"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "23588:18:72",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23661:31:72",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "23663:27:72",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "23677:6:72"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23685:4:72",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "23673:3:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23673:17:72"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "23663:6:72"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "23641:18:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "23634:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23634:26:72"
                          },
                          "nodeType": "YulIf",
                          "src": "23631:2:72"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23751:168:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23772:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23775:77:72",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "23765:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23765:88:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23765:88:72"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23873:1:72",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23876:4:72",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "23866:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23866:15:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23866:15:72"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23901:1:72",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23904:4:72",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "23894:6:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23894:15:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23894:15:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "23707:18:72"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "23730:6:72"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23738:2:72",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "23727:2:72"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23727:14:72"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "23704:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23704:38:72"
                          },
                          "nodeType": "YulIf",
                          "src": "23701:2:72"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "23523:4:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "23532:6:72",
                        "type": ""
                      }
                    ],
                    "src": "23488:437:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23977:148:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "24068:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "24070:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "24070:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "24070:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "23993:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24000:66:72",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "23990:2:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23990:77:72"
                          },
                          "nodeType": "YulIf",
                          "src": "23987:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24099:20:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "24110:5:72"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24117:1:72",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24106:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24106:13:72"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "24099:3:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "23959:5:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "23969:3:72",
                        "type": ""
                      }
                    ],
                    "src": "23930:195:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24168:74:72",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "24191:22:72",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "24193:16:72"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "24193:18:72"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "24193:18:72"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "24188:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "24181:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24181:9:72"
                          },
                          "nodeType": "YulIf",
                          "src": "24178:2:72"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24222:14:72",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "24231:1:72"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "24234:1:72"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "24227:3:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24227:9:72"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "24222:1:72"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "24153:1:72",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "24156:1:72",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "24162:1:72",
                        "type": ""
                      }
                    ],
                    "src": "24130:112:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24279:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24296:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24299:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24289:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24289:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24289:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24393:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24396:4:72",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24386:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24386:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24386:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24417:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24420:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "24410:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24410:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24410:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "24247:184:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24468:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24485:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24488:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24478:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24478:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24478:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24582:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24585:4:72",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24575:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24575:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24575:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24606:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24609:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "24599:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24599:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24599:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "24436:184:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24657:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24674:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24677:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24667:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24667:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24667:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24771:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24774:4:72",
                                "type": "",
                                "value": "0x21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24764:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24764:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24764:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24795:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24798:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "24788:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24788:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24788:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x21",
                    "nodeType": "YulFunctionDefinition",
                    "src": "24625:184:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24846:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24863:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24866:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24856:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24856:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24856:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24960:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24963:4:72",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24953:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24953:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24953:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24984:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24987:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "24977:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24977:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24977:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "24814:184:72"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25035:152:72",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25052:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25055:77:72",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25045:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25045:88:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25045:88:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25149:1:72",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25152:4:72",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25142:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25142:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25142:15:72"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25173:1:72",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25176:4:72",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "25166:6:72"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25166:15:72"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25166:15:72"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "25003:184:72"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_array_uint64_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_uint64(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := abi_decode_uint8(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_uint8(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint64_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_uint64_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint64_$dyn_calldata_ptrt_array$_t_uint64_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_uint64_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_array_uint64_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_decode_tuple_t_addresst_uint16(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_uint64(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_uint64(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_uint64t_uint64(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_uint64(add(headStart, 32))\n        value2 := abi_decode_uint64(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_array$_t_uint64_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_uint64_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_decode_tuple_t_array$_t_uint64_$dyn_calldata_ptrt_array$_t_uint64_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_uint64_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint64_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, 0x1901000000000000000000000000000000000000000000000000000000000000)\n        mstore(add(pos, 2), value0)\n        mstore(add(pos, 34), value1)\n        end := add(pos, 66)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_39ab2e4ed03130f2bab737445eefa0170013f2d5d6416c5398200851ee691d09__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ticket/delegate-expired-deadline\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20Permit: expired deadline\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 2\")\n        mstore(add(headStart, 96), \"08 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 'v' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"ERC20Permit: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds a\")\n        mstore(add(headStart, 96), \"llowance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c485dc2a924c6dd174a7f3539c902d57d6264aa0653fd1afa5b4084da601fff7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Ticket/start-end-times-length-ma\")\n        mstore(add(headStart, 96), \"tch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d26de55e8ec40107d038a21c3ec11785680740c032de3f1a47bf117807198f53__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Ticket/delegate-invalid-signatur\")\n        mstore(add(headStart, 96), \"e\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ef56e6eb544946d3498735fdd4428248a65a688b6ca702fa3dbce5b90141cb35__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ControlledToken/only-controller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_AccountDetails_$9631_memory_ptr__to_t_struct$_AccountDetails_$9631_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(mload(value0), 0xffffffffffffffffffffffffffffffffffffffffffffffffffff))\n        let memberValue0 := mload(add(value0, 0x20))\n        let _1 := 0xffffff\n        mstore(add(headStart, 0x20), and(memberValue0, _1))\n        mstore(add(headStart, 0x40), and(mload(add(value0, 0x40)), _1))\n    }\n    function abi_encode_tuple_t_struct$_Observation_$9212_memory_ptr__to_t_struct$_Observation_$9212_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(mload(value0), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), 0xffffffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint208(x, y) -> sum\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if gt(x_1, sub(_1, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function checked_add_t_uint224(x, y) -> sum\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if gt(x_1, sub(_1, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function checked_add_t_uint24(x, y) -> sum\n    {\n        let _1 := 0xffffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if gt(x_1, sub(_1, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_add_t_uint40(x, y) -> sum\n    {\n        let _1 := 0xffffffffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if gt(x_1, sub(_1, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function checked_div_t_uint224(x, y) -> r\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        let y_1 := and(y, _1)\n        if iszero(y_1) { panic_error_0x12() }\n        r := div(and(x, _1), y_1)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint224(x, y) -> product\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if and(iszero(iszero(x_1)), gt(y_1, div(_1, x_1))) { panic_error_0x11() }\n        product := mul(x_1, y_1)\n    }\n    function checked_sub_t_uint208(x, y) -> diff\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if lt(x_1, y_1) { panic_error_0x11() }\n        diff := sub(x_1, y_1)\n    }\n    function checked_sub_t_uint224(x, y) -> diff\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if lt(x_1, y_1) { panic_error_0x11() }\n        diff := sub(x_1, y_1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_sub_t_uint32(x, y) -> diff\n    {\n        let _1 := 0xffffffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if lt(x_1, y_1) { panic_error_0x11() }\n        diff := sub(x_1, y_1)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
              "id": 72,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {
            "716": [
              {
                "length": 32,
                "start": 4089
              }
            ],
            "2017": [
              {
                "length": 32,
                "start": 5556
              }
            ],
            "2019": [
              {
                "length": 32,
                "start": 5515
              }
            ],
            "2021": [
              {
                "length": 32,
                "start": 5639
              }
            ],
            "2023": [
              {
                "length": 32,
                "start": 5676
              }
            ],
            "2025": [
              {
                "length": 32,
                "start": 5597
              }
            ],
            "3088": [
              {
                "length": 32,
                "start": 795
              }
            ],
            "6818": [
              {
                "length": 32,
                "start": 3284
              }
            ]
          },
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106101e55760003560e01c806368c7fd571161010f57806395d89b41116100a2578063a9059cbb11610071578063a9059cbb1461052e578063d505accf14610541578063dd62ed3e14610554578063f77c47911461058d57600080fd5b806395d89b41146104ed57806398b16f36146104f55780639ecb037014610508578063a457c2d71461051b57600080fd5b80638d22ea2a116100de5780638d22ea2a1461046d5780638e6d536a146104b457806390596dd1146104c7578063919974dc146104da57600080fd5b806368c7fd571461040b57806370a082311461041e5780637ecebe001461044757806385beb5f11461045a57600080fd5b806333e39b61116101875780635c19a95c116101565780635c19a95c146103b25780635d7b0758146103c5578063613ed6bd146103d8578063631b5dfb146103f857600080fd5b806333e39b61146103455780633644e5151461035a57806336bb2a3814610362578063395093511461039f57600080fd5b806323b872dd116101c357806323b872dd1461023d5780632aceb534146102505780632d0dd68614610301578063313ce5671461031457600080fd5b806306fdde03146101ea578063095ea7b31461020857806318160ddd1461022b575b600080fd5b6101f26105a0565b6040516101ff91906132fe565b60405180910390f35b61021b61021636600461315a565b610632565b60405190151581526020016101ff565b6002545b6040519081526020016101ff565b61021b61024b366004612f43565b610649565b6102c961025e366004612ef5565b6040805160608082018352600080835260208084018290529284018190526001600160a01b03949094168452600782529282902082519384018352546001600160d01b038116845262ffffff600160d01b8204811692850192909252600160e81b9004169082015290565b6040805182516001600160d01b0316815260208084015162ffffff9081169183019190915292820151909216908201526060016101ff565b61022f61030f36600461329f565b61070f565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101ff565b610358610353366004612f10565b61075b565b005b61022f6107c3565b61037561037036600461311c565b6107d2565b6040805182516001600160e01b0316815260209283015163ffffffff1692810192909252016101ff565b61021b6103ad36600461315a565b61084a565b6103586103c0366004612ef5565b610886565b6103586103d336600461315a565b610893565b6103eb6103e6366004613048565b6108f7565b6040516101ff91906132ba565b610358610406366004612f43565b610a13565b6103eb61041936600461309b565b610ace565b61022f61042c366004612ef5565b6001600160a01b031660009081526020819052604090205490565b61022f610455366004612ef5565b610b00565b6103eb6104683660046131f1565b610b1e565b61049c61047b366004612ef5565b6001600160a01b039081166000908152630100000860205260409020541690565b6040516001600160a01b0390911681526020016101ff565b6103eb6104c2366004613233565b610c01565b6103586104d536600461315a565b610c1c565b6103586104e8366004612fe9565b610c80565b6101f2610e00565b61022f6105033660046131ae565b610e0f565b61022f610516366004613184565b610e80565b61021b61052936600461315a565b610ee7565b61021b61053c36600461315a565b610f98565b61035861054f366004612f7f565b610fa5565b61022f610562366004612f10565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60065461049c906001600160a01b031681565b6060600380546105af906134db565b80601f01602080910402602001604051908101604052809291908181526020018280546105db906134db565b80156106285780601f106105fd57610100808354040283529160200191610628565b820191906000526020600020905b81548152906001019060200180831161060b57829003601f168201915b5050505050905090565b600061063f338484611109565b5060015b92915050565b6000610656848484611261565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106f55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6107028533858403611109565b60019150505b9392505050565b604080516060810182526008546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b9091041691810191909152600090610643906009908442611485565b6006546001600160a01b031633146107b55760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf82826114b1565b5050565b60006107cd611587565b905090565b60408051808201909152600080825260208201526001600160a01b038316600090815260076020526040902060010161ffff831662ffffff81106108185761081861359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201529392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161063f9185906108819086906133be565b611109565b61089033826114b1565b50565b6006546001600160a01b031633146108ed5760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf828261167a565b60608160008167ffffffffffffffff811115610915576109156135b5565b60405190808252806020026020018201604052801561093e578160200160208202803683370190505b506001600160a01b0387166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b900490931691830191909152929350905b84811015610a06576109d783600101838a8a858181106109bc576109bc61359f565b90506020020160208101906109d1919061329f565b42611485565b8482815181106109e9576109e961359f565b6020908102919091010152806109fe81613510565b91505061099a565b5091979650505050505050565b6006546001600160a01b03163314610a6d5760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b816001600160a01b0316836001600160a01b031614610abf576001600160a01b03828116600090815260016020908152604080832093871683529290522054610abf90839085906108819085906134a7565b610ac98282611765565b505050565b6001600160a01b0385166000908152600760205260409020606090610af690868686866118f6565b9695505050505050565b6001600160a01b038116600090815260056020526040812054610643565b60608160008167ffffffffffffffff811115610b3c57610b3c6135b5565b604051908082528060200260200182016040528015610b65578160200160208202803683370190505b50604080516060810182526008546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915290915060005b83811015610bf657610bc76009838989858181106109bc576109bc61359f565b838281518110610bd957610bd961359f565b602090810291909101015280610bee81613510565b915050610ba7565b509095945050505050565b6060610c116008868686866118f6565b90505b949350505050565b6006546001600160a01b03163314610c765760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf8282611765565b83421115610cd05760405162461bcd60e51b815260206004820181905260248201527f5469636b65742f64656c65676174652d657870697265642d646561646c696e6560448201526064016106ec565b60007f00000000000000000000000000000000000000000000000000000000000000008787610cfe8a611a93565b6040805160208101959095526001600160a01b039384169085015291166060830152608082015260a0810186905260c0016040516020818303038152906040528051906020012090506000610d5282611abb565b90506000610d6282878787611b24565b9050886001600160a01b0316816001600160a01b031614610deb5760405162461bcd60e51b815260206004820152602160248201527f5469636b65742f64656c65676174652d696e76616c69642d7369676e6174757260448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b610df589896114b1565b505050505050505050565b6060600480546105af906134db565b6001600160a01b0383166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b90049093169183019190915290610e77906001830190868642611b4c565b95945050505050565b6001600160a01b0382166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b90049093169183019190915290610c149060018301908542611485565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610f815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106ec565b610f8e3385858403611109565b5060019392505050565b600061063f338484611261565b83421115610ff55760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016106ec565b60007f00000000000000000000000000000000000000000000000000000000000000008888886110248c611a93565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061107f82611abb565b9050600061108f82878787611b24565b9050896001600160a01b0316816001600160a01b0316146110f25760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016106ec565b6110fd8a8a8a611109565b50505050505050505050565b6001600160a01b0383166111845760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0382166112005760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166112dd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0382166113595760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b611364838383611b84565b6001600160a01b038316600090815260208190526040902054818110156113f35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061142a9084906133be565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161147691815260200190565b60405180910390a35b50505050565b6000808263ffffffff168463ffffffff16116114a157836114a3565b825b9050610af686868386611c17565b6001600160a01b038281166000908152602081815260408083205463010000089092529091205490919081169083168114156114ed5750505050565b6001600160a01b03848116600090815263010000086020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918516919091179055611541818484611d30565b826001600160a01b0316846001600160a01b03167f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea260405160405180910390a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156115d657507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b0382166116d05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106ec565b6116dc60008383611b84565b80600260008282546116ee91906133be565b90915550506001600160a01b0382166000908152602081905260408120805483929061171b9084906133be565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166117e15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6117ed82600083611b84565b6001600160a01b0382166000908152602081905260409020548181101561187c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b03831660009081526020819052604081208383039055600280548492906118ab9084906134a7565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b606083821461196d5760405162461bcd60e51b815260206004820152602360248201527f5469636b65742f73746172742d656e642d74696d65732d6c656e6774682d6d6160448201527f746368000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6040805160608101825287546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915260008567ffffffffffffffff8111156119c2576119c26135b5565b6040519080825280602002602001820160405280156119eb578160200160208202803683370190505b5090504260005b87811015611a8557611a568a600101858b8b85818110611a1457611a1461359f565b9050602002016020810190611a29919061329f565b8a8a86818110611a3b57611a3b61359f565b9050602002016020810190611a50919061329f565b86611b4c565b838281518110611a6857611a6861359f565b602090810291909101015280611a7d81613510565b9150506119f2565b509098975050505050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6000610643611ac8611587565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611b3587878787611dc1565b91509150611b4281611eae565b5095945050505050565b6000808263ffffffff168463ffffffff1611611b685783611b6a565b825b9050611b79878787848761209f565b979650505050505050565b816001600160a01b0316836001600160a01b03161415611ba357505050565b60006001600160a01b03841615611bd457506001600160a01b03808416600090815263010000086020526040902054165b60006001600160a01b03841615611c0557506001600160a01b03808416600090815263010000086020526040902054165b611c10828285611d30565b5050505050565b604080518082019091526000808252602082018190529081906040805180820190915260008082526020820152611c4e888861213b565b60208101519194509150611c6f9063ffffffff90811690889088906121bb16565b15611c8a57505084516001600160d01b03169150610c149050565b6000611c96898961228c565b6020810151909350909150611cb79063ffffffff808a169190899061230916565b15611cc9576000945050505050610c14565b611cdb8985838a8c604001518b6123d8565b8094508193505050611cf683602001518360200151886125a5565b63ffffffff1682600001518460000151611d109190613487565b611d1a91906133f6565b6001600160e01b03169998505050505050505050565b6001600160a01b038316158015611d4f57506001600160a01b03821615155b15611d6257611d5d8161266f565b611d8f565b6001600160a01b03831615801590611d8157506001600160a01b038216155b15611d8f57611d8f8161276f565b6001600160a01b03831615611da857611da883826127a9565b6001600160a01b03821615610ac957610ac982826128e1565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611df85750600090506003611ea5565b8460ff16601b14158015611e1057508460ff16601c14155b15611e215750600090506004611ea5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611e75573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611e9e57600060019250925050611ea5565b9150600090505b94509492505050565b6000816004811115611ec257611ec2613589565b1415611ecb5750565b6001816004811115611edf57611edf613589565b1415611f2d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106ec565b6002816004811115611f4157611f41613589565b1415611f8f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106ec565b6003816004811115611fa357611fa3613589565b14156120175760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b600481600481111561202b5761202b613589565b14156108905760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b60008060006120ae888861228c565b915091506000806120bf8a8a61213b565b9150915060006120d58b8b8487878a8f8e612912565b905060006120e98c8c8588888b8f8f612912565b90506120fe816020015183602001518a6125a5565b63ffffffff16826000015182600001516121189190613487565b61212291906133f6565b6001600160e01b03169c9b505050505050505050505050565b604080518082019091526000808252602082018190529061216a836020015162ffffff1662ffffff8016612a5c565b9150838262ffffff1662ffffff81106121855761218561359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820152919491935090915050565b60008163ffffffff168463ffffffff16111580156121e557508163ffffffff168363ffffffff1611155b15612201578263ffffffff168463ffffffff1611159050610708565b60008263ffffffff168563ffffffff16116122305761222b63ffffffff86166401000000006133d6565b612238565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116122705761226b63ffffffff86166401000000006133d6565b612278565b8463ffffffff165b64ffffffffff169091111595945050505050565b604080518082019091526000808252602082018190529082602001519150838262ffffff1662ffffff81106122c3576122c361359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820181905290915061230257600091508382612185565b9250929050565b60008163ffffffff168463ffffffff161115801561233357508163ffffffff168363ffffffff1611155b1561234e578263ffffffff168463ffffffff16109050610708565b60008263ffffffff168563ffffffff161161237d5761237863ffffffff86166401000000006133d6565b612385565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116123bd576123b863ffffffff86166401000000006133d6565b6123c5565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008662ffffff1690506000818962ffffff1610612423578862ffffff1661243e565b600161243462ffffff8816846133be565b61243e91906134a7565b905060005b600261244f83856133be565b612459919061341c565b90508a61246b828962ffffff16612a86565b62ffffff1662ffffff81106124825761248261359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909550806124ca576124c28260016133be565b935050612443565b8b6124da838a62ffffff16612a92565b62ffffff1662ffffff81106124f1576124f161359f565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b9091048116602083015290955060009061253690838116908c908b906121bb16565b905080801561255f575061255f8660200151898c63ffffffff166121bb9092919063ffffffff16565b1561256b575050612597565b806125825761257b6001846134a7565b9350612590565b61258d8360016133be565b94505b5050612443565b505050965096945050505050565b60008163ffffffff168463ffffffff16111580156125cf57508163ffffffff168363ffffffff1611155b156125e5576125de83856134be565b9050610708565b60008263ffffffff168563ffffffff16116126145761260f63ffffffff86166401000000006133d6565b61261c565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116126545761264f63ffffffff86166401000000006133d6565b61265c565b8463ffffffff165b64ffffffffff169050610af681836134a7565b806126775750565b6000806000612690600861268a86612aa2565b42612b25565b825160088054602086015160408701516001600160d01b039094167fffffff000000000000000000000000000000000000000000000000000000000090921691909117600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b919093160291909117905591945092509050801561147f576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a150505050565b806127775750565b6000806000612690600861278a86612aa2565b6040518060600160405280602c81526020016135ee602c913942612bce565b806127b2575050565b6001600160a01b03821660009081526007602052604081209080806127f9846127da87612aa2565b6040518060600160405280602281526020016135cc6022913942612bce565b82518754602085015160408601516001600160d01b039093167fffffff000000000000000000000000000000000000000000000000000000000090921691909117600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b91909216021787559194509250905080156128d9576040805183516001600160e01b0316815260208085015163ffffffff16908201526001600160a01b038816917fdd3e7cd3a260a292b0b3306b2ca62f30a7349619a9d09c58109318774c6b627d910160405180910390a25b505050505050565b806128ea575050565b6001600160a01b03821660009081526007602052604081209080806127f98461268a87612aa2565b60408051808201909152600080825260208201526129458383896020015163ffffffff166123099092919063ffffffff16565b15612969576129628789600001516001600160d01b031685612ca1565b9050612a50565b8263ffffffff16876020015163ffffffff161415612988575085612a50565b8263ffffffff16866020015163ffffffff1614156129a7575084612a50565b6129c68660200151838563ffffffff166123099092919063ffffffff16565b156129eb5750604080518082019091526000815263ffffffff83166020820152612a50565b600080612a008b8888888e60400151896123d8565b915091506000612a1982602001518460200151876125a5565b63ffffffff1683600001518360000151612a339190613487565b612a3d91906133f6565b9050612a4a838288612ca1565b93505050505b98975050505050505050565b600081612a6b57506000610643565b6107086001612a7a84866133be565b612a8491906134a7565b835b60006107088284613549565b6000610708612a848460016133be565b60006001600160d01b03821115612b215760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f303820626974730000000000000000000000000000000000000000000000000060648201526084016106ec565b5090565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825286546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b9091041691810191909152600090612ba1600188018287612d1c565b83519296509094509250612bb6908790613353565b6001600160d01b031684525091959094509092509050565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825287546001600160d01b0380821680845262ffffff600160d01b840481166020860152600160e81b9093049092169383019390935260009287919089161115612c645760405162461bcd60e51b81526004016106ec91906132fe565b50612c73886001018287612d1c565b83519296509094509250612c8890889061345f565b6001600160d01b03168452509196909550909350915050565b60408051808201909152600080825260208201526040518060400160405280612cdf8660200151858663ffffffff166125a59092919063ffffffff16565b612cef9063ffffffff1686613430565b8651612cfb919061337e565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b60408051606081018252600080825260208201819052918101919091526040805180820190915260008082526020820152600080612d5a878761213b565b9150508463ffffffff16816020015163ffffffff161415612d8357859350915060009050612dfa565b6000612d9d8288600001516001600160d01b031688612ca1565b90508088886020015162ffffff1662ffffff8110612dbd57612dbd61359f565b825160209093015163ffffffff16600160e01b026001600160e01b03909316929092179101556000612dee88612e03565b95509093506001925050505b93509350939050565b60408051606081018252600080825260208083018290529282015290820151612e339062ffffff90811690612a92565b62ffffff9081166020840152604083015181161015612b2157600182604001818151612e5f91906133a0565b62ffffff169052505090565b80356001600160a01b0381168114612e8257600080fd5b919050565b60008083601f840112612e9957600080fd5b50813567ffffffffffffffff811115612eb157600080fd5b6020830191508360208260051b850101111561230257600080fd5b803567ffffffffffffffff81168114612e8257600080fd5b803560ff81168114612e8257600080fd5b600060208284031215612f0757600080fd5b61070882612e6b565b60008060408385031215612f2357600080fd5b612f2c83612e6b565b9150612f3a60208401612e6b565b90509250929050565b600080600060608486031215612f5857600080fd5b612f6184612e6b565b9250612f6f60208501612e6b565b9150604084013590509250925092565b600080600080600080600060e0888a031215612f9a57600080fd5b612fa388612e6b565b9650612fb160208901612e6b565b95506040880135945060608801359350612fcd60808901612ee4565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060c0878903121561300257600080fd5b61300b87612e6b565b955061301960208801612e6b565b94506040870135935061302e60608801612ee4565b92506080870135915060a087013590509295509295509295565b60008060006040848603121561305d57600080fd5b61306684612e6b565b9250602084013567ffffffffffffffff81111561308257600080fd5b61308e86828701612e87565b9497909650939450505050565b6000806000806000606086880312156130b357600080fd5b6130bc86612e6b565b9450602086013567ffffffffffffffff808211156130d957600080fd5b6130e589838a01612e87565b909650945060408801359150808211156130fe57600080fd5b5061310b88828901612e87565b969995985093965092949392505050565b6000806040838503121561312f57600080fd5b61313883612e6b565b9150602083013561ffff8116811461314f57600080fd5b809150509250929050565b6000806040838503121561316d57600080fd5b61317683612e6b565b946020939093013593505050565b6000806040838503121561319757600080fd5b6131a083612e6b565b9150612f3a60208401612ecc565b6000806000606084860312156131c357600080fd5b6131cc84612e6b565b92506131da60208501612ecc565b91506131e860408501612ecc565b90509250925092565b6000806020838503121561320457600080fd5b823567ffffffffffffffff81111561321b57600080fd5b61322785828601612e87565b90969095509350505050565b6000806000806040858703121561324957600080fd5b843567ffffffffffffffff8082111561326157600080fd5b61326d88838901612e87565b9096509450602087013591508082111561328657600080fd5b5061329387828801612e87565b95989497509550505050565b6000602082840312156132b157600080fd5b61070882612ecc565b6020808252825182820181905260009190848201906040850190845b818110156132f2578351835292840192918401916001016132d6565b50909695505050505050565b600060208083528351808285015260005b8181101561332b5785810183015185820160400152820161330f565b8181111561333d576000604083870101525b50601f01601f1916929092016040019392505050565b60006001600160d01b038083168185168083038211156133755761337561355d565b01949350505050565b60006001600160e01b038083168185168083038211156133755761337561355d565b600062ffffff8083168185168083038211156133755761337561355d565b600082198211156133d1576133d161355d565b500190565b600064ffffffffff8083168185168083038211156133755761337561355d565b60006001600160e01b038084168061341057613410613573565b92169190910492915050565b60008261342b5761342b613573565b500490565b60006001600160e01b03808316818516818304811182151516156134565761345661355d565b02949350505050565b60006001600160d01b038381169083168181101561347f5761347f61355d565b039392505050565b60006001600160e01b038381169083168181101561347f5761347f61355d565b6000828210156134b9576134b961355d565b500390565b600063ffffffff8381169083168181101561347f5761347f61355d565b600181811c908216806134ef57607f821691505b60208210811415611ab557634e487b7160e01b600052602260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135425761354261355d565b5060010190565b60008261355857613558613573565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63655469636b65742f6275726e2d616d6f756e742d657863656564732d746f74616c2d737570706c792d74776162a26469706673582212207222193ed5d2d8f5956c3459884b91b0e3292657da8569928c1d5de06432574764736f6c63430008060033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x68C7FD57 GT PUSH2 0x10F JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x52E JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x541 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x554 JUMPI DUP1 PUSH4 0xF77C4791 EQ PUSH2 0x58D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0x98B16F36 EQ PUSH2 0x4F5 JUMPI DUP1 PUSH4 0x9ECB0370 EQ PUSH2 0x508 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x51B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8D22EA2A GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x8D22EA2A EQ PUSH2 0x46D JUMPI DUP1 PUSH4 0x8E6D536A EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0x90596DD1 EQ PUSH2 0x4C7 JUMPI DUP1 PUSH4 0x919974DC EQ PUSH2 0x4DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x68C7FD57 EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x447 JUMPI DUP1 PUSH4 0x85BEB5F1 EQ PUSH2 0x45A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x33E39B61 GT PUSH2 0x187 JUMPI DUP1 PUSH4 0x5C19A95C GT PUSH2 0x156 JUMPI DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x5D7B0758 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x613ED6BD EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0x631B5DFB EQ PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x33E39B61 EQ PUSH2 0x345 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0x36BB2A38 EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x2ACEB534 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x2D0DD686 EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x22B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F2 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x32FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21B PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x315A JUMP JUMPDEST PUSH2 0x632 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x21B PUSH2 0x24B CALLDATASIZE PUSH1 0x4 PUSH2 0x2F43 JUMP JUMPDEST PUSH2 0x649 JUMP JUMPDEST PUSH2 0x2C9 PUSH2 0x25E CALLDATASIZE PUSH1 0x4 PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE SWAP3 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x7 DUP3 MSTORE SWAP3 DUP3 SWAP1 KECCAK256 DUP3 MLOAD SWAP4 DUP5 ADD DUP4 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP5 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND SWAP3 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 DIV AND SWAP1 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH3 0xFFFFFF SWAP1 DUP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 DUP3 ADD MLOAD SWAP1 SWAP3 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x22F PUSH2 0x30F CALLDATASIZE PUSH1 0x4 PUSH2 0x329F JUMP JUMPDEST PUSH2 0x70F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF PUSH32 0x0 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x358 PUSH2 0x353 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F10 JUMP JUMPDEST PUSH2 0x75B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22F PUSH2 0x7C3 JUMP JUMPDEST PUSH2 0x375 PUSH2 0x370 CALLDATASIZE PUSH1 0x4 PUSH2 0x311C JUMP JUMPDEST PUSH2 0x7D2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x21B PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x315A JUMP JUMPDEST PUSH2 0x84A JUMP JUMPDEST PUSH2 0x358 PUSH2 0x3C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2EF5 JUMP JUMPDEST PUSH2 0x886 JUMP JUMPDEST PUSH2 0x358 PUSH2 0x3D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x315A JUMP JUMPDEST PUSH2 0x893 JUMP JUMPDEST PUSH2 0x3EB PUSH2 0x3E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3048 JUMP JUMPDEST PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x32BA JUMP JUMPDEST PUSH2 0x358 PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F43 JUMP JUMPDEST PUSH2 0xA13 JUMP JUMPDEST PUSH2 0x3EB PUSH2 0x419 CALLDATASIZE PUSH1 0x4 PUSH2 0x309B JUMP JUMPDEST PUSH2 0xACE JUMP JUMPDEST PUSH2 0x22F PUSH2 0x42C CALLDATASIZE PUSH1 0x4 PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x455 CALLDATASIZE PUSH1 0x4 PUSH2 0x2EF5 JUMP JUMPDEST PUSH2 0xB00 JUMP JUMPDEST PUSH2 0x3EB PUSH2 0x468 CALLDATASIZE PUSH1 0x4 PUSH2 0x31F1 JUMP JUMPDEST PUSH2 0xB1E JUMP JUMPDEST PUSH2 0x49C PUSH2 0x47B CALLDATASIZE PUSH1 0x4 PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH4 0x1000008 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x3EB PUSH2 0x4C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3233 JUMP JUMPDEST PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x358 PUSH2 0x4D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x315A JUMP JUMPDEST PUSH2 0xC1C JUMP JUMPDEST PUSH2 0x358 PUSH2 0x4E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FE9 JUMP JUMPDEST PUSH2 0xC80 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0xE00 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x31AE JUMP JUMPDEST PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x22F PUSH2 0x516 CALLDATASIZE PUSH1 0x4 PUSH2 0x3184 JUMP JUMPDEST PUSH2 0xE80 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x529 CALLDATASIZE PUSH1 0x4 PUSH2 0x315A JUMP JUMPDEST PUSH2 0xEE7 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x53C CALLDATASIZE PUSH1 0x4 PUSH2 0x315A JUMP JUMPDEST PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x358 PUSH2 0x54F CALLDATASIZE PUSH1 0x4 PUSH2 0x2F7F JUMP JUMPDEST PUSH2 0xFA5 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x562 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F10 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x49C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x5AF SWAP1 PUSH2 0x34DB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5DB SWAP1 PUSH2 0x34DB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x628 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x628 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x60B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63F CALLER DUP5 DUP5 PUSH2 0x1109 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x656 DUP5 DUP5 DUP5 PUSH2 0x1261 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x6F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6C6F77616E6365000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x702 DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x1109 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x643 SWAP1 PUSH1 0x9 SWAP1 DUP5 TIMESTAMP PUSH2 0x1485 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74726F6C6C6564546F6B656E2F6F6E6C792D636F6E74726F6C6C657200 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x7BF DUP3 DUP3 PUSH2 0x14B1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7CD PUSH2 0x1587 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH2 0xFFFF DUP4 AND PUSH3 0xFFFFFF DUP2 LT PUSH2 0x818 JUMPI PUSH2 0x818 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x63F SWAP2 DUP6 SWAP1 PUSH2 0x881 SWAP1 DUP7 SWAP1 PUSH2 0x33BE JUMP JUMPDEST PUSH2 0x1109 JUMP JUMPDEST PUSH2 0x890 CALLER DUP3 PUSH2 0x14B1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8ED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74726F6C6C6564546F6B656E2F6F6E6C792D636F6E74726F6C6C657200 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x7BF DUP3 DUP3 PUSH2 0x167A JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x915 JUMPI PUSH2 0x915 PUSH2 0x35B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x93E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 DIV SWAP1 SWAP4 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP4 POP SWAP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA06 JUMPI PUSH2 0x9D7 DUP4 PUSH1 0x1 ADD DUP4 DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x9BC JUMPI PUSH2 0x9BC PUSH2 0x359F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9D1 SWAP2 SWAP1 PUSH2 0x329F JUMP JUMPDEST TIMESTAMP PUSH2 0x1485 JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9E9 JUMPI PUSH2 0x9E9 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x9FE DUP2 PUSH2 0x3510 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x99A JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA6D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74726F6C6C6564546F6B656E2F6F6E6C792D636F6E74726F6C6C657200 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xABF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0xABF SWAP1 DUP4 SWAP1 DUP6 SWAP1 PUSH2 0x881 SWAP1 DUP6 SWAP1 PUSH2 0x34A7 JUMP JUMPDEST PUSH2 0xAC9 DUP3 DUP3 PUSH2 0x1765 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x60 SWAP1 PUSH2 0xAF6 SWAP1 DUP7 DUP7 DUP7 DUP7 PUSH2 0x18F6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x643 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB3C JUMPI PUSH2 0xB3C PUSH2 0x35B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB65 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBF6 JUMPI PUSH2 0xBC7 PUSH1 0x9 DUP4 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x9BC JUMPI PUSH2 0x9BC PUSH2 0x359F JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBD9 JUMPI PUSH2 0xBD9 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0xBEE DUP2 PUSH2 0x3510 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBA7 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xC11 PUSH1 0x8 DUP7 DUP7 DUP7 DUP7 PUSH2 0x18F6 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC76 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74726F6C6C6564546F6B656E2F6F6E6C792D636F6E74726F6C6C657200 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x7BF DUP3 DUP3 PUSH2 0x1765 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xCD0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5469636B65742F64656C65676174652D657870697265642D646561646C696E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP8 DUP8 PUSH2 0xCFE DUP11 PUSH2 0x1A93 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP1 DUP6 ADD MSTORE SWAP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0xD52 DUP3 PUSH2 0x1ABB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD62 DUP3 DUP8 DUP8 DUP8 PUSH2 0x1B24 JUMP JUMPDEST SWAP1 POP DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5469636B65742F64656C65676174652D696E76616C69642D7369676E61747572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6500000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0xDF5 DUP10 DUP10 PUSH2 0x14B1 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x5AF SWAP1 PUSH2 0x34DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 DIV SWAP1 SWAP4 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 PUSH2 0xE77 SWAP1 PUSH1 0x1 DUP4 ADD SWAP1 DUP7 DUP7 TIMESTAMP PUSH2 0x1B4C JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 DIV SWAP1 SWAP4 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 PUSH2 0xC14 SWAP1 PUSH1 0x1 DUP4 ADD SWAP1 DUP6 TIMESTAMP PUSH2 0x1485 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0xF81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0xF8E CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x1109 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63F CALLER DUP5 DUP5 PUSH2 0x1261 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xFF5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP9 DUP9 DUP9 PUSH2 0x1024 DUP13 PUSH2 0x1A93 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x107F DUP3 PUSH2 0x1ABB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x108F DUP3 DUP8 DUP8 DUP8 PUSH2 0x1B24 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x10F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x10FD DUP11 DUP11 DUP11 PUSH2 0x1109 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1184 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1200 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x12DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1359 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x1364 DUP4 DUP4 DUP4 PUSH2 0x1B84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x13F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x142A SWAP1 DUP5 SWAP1 PUSH2 0x33BE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x1476 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT PUSH2 0x14A1 JUMPI DUP4 PUSH2 0x14A3 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP PUSH2 0xAF6 DUP7 DUP7 DUP4 DUP7 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH4 0x1000008 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ ISZERO PUSH2 0x14ED JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH4 0x1000008 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1541 DUP2 DUP5 DUP5 PUSH2 0x1D30 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4BC154DD35D6A5CB9206482ECB473CDBF2473006D6BCE728B9CC0741BCC59EA2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 CHAINID EQ ISZERO PUSH2 0x15D6 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 DUP3 DUP5 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP4 ADD MSTORE CHAINID PUSH1 0x80 DUP4 ADD MSTORE ADDRESS PUSH1 0xA0 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x16D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x16DC PUSH1 0x0 DUP4 DUP4 PUSH2 0x1B84 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x16EE SWAP2 SWAP1 PUSH2 0x33BE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x171B SWAP1 DUP5 SWAP1 PUSH2 0x33BE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x17E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH2 0x17ED DUP3 PUSH1 0x0 DUP4 PUSH2 0x1B84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x187C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x18AB SWAP1 DUP5 SWAP1 PUSH2 0x34A7 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 DUP3 EQ PUSH2 0x196D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5469636B65742F73746172742D656E642D74696D65732D6C656E6774682D6D61 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7463680000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19C2 JUMPI PUSH2 0x19C2 PUSH2 0x35B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19EB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP TIMESTAMP PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x1A85 JUMPI PUSH2 0x1A56 DUP11 PUSH1 0x1 ADD DUP6 DUP12 DUP12 DUP6 DUP2 DUP2 LT PUSH2 0x1A14 JUMPI PUSH2 0x1A14 PUSH2 0x359F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1A29 SWAP2 SWAP1 PUSH2 0x329F JUMP JUMPDEST DUP11 DUP11 DUP7 DUP2 DUP2 LT PUSH2 0x1A3B JUMPI PUSH2 0x1A3B PUSH2 0x359F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1A50 SWAP2 SWAP1 PUSH2 0x329F JUMP JUMPDEST DUP7 PUSH2 0x1B4C JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1A68 JUMPI PUSH2 0x1A68 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x1A7D DUP2 PUSH2 0x3510 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x19F2 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x643 PUSH2 0x1AC8 PUSH2 0x1587 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1B35 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1DC1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1B42 DUP2 PUSH2 0x1EAE JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT PUSH2 0x1B68 JUMPI DUP4 PUSH2 0x1B6A JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP PUSH2 0x1B79 DUP8 DUP8 DUP8 DUP5 DUP8 PUSH2 0x209F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1BA3 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1BD4 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH4 0x1000008 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1C05 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH4 0x1000008 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND JUMPDEST PUSH2 0x1C10 DUP3 DUP3 DUP6 PUSH2 0x1D30 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1C4E DUP9 DUP9 PUSH2 0x213B JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD SWAP2 SWAP5 POP SWAP2 POP PUSH2 0x1C6F SWAP1 PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x21BB AND JUMP JUMPDEST ISZERO PUSH2 0x1C8A JUMPI POP POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP PUSH2 0xC14 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C96 DUP10 DUP10 PUSH2 0x228C JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD SWAP1 SWAP4 POP SWAP1 SWAP2 POP PUSH2 0x1CB7 SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP11 AND SWAP2 SWAP1 DUP10 SWAP1 PUSH2 0x2309 AND JUMP JUMPDEST ISZERO PUSH2 0x1CC9 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0xC14 JUMP JUMPDEST PUSH2 0x1CDB DUP10 DUP6 DUP4 DUP11 DUP13 PUSH1 0x40 ADD MLOAD DUP12 PUSH2 0x23D8 JUMP JUMPDEST DUP1 SWAP5 POP DUP2 SWAP4 POP POP POP PUSH2 0x1CF6 DUP4 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP9 PUSH2 0x25A5 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x1D10 SWAP2 SWAP1 PUSH2 0x3487 JUMP JUMPDEST PUSH2 0x1D1A SWAP2 SWAP1 PUSH2 0x33F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO PUSH2 0x1D4F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1D62 JUMPI PUSH2 0x1D5D DUP2 PUSH2 0x266F JUMP JUMPDEST PUSH2 0x1D8F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1D81 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO JUMPDEST ISZERO PUSH2 0x1D8F JUMPI PUSH2 0x1D8F DUP2 PUSH2 0x276F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x1DA8 JUMPI PUSH2 0x1DA8 DUP4 DUP3 PUSH2 0x27A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xAC9 JUMPI PUSH2 0xAC9 DUP3 DUP3 PUSH2 0x28E1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x1DF8 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1EA5 JUMP JUMPDEST DUP5 PUSH1 0xFF AND PUSH1 0x1B EQ ISZERO DUP1 ISZERO PUSH2 0x1E10 JUMPI POP DUP5 PUSH1 0xFF AND PUSH1 0x1C EQ ISZERO JUMPDEST ISZERO PUSH2 0x1E21 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x4 PUSH2 0x1EA5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1E9E JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1EA5 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1EC2 JUMPI PUSH2 0x1EC2 PUSH2 0x3589 JUMP JUMPDEST EQ ISZERO PUSH2 0x1ECB JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1EDF JUMPI PUSH2 0x1EDF PUSH2 0x3589 JUMP JUMPDEST EQ ISZERO PUSH2 0x1F2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1F41 JUMPI PUSH2 0x1F41 PUSH2 0x3589 JUMP JUMPDEST EQ ISZERO PUSH2 0x1F8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1FA3 JUMPI PUSH2 0x1FA3 PUSH2 0x3589 JUMP JUMPDEST EQ ISZERO PUSH2 0x2017 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x202B JUMPI PUSH2 0x202B PUSH2 0x3589 JUMP JUMPDEST EQ ISZERO PUSH2 0x890 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x20AE DUP9 DUP9 PUSH2 0x228C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH2 0x20BF DUP11 DUP11 PUSH2 0x213B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x20D5 DUP12 DUP12 DUP5 DUP8 DUP8 DUP11 DUP16 DUP15 PUSH2 0x2912 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x20E9 DUP13 DUP13 DUP6 DUP9 DUP9 DUP12 DUP16 DUP16 PUSH2 0x2912 JUMP JUMPDEST SWAP1 POP PUSH2 0x20FE DUP2 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP11 PUSH2 0x25A5 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x2118 SWAP2 SWAP1 PUSH2 0x3487 JUMP JUMPDEST PUSH2 0x2122 SWAP2 SWAP1 PUSH2 0x33F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH2 0x216A DUP4 PUSH1 0x20 ADD MLOAD PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF DUP1 AND PUSH2 0x2A5C JUMP JUMPDEST SWAP2 POP DUP4 DUP3 PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF DUP2 LT PUSH2 0x2185 JUMPI PUSH2 0x2185 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP5 SWAP2 SWAP4 POP SWAP1 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT ISZERO DUP1 ISZERO PUSH2 0x21E5 JUMPI POP DUP2 PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x2201 JUMPI DUP3 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT ISZERO SWAP1 POP PUSH2 0x708 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF AND DUP6 PUSH4 0xFFFFFFFF AND GT PUSH2 0x2230 JUMPI PUSH2 0x222B PUSH4 0xFFFFFFFF DUP7 AND PUSH5 0x100000000 PUSH2 0x33D6 JUMP JUMPDEST PUSH2 0x2238 JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP4 PUSH4 0xFFFFFFFF AND DUP6 PUSH4 0xFFFFFFFF AND GT PUSH2 0x2270 JUMPI PUSH2 0x226B PUSH4 0xFFFFFFFF DUP7 AND PUSH5 0x100000000 PUSH2 0x33D6 JUMP JUMPDEST PUSH2 0x2278 JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 SWAP2 GT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 DUP3 PUSH1 0x20 ADD MLOAD SWAP2 POP DUP4 DUP3 PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF DUP2 LT PUSH2 0x22C3 JUMPI PUSH2 0x22C3 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH2 0x2302 JUMPI PUSH1 0x0 SWAP2 POP DUP4 DUP3 PUSH2 0x2185 JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT ISZERO DUP1 ISZERO PUSH2 0x2333 JUMPI POP DUP2 PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x234E JUMPI DUP3 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND LT SWAP1 POP PUSH2 0x708 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF AND DUP6 PUSH4 0xFFFFFFFF AND GT PUSH2 0x237D JUMPI PUSH2 0x2378 PUSH4 0xFFFFFFFF DUP7 AND PUSH5 0x100000000 PUSH2 0x33D6 JUMP JUMPDEST PUSH2 0x2385 JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP4 PUSH4 0xFFFFFFFF AND DUP6 PUSH4 0xFFFFFFFF AND GT PUSH2 0x23BD JUMPI PUSH2 0x23B8 PUSH4 0xFFFFFFFF DUP7 AND PUSH5 0x100000000 PUSH2 0x33D6 JUMP JUMPDEST PUSH2 0x23C5 JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 SWAP2 LT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP7 PUSH3 0xFFFFFF AND SWAP1 POP PUSH1 0x0 DUP2 DUP10 PUSH3 0xFFFFFF AND LT PUSH2 0x2423 JUMPI DUP9 PUSH3 0xFFFFFF AND PUSH2 0x243E JUMP JUMPDEST PUSH1 0x1 PUSH2 0x2434 PUSH3 0xFFFFFF DUP9 AND DUP5 PUSH2 0x33BE JUMP JUMPDEST PUSH2 0x243E SWAP2 SWAP1 PUSH2 0x34A7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x2 PUSH2 0x244F DUP4 DUP6 PUSH2 0x33BE JUMP JUMPDEST PUSH2 0x2459 SWAP2 SWAP1 PUSH2 0x341C JUMP JUMPDEST SWAP1 POP DUP11 PUSH2 0x246B DUP3 DUP10 PUSH3 0xFFFFFF AND PUSH2 0x2A86 JUMP JUMPDEST PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF DUP2 LT PUSH2 0x2482 JUMPI PUSH2 0x2482 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP6 POP DUP1 PUSH2 0x24CA JUMPI PUSH2 0x24C2 DUP3 PUSH1 0x1 PUSH2 0x33BE JUMP JUMPDEST SWAP4 POP POP PUSH2 0x2443 JUMP JUMPDEST DUP12 PUSH2 0x24DA DUP4 DUP11 PUSH3 0xFFFFFF AND PUSH2 0x2A92 JUMP JUMPDEST PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF DUP2 LT PUSH2 0x24F1 JUMPI PUSH2 0x24F1 PUSH2 0x359F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND DUP3 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP6 POP PUSH1 0x0 SWAP1 PUSH2 0x2536 SWAP1 DUP4 DUP2 AND SWAP1 DUP13 SWAP1 DUP12 SWAP1 PUSH2 0x21BB AND JUMP JUMPDEST SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x255F JUMPI POP PUSH2 0x255F DUP7 PUSH1 0x20 ADD MLOAD DUP10 DUP13 PUSH4 0xFFFFFFFF AND PUSH2 0x21BB SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x256B JUMPI POP POP PUSH2 0x2597 JUMP JUMPDEST DUP1 PUSH2 0x2582 JUMPI PUSH2 0x257B PUSH1 0x1 DUP5 PUSH2 0x34A7 JUMP JUMPDEST SWAP4 POP PUSH2 0x2590 JUMP JUMPDEST PUSH2 0x258D DUP4 PUSH1 0x1 PUSH2 0x33BE JUMP JUMPDEST SWAP5 POP JUMPDEST POP POP PUSH2 0x2443 JUMP JUMPDEST POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT ISZERO DUP1 ISZERO PUSH2 0x25CF JUMPI POP DUP2 PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x25E5 JUMPI PUSH2 0x25DE DUP4 DUP6 PUSH2 0x34BE JUMP JUMPDEST SWAP1 POP PUSH2 0x708 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF AND DUP6 PUSH4 0xFFFFFFFF AND GT PUSH2 0x2614 JUMPI PUSH2 0x260F PUSH4 0xFFFFFFFF DUP7 AND PUSH5 0x100000000 PUSH2 0x33D6 JUMP JUMPDEST PUSH2 0x261C JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP4 PUSH4 0xFFFFFFFF AND DUP6 PUSH4 0xFFFFFFFF AND GT PUSH2 0x2654 JUMPI PUSH2 0x264F PUSH4 0xFFFFFFFF DUP7 AND PUSH5 0x100000000 PUSH2 0x33D6 JUMP JUMPDEST PUSH2 0x265C JUMP JUMPDEST DUP5 PUSH4 0xFFFFFFFF AND JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 POP PUSH2 0xAF6 DUP2 DUP4 PUSH2 0x34A7 JUMP JUMPDEST DUP1 PUSH2 0x2677 JUMPI POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2690 PUSH1 0x8 PUSH2 0x268A DUP7 PUSH2 0x2AA2 JUMP JUMPDEST TIMESTAMP PUSH2 0x2B25 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x8 DUP1 SLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB SWAP1 SWAP5 AND PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0xD0 SHL PUSH3 0xFFFFFF SWAP3 DUP4 AND MUL OR PUSH29 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xE8 SHL SWAP2 SWAP1 SWAP4 AND MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x147F JUMPI PUSH1 0x40 DUP1 MLOAD DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP6 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP3 ADD MSTORE PUSH32 0x3375B905D617084FA6B7531688CC8046FEB1F1A0B8BA2273DE03C59D8D84416C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x2777 JUMPI POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2690 PUSH1 0x8 PUSH2 0x278A DUP7 PUSH2 0x2AA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x35EE PUSH1 0x2C SWAP2 CODECOPY TIMESTAMP PUSH2 0x2BCE JUMP JUMPDEST DUP1 PUSH2 0x27B2 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 DUP1 DUP1 PUSH2 0x27F9 DUP5 PUSH2 0x27DA DUP8 PUSH2 0x2AA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x35CC PUSH1 0x22 SWAP2 CODECOPY TIMESTAMP PUSH2 0x2BCE JUMP JUMPDEST DUP3 MLOAD DUP8 SLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB SWAP1 SWAP4 AND PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0xD0 SHL PUSH3 0xFFFFFF SWAP3 DUP4 AND MUL OR PUSH29 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xE8 SHL SWAP2 SWAP1 SWAP3 AND MUL OR DUP8 SSTORE SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x28D9 JUMPI PUSH1 0x40 DUP1 MLOAD DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP6 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH32 0xDD3E7CD3A260A292B0B3306B2CA62F30A7349619A9D09C58109318774C6B627D SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x28EA JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 DUP1 DUP1 PUSH2 0x27F9 DUP5 PUSH2 0x268A DUP8 PUSH2 0x2AA2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2945 DUP4 DUP4 DUP10 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x2309 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x2969 JUMPI PUSH2 0x2962 DUP8 DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND DUP6 PUSH2 0x2CA1 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A50 JUMP JUMPDEST DUP3 PUSH4 0xFFFFFFFF AND DUP8 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x2988 JUMPI POP DUP6 PUSH2 0x2A50 JUMP JUMPDEST DUP3 PUSH4 0xFFFFFFFF AND DUP7 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x29A7 JUMPI POP DUP5 PUSH2 0x2A50 JUMP JUMPDEST PUSH2 0x29C6 DUP7 PUSH1 0x20 ADD MLOAD DUP4 DUP6 PUSH4 0xFFFFFFFF AND PUSH2 0x2309 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x29EB JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH4 0xFFFFFFFF DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2A50 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2A00 DUP12 DUP9 DUP9 DUP9 DUP15 PUSH1 0x40 ADD MLOAD DUP10 PUSH2 0x23D8 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x2A19 DUP3 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP8 PUSH2 0x25A5 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x2A33 SWAP2 SWAP1 PUSH2 0x3487 JUMP JUMPDEST PUSH2 0x2A3D SWAP2 SWAP1 PUSH2 0x33F6 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A4A DUP4 DUP3 DUP9 PUSH2 0x2CA1 JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2A6B JUMPI POP PUSH1 0x0 PUSH2 0x643 JUMP JUMPDEST PUSH2 0x708 PUSH1 0x1 PUSH2 0x2A7A DUP5 DUP7 PUSH2 0x33BE JUMP JUMPDEST PUSH2 0x2A84 SWAP2 SWAP1 PUSH2 0x34A7 JUMP JUMPDEST DUP4 JUMPDEST PUSH1 0x0 PUSH2 0x708 DUP3 DUP5 PUSH2 0x3549 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x708 PUSH2 0x2A84 DUP5 PUSH1 0x1 PUSH2 0x33BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP3 GT ISZERO PUSH2 0x2B21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x3038206269747300000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EC JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 AND DUP3 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2BA1 PUSH1 0x1 DUP9 ADD DUP3 DUP8 PUSH2 0x2D1C JUMP JUMPDEST DUP4 MLOAD SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP PUSH2 0x2BB6 SWAP1 DUP8 SWAP1 PUSH2 0x3353 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND DUP5 MSTORE POP SWAP2 SWAP6 SWAP1 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP3 AND DUP1 DUP5 MSTORE PUSH3 0xFFFFFF PUSH1 0x1 PUSH1 0xD0 SHL DUP5 DIV DUP2 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0xE8 SHL SWAP1 SWAP4 DIV SWAP1 SWAP3 AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x0 SWAP3 DUP8 SWAP2 SWAP1 DUP10 AND GT ISZERO PUSH2 0x2C64 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EC SWAP2 SWAP1 PUSH2 0x32FE JUMP JUMPDEST POP PUSH2 0x2C73 DUP9 PUSH1 0x1 ADD DUP3 DUP8 PUSH2 0x2D1C JUMP JUMPDEST DUP4 MLOAD SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP PUSH2 0x2C88 SWAP1 DUP9 SWAP1 PUSH2 0x345F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND DUP5 MSTORE POP SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x2CDF DUP7 PUSH1 0x20 ADD MLOAD DUP6 DUP7 PUSH4 0xFFFFFFFF AND PUSH2 0x25A5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2CEF SWAP1 PUSH4 0xFFFFFFFF AND DUP7 PUSH2 0x3430 JUMP JUMPDEST DUP7 MLOAD PUSH2 0x2CFB SWAP2 SWAP1 PUSH2 0x337E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH2 0x2D5A DUP8 DUP8 PUSH2 0x213B JUMP JUMPDEST SWAP2 POP POP DUP5 PUSH4 0xFFFFFFFF AND DUP2 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x2D83 JUMPI DUP6 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 POP PUSH2 0x2DFA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D9D DUP3 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND DUP9 PUSH2 0x2CA1 JUMP JUMPDEST SWAP1 POP DUP1 DUP9 DUP9 PUSH1 0x20 ADD MLOAD PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF DUP2 LT PUSH2 0x2DBD JUMPI PUSH2 0x2DBD PUSH2 0x359F JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 SWAP1 SWAP4 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH1 0x1 PUSH1 0xE0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 ADD SSTORE PUSH1 0x0 PUSH2 0x2DEE DUP9 PUSH2 0x2E03 JUMP JUMPDEST SWAP6 POP SWAP1 SWAP4 POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE SWAP1 DUP3 ADD MLOAD PUSH2 0x2E33 SWAP1 PUSH3 0xFFFFFF SWAP1 DUP2 AND SWAP1 PUSH2 0x2A92 JUMP JUMPDEST PUSH3 0xFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP2 AND LT ISZERO PUSH2 0x2B21 JUMPI PUSH1 0x1 DUP3 PUSH1 0x40 ADD DUP2 DUP2 MLOAD PUSH2 0x2E5F SWAP2 SWAP1 PUSH2 0x33A0 JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE POP POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2E82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2E99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2EB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2302 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2E82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2E82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x708 DUP3 PUSH2 0x2E6B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F2C DUP4 PUSH2 0x2E6B JUMP JUMPDEST SWAP2 POP PUSH2 0x2F3A PUSH1 0x20 DUP5 ADD PUSH2 0x2E6B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2F58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F61 DUP5 PUSH2 0x2E6B JUMP JUMPDEST SWAP3 POP PUSH2 0x2F6F PUSH1 0x20 DUP6 ADD PUSH2 0x2E6B JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2F9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2FA3 DUP9 PUSH2 0x2E6B JUMP JUMPDEST SWAP7 POP PUSH2 0x2FB1 PUSH1 0x20 DUP10 ADD PUSH2 0x2E6B JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2FCD PUSH1 0x80 DUP10 ADD PUSH2 0x2EE4 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3002 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x300B DUP8 PUSH2 0x2E6B JUMP JUMPDEST SWAP6 POP PUSH2 0x3019 PUSH1 0x20 DUP9 ADD PUSH2 0x2E6B JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x302E PUSH1 0x60 DUP9 ADD PUSH2 0x2EE4 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x305D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3066 DUP5 PUSH2 0x2E6B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3082 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x308E DUP7 DUP3 DUP8 ADD PUSH2 0x2E87 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x30B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30BC DUP7 PUSH2 0x2E6B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x30D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30E5 DUP10 DUP4 DUP11 ADD PUSH2 0x2E87 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x30FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x310B DUP9 DUP3 DUP10 ADD PUSH2 0x2E87 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x312F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3138 DUP4 PUSH2 0x2E6B JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x314F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x316D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3176 DUP4 PUSH2 0x2E6B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x31A0 DUP4 PUSH2 0x2E6B JUMP JUMPDEST SWAP2 POP PUSH2 0x2F3A PUSH1 0x20 DUP5 ADD PUSH2 0x2ECC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x31C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x31CC DUP5 PUSH2 0x2E6B JUMP JUMPDEST SWAP3 POP PUSH2 0x31DA PUSH1 0x20 DUP6 ADD PUSH2 0x2ECC JUMP JUMPDEST SWAP2 POP PUSH2 0x31E8 PUSH1 0x40 DUP6 ADD PUSH2 0x2ECC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x321B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3227 DUP6 DUP3 DUP7 ADD PUSH2 0x2E87 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x326D DUP9 DUP4 DUP10 ADD PUSH2 0x2E87 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3293 DUP8 DUP3 DUP9 ADD PUSH2 0x2E87 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x32B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x708 DUP3 PUSH2 0x2ECC JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x32F2 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x32D6 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x332B JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x330F JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x333D JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x3375 JUMPI PUSH2 0x3375 PUSH2 0x355D JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x3375 JUMPI PUSH2 0x3375 PUSH2 0x355D JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x3375 JUMPI PUSH2 0x3375 PUSH2 0x355D JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x33D1 JUMPI PUSH2 0x33D1 PUSH2 0x355D JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH5 0xFFFFFFFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x3375 JUMPI PUSH2 0x3375 PUSH2 0x355D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP5 AND DUP1 PUSH2 0x3410 JUMPI PUSH2 0x3410 PUSH2 0x3573 JUMP JUMPDEST SWAP3 AND SWAP2 SWAP1 SWAP2 DIV SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x342B JUMPI PUSH2 0x342B PUSH2 0x3573 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP2 DUP4 DIV DUP2 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3456 JUMPI PUSH2 0x3456 PUSH2 0x355D JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP4 DUP2 AND SWAP1 DUP4 AND DUP2 DUP2 LT ISZERO PUSH2 0x347F JUMPI PUSH2 0x347F PUSH2 0x355D JUMP JUMPDEST SUB SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 AND SWAP1 DUP4 AND DUP2 DUP2 LT ISZERO PUSH2 0x347F JUMPI PUSH2 0x347F PUSH2 0x355D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x34B9 JUMPI PUSH2 0x34B9 PUSH2 0x355D JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP4 DUP2 AND SWAP1 DUP4 AND DUP2 DUP2 LT ISZERO PUSH2 0x347F JUMPI PUSH2 0x347F PUSH2 0x355D JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x34EF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1AB5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x3542 JUMPI PUSH2 0x3542 PUSH2 0x355D JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3558 JUMPI PUSH2 0x3558 PUSH2 0x3573 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH3 0x75726E KECCAK256 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E63655469636B PUSH6 0x742F6275726E 0x2D PUSH2 0x6D6F PUSH22 0x6E742D657863656564732D746F74616C2D737570706C PUSH26 0x2D74776162A26469706673582212207222193ED5D2D8F5956C34 MSIZE DUP9 0x4B SWAP2 0xB0 0xE3 0x29 0x26 JUMPI 0xDA DUP6 PUSH10 0x928C1D5DE06432574764 PUSH20 0x6F6C634300080600330000000000000000000000 ",
          "sourceMap": "898:12651:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2084:98:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4181:166;;;;;;:::i;:::-;;:::i;:::-;;;8320:14:72;;8313:22;8295:41;;8283:2;8268:18;4181:166:1;8250:92:72;3172:106:1;3259:12;;3172:106;;;8493:25:72;;;8481:2;8466:18;3172:106:1;8448:76:72;4814:478:1;;;;;;:::i;:::-;;:::i;2269:189:27:-;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2427:16:27;;;;;;:9;:16;;;;;;2420:31;;;;;;;;-1:-1:-1;;;;;2420:31:27;;;;;-1:-1:-1;;;2420:31:27;;;;;;;;;;;-1:-1:-1;;;2420:31:27;;;;;;;;2269:189;;;;;19684:13:72;;-1:-1:-1;;;;;19680:74:72;19662:93;;19802:4;19790:17;;;19784:24;19827:8;19873:21;;;19851:20;;;19844:51;;;;19943:17;;;19937:24;19933:33;;;19911:20;;;19904:63;19650:2;19635:18;2269:189:27;19617:356:72;4963:307:27;;;;;;:::i;:::-;;:::i;3858:98:20:-;;;20724:4:72;3940:9:20;20712:17:72;20694:36;;20682:2;20667:18;3858:98:20;20649:87:72;6115:130:27;;;;;;:::i;:::-;;:::i;:::-;;2426:113:4;;;:::i;2492:204:27:-;;;;;;:::i;:::-;;:::i;:::-;;;;20204:13:72;;-1:-1:-1;;;;;20200:78:72;20182:97;;20339:4;20327:17;;;20321:24;20347:10;20317:41;20295:20;;;20288:71;;;;20155:18;2492:204:27;20137:228:72;5687:212:1;;;;;;:::i;:::-;;:::i;6952:100:27:-;;;;;;:::i;:::-;;:::i;2318:171:20:-;;;;;;:::i;:::-;;:::i;4248:681:27:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3347:312:20:-;;;;;;:::i;:::-;;:::i;3127:282:27:-;;;;;;:::i;:::-;;:::i;3336:125:1:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3436:18:1;3410:7;3436:18;;;;;;;;;;;;3336:125;2176:126:4;;;;;;:::i;:::-;;:::i;5304:627:27:-;;;;;;:::i;:::-;;:::i;5965:116::-;;;;;;:::i;:::-;-1:-1:-1;;;;;6058:16:27;;;6032:7;6058:16;;;:9;:16;;;;;;;;5965:116;;;;-1:-1:-1;;;;;7451:55:72;;;7433:74;;7421:2;7406:18;5965:116:27;7388:125:72;3443:263:27;;;;;;:::i;:::-;;:::i;2764:171:20:-;;;;;;:::i;:::-;;:::i;6279:639:27:-;;;;;;:::i;:::-;;:::i;2295:102:1:-;;;:::i;3740:474:27:-;;;;;;:::i;:::-;;:::i;2730:363::-;;;;;;:::i;:::-;;:::i;6386:405:1:-;;;;;;:::i;:::-;;:::i;3664:172::-;;;;;;:::i;:::-;;:::i;1489:626:4:-;;;;;;:::i;:::-;;:::i;3894:149:1:-;;;;;;:::i;:::-;-1:-1:-1;;;;;4009:18:1;;;3983:7;4009:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3894:149;540:34:20;;;;;-1:-1:-1;;;;;540:34:20;;;2084:98:1;2138:13;2170:5;2163:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2084:98;:::o;4181:166::-;4264:4;4280:39;666:10:10;4303:7:1;4312:6;4280:8;:39::i;:::-;-1:-1:-1;4336:4:1;4181:166;;;;;:::o;4814:478::-;4950:4;4966:36;4976:6;4984:9;4995:6;4966:9;:36::i;:::-;-1:-1:-1;;;;;5040:19:1;;5013:24;5040:19;;;:11;:19;;;;;;;;666:10:10;5040:33:1;;;;;;;;5091:26;;;;5083:79;;;;-1:-1:-1;;;5083:79:1;;16100:2:72;5083:79:1;;;16082:21:72;16139:2;16119:18;;;16112:30;16178:34;16158:18;;;16151:62;16249:10;16229:18;;;16222:38;16277:19;;5083:79:1;;;;;;;;;5196:57;5205:6;666:10:10;5246:6:1;5227:16;:25;5196:8;:57::i;:::-;5281:4;5274:11;;;4814:478;;;;;;:::o;4963:307:27:-;5075:188;;;;;;;;5113:15;5075:188;-1:-1:-1;;;;;5075:188:27;;;;;-1:-1:-1;;;5075:188:27;;;;;;;;-1:-1:-1;;;5075:188:27;;;;;;;;;;;5037:7;;5075:188;;5113:21;;5200:7;5233:15;5075:20;:188::i;6115:130::-;1051:10:20;;-1:-1:-1;;;;;1051:10:20;1029;:33;1021:77;;;;-1:-1:-1;;;1021:77:20;;18528:2:72;1021:77:20;;;18510:21:72;18567:2;18547:18;;;18540:30;18606:33;18586:18;;;18579:61;18657:18;;1021:77:20;18500:181:72;1021:77:20;6217:21:27::1;6227:5;6234:3;6217:9;:21::i;:::-;6115:130:::0;;:::o;2426:113:4:-;2486:7;2512:20;:18;:20::i;:::-;2505:27;;2426:113;:::o;2492:204:27:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;2659:16:27;;;;;;:9;:16;;;;;:22;;:30;;;;;;;;;;:::i;:::-;2652:37;;;;;;;;;2659:30;;2652:37;-1:-1:-1;;;;;2652:37:27;;;;-1:-1:-1;;;2652:37:27;;;;;;;;;2492:204;-1:-1:-1;;;2492:204:27:o;5687:212:1:-;666:10:10;5775:4:1;5823:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;5823:34:1;;;;;;;;;;5775:4;;5791:80;;5814:7;;5823:47;;5860:10;;5823:47;:::i;:::-;5791:8;:80::i;6952:100:27:-;7019:26;7029:10;7041:3;7019:9;:26::i;:::-;6952:100;:::o;2318:171:20:-;1051:10;;-1:-1:-1;;;;;1051:10:20;1029;:33;1021:77;;;;-1:-1:-1;;;1021:77:20;;18528:2:72;1021:77:20;;;18510:21:72;18567:2;18547:18;;;18540:30;18606:33;18586:18;;;18579:61;18657:18;;1021:77:20;18500:181:72;1021:77:20;2461:21:::1;2467:5;2474:7;2461:5;:21::i;4248:681:27:-:0;4378:16;4427:8;4410:14;4427:8;4481:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4481:21:27;-1:-1:-1;;;;;;4551:16:27;;4513:35;4551:16;;;:9;:16;;;;;;;;4577:59;;;;;;;;;-1:-1:-1;;;;;4577:59:27;;;;;-1:-1:-1;;;4577:59:27;;;;;;;;;;;-1:-1:-1;;;4577:59:27;;;;;;;;;;;;4452:50;;-1:-1:-1;4577:59:27;4647:249;4671:6;4667:1;:10;4647:249;;;4713:172;4751:11;:17;;4786:7;4818:8;;4827:1;4818:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4855:15;4713:20;:172::i;:::-;4698:9;4708:1;4698:12;;;;;;;;:::i;:::-;;;;;;;;;;:187;4679:3;;;;:::i;:::-;;;;4647:249;;;-1:-1:-1;4913:9:27;;4248:681;-1:-1:-1;;;;;;;4248:681:27:o;3347:312:20:-;1051:10;;-1:-1:-1;;;;;1051:10:20;1029;:33;1021:77;;;;-1:-1:-1;;;1021:77:20;;18528:2:72;1021:77:20;;;18510:21:72;18567:2;18547:18;;;18540:30;18606:33;18586:18;;;18579:61;18657:18;;1021:77:20;18500:181:72;1021:77:20;3524:5:::1;-1:-1:-1::0;;;;;3511:18:20::1;:9;-1:-1:-1::0;;;;;3511:18:20::1;;3507:114;;-1:-1:-1::0;;;;;4009:18:1;;;3983:7;4009:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;3545:65:20::1;::::0;4009:18:1;;:27;;3572:37:20::1;::::0;3602:7;;3572:37:::1;:::i;3545:65::-;3631:21;3637:5;3644:7;3631:5;:21::i;:::-;3347:312:::0;;;:::o;3127:282:27:-;-1:-1:-1;;;;;3361:16:27;;;;;;:9;:16;;;;;3299;;3334:68;;3379:11;;3392:9;;3334:26;:68::i;:::-;3327:75;3127:282;-1:-1:-1;;;;;;3127:282:27:o;2176:126:4:-;-1:-1:-1;;;;;2271:14:4;;2245:7;2271:14;;;:7;:14;;;;;864::11;2271:24:4;773:112:11;5304:627:27;5424:16;5473:8;5456:14;5473:8;5531:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5531:21:27;-1:-1:-1;5563:63:27;;;;;;;;5603:15;5563:63;-1:-1:-1;;;;;5563:63:27;;;;;-1:-1:-1;;;5563:63:27;;;;;;;;-1:-1:-1;;;5563:63:27;;;;;;;;;;;5498:54;;-1:-1:-1;5563:37:27;5637:257;5661:6;5657:1;:10;5637:257;;;5707:176;5745:21;5784:7;5816:8;;5825:1;5816:11;;;;;;;:::i;5707:176::-;5688:13;5702:1;5688:16;;;;;;;;:::i;:::-;;;;;;;;;;:195;5669:3;;;;:::i;:::-;;;;5637:257;;;-1:-1:-1;5911:13:27;;5304:627;-1:-1:-1;;;;;5304:627:27:o;3443:263::-;3597:16;3632:67;3659:15;3676:11;;3689:9;;3632:26;:67::i;:::-;3625:74;;3443:263;;;;;;;:::o;2764:171:20:-;1051:10;;-1:-1:-1;;;;;1051:10:20;1029;:33;1021:77;;;;-1:-1:-1;;;1021:77:20;;18528:2:72;1021:77:20;;;18510:21:72;18567:2;18547:18;;;18540:30;18606:33;18586:18;;;18579:61;18657:18;;1021:77:20;18500:181:72;1021:77:20;2907:21:::1;2913:5;2920:7;2907:5;:21::i;6279:639:27:-:0;6517:9;6498:15;:28;;6490:73;;;;-1:-1:-1;;;6490:73:27;;13401:2:72;6490:73:27;;;13383:21:72;;;13420:18;;;13413:30;13479:34;13459:18;;;13452:62;13531:18;;6490:73:27;13373:182:72;6490:73:27;6574:18;6616;6636:5;6643:12;6657:16;6667:5;6657:9;:16::i;:::-;6605:80;;;;;;8788:25:72;;;;-1:-1:-1;;;;;8910:15:72;;;8890:18;;;8883:43;8962:15;;8942:18;;;8935:43;8994:18;;;8987:34;9037:19;;;9030:35;;;8760:19;;6605:80:27;;;;;;;;;;;;6595:91;;;;;;6574:112;;6697:12;6712:28;6729:10;6712:16;:28::i;:::-;6697:43;;6751:14;6768:31;6782:4;6788:2;6792;6796;6768:13;:31::i;:::-;6751:48;;6827:5;-1:-1:-1;;;;;6817:15:27;:6;-1:-1:-1;;;;;6817:15:27;;6809:61;;;;-1:-1:-1;;;6809:61:27;;18126:2:72;6809:61:27;;;18108:21:72;18165:2;18145:18;;;18138:30;18204:34;18184:18;;;18177:62;18275:3;18255:18;;;18248:31;18296:19;;6809:61:27;18098:223:72;6809:61:27;6881:30;6891:5;6898:12;6881:9;:30::i;:::-;6480:438;;;6279:639;;;;;;:::o;2295:102:1:-;2351:13;2383:7;2376:14;;;;;:::i;3740:474:27:-;-1:-1:-1;;;;;3940:16:27;;3887:7;3940:16;;;:9;:16;;;;;;;;3986:221;;;;;;;;;-1:-1:-1;;;;;3986:221:27;;;;;-1:-1:-1;;;3986:221:27;;;;;;;;;;;-1:-1:-1;;;3986:221:27;;;;;;;;;;;;3940:16;3986:221;;4036:13;;;;4107:10;4143:8;4177:15;3986:32;:221::i;:::-;3967:240;3740:474;-1:-1:-1;;;;;3740:474:27:o;2730:363::-;-1:-1:-1;;;;;2868:16:27;;2815:7;2868:16;;;:9;:16;;;;;;;;2914:172;;;;;;;;;-1:-1:-1;;;;;2914:172:27;;;;;-1:-1:-1;;;2914:172:27;;;;;;;;;;;-1:-1:-1;;;2914:172:27;;;;;;;;;;;;2868:16;2914:172;;2952:13;;;;3023:7;3056:15;2914:20;:172::i;6386:405:1:-;666:10:10;6479:4:1;6522:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;6522:34:1;;;;;;;;;;6574:35;;;;6566:85;;;;-1:-1:-1;;;6566:85:1;;18888:2:72;6566:85:1;;;18870:21:72;18927:2;18907:18;;;18900:30;18966:34;18946:18;;;18939:62;19037:7;19017:18;;;19010:35;19062:19;;6566:85:1;18860:227:72;6566:85:1;6685:67;666:10:10;6708:7:1;6736:15;6717:16;:34;6685:8;:67::i;:::-;-1:-1:-1;6780:4:1;;6386:405;-1:-1:-1;;;6386:405:1:o;3664:172::-;3750:4;3766:42;666:10:10;3790:9:1;3801:6;3766:9;:42::i;1489:626:4:-;1724:8;1705:15;:27;;1697:69;;;;-1:-1:-1;;;1697:69:4;;13762:2:72;1697:69:4;;;13744:21:72;13801:2;13781:18;;;13774:30;13840:31;13820:18;;;13813:59;13889:18;;1697:69:4;13734:179:72;1697:69:4;1777:18;1819:16;1837:5;1844:7;1853:5;1860:16;1870:5;1860:9;:16::i;:::-;1808:79;;;;;;9363:25:72;;;;-1:-1:-1;;;;;9485:15:72;;;9465:18;;;9458:43;9537:15;;;;9517:18;;;9510:43;9569:18;;;9562:34;9612:19;;;9605:35;9656:19;;;9649:35;;;9335:19;;1808:79:4;;;;;;;;;;;;1798:90;;;;;;1777:111;;1899:12;1914:28;1931:10;1914:16;:28::i;:::-;1899:43;;1953:14;1970:28;1984:4;1990:1;1993;1996;1970:13;:28::i;:::-;1953:45;;2026:5;-1:-1:-1;;;;;2016:15:4;:6;-1:-1:-1;;;;;2016:15:4;;2008:58;;;;-1:-1:-1;;;2008:58:4;;15741:2:72;2008:58:4;;;15723:21:72;15780:2;15760:18;;;15753:30;15819:32;15799:18;;;15792:60;15869:18;;2008:58:4;15713:180:72;2008:58:4;2077:31;2086:5;2093:7;2102:5;2077:8;:31::i;:::-;1687:428;;;1489:626;;;;;;;:::o;9962:370:1:-;-1:-1:-1;;;;;10093:19:1;;10085:68;;;;-1:-1:-1;;;10085:68:1;;17721:2:72;10085:68:1;;;17703:21:72;17760:2;17740:18;;;17733:30;17799:34;17779:18;;;17772:62;17870:6;17850:18;;;17843:34;17894:19;;10085:68:1;17693:226:72;10085:68:1;-1:-1:-1;;;;;10171:21:1;;10163:68;;;;-1:-1:-1;;;10163:68:1;;12998:2:72;10163:68:1;;;12980:21:72;13037:2;13017:18;;;13010:30;13076:34;13056:18;;;13049:62;13147:4;13127:18;;;13120:32;13169:19;;10163:68:1;12970:224:72;10163:68:1;-1:-1:-1;;;;;10242:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10293:32;;8493:25:72;;;10293:32:1;;8466:18:72;10293:32:1;;;;;;;9962:370;;;:::o;7265:713::-;-1:-1:-1;;;;;7400:20:1;;7392:70;;;;-1:-1:-1;;;7392:70:1;;16911:2:72;7392:70:1;;;16893:21:72;16950:2;16930:18;;;16923:30;16989:34;16969:18;;;16962:62;17060:7;17040:18;;;17033:35;17085:19;;7392:70:1;16883:227:72;7392:70:1;-1:-1:-1;;;;;7480:23:1;;7472:71;;;;-1:-1:-1;;;7472:71:1;;11831:2:72;7472:71:1;;;11813:21:72;11870:2;11850:18;;;11843:30;11909:34;11889:18;;;11882:62;11980:5;11960:18;;;11953:33;12003:19;;7472:71:1;11803:225:72;7472:71:1;7554:47;7575:6;7583:9;7594:6;7554:20;:47::i;:::-;-1:-1:-1;;;;;7636:17:1;;7612:21;7636:17;;;;;;;;;;;7671:23;;;;7663:74;;;;-1:-1:-1;;;7663:74:1;;14120:2:72;7663:74:1;;;14102:21:72;14159:2;14139:18;;;14132:30;14198:34;14178:18;;;14171:62;14269:8;14249:18;;;14242:36;14295:19;;7663:74:1;14092:228:72;7663:74:1;-1:-1:-1;;;;;7771:17:1;;;:9;:17;;;;;;;;;;;7791:22;;;7771:42;;7833:20;;;;;;;;:30;;7807:6;;7771:9;7833:30;;7807:6;;7833:30;:::i;:::-;;;;;;;;7896:9;-1:-1:-1;;;;;7879:35:1;7888:6;-1:-1:-1;;;;;7879:35:1;;7907:6;7879:35;;;;8493:25:72;;8481:2;8466:18;;8448:76;7879:35:1;;;;;;;;7925:46;7382:596;7265:713;;;:::o;8020:409:45:-;8243:7;8262:19;8298:12;8284:26;;:11;:26;;;:55;;8328:11;8284:55;;;8313:12;8284:55;8262:77;;8356:66;8370:6;8378:15;8395:12;8409;8356:13;:66::i;7206:353:27:-;-1:-1:-1;;;;;3436:18:1;;;7272:15:27;3436:18:1;;;;;;;;;;;;7342:9:27;:16;;;;;;;3436:18:1;;7342:16:27;;;;7373:22;;;;7369:59;;;7411:7;;7206:353;;:::o;7369:59::-;-1:-1:-1;;;;;7438:16:27;;;;;;;:9;:16;;;;;:22;;;;;;;;;;;;;7471:44;7485:15;7438:22;7507:7;7471:13;:44::i;:::-;7548:3;-1:-1:-1;;;;;7531:21:27;7541:5;-1:-1:-1;;;;;7531:21:27;;;;;;;;;;;7262:297;;7206:353;;:::o;2990:275:13:-;3043:7;3083:16;3066:13;:33;3062:197;;;-1:-1:-1;3122:24:13;;2990:275::o;3062:197::-;-1:-1:-1;3447:73:13;;;3206:10;3447:73;;;;9954:25:72;;;;3218:12:13;9995:18:72;;;9988:34;3232:15:13;10038:18:72;;;10031:34;3491:13:13;10081:18:72;;;10074:34;3514:4:13;10124:19:72;;;;10117:84;;;;3447:73:13;;;;;;;;;;9926:19:72;;;;3447:73:13;;;3437:84;;;;;;2426:113:4:o;8254:389:1:-;-1:-1:-1;;;;;8337:21:1;;8329:65;;;;-1:-1:-1;;;8329:65:1;;19294:2:72;8329:65:1;;;19276:21:72;19333:2;19313:18;;;19306:30;19372:33;19352:18;;;19345:61;19423:18;;8329:65:1;19266:181:72;8329:65:1;8405:49;8434:1;8438:7;8447:6;8405:20;:49::i;:::-;8481:6;8465:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8497:18:1;;:9;:18;;;;;;;;;;:28;;8519:6;;8497:9;:28;;8519:6;;8497:28;:::i;:::-;;;;-1:-1:-1;;8540:37:1;;8493:25:72;;;-1:-1:-1;;;;;8540:37:1;;;8557:1;;8540:37;;8481:2:72;8466:18;8540:37:1;;;;;;;6115:130:27;;:::o;8963:576:1:-;-1:-1:-1;;;;;9046:21:1;;9038:67;;;;-1:-1:-1;;;9038:67:1;;16509:2:72;9038:67:1;;;16491:21:72;16548:2;16528:18;;;16521:30;16587:34;16567:18;;;16560:62;16658:3;16638:18;;;16631:31;16679:19;;9038:67:1;16481:223:72;9038:67:1;9116:49;9137:7;9154:1;9158:6;9116:20;:49::i;:::-;-1:-1:-1;;;;;9201:18:1;;9176:22;9201:18;;;;;;;;;;;9237:24;;;;9229:71;;;;-1:-1:-1;;;9229:71:1;;12235:2:72;9229:71:1;;;12217:21:72;12274:2;12254:18;;;12247:30;12313:34;12293:18;;;12286:62;12384:4;12364:18;;;12357:32;12406:19;;9229:71:1;12207:224:72;9229:71:1;-1:-1:-1;;;;;9334:18:1;;:9;:18;;;;;;;;;;9355:23;;;9334:44;;9398:12;:22;;9372:6;;9334:9;9398:22;;9372:6;;9398:22;:::i;:::-;;;;-1:-1:-1;;9436:37:1;;8493:25:72;;;9462:1:1;;-1:-1:-1;;;;;9436:37:1;;;;;8481:2:72;8466:18;9436:37:1;;;;;;;3347:312:20;;;:::o;7973:876:27:-;8156:16;8192:38;;;8184:86;;;;-1:-1:-1;;;8184:86:27;;17317:2:72;8184:86:27;;;17299:21:72;17356:2;17336:18;;;17329:30;17395:34;17375:18;;;17368:62;17466:5;17446:18;;;17439:33;17489:19;;8184:86:27;17289:225:72;8184:86:27;8281:63;;;;;;;;;;-1:-1:-1;;;;;8281:63:27;;;;;-1:-1:-1;;;8281:63:27;;;;;;;;-1:-1:-1;;;8281:63:27;;;;;;;;;;;:44;8404:11;8390:33;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8390:33:27;-1:-1:-1;8355:68:27;-1:-1:-1;8466:15:27;8433:23;8493:317;8513:22;;;8493:317;;;8577:222;8627:8;:14;;8659;8698:11;;8710:1;8698:14;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;8738:9;;8748:1;8738:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;8769:16;8577:32;:222::i;:::-;8556:15;8572:1;8556:18;;;;;;;;:::i;:::-;;;;;;;;;;:243;8537:3;;;;:::i;:::-;;;;8493:317;;;-1:-1:-1;8827:15:27;;7973:876;-1:-1:-1;;;;;;;;7973:876:27:o;2670:203:4:-;-1:-1:-1;;;;;2790:14:4;;2730:15;2790:14;;;:7;:14;;;;;864::11;;996:1;978:19;;;;864:14;2849:17:4;2747:126;2670:203;;;:::o;4153:165:13:-;4230:7;4256:55;4278:20;:18;:20::i;:::-;4300:10;8683:57:12;;7108:66:72;8683:57:12;;;7096:79:72;7191:11;;;7184:27;;;7227:12;;;7220:28;;;8647:7:12;;7264:12:72;;8683:57:12;;;;;;;;;;;;8673:68;;;;;;8666:75;;8554:194;;;;;7390:270;7513:7;7533:17;7552:18;7574:25;7585:4;7591:1;7594;7597;7574:10;:25::i;:::-;7532:67;;;;7609:18;7621:5;7609:11;:18::i;:::-;-1:-1:-1;7644:9:12;7390:270;-1:-1:-1;;;;;7390:270:12:o;5873:466:45:-;6132:7;6151:14;6179:12;6168:23;;:8;:23;;;:49;;6209:8;6168:49;;;6194:12;6168:49;6151:66;;6247:85;6273:6;6281:15;6298:10;6310:7;6319:12;6247:25;:85::i;:::-;6228:104;5873:466;-1:-1:-1;;;;;;;5873:466:45:o;8880:457:27:-;8996:3;-1:-1:-1;;;;;8987:12:27;:5;-1:-1:-1;;;;;8987:12:27;;8983:49;;;8880:457;;;:::o;8983:49::-;9042:21;-1:-1:-1;;;;;9077:19:27;;;9073:82;;-1:-1:-1;;;;;;9128:16:27;;;;;;;:9;:16;;;;;;;9073:82;9165:19;-1:-1:-1;;;;;9198:17:27;;;9194:76;;-1:-1:-1;;;;;;9245:14:27;;;;;;;:9;:14;;;;;;;9194:76;9280:50;9294:13;9309:11;9322:7;9280:13;:50::i;:::-;8973:364;;8880:457;;;:::o;10662:1769:45:-;-1:-1:-1;;;;;;;;;10885:7:45;-1:-1:-1;;;;;;;;;10885:7:45;;;-1:-1:-1;;;;;;;;;;;;;;;;;11075:35:45;11086:6;11094:15;11075:10;:35::i;:::-;11236:20;;;;11043:67;;-1:-1:-1;11043:67:45;-1:-1:-1;11236:51:45;;:24;;;;;11261:11;;11274:12;;11236:24;:51;:::i;:::-;11232:112;;;-1:-1:-1;;11310:23:45;;-1:-1:-1;;;;;11303:30:45;;-1:-1:-1;11303:30:45;;-1:-1:-1;11303:30:45;11232:112;11354:22;11464:35;11475:6;11483:15;11464:10;:35::i;:::-;11620:20;;;;11432:67;;-1:-1:-1;11432:67:45;;-1:-1:-1;11605:50:45;;:14;;;;;11620:20;11642:12;;11605:14;:50;:::i;:::-;11601:89;;;11678:1;11671:8;;;;;;;;11601:89;11778:207;11819:6;11839:15;11868;11897:11;11922:15;:27;;;11963:12;11778:27;:207::i;:::-;11752:233;;;;;;;;12331:93;12368:9;:19;;;12389:10;:20;;;12411:12;12331:36;:93::i;:::-;12290:134;;12310:10;:17;;;12291:9;:16;;;:36;;;;:::i;:::-;12290:134;;;;:::i;:::-;-1:-1:-1;;;;;12271:153:45;;10662:1769;-1:-1:-1;;;;;;;;;10662:1769:45:o;9669:746:27:-;-1:-1:-1;;;;;9852:19:27;;;:40;;;;-1:-1:-1;;;;;;9875:17:27;;;;9852:40;9848:306;;;9908:33;9933:7;9908:24;:33::i;:::-;9848:306;;;-1:-1:-1;;;;;10054:19:27;;;;;;:40;;-1:-1:-1;;;;;;10077:17:27;;;10054:40;10050:104;;;10110:33;10135:7;10110:24;:33::i;:::-;-1:-1:-1;;;;;10233:19:27;;;10229:83;;10268:33;10286:5;10293:7;10268:17;:33::i;:::-;-1:-1:-1;;;;;10334:17:27;;;10330:79;;10367:31;10385:3;10390:7;10367:17;:31::i;5654:1603:12:-;5780:7;;6704:66;6691:79;;6687:161;;;-1:-1:-1;6802:1:12;;-1:-1:-1;6806:30:12;6786:51;;6687:161;6861:1;:7;;6866:2;6861:7;;:18;;;;;6872:1;:7;;6877:2;6872:7;;6861:18;6857:100;;;-1:-1:-1;6911:1:12;;-1:-1:-1;6915:30:12;6895:51;;6857:100;7068:24;;;7051:14;7068:24;;;;;;;;;10439:25:72;;;10512:4;10500:17;;10480:18;;;10473:45;;;;10534:18;;;10527:34;;;10577:18;;;10570:34;;;7068:24:12;;10411:19:72;;7068:24:12;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7068:24:12;;-1:-1:-1;;7068:24:12;;;-1:-1:-1;;;;;;;7106:20:12;;7102:101;;7158:1;7162:29;7142:50;;;;;;;7102:101;7221:6;-1:-1:-1;7229:20:12;;-1:-1:-1;5654:1603:12;;;;;;;;:::o;443:631::-;520:20;511:5;:29;;;;;;;;:::i;:::-;;507:561;;;443:631;:::o;507:561::-;616:29;607:5;:38;;;;;;;;:::i;:::-;;603:465;;;661:34;;-1:-1:-1;;;661:34:12;;11478:2:72;661:34:12;;;11460:21:72;11517:2;11497:18;;;11490:30;11556:26;11536:18;;;11529:54;11600:18;;661:34:12;11450:174:72;603:465:12;725:35;716:5;:44;;;;;;;;:::i;:::-;;712:356;;;776:41;;-1:-1:-1;;;776:41:12;;12638:2:72;776:41:12;;;12620:21:72;12677:2;12657:18;;;12650:30;12716:33;12696:18;;;12689:61;12767:18;;776:41:12;12610:181:72;712:356:12;847:30;838:5;:39;;;;;;;;:::i;:::-;;834:234;;;893:44;;-1:-1:-1;;;893:44:12;;14935:2:72;893:44:12;;;14917:21:72;14974:2;14954:18;;;14947:30;15013:34;14993:18;;;14986:62;15084:4;15064:18;;;15057:32;15106:19;;893:44:12;14907:224:72;834:234:12;967:30;958:5;:39;;;;;;;;:::i;:::-;;954:114;;;1013:44;;-1:-1:-1;;;1013:44:12;;15338:2:72;1013:44:12;;;15320:21:72;15377:2;15357:18;;;15350:30;15416:34;15396:18;;;15389:62;15487:4;15467:18;;;15460:32;15509:19;;1013:44:12;15310:224:72;8715:1315:45;8974:7;8994:22;9018:41;9063:69;9087:6;9107:15;9063:10;:69::i;:::-;8993:139;;;;9144:22;9168:41;9213:69;9237:6;9257:15;9213:10;:69::i;:::-;9143:139;;;;9293:43;9339:223;9367:6;9387:15;9416:7;9437;9458:15;9487;9516:10;9540:12;9339:14;:223::i;:::-;9293:269;;9573:41;9617:221;9645:6;9665:15;9694:7;9715;9736:15;9765;9794:8;9816:12;9617:14;:221::i;:::-;9573:265;;9933:90;9970:7;:17;;;9989:9;:19;;;10010:12;9933:36;:90::i;:::-;9895:128;;9913:9;:16;;;9896:7;:14;;;:33;;;;:::i;:::-;9895:128;;;;:::i;:::-;-1:-1:-1;;;;;9888:135:45;;8715:1315;-1:-1:-1;;;;;;;;;;;;8715:1315:45:o;7364:354::-;-1:-1:-1;;;;;;;;;7528:12:45;-1:-1:-1;;;;;;;;;7528:12:45;7607:73;7633:15;:29;;;7607:73;;2055:8;7607:73;;:25;:73::i;:::-;7592:89;;7698:6;7705:5;7698:13;;;;;;;;;:::i;:::-;7691:20;;;;;;;;;7698:13;;7691:20;-1:-1:-1;;;;;7691:20:45;;;;-1:-1:-1;;;7691:20:45;;;;;;;;7364:354;;7691:20;;-1:-1:-1;7364:354:45;;-1:-1:-1;;7364:354:45:o;1658:417:43:-;1765:4;1854:10;1848:16;;:2;:16;;;;:36;;;;;1874:10;1868:16;;:2;:16;;;;1848:36;1844:57;;;1899:2;1893:8;;:2;:8;;;;1886:15;;;;1844:57;1912:17;1937:10;1932:15;;:2;:15;;;:33;;1955:10;;;;1960:5;1955:10;:::i;:::-;1932:33;;;1950:2;1932:33;;;1912:53;;;;1975:17;2000:10;1995:15;;:2;:15;;;:33;;2018:10;;;;2023:5;2018:10;:::i;:::-;1995:33;;;2013:2;1995:33;;;1975:53;;2046:22;;;;;1658:417;-1:-1:-1;;;;;1658:417:43:o;6599:505:45:-;-1:-1:-1;;;;;;;;;6763:12:45;-1:-1:-1;;;;;;;;;6763:12:45;6835:15;:29;;;6827:37;;6881:6;6888:5;6881:13;;;;;;;;;:::i;:::-;6874:20;;;;;;;;;6881:13;;6874:20;-1:-1:-1;;;;;6874:20:45;;;;-1:-1:-1;;;6874:20:45;;;;;;;;;;;;-1:-1:-1;7009:89:45;;7056:1;;-1:-1:-1;7078:6:45;7056:1;7078:9;;7009:89;6599:505;;;;;:::o;811:413:43:-;917:4;1005:10;999:16;;:2;:16;;;;:36;;;;;1025:10;1019:16;;:2;:16;;;;999:36;995:56;;;1049:2;1044:7;;:2;:7;;;1037:14;;;;995:56;1062:17;1087:10;1082:15;;:2;:15;;;:33;;1105:10;;;;1110:5;1105:10;:::i;:::-;1082:33;;;1100:2;1082:33;;;1062:53;;;;1125:17;1150:10;1145:15;;:2;:15;;;:33;;1168:10;;;;1173:5;1168:10;:::i;:::-;1145:33;;;1163:2;1145:33;;;1125:53;;1196:21;;;;811:413;-1:-1:-1;;;;;811:413:43:o;2382:2006:42:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2719:16:42;2738:23;2719:42;;;;2771:17;2817:8;2791:23;:34;;;:114;;2882:23;2791:114;;;;;2866:1;2840:23;;;;:8;:23;:::i;:::-;:27;;;;:::i;:::-;2771:134;;2915:20;2946:1436;3237:1;3213:20;3224:9;3213:8;:20;:::i;:::-;3212:26;;;;:::i;:::-;3197:41;;3266:13;3287:46;3306:12;3320;3287:46;;:18;:46::i;:::-;3266:69;;;;;;;;;:::i;:::-;3253:82;;;;;;;;;3266:69;;3253:82;-1:-1:-1;;;;;3253:82:42;;;;-1:-1:-1;;;3253:82:42;;;;;;;;;;;;-1:-1:-1;3253:82:42;3511:116;;3570:16;:12;3585:1;3570:16;:::i;:::-;3559:27;;3604:8;;;3511:116;3653:13;3674:51;3698:12;3712;3674:51;;:23;:51::i;:::-;3653:74;;;;;;;;;:::i;:::-;3641:86;;;;;;;;;3653:74;;3641:86;-1:-1:-1;;;;;3641:86:42;;;;;-1:-1:-1;;;3641:86:42;;;;;;;;;;;-1:-1:-1;;;3765:39:42;;:23;;;;3789:7;;3798:5;;3765:23;:39;:::i;:::-;3742:62;;3890:15;:58;;;;;3909:39;3921:9;:19;;;3942:5;3909:7;:11;;;;:39;;;;;:::i;:::-;3886:102;;;3968:5;;;;3886:102;4138:15;4133:239;;4185:16;4200:1;4185:12;:16;:::i;:::-;4173:28;;4133:239;;;4341:16;:12;4356:1;4341:16;:::i;:::-;4330:27;;4133:239;2959:1423;;2946:1436;;;2709:1679;;;2382:2006;;;;;;;;;:::o;2486:432:43:-;2600:6;2691:10;2685:16;;:2;:16;;;;:36;;;;;2711:10;2705:16;;:2;:16;;;;2685:36;2681:56;;;2730:7;2735:2;2730;:7;:::i;:::-;2723:14;;;;2681:56;2748:17;2773:10;2768:15;;:2;:15;;;:33;;2791:10;;;;2796:5;2791:10;:::i;:::-;2768:33;;;2786:2;2768:33;;;2748:53;;;;2811:17;2836:10;2831:15;;:2;:15;;;:33;;2854:10;;;;2859:5;2854:10;:::i;:::-;2831:33;;;2849:2;2831:33;;;2811:53;;;-1:-1:-1;2889:21:43;2811:53;2889:9;:21;:::i;13032:515:27:-;13106:12;13102:49;;13032:515;:::o;13102:49::-;13175:44;13233:46;13293:12;13318:86;13342:15;13359:19;:7;:17;:19::i;:::-;13387:15;13318:23;:86::i;:::-;13415:40;;:15;:40;;;;;;;;;;-1:-1:-1;;;;;13415:40:27;;;;;;;;;;;-1:-1:-1;;;13415:40:27;;;;;;;;-1:-1:-1;;;13415:40:27;;;;;;;;;;;;;-1:-1:-1;13161:243:27;-1:-1:-1;13161:243:27;-1:-1:-1;13466:75:27;;;;13498:32;;;20204:13:72;;-1:-1:-1;;;;;20200:78:72;20182:97;;20339:4;20327:17;;;20321:24;20347:10;20317:41;20295:20;;;20288:71;13498:32:27;;20155:18:72;13498:32:27;;;;;;;13092:455;;;13032:515;:::o;12217:629::-;12291:12;12287:49;;12217:629;:::o;12287:49::-;12360:44;12418:40;12472:12;12497:212;12538:15;12571:19;:7;:17;:19::i;:::-;12497:212;;;;;;;;;;;;;;;;;12679:15;12497:23;:212::i;11348:683::-;11450:12;11446:49;;11348:683;;:::o;11446:49::-;-1:-1:-1;;;;;11540:14:27;;11505:32;11540:14;;;:9;:14;;;;;;11505:32;;11712:195;11540:14;11779:19;:7;:17;:19::i;:::-;11712:195;;;;;;;;;;;;;;;;;11877:15;11712:23;:195::i;:::-;11918:33;;;;;;;;;;;;-1:-1:-1;;;;;11918:33:27;;;;;;;;;;;-1:-1:-1;;;11918:33:27;;;;;;;;-1:-1:-1;;;11918:33:27;;;;;;;;;;-1:-1:-1;11565:342:27;-1:-1:-1;11565:342:27;-1:-1:-1;11962:63:27;;;;11992:22;;;20204:13:72;;-1:-1:-1;;;;;20200:78:72;20182:97;;20339:4;20327:17;;;20321:24;20347:10;20317:41;20295:20;;;20288:71;-1:-1:-1;;;;;11992:22:27;;;;;20155:18:72;11992:22:27;;;;;;;11962:63;11436:595;;;;11348:683;;:::o;10598:567::-;10700:12;10696:49;;10598:567;;:::o;10696:49::-;-1:-1:-1;;;;;10790:14:27;;10755:32;10790:14;;;:9;:14;;;;;;10755:32;;10962:79;10790:14;10996:19;:7;:17;:19::i;13721:1898:45:-;-1:-1:-1;;;;;;;;;;;;;;;;;14268:49:45;14293:16;14311:5;14268:11;:21;;;:24;;;;:49;;;;;:::i;:::-;14264:159;;;14340:72;14357:11;14370:15;:23;;;-1:-1:-1;;;;;14340:72:45;14395:16;14340;:72::i;:::-;14333:79;;;;14264:159;14462:16;14437:41;;:11;:21;;;:41;;;14433:90;;;-1:-1:-1;14501:11:45;14494:18;;14433:90;14562:16;14537:41;;:11;:21;;;:41;;;14533:90;;;-1:-1:-1;14601:11:45;14594:18;;14533:90;14735:49;14755:11;:21;;;14778:5;14735:16;:19;;;;:49;;;;;:::i;:::-;14731:157;;;-1:-1:-1;14807:70:45;;;;;;;;;-1:-1:-1;14807:70:45;;;;;;;;;14800:77;;14731:157;14979:49;15042:48;15103:235;15148:6;15172:16;15206;15240;15274:15;:27;;;15319:5;15103:27;:235::i;:::-;14965:373;;;;15349:19;15434:96;15471:14;:24;;;15497:15;:25;;;15524:5;15434:36;:96::i;:::-;15371:159;;15396:15;:22;;;15372:14;:21;;;:46;;;;:::i;:::-;15371:159;;;;:::i;:::-;15349:181;;15548:64;15565:15;15582:11;15595:16;15548;:64::i;:::-;15541:71;;;;;13721:1898;;;;;;;;;;;:::o;1666:262:44:-;1776:7;1803:17;1799:56;;-1:-1:-1;1843:1:44;1836:8;;1799:56;1872:49;1905:1;1877:25;1890:12;1877:10;:25;:::i;:::-;:29;;;;:::i;:::-;1908:12;580:129;655:7;681:21;690:12;681:6;:21;:::i;2263:171::-;2367:7;2397:30;2402:10;:6;2411:1;2402:10;:::i;1090:195:41:-;1148:7;-1:-1:-1;;;;;1175:27:41;;;1167:79;;;;-1:-1:-1;;;1167:79:41;;14527:2:72;1167:79:41;;;14509:21:72;14566:2;14546:18;;;14539:30;14605:34;14585:18;;;14578:62;14676:9;14656:18;;;14649:37;14703:19;;1167:79:41;14499:229:72;1167:79:41;-1:-1:-1;1271:6:41;1090:195::o;3320:532:45:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3623:56:45;;;;;;;;;;-1:-1:-1;;;;;3623:56:45;;;;;-1:-1:-1;;;3623:56:45;;;;;;;;-1:-1:-1;;;3623:56:45;;;;;;;;;;;3588:10;;3721:56;3623;3731:14;;3623:56;3764:12;3721:9;:56::i;:::-;3812:23;;3689:88;;-1:-1:-1;3689:88:45;;-1:-1:-1;3689:88:45;-1:-1:-1;3812:33:45;;3838:7;;3812:33;:::i;:::-;-1:-1:-1;;;;;3787:58:45;;;-1:-1:-1;3787:14:45;;3320:532;;-1:-1:-1;3320:532:45;;-1:-1:-1;3320:532:45;-1:-1:-1;3320:532:45:o;4488:641::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4829:56:45;;;;;;;;;;-1:-1:-1;;;;;4829:56:45;;;;;;;-1:-1:-1;;;4829:56:45;;;;;;;;-1:-1:-1;;;4829:56:45;;;;;;;;;;;;;4794:10;;4940:14;;4904:34;;;-1:-1:-1;4904:34:45;4896:59;;;;-1:-1:-1;;;4896:59:45;;;;;;;;:::i;:::-;;4998:56;5008:8;:14;;5024:15;5041:12;4998:9;:56::i;:::-;5089:23;;4966:88;;-1:-1:-1;4966:88:45;;-1:-1:-1;4966:88:45;-1:-1:-1;5089:33:45;;5115:7;;5089:33;:::i;:::-;-1:-1:-1;;;;;5064:58:45;;;-1:-1:-1;5064:14:45;;4488:641;;-1:-1:-1;4488:641:45;;-1:-1:-1;4488:641:45;-1:-1:-1;;4488:641:45:o;16083:560::-;-1:-1:-1;;;;;;;;;;;;;;;;;16405:231:45;;;;;;;;16539:47;16556:12;:22;;;16580:5;16539;:16;;;;:47;;;;;:::i;:::-;16500:87;;;;:15;:87;:::i;:::-;16458:19;;:129;;;;:::i;:::-;-1:-1:-1;;;;;16405:231:45;;;;;16616:5;16405:231;;;;;16386:250;;16083:560;;;;;:::o;17215:969::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17532:10:45;17570:45;17619:35;17630:6;17638:15;17619:10;:35::i;:::-;17567:87;;;17740:12;17715:37;;:11;:21;;;:37;;;17711:112;;;17776:15;;-1:-1:-1;17793:11:45;-1:-1:-1;17806:5:45;;-1:-1:-1;17768:44:45;;17711:112;17833:41;17877:114;17907:11;17932:15;:23;;;-1:-1:-1;;;;;17877:114:45;17969:12;17877:16;:114::i;:::-;17833:158;;18042:7;18002:6;18009:15;:29;;;18002:37;;;;;;;;;:::i;:::-;:47;;;;;;;;;-1:-1:-1;;;18002:47:45;-1:-1:-1;;;;;18002:47:45;;;;;;;:37;;:47;;18103:21;18108:15;18103:4;:21::i;:::-;18060:64;-1:-1:-1;18163:7:45;;-1:-1:-1;18172:4:45;;-1:-1:-1;;;17215:969:45;;;;;;;;:::o;18439:866::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;18652:29:45;;;;18628:71;;;;;;;:23;:71::i;:::-;18576:133;;;;:29;;;:133;19162:27;;;;:45;;;19158:108;;;19254:1;19223:15;:27;;:32;;;;;;;:::i;:::-;;;;;-1:-1:-1;;19283:15:45;18439:866::o;14:196:72:-;82:20;;-1:-1:-1;;;;;131:54:72;;121:65;;111:2;;200:1;197;190:12;111:2;63:147;;;:::o;215:366::-;277:8;287:6;341:3;334:4;326:6;322:17;318:27;308:2;;359:1;356;349:12;308:2;-1:-1:-1;382:20:72;;425:18;414:30;;411:2;;;457:1;454;447:12;411:2;494:4;486:6;482:17;470:29;;554:3;547:4;537:6;534:1;530:14;522:6;518:27;514:38;511:47;508:2;;;571:1;568;561:12;586:171;653:20;;713:18;702:30;;692:41;;682:2;;747:1;744;737:12;762:156;828:20;;888:4;877:16;;867:27;;857:2;;908:1;905;898:12;923:186;982:6;1035:2;1023:9;1014:7;1010:23;1006:32;1003:2;;;1051:1;1048;1041:12;1003:2;1074:29;1093:9;1074:29;:::i;1114:260::-;1182:6;1190;1243:2;1231:9;1222:7;1218:23;1214:32;1211:2;;;1259:1;1256;1249:12;1211:2;1282:29;1301:9;1282:29;:::i;:::-;1272:39;;1330:38;1364:2;1353:9;1349:18;1330:38;:::i;:::-;1320:48;;1201:173;;;;;:::o;1379:328::-;1456:6;1464;1472;1525:2;1513:9;1504:7;1500:23;1496:32;1493:2;;;1541:1;1538;1531:12;1493:2;1564:29;1583:9;1564:29;:::i;:::-;1554:39;;1612:38;1646:2;1635:9;1631:18;1612:38;:::i;:::-;1602:48;;1697:2;1686:9;1682:18;1669:32;1659:42;;1483:224;;;;;:::o;1712:606::-;1823:6;1831;1839;1847;1855;1863;1871;1924:3;1912:9;1903:7;1899:23;1895:33;1892:2;;;1941:1;1938;1931:12;1892:2;1964:29;1983:9;1964:29;:::i;:::-;1954:39;;2012:38;2046:2;2035:9;2031:18;2012:38;:::i;:::-;2002:48;;2097:2;2086:9;2082:18;2069:32;2059:42;;2148:2;2137:9;2133:18;2120:32;2110:42;;2171:37;2203:3;2192:9;2188:19;2171:37;:::i;:::-;2161:47;;2255:3;2244:9;2240:19;2227:33;2217:43;;2307:3;2296:9;2292:19;2279:33;2269:43;;1882:436;;;;;;;;;;:::o;2323:537::-;2425:6;2433;2441;2449;2457;2465;2518:3;2506:9;2497:7;2493:23;2489:33;2486:2;;;2535:1;2532;2525:12;2486:2;2558:29;2577:9;2558:29;:::i;:::-;2548:39;;2606:38;2640:2;2629:9;2625:18;2606:38;:::i;:::-;2596:48;;2691:2;2680:9;2676:18;2663:32;2653:42;;2714:36;2746:2;2735:9;2731:18;2714:36;:::i;:::-;2704:46;;2797:3;2786:9;2782:19;2769:33;2759:43;;2849:3;2838:9;2834:19;2821:33;2811:43;;2476:384;;;;;;;;:::o;2865:509::-;2959:6;2967;2975;3028:2;3016:9;3007:7;3003:23;2999:32;2996:2;;;3044:1;3041;3034:12;2996:2;3067:29;3086:9;3067:29;:::i;:::-;3057:39;;3147:2;3136:9;3132:18;3119:32;3174:18;3166:6;3163:30;3160:2;;;3206:1;3203;3196:12;3160:2;3245:69;3306:7;3297:6;3286:9;3282:22;3245:69;:::i;:::-;2986:388;;3333:8;;-1:-1:-1;3219:95:72;;-1:-1:-1;;;;2986:388:72:o;3379:843::-;3508:6;3516;3524;3532;3540;3593:2;3581:9;3572:7;3568:23;3564:32;3561:2;;;3609:1;3606;3599:12;3561:2;3632:29;3651:9;3632:29;:::i;:::-;3622:39;;3712:2;3701:9;3697:18;3684:32;3735:18;3776:2;3768:6;3765:14;3762:2;;;3792:1;3789;3782:12;3762:2;3831:69;3892:7;3883:6;3872:9;3868:22;3831:69;:::i;:::-;3919:8;;-1:-1:-1;3805:95:72;-1:-1:-1;4007:2:72;3992:18;;3979:32;;-1:-1:-1;4023:16:72;;;4020:2;;;4052:1;4049;4042:12;4020:2;;4091:71;4154:7;4143:8;4132:9;4128:24;4091:71;:::i;:::-;3551:671;;;;-1:-1:-1;3551:671:72;;-1:-1:-1;4181:8:72;;4065:97;3551:671;-1:-1:-1;;;3551:671:72:o;4227:346::-;4294:6;4302;4355:2;4343:9;4334:7;4330:23;4326:32;4323:2;;;4371:1;4368;4361:12;4323:2;4394:29;4413:9;4394:29;:::i;:::-;4384:39;;4473:2;4462:9;4458:18;4445:32;4517:6;4510:5;4506:18;4499:5;4496:29;4486:2;;4539:1;4536;4529:12;4486:2;4562:5;4552:15;;;4313:260;;;;;:::o;4578:254::-;4646:6;4654;4707:2;4695:9;4686:7;4682:23;4678:32;4675:2;;;4723:1;4720;4713:12;4675:2;4746:29;4765:9;4746:29;:::i;:::-;4736:39;4822:2;4807:18;;;;4794:32;;-1:-1:-1;;;4665:167:72:o;4837:258::-;4904:6;4912;4965:2;4953:9;4944:7;4940:23;4936:32;4933:2;;;4981:1;4978;4971:12;4933:2;5004:29;5023:9;5004:29;:::i;:::-;4994:39;;5052:37;5085:2;5074:9;5070:18;5052:37;:::i;5100:330::-;5175:6;5183;5191;5244:2;5232:9;5223:7;5219:23;5215:32;5212:2;;;5260:1;5257;5250:12;5212:2;5283:29;5302:9;5283:29;:::i;:::-;5273:39;;5331:37;5364:2;5353:9;5349:18;5331:37;:::i;:::-;5321:47;;5387:37;5420:2;5409:9;5405:18;5387:37;:::i;:::-;5377:47;;5202:228;;;;;:::o;5435:435::-;5520:6;5528;5581:2;5569:9;5560:7;5556:23;5552:32;5549:2;;;5597:1;5594;5587:12;5549:2;5637:9;5624:23;5670:18;5662:6;5659:30;5656:2;;;5702:1;5699;5692:12;5656:2;5741:69;5802:7;5793:6;5782:9;5778:22;5741:69;:::i;:::-;5829:8;;5715:95;;-1:-1:-1;5539:331:72;-1:-1:-1;;;;5539:331:72:o;5875:769::-;5995:6;6003;6011;6019;6072:2;6060:9;6051:7;6047:23;6043:32;6040:2;;;6088:1;6085;6078:12;6040:2;6128:9;6115:23;6157:18;6198:2;6190:6;6187:14;6184:2;;;6214:1;6211;6204:12;6184:2;6253:69;6314:7;6305:6;6294:9;6290:22;6253:69;:::i;:::-;6341:8;;-1:-1:-1;6227:95:72;-1:-1:-1;6429:2:72;6414:18;;6401:32;;-1:-1:-1;6445:16:72;;;6442:2;;;6474:1;6471;6464:12;6442:2;;6513:71;6576:7;6565:8;6554:9;6550:24;6513:71;:::i;:::-;6030:614;;;;-1:-1:-1;6603:8:72;-1:-1:-1;;;;6030:614:72:o;6649:184::-;6707:6;6760:2;6748:9;6739:7;6735:23;6731:32;6728:2;;;6776:1;6773;6766:12;6728:2;6799:28;6817:9;6799:28;:::i;7518:632::-;7689:2;7741:21;;;7811:13;;7714:18;;;7833:22;;;7660:4;;7689:2;7912:15;;;;7886:2;7871:18;;;7660:4;7955:169;7969:6;7966:1;7963:13;7955:169;;;8030:13;;8018:26;;8099:15;;;;8064:12;;;;7991:1;7984:9;7955:169;;;-1:-1:-1;8141:3:72;;7669:481;-1:-1:-1;;;;;;7669:481:72:o;10615:656::-;10727:4;10756:2;10785;10774:9;10767:21;10817:6;10811:13;10860:6;10855:2;10844:9;10840:18;10833:34;10885:1;10895:140;10909:6;10906:1;10903:13;10895:140;;;11004:14;;;11000:23;;10994:30;10970:17;;;10989:2;10966:26;10959:66;10924:10;;10895:140;;;11053:6;11050:1;11047:13;11044:2;;;11123:1;11118:2;11109:6;11098:9;11094:22;11090:31;11083:42;11044:2;-1:-1:-1;11187:2:72;11175:15;-1:-1:-1;;11171:88:72;11156:104;;;;11262:2;11152:113;;10736:535;-1:-1:-1;;;10736:535:72:o;20741:273::-;20781:3;-1:-1:-1;;;;;20890:2:72;20887:1;20883:10;20920:2;20917:1;20913:10;20951:3;20947:2;20943:12;20938:3;20935:21;20932:2;;;20959:18;;:::i;:::-;20995:13;;20789:225;-1:-1:-1;;;;20789:225:72:o;21019:277::-;21059:3;-1:-1:-1;;;;;21172:2:72;21169:1;21165:10;21202:2;21199:1;21195:10;21233:3;21229:2;21225:12;21220:3;21217:21;21214:2;;;21241:18;;:::i;21301:226::-;21340:3;21368:8;21403:2;21400:1;21396:10;21433:2;21430:1;21426:10;21464:3;21460:2;21456:12;21451:3;21448:21;21445:2;;;21472:18;;:::i;21532:128::-;21572:3;21603:1;21599:6;21596:1;21593:13;21590:2;;;21609:18;;:::i;:::-;-1:-1:-1;21645:9:72;;21580:80::o;21665:230::-;21704:3;21732:12;21771:2;21768:1;21764:10;21801:2;21798:1;21794:10;21832:3;21828:2;21824:12;21819:3;21816:21;21813:2;;;21840:18;;:::i;21900:240::-;21940:1;-1:-1:-1;;;;;22051:2:72;22048:1;22044:10;22073:3;22063:2;;22080:18;;:::i;:::-;22118:10;;22114:20;;;;;21946:194;-1:-1:-1;;21946:194:72:o;22145:120::-;22185:1;22211;22201:2;;22216:18;;:::i;:::-;-1:-1:-1;22250:9:72;;22191:74::o;22270:311::-;22310:7;-1:-1:-1;;;;;22427:2:72;22424:1;22420:10;22457:2;22454:1;22450:10;22513:3;22509:2;22505:12;22500:3;22497:21;22490:3;22483:11;22476:19;22472:47;22469:2;;;22522:18;;:::i;:::-;22562:13;;22322:259;-1:-1:-1;;;;22322:259:72:o;22586:266::-;22626:4;-1:-1:-1;;;;;22759:10:72;;;;22729;;22781:12;;;22778:2;;;22796:18;;:::i;:::-;22833:13;;22635:217;-1:-1:-1;;;22635:217:72:o;22857:270::-;22897:4;-1:-1:-1;;;;;23034:10:72;;;;23004;;23056:12;;;23053:2;;;23071:18;;:::i;23132:125::-;23172:4;23200:1;23197;23194:8;23191:2;;;23205:18;;:::i;:::-;-1:-1:-1;23242:9:72;;23181:76::o;23262:221::-;23301:4;23330:10;23390;;;;23360;;23412:12;;;23409:2;;;23427:18;;:::i;23488:437::-;23567:1;23563:12;;;;23610;;;23631:2;;23685:4;23677:6;23673:17;23663:27;;23631:2;23738;23730:6;23727:14;23707:18;23704:38;23701:2;;;-1:-1:-1;;;23772:1:72;23765:88;23876:4;23873:1;23866:15;23904:4;23901:1;23894:15;23930:195;23969:3;24000:66;23993:5;23990:77;23987:2;;;24070:18;;:::i;:::-;-1:-1:-1;24117:1:72;24106:13;;23977:148::o;24130:112::-;24162:1;24188;24178:2;;24193:18;;:::i;:::-;-1:-1:-1;24227:9:72;;24168:74::o;24247:184::-;-1:-1:-1;;;24296:1:72;24289:88;24396:4;24393:1;24386:15;24420:4;24417:1;24410:15;24436:184;-1:-1:-1;;;24485:1:72;24478:88;24585:4;24582:1;24575:15;24609:4;24606:1;24599:15;24625:184;-1:-1:-1;;;24674:1:72;24667:88;24774:4;24771:1;24764:15;24798:4;24795:1;24788:15;24814:184;-1:-1:-1;;;24863:1:72;24856:88;24963:4;24960:1;24953:15;24987:4;24984:1;24977:15;25003:184;-1:-1:-1;;;25052:1:72;25045:88;25152:4;25149:1;25142:15;25176:4;25173:1;25166:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2780600",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "DOMAIN_SEPARATOR()": "infinite",
            "allowance(address,address)": "infinite",
            "approve(address,uint256)": "24666",
            "balanceOf(address)": "2608",
            "controller()": "2447",
            "controllerBurn(address,uint256)": "infinite",
            "controllerBurnFrom(address,address,uint256)": "infinite",
            "controllerDelegateFor(address,address)": "infinite",
            "controllerMint(address,uint256)": "infinite",
            "decimals()": "infinite",
            "decreaseAllowance(address,uint256)": "26999",
            "delegate(address)": "infinite",
            "delegateOf(address)": "2612",
            "delegateWithSignature(address,address,uint256,uint8,bytes32,bytes32)": "infinite",
            "getAccountDetails(address)": "2945",
            "getAverageBalanceBetween(address,uint64,uint64)": "infinite",
            "getAverageBalancesBetween(address,uint64[],uint64[])": "infinite",
            "getAverageTotalSuppliesBetween(uint64[],uint64[])": "infinite",
            "getBalanceAt(address,uint64)": "infinite",
            "getBalancesAt(address,uint64[])": "infinite",
            "getTotalSuppliesAt(uint64[])": "infinite",
            "getTotalSupplyAt(uint64)": "infinite",
            "getTwab(address,uint16)": "2973",
            "increaseAllowance(address,uint256)": "27047",
            "name()": "infinite",
            "nonces(address)": "2661",
            "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
            "symbol()": "infinite",
            "totalSupply()": "2372",
            "transfer(address,uint256)": "infinite",
            "transferFrom(address,address,uint256)": "infinite"
          },
          "internal": {
            "_beforeTokenTransfer(address,address,uint256)": "infinite",
            "_decreaseTotalSupplyTwab(uint256)": "infinite",
            "_decreaseUserTwab(address,uint256)": "infinite",
            "_delegate(address,address)": "infinite",
            "_getAverageBalancesBetween(struct TwabLib.Account storage pointer,uint64[] calldata,uint64[] calldata)": "infinite",
            "_increaseTotalSupplyTwab(uint256)": "infinite",
            "_increaseUserTwab(address,uint256)": "infinite",
            "_transferTwab(address,address,uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "DOMAIN_SEPARATOR()": "3644e515",
          "allowance(address,address)": "dd62ed3e",
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "controller()": "f77c4791",
          "controllerBurn(address,uint256)": "90596dd1",
          "controllerBurnFrom(address,address,uint256)": "631b5dfb",
          "controllerDelegateFor(address,address)": "33e39b61",
          "controllerMint(address,uint256)": "5d7b0758",
          "decimals()": "313ce567",
          "decreaseAllowance(address,uint256)": "a457c2d7",
          "delegate(address)": "5c19a95c",
          "delegateOf(address)": "8d22ea2a",
          "delegateWithSignature(address,address,uint256,uint8,bytes32,bytes32)": "919974dc",
          "getAccountDetails(address)": "2aceb534",
          "getAverageBalanceBetween(address,uint64,uint64)": "98b16f36",
          "getAverageBalancesBetween(address,uint64[],uint64[])": "68c7fd57",
          "getAverageTotalSuppliesBetween(uint64[],uint64[])": "8e6d536a",
          "getBalanceAt(address,uint64)": "9ecb0370",
          "getBalancesAt(address,uint64[])": "613ed6bd",
          "getTotalSuppliesAt(uint64[])": "85beb5f1",
          "getTotalSupplyAt(uint64)": "2d0dd686",
          "getTwab(address,uint16)": "36bb2a38",
          "increaseAllowance(address,uint256)": "39509351",
          "name()": "06fdde03",
          "nonces(address)": "7ecebe00",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
          "symbol()": "95d89b41",
          "totalSupply()": "18160ddd",
          "transfer(address,uint256)": "a9059cbb",
          "transferFrom(address,address,uint256)": "23b872dd"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct ObservationLib.Observation\",\"name\":\"newTotalSupplyTwab\",\"type\":\"tuple\"}],\"name\":\"NewTotalSupplyTwab\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct ObservationLib.Observation\",\"name\":\"newTwab\",\"type\":\"tuple\"}],\"name\":\"NewUserTwab\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"TicketInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controllerBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controllerBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"controllerDelegateFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controllerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"delegateOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newDelegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"delegateWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAccountDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint208\",\"name\":\"balance\",\"type\":\"uint208\"},{\"internalType\":\"uint24\",\"name\":\"nextTwabIndex\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"cardinality\",\"type\":\"uint24\"}],\"internalType\":\"struct TwabLib.AccountDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endTime\",\"type\":\"uint64\"}],\"name\":\"getAverageBalanceBetween\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_startTimes\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_endTimes\",\"type\":\"uint64[]\"}],\"name\":\"getAverageBalancesBetween\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_startTimes\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_endTimes\",\"type\":\"uint64[]\"}],\"name\":\"getAverageTotalSuppliesBetween\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_target\",\"type\":\"uint64\"}],\"name\":\"getBalanceAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_targets\",\"type\":\"uint64[]\"}],\"name\":\"getBalancesAt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_targets\",\"type\":\"uint64[]\"}],\"name\":\"getTotalSuppliesAt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_target\",\"type\":\"uint64\"}],\"name\":\"getTotalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"getTwab\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct ObservationLib.Observation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"PoolTogether Inc Team\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_controller\":\"ERC20 ticket controller address (ie: Prize Pool address).\",\"_name\":\"ERC20 ticket token name.\",\"_symbol\":\"ERC20 ticket token symbol.\",\"decimals_\":\"ERC20 ticket token decimals.\"}},\"controllerBurn(address,uint256)\":{\"details\":\"May be overridden to provide more granular control over burning\",\"params\":{\"_amount\":\"Amount of tokens to burn\",\"_user\":\"Address of the holder account to burn tokens from\"}},\"controllerBurnFrom(address,address,uint256)\":{\"details\":\"May be overridden to provide more granular control over operator-burning\",\"params\":{\"_amount\":\"Amount of tokens to burn\",\"_operator\":\"Address of the operator performing the burn action via the controller contract\",\"_user\":\"Address of the holder account to burn tokens from\"}},\"controllerDelegateFor(address,address)\":{\"params\":{\"delegate\":\"The new delegate\",\"user\":\"The user for whom to delegate\"}},\"controllerMint(address,uint256)\":{\"details\":\"May be overridden to provide more granular control over minting\",\"params\":{\"_amount\":\"Amount of tokens to mint\",\"_user\":\"Address of the receiver of the minted tokens\"}},\"decimals()\":{\"details\":\"This value should be equal to the decimals of the token used to deposit into the pool.\",\"returns\":{\"_0\":\"uint8 decimals.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"Transfers (including mints) trigger the storage of a TWAB in delegate(s) account, instead of the targetted sender and/or recipient address(s).To reset the delegate, pass the zero address (0x000.000) as `to` parameter.Current delegate address should be different from the new delegate address `to`.\",\"params\":{\"to\":\"Recipient of delegated TWAB.\"}},\"delegateOf(address)\":{\"details\":\"Address of the delegate will be the zero address if `user` has not delegated their tickets.\",\"params\":{\"user\":\"Address of the delegator.\"},\"returns\":{\"_0\":\"Address of the delegate.\"}},\"delegateWithSignature(address,address,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The timestamp by which this must be submitted\",\"delegate\":\"The new delegate\",\"r\":\"The r portion of the ECDSA sig\",\"s\":\"The s portion of the ECDSA sig\",\"user\":\"The user who is delegating\",\"v\":\"The v portion of the ECDSA sig\"}},\"getAccountDetails(address)\":{\"params\":{\"user\":\"The user for whom to fetch the TWAB context.\"},\"returns\":{\"_0\":\"The TWAB context, which includes { balance, nextTwabIndex, cardinality }\"}},\"getAverageBalanceBetween(address,uint64,uint64)\":{\"params\":{\"endTime\":\"The end time of the time frame.\",\"startTime\":\"The start time of the time frame.\",\"user\":\"The user whose balance is checked.\"},\"returns\":{\"_0\":\"The average balance that the user held during the time frame.\"}},\"getAverageBalancesBetween(address,uint64[],uint64[])\":{\"params\":{\"endTimes\":\"The end time of the time frame.\",\"startTimes\":\"The start time of the time frame.\",\"user\":\"The user whose balance is checked.\"},\"returns\":{\"_0\":\"The average balance that the user held during the time frame.\"}},\"getAverageTotalSuppliesBetween(uint64[],uint64[])\":{\"params\":{\"endTimes\":\"Array of end times.\",\"startTimes\":\"Array of start times.\"},\"returns\":{\"_0\":\"The average total supplies held during the time frame.\"}},\"getBalanceAt(address,uint64)\":{\"params\":{\"timestamp\":\"Timestamp at which we want to retrieve the TWAB balance.\",\"user\":\"Address of the user whose TWAB is being fetched.\"},\"returns\":{\"_0\":\"The TWAB balance at the given timestamp.\"}},\"getBalancesAt(address,uint64[])\":{\"params\":{\"timestamps\":\"Timestamps range at which we want to retrieve the TWAB balances.\",\"user\":\"Address of the user whose TWABs are being fetched.\"},\"returns\":{\"_0\":\"`user` TWAB balances.\"}},\"getTotalSuppliesAt(uint64[])\":{\"params\":{\"timestamps\":\"Timestamps range at which we want to retrieve the total supply TWAB balance.\"},\"returns\":{\"_0\":\"Total supply TWAB balances.\"}},\"getTotalSupplyAt(uint64)\":{\"params\":{\"timestamp\":\"Timestamp at which we want to retrieve the total supply TWAB balance.\"},\"returns\":{\"_0\":\"The total supply TWAB balance at the given timestamp.\"}},\"getTwab(address,uint16)\":{\"params\":{\"index\":\"The index of the TWAB to fetch.\",\"user\":\"The user for whom to fetch the TWAB.\"},\"returns\":{\"_0\":\"The TWAB, which includes the twab amount and the timestamp.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"title\":\"PoolTogether V4 Ticket\",\"version\":1},\"userdoc\":{\"events\":{\"Delegated(address,address)\":{\"notice\":\"Emitted when TWAB balance has been delegated to another user.\"},\"NewTotalSupplyTwab((uint224,uint32))\":{\"notice\":\"Emitted when a new total supply TWAB has been recorded.\"},\"NewUserTwab(address,(uint224,uint32))\":{\"notice\":\"Emitted when a new TWAB has been recorded.\"},\"TicketInitialized(string,string,uint8,address)\":{\"notice\":\"Emitted when ticket is initialized.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs Ticket with passed parameters.\"},\"controller()\":{\"notice\":\"Interface to the contract responsible for controlling mint/burn\"},\"controllerBurn(address,uint256)\":{\"notice\":\"Allows the controller to burn tokens from a user account\"},\"controllerBurnFrom(address,address,uint256)\":{\"notice\":\"Allows an operator via the controller to burn tokens on behalf of a user account\"},\"controllerDelegateFor(address,address)\":{\"notice\":\"Allows the controller to delegate on a users behalf.\"},\"controllerMint(address,uint256)\":{\"notice\":\"Allows the controller to mint tokens for a user account\"},\"decimals()\":{\"notice\":\"Returns the ERC20 controlled token decimals.\"},\"delegate(address)\":{\"notice\":\"Delegate time-weighted average balances to an alternative address.\"},\"delegateOf(address)\":{\"notice\":\"Retrieves the address of the delegate to whom `user` has delegated their tickets.\"},\"delegateWithSignature(address,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Allows a user to delegate via signature\"},\"getAccountDetails(address)\":{\"notice\":\"Gets a users twab context.  This is a struct with their balance, next twab index, and cardinality.\"},\"getAverageBalanceBetween(address,uint64,uint64)\":{\"notice\":\"Retrieves the average balance held by a user for a given time frame.\"},\"getAverageBalancesBetween(address,uint64[],uint64[])\":{\"notice\":\"Retrieves the average balances held by a user for a given time frame.\"},\"getAverageTotalSuppliesBetween(uint64[],uint64[])\":{\"notice\":\"Retrieves the average total supply balance for a set of given time frames.\"},\"getBalanceAt(address,uint64)\":{\"notice\":\"Retrieves `user` TWAB balance.\"},\"getBalancesAt(address,uint64[])\":{\"notice\":\"Retrieves `user` TWAB balances.\"},\"getTotalSuppliesAt(uint64[])\":{\"notice\":\"Retrieves the total supply TWAB balance between the given timestamps range.\"},\"getTotalSupplyAt(uint64)\":{\"notice\":\"Retrieves the total supply TWAB balance at the given timestamp.\"},\"getTwab(address,uint16)\":{\"notice\":\"Gets the TWAB at a specific index for a user.\"}},\"notice\":\"The Ticket extends the standard ERC20 and ControlledToken interfaces with time-weighted average balance functionality. The average balance held by a user between two timestamps can be calculated, as well as the historic balance.  The  historic total supply is available as well as the average total supply between two timestamps. A user may \\\"delegate\\\" their balance; increasing another user's historic balance while retaining their tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooltogether/v4-core/contracts/Ticket.sol\":\"Ticket\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x7ce4684ee1fac31ee5671df82b30c10bd2ebf88add2f63524ed00618a8486907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@pooltogether/v4-core/contracts/ControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\nimport \\\"./interfaces/IControlledToken.sol\\\";\\n\\n/**\\n * @title  PoolTogether V4 Controlled ERC20 Token\\n * @author PoolTogether Inc Team\\n * @notice  ERC20 Tokens with a controller for minting & burning\\n */\\ncontract ControlledToken is ERC20Permit, IControlledToken {\\n    /* ============ Global Variables ============ */\\n\\n    /// @notice Interface to the contract responsible for controlling mint/burn\\n    address public override controller;\\n\\n    /// @notice ERC20 controlled token decimals.\\n    uint8 private immutable _decimals;\\n\\n    /* ============ Events ============ */\\n\\n    /// @dev Emitted when contract is deployed\\n    event Deployed(string name, string symbol, uint8 decimals, address indexed controller);\\n\\n    /* ============ Modifiers ============ */\\n\\n    /// @dev Function modifier to ensure that the caller is the controller contract\\n    modifier onlyController() {\\n        require(msg.sender == address(controller), \\\"ControlledToken/only-controller\\\");\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /// @notice Deploy the Controlled Token with Token Details and the Controller\\n    /// @param _name The name of the Token\\n    /// @param _symbol The symbol for the Token\\n    /// @param decimals_ The number of decimals for the Token\\n    /// @param _controller Address of the Controller contract for minting & burning\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 decimals_,\\n        address _controller\\n    ) ERC20Permit(\\\"PoolTogether ControlledToken\\\") ERC20(_name, _symbol) {\\n        require(address(_controller) != address(0), \\\"ControlledToken/controller-not-zero-address\\\");\\n        controller = _controller;\\n\\n        require(decimals_ > 0, \\\"ControlledToken/decimals-gt-zero\\\");\\n        _decimals = decimals_;\\n\\n        emit Deployed(_name, _symbol, decimals_, _controller);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice Allows the controller to mint tokens for a user account\\n    /// @dev May be overridden to provide more granular control over minting\\n    /// @param _user Address of the receiver of the minted tokens\\n    /// @param _amount Amount of tokens to mint\\n    function controllerMint(address _user, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        onlyController\\n    {\\n        _mint(_user, _amount);\\n    }\\n\\n    /// @notice Allows the controller to burn tokens from a user account\\n    /// @dev May be overridden to provide more granular control over burning\\n    /// @param _user Address of the holder account to burn tokens from\\n    /// @param _amount Amount of tokens to burn\\n    function controllerBurn(address _user, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        onlyController\\n    {\\n        _burn(_user, _amount);\\n    }\\n\\n    /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n    /// @dev May be overridden to provide more granular control over operator-burning\\n    /// @param _operator Address of the operator performing the burn action via the controller contract\\n    /// @param _user Address of the holder account to burn tokens from\\n    /// @param _amount Amount of tokens to burn\\n    function controllerBurnFrom(\\n        address _operator,\\n        address _user,\\n        uint256 _amount\\n    ) external virtual override onlyController {\\n        if (_operator != _user) {\\n            _approve(_user, _operator, allowance(_user, _operator) - _amount);\\n        }\\n\\n        _burn(_user, _amount);\\n    }\\n\\n    /// @notice Returns the ERC20 controlled token decimals.\\n    /// @dev This value should be equal to the decimals of the token used to deposit into the pool.\\n    /// @return uint8 decimals.\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x21f5de3127c4038f8933917b83cbb3f1785041617943f3810d12e95223c3a997\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/Ticket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./libraries/ExtendedSafeCastLib.sol\\\";\\nimport \\\"./libraries/TwabLib.sol\\\";\\nimport \\\"./interfaces/ITicket.sol\\\";\\nimport \\\"./ControlledToken.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 Ticket\\n  * @author PoolTogether Inc Team\\n  * @notice The Ticket extends the standard ERC20 and ControlledToken interfaces with time-weighted average balance functionality.\\n            The average balance held by a user between two timestamps can be calculated, as well as the historic balance.  The \\n            historic total supply is available as well as the average total supply between two timestamps.\\n\\n            A user may \\\"delegate\\\" their balance; increasing another user's historic balance while retaining their tokens.\\n*/\\ncontract Ticket is ControlledToken, ITicket {\\n    using SafeERC20 for IERC20;\\n    using ExtendedSafeCastLib for uint256;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DELEGATE_TYPEHASH =\\n        keccak256(\\\"Delegate(address user,address delegate,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice Record of token holders TWABs for each account.\\n    mapping(address => TwabLib.Account) internal userTwabs;\\n\\n    /// @notice Record of tickets total supply and ring buff parameters used for observation.\\n    TwabLib.Account internal totalSupplyTwab;\\n\\n    /// @notice Mapping of delegates.  Each address can delegate their ticket power to another.\\n    mapping(address => address) internal delegates;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @notice Constructs Ticket with passed parameters.\\n     * @param _name ERC20 ticket token name.\\n     * @param _symbol ERC20 ticket token symbol.\\n     * @param decimals_ ERC20 ticket token decimals.\\n     * @param _controller ERC20 ticket controller address (ie: Prize Pool address).\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 decimals_,\\n        address _controller\\n    ) ControlledToken(_name, _symbol, decimals_, _controller) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc ITicket\\n    function getAccountDetails(address _user)\\n        external\\n        view\\n        override\\n        returns (TwabLib.AccountDetails memory)\\n    {\\n        return userTwabs[_user].details;\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getTwab(address _user, uint16 _index)\\n        external\\n        view\\n        override\\n        returns (ObservationLib.Observation memory)\\n    {\\n        return userTwabs[_user].twabs[_index];\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getBalanceAt(address _user, uint64 _target) external view override returns (uint256) {\\n        TwabLib.Account storage account = userTwabs[_user];\\n\\n        return\\n            TwabLib.getBalanceAt(\\n                account.twabs,\\n                account.details,\\n                uint32(_target),\\n                uint32(block.timestamp)\\n            );\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getAverageBalancesBetween(\\n        address _user,\\n        uint64[] calldata _startTimes,\\n        uint64[] calldata _endTimes\\n    ) external view override returns (uint256[] memory) {\\n        return _getAverageBalancesBetween(userTwabs[_user], _startTimes, _endTimes);\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getAverageTotalSuppliesBetween(\\n        uint64[] calldata _startTimes,\\n        uint64[] calldata _endTimes\\n    ) external view override returns (uint256[] memory) {\\n        return _getAverageBalancesBetween(totalSupplyTwab, _startTimes, _endTimes);\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getAverageBalanceBetween(\\n        address _user,\\n        uint64 _startTime,\\n        uint64 _endTime\\n    ) external view override returns (uint256) {\\n        TwabLib.Account storage account = userTwabs[_user];\\n\\n        return\\n            TwabLib.getAverageBalanceBetween(\\n                account.twabs,\\n                account.details,\\n                uint32(_startTime),\\n                uint32(_endTime),\\n                uint32(block.timestamp)\\n            );\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getBalancesAt(address _user, uint64[] calldata _targets)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256 length = _targets.length;\\n        uint256[] memory _balances = new uint256[](length);\\n\\n        TwabLib.Account storage twabContext = userTwabs[_user];\\n        TwabLib.AccountDetails memory details = twabContext.details;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _balances[i] = TwabLib.getBalanceAt(\\n                twabContext.twabs,\\n                details,\\n                uint32(_targets[i]),\\n                uint32(block.timestamp)\\n            );\\n        }\\n\\n        return _balances;\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getTotalSupplyAt(uint64 _target) external view override returns (uint256) {\\n        return\\n            TwabLib.getBalanceAt(\\n                totalSupplyTwab.twabs,\\n                totalSupplyTwab.details,\\n                uint32(_target),\\n                uint32(block.timestamp)\\n            );\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getTotalSuppliesAt(uint64[] calldata _targets)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256 length = _targets.length;\\n        uint256[] memory totalSupplies = new uint256[](length);\\n\\n        TwabLib.AccountDetails memory details = totalSupplyTwab.details;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            totalSupplies[i] = TwabLib.getBalanceAt(\\n                totalSupplyTwab.twabs,\\n                details,\\n                uint32(_targets[i]),\\n                uint32(block.timestamp)\\n            );\\n        }\\n\\n        return totalSupplies;\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function delegateOf(address _user) external view override returns (address) {\\n        return delegates[_user];\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function controllerDelegateFor(address _user, address _to) external override onlyController {\\n        _delegate(_user, _to);\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function delegateWithSignature(\\n        address _user,\\n        address _newDelegate,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external virtual override {\\n        require(block.timestamp <= _deadline, \\\"Ticket/delegate-expired-deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_DELEGATE_TYPEHASH, _user, _newDelegate, _useNonce(_user), _deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, _v, _r, _s);\\n        require(signer == _user, \\\"Ticket/delegate-invalid-signature\\\");\\n\\n        _delegate(_user, _newDelegate);\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function delegate(address _to) external virtual override {\\n        _delegate(msg.sender, _to);\\n    }\\n\\n    /// @notice Delegates a users chance to another\\n    /// @param _user The user whose balance should be delegated\\n    /// @param _to The delegate\\n    function _delegate(address _user, address _to) internal {\\n        uint256 balance = balanceOf(_user);\\n        address currentDelegate = delegates[_user];\\n\\n        if (currentDelegate == _to) {\\n            return;\\n        }\\n\\n        delegates[_user] = _to;\\n\\n        _transferTwab(currentDelegate, _to, balance);\\n\\n        emit Delegated(_user, _to);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Retrieves the average balances held by a user for a given time frame.\\n     * @param _account The user whose balance is checked.\\n     * @param _startTimes The start time of the time frame.\\n     * @param _endTimes The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function _getAverageBalancesBetween(\\n        TwabLib.Account storage _account,\\n        uint64[] calldata _startTimes,\\n        uint64[] calldata _endTimes\\n    ) internal view returns (uint256[] memory) {\\n        require(_startTimes.length == _endTimes.length, \\\"Ticket/start-end-times-length-match\\\");\\n\\n        TwabLib.AccountDetails memory accountDetails = _account.details;\\n\\n        uint256[] memory averageBalances = new uint256[](_startTimes.length);\\n        uint32 currentTimestamp = uint32(block.timestamp);\\n\\n        for (uint256 i = 0; i < _startTimes.length; i++) {\\n            averageBalances[i] = TwabLib.getAverageBalanceBetween(\\n                _account.twabs,\\n                accountDetails,\\n                uint32(_startTimes[i]),\\n                uint32(_endTimes[i]),\\n                currentTimestamp\\n            );\\n        }\\n\\n        return averageBalances;\\n    }\\n\\n    // @inheritdoc ERC20\\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override {\\n        if (_from == _to) {\\n            return;\\n        }\\n\\n        address _fromDelegate;\\n        if (_from != address(0)) {\\n            _fromDelegate = delegates[_from];\\n        }\\n\\n        address _toDelegate;\\n        if (_to != address(0)) {\\n            _toDelegate = delegates[_to];\\n        }\\n\\n        _transferTwab(_fromDelegate, _toDelegate, _amount);\\n    }\\n\\n    /// @notice Transfers the given TWAB balance from one user to another\\n    /// @param _from The user to transfer the balance from.  May be zero in the event of a mint.\\n    /// @param _to The user to transfer the balance to.  May be zero in the event of a burn.\\n    /// @param _amount The balance that is being transferred.\\n    function _transferTwab(address _from, address _to, uint256 _amount) internal {\\n        // If we are transferring tokens from an undelegated account to a delegated account\\n        if (_from == address(0) && _to != address(0)) {\\n            _increaseTotalSupplyTwab(_amount);\\n        } else // if we are transferring tokens from a delegated account to an undelegated account\\n        if (_from != address(0) && _to == address(0)) {\\n            _decreaseTotalSupplyTwab(_amount);\\n        } // otherwise if the to delegate is set, then increase their twab\\n\\n        if (_from != address(0)) {\\n            _decreaseUserTwab(_from, _amount);\\n        }\\n        \\n        if (_to != address(0)) {\\n            _increaseUserTwab(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Increase `_to` TWAB balance.\\n     * @param _to Address of the delegate.\\n     * @param _amount Amount of tokens to be added to `_to` TWAB balance.\\n     */\\n    function _increaseUserTwab(\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        TwabLib.Account storage _account = userTwabs[_to];\\n\\n        (\\n            TwabLib.AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        ) = TwabLib.increaseBalance(_account, _amount.toUint208(), uint32(block.timestamp));\\n\\n        _account.details = accountDetails;\\n\\n        if (isNew) {\\n            emit NewUserTwab(_to, twab);\\n        }\\n    }\\n\\n    /**\\n     * @notice Decrease `_to` TWAB balance.\\n     * @param _to Address of the delegate.\\n     * @param _amount Amount of tokens to be added to `_to` TWAB balance.\\n     */\\n    function _decreaseUserTwab(\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        TwabLib.Account storage _account = userTwabs[_to];\\n\\n        (\\n            TwabLib.AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        ) = TwabLib.decreaseBalance(\\n                _account,\\n                _amount.toUint208(),\\n                \\\"ERC20: burn amount exceeds balance\\\",\\n                uint32(block.timestamp)\\n            );\\n\\n        _account.details = accountDetails;\\n\\n        if (isNew) {\\n            emit NewUserTwab(_to, twab);\\n        }\\n    }\\n\\n    /// @notice Decreases the total supply twab.  Should be called anytime a balance moves from delegated to undelegated\\n    /// @param _amount The amount to decrease the total by\\n    function _decreaseTotalSupplyTwab(uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        (\\n            TwabLib.AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory tsTwab,\\n            bool tsIsNew\\n        ) = TwabLib.decreaseBalance(\\n                totalSupplyTwab,\\n                _amount.toUint208(),\\n                \\\"Ticket/burn-amount-exceeds-total-supply-twab\\\",\\n                uint32(block.timestamp)\\n            );\\n\\n        totalSupplyTwab.details = accountDetails;\\n\\n        if (tsIsNew) {\\n            emit NewTotalSupplyTwab(tsTwab);\\n        }\\n    }\\n\\n    /// @notice Increases the total supply twab.  Should be called anytime a balance moves from undelegated to delegated\\n    /// @param _amount The amount to increase the total by\\n    function _increaseTotalSupplyTwab(uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        (\\n            TwabLib.AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory _totalSupply,\\n            bool tsIsNew\\n        ) = TwabLib.increaseBalance(totalSupplyTwab, _amount.toUint208(), uint32(block.timestamp));\\n\\n        totalSupplyTwab.details = accountDetails;\\n\\n        if (tsIsNew) {\\n            emit NewTotalSupplyTwab(_totalSupply);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8d29005026db83f71d0e77314eea458426c66cf8a5534b740f6c4eb9a7c6494\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/IControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/** @title IControlledToken\\n  * @author PoolTogether Inc Team\\n  * @notice ERC20 Tokens with a controller for minting & burning.\\n*/\\ninterface IControlledToken is IERC20 {\\n\\n    /** \\n        @notice Interface to the contract responsible for controlling mint/burn\\n    */\\n    function controller() external view returns (address);\\n\\n    /** \\n      * @notice Allows the controller to mint tokens for a user account\\n      * @dev May be overridden to provide more granular control over minting\\n      * @param user Address of the receiver of the minted tokens\\n      * @param amount Amount of tokens to mint\\n    */\\n    function controllerMint(address user, uint256 amount) external;\\n\\n    /** \\n      * @notice Allows the controller to burn tokens from a user account\\n      * @dev May be overridden to provide more granular control over burning\\n      * @param user Address of the holder account to burn tokens from\\n      * @param amount Amount of tokens to burn\\n    */\\n    function controllerBurn(address user, uint256 amount) external;\\n\\n    /** \\n      * @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n      * @dev May be overridden to provide more granular control over operator-burning\\n      * @param operator Address of the operator performing the burn action via the controller contract\\n      * @param user Address of the holder account to burn tokens from\\n      * @param amount Amount of tokens to burn\\n    */\\n    function controllerBurnFrom(\\n        address operator,\\n        address user,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x90dceeec1eea6e49021e8db88b084f3f0c503c60b6f7e0bbecd2529ffde87ef3\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/ITicket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/TwabLib.sol\\\";\\nimport \\\"./IControlledToken.sol\\\";\\n\\ninterface ITicket is IControlledToken {\\n    /**\\n     * @notice A struct containing details for an Account.\\n     * @param balance The current balance for an Account.\\n     * @param nextTwabIndex The next available index to store a new twab.\\n     * @param cardinality The number of recorded twabs (plus one!).\\n     */\\n    struct AccountDetails {\\n        uint224 balance;\\n        uint16 nextTwabIndex;\\n        uint16 cardinality;\\n    }\\n\\n    /**\\n     * @notice Combines account details with their twab history.\\n     * @param details The account details.\\n     * @param twabs The history of twabs for this account.\\n     */\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[65535] twabs;\\n    }\\n\\n    /**\\n     * @notice Emitted when TWAB balance has been delegated to another user.\\n     * @param delegator Address of the delegator.\\n     * @param delegate Address of the delegate.\\n     */\\n    event Delegated(address indexed delegator, address indexed delegate);\\n\\n    /**\\n     * @notice Emitted when ticket is initialized.\\n     * @param name Ticket name (eg: PoolTogether Dai Ticket (Compound)).\\n     * @param symbol Ticket symbol (eg: PcDAI).\\n     * @param decimals Ticket decimals.\\n     * @param controller Token controller address.\\n     */\\n    event TicketInitialized(string name, string symbol, uint8 decimals, address indexed controller);\\n\\n    /**\\n     * @notice Emitted when a new TWAB has been recorded.\\n     * @param delegate The recipient of the ticket power (may be the same as the user).\\n     * @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\\n     */\\n    event NewUserTwab(\\n        address indexed delegate,\\n        ObservationLib.Observation newTwab\\n    );\\n\\n    /**\\n     * @notice Emitted when a new total supply TWAB has been recorded.\\n     * @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\\n     */\\n    event NewTotalSupplyTwab(ObservationLib.Observation newTotalSupplyTwab);\\n\\n    /**\\n     * @notice Retrieves the address of the delegate to whom `user` has delegated their tickets.\\n     * @dev Address of the delegate will be the zero address if `user` has not delegated their tickets.\\n     * @param user Address of the delegator.\\n     * @return Address of the delegate.\\n     */\\n    function delegateOf(address user) external view returns (address);\\n\\n    /**\\n    * @notice Delegate time-weighted average balances to an alternative address.\\n    * @dev    Transfers (including mints) trigger the storage of a TWAB in delegate(s) account, instead of the\\n              targetted sender and/or recipient address(s).\\n    * @dev    To reset the delegate, pass the zero address (0x000.000) as `to` parameter.\\n    * @dev Current delegate address should be different from the new delegate address `to`.\\n    * @param  to Recipient of delegated TWAB.\\n    */\\n    function delegate(address to) external;\\n\\n    /**\\n     * @notice Allows the controller to delegate on a users behalf.\\n     * @param user The user for whom to delegate\\n     * @param delegate The new delegate\\n     */\\n    function controllerDelegateFor(address user, address delegate) external;\\n\\n    /**\\n     * @notice Allows a user to delegate via signature\\n     * @param user The user who is delegating\\n     * @param delegate The new delegate\\n     * @param deadline The timestamp by which this must be submitted\\n     * @param v The v portion of the ECDSA sig\\n     * @param r The r portion of the ECDSA sig\\n     * @param s The s portion of the ECDSA sig\\n     */\\n    function delegateWithSignature(\\n        address user,\\n        address delegate,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Gets a users twab context.  This is a struct with their balance, next twab index, and cardinality.\\n     * @param user The user for whom to fetch the TWAB context.\\n     * @return The TWAB context, which includes { balance, nextTwabIndex, cardinality }\\n     */\\n    function getAccountDetails(address user) external view returns (TwabLib.AccountDetails memory);\\n\\n    /**\\n     * @notice Gets the TWAB at a specific index for a user.\\n     * @param user The user for whom to fetch the TWAB.\\n     * @param index The index of the TWAB to fetch.\\n     * @return The TWAB, which includes the twab amount and the timestamp.\\n     */\\n    function getTwab(address user, uint16 index)\\n        external\\n        view\\n        returns (ObservationLib.Observation memory);\\n\\n    /**\\n     * @notice Retrieves `user` TWAB balance.\\n     * @param user Address of the user whose TWAB is being fetched.\\n     * @param timestamp Timestamp at which we want to retrieve the TWAB balance.\\n     * @return The TWAB balance at the given timestamp.\\n     */\\n    function getBalanceAt(address user, uint64 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves `user` TWAB balances.\\n     * @param user Address of the user whose TWABs are being fetched.\\n     * @param timestamps Timestamps range at which we want to retrieve the TWAB balances.\\n     * @return `user` TWAB balances.\\n     */\\n    function getBalancesAt(address user, uint64[] calldata timestamps)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the average balance held by a user for a given time frame.\\n     * @param user The user whose balance is checked.\\n     * @param startTime The start time of the time frame.\\n     * @param endTime The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function getAverageBalanceBetween(\\n        address user,\\n        uint64 startTime,\\n        uint64 endTime\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the average balances held by a user for a given time frame.\\n     * @param user The user whose balance is checked.\\n     * @param startTimes The start time of the time frame.\\n     * @param endTimes The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function getAverageBalancesBetween(\\n        address user,\\n        uint64[] calldata startTimes,\\n        uint64[] calldata endTimes\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the total supply TWAB balance at the given timestamp.\\n     * @param timestamp Timestamp at which we want to retrieve the total supply TWAB balance.\\n     * @return The total supply TWAB balance at the given timestamp.\\n     */\\n    function getTotalSupplyAt(uint64 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the total supply TWAB balance between the given timestamps range.\\n     * @param timestamps Timestamps range at which we want to retrieve the total supply TWAB balance.\\n     * @return Total supply TWAB balances.\\n     */\\n    function getTotalSuppliesAt(uint64[] calldata timestamps)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the average total supply balance for a set of given time frames.\\n     * @param startTimes Array of start times.\\n     * @param endTimes Array of end times.\\n     * @return The average total supplies held during the time frame.\\n     */\\n    function getAverageTotalSuppliesBetween(\\n        uint64[] calldata startTimes,\\n        uint64[] calldata endTimes\\n    ) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xb9f6423a8a9c7394941cb84723b82cc66c5f815d689dc0562e612ae4d9f1cc27\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/ExtendedSafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary ExtendedSafeCastLib {\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 _value) internal pure returns (uint208) {\\n        require(_value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 _value) internal pure returns (uint224) {\\n        require(_value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(_value);\\n    }\\n}\\n\",\"keccak256\":\"0x115c924bebf6fbaeb8e9bce1586171cdb15478718a85f614c02a57966aad2fb8\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/ObservationLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\n\\n/**\\n* @title Observation Library\\n* @notice This library allows one to store an array of timestamped values and efficiently binary search them.\\n* @dev Largely pulled from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/c05a0e2c8c08c460fb4d05cfdda30b3ad8deeaac/contracts/libraries/Oracle.sol\\n* @author PoolTogether Inc.\\n*/\\nlibrary ObservationLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using SafeCast for uint256;\\n\\n    /// @notice The maximum number of observations\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /**\\n    * @notice Observation, which includes an amount and timestamp.\\n    * @param amount `amount` at `timestamp`.\\n    * @param timestamp Recorded `timestamp`.\\n    */\\n    struct Observation {\\n        uint224 amount;\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n    * @notice Fetches Observations `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\\n    * The result may be the same Observation, or adjacent Observations.\\n    * @dev The answer must be contained in the array used when the target is located within the stored Observation.\\n    * boundaries: older than the most recent Observation and younger, or the same age as, the oldest Observation.\\n    * @dev  If `_newestObservationIndex` is less than `_oldestObservationIndex`, it means that we've wrapped around the circular buffer.\\n    *       So the most recent observation will be at `_oldestObservationIndex + _cardinality - 1`, at the beginning of the circular buffer.\\n    * @param _observations List of Observations to search through.\\n    * @param _newestObservationIndex Index of the newest Observation. Right side of the circular buffer.\\n    * @param _oldestObservationIndex Index of the oldest Observation. Left side of the circular buffer.\\n    * @param _target Timestamp at which we are searching the Observation.\\n    * @param _cardinality Cardinality of the circular buffer we are searching through.\\n    * @param _time Timestamp at which we perform the binary search.\\n    * @return beforeOrAt Observation recorded before, or at, the target.\\n    * @return atOrAfter Observation recorded at, or after, the target.\\n    */\\n    function binarySearch(\\n        Observation[MAX_CARDINALITY] storage _observations,\\n        uint24 _newestObservationIndex,\\n        uint24 _oldestObservationIndex,\\n        uint32 _target,\\n        uint24 _cardinality,\\n        uint32 _time\\n    ) internal view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 leftSide = _oldestObservationIndex;\\n        uint256 rightSide = _newestObservationIndex < leftSide\\n            ? leftSide + _cardinality - 1\\n            : _newestObservationIndex;\\n        uint256 currentIndex;\\n\\n        while (true) {\\n            // We start our search in the middle of the `leftSide` and `rightSide`.\\n            // After each iteration, we narrow down the search to the left or the right side while still starting our search in the middle.\\n            currentIndex = (leftSide + rightSide) / 2;\\n\\n            beforeOrAt = _observations[uint24(RingBufferLib.wrap(currentIndex, _cardinality))];\\n            uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\\n\\n            // We've landed on an uninitialized timestamp, keep searching higher (more recently).\\n            if (beforeOrAtTimestamp == 0) {\\n                leftSide = currentIndex + 1;\\n                continue;\\n            }\\n\\n            atOrAfter = _observations[uint24(RingBufferLib.nextIndex(currentIndex, _cardinality))];\\n\\n            bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\\n\\n            // Check if we've found the corresponding Observation.\\n            if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\\n                break;\\n            }\\n\\n            // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower. To the left of the current index.\\n            if (!targetAtOrAfter) {\\n                rightSide = currentIndex - 1;\\n            } else {\\n                // Otherwise, we keep searching higher. To the left of the current index.\\n                leftSide = currentIndex + 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x225592b42013fc0af60822e75bc047d53b42a5fcf15f2173cdc3b50bea334b0a\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/OverflowSafeComparatorLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/// @title OverflowSafeComparatorLib library to share comparator functions between contracts\\n/// @dev Code taken from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/3e88af408132fc957e3e406f65a0ce2b1ca06c3d/contracts/libraries/Oracle.sol\\n/// @author PoolTogether Inc.\\nlibrary OverflowSafeComparatorLib {\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically < `_b`.\\n    function lt(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (bool) {\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return aAdjusted < bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically <= `_b`.\\n    function lte(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (bool) {\\n\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return aAdjusted <= bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamp subtractor\\n    /// @dev safe for 0 or 1 overflows, where `_a` and `_b` must be chronologically before or equal to time\\n    /// @param _a The subtraction left operand\\n    /// @param _b The subtraction right operand\\n    /// @param _timestamp The current time.  Expected to be chronologically after both.\\n    /// @return The difference between a and b, adjusted for overflow\\n    function checkedSub(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (uint32) {\\n        // No need to adjust if there hasn't been an overflow\\n\\n        if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return uint32(aAdjusted - bAdjusted);\\n    }\\n}\\n\",\"keccak256\":\"0x20630cf89e7b92462946defe979fd0e69fa119841d55886121948ad810778c74\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/RingBufferLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nlibrary RingBufferLib {\\n    /**\\n    * @notice Returns wrapped TWAB index.\\n    * @dev  In order to navigate the TWAB circular buffer, we need to use the modulo operator.\\n    * @dev  For example, if `_index` is equal to 32 and the TWAB circular buffer is of `_cardinality` 32,\\n    *       it will return 0 and will point to the first element of the array.\\n    * @param _index Index used to navigate through the TWAB circular buffer.\\n    * @param _cardinality TWAB buffer cardinality.\\n    * @return TWAB index.\\n    */\\n    function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n        return _index % _cardinality;\\n    }\\n\\n    /**\\n    * @notice Computes the negative offset from the given index, wrapped by the cardinality.\\n    * @dev  We add `_cardinality` to `_index` to be able to offset even if `_amount` is superior to `_cardinality`.\\n    * @param _index The index from which to offset\\n    * @param _amount The number of indices to offset.  This is subtracted from the given index.\\n    * @param _cardinality The number of elements in the ring buffer\\n    * @return Offsetted index.\\n     */\\n    function offset(\\n        uint256 _index,\\n        uint256 _amount,\\n        uint256 _cardinality\\n    ) internal pure returns (uint256) {\\n        return wrap(_index + _cardinality - _amount, _cardinality);\\n    }\\n\\n    /// @notice Returns the index of the last recorded TWAB\\n    /// @param _nextIndex The next available twab index.  This will be recorded to next.\\n    /// @param _cardinality The cardinality of the TWAB history.\\n    /// @return The index of the last recorded TWAB\\n    function newestIndex(uint256 _nextIndex, uint256 _cardinality)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_cardinality == 0) {\\n            return 0;\\n        }\\n\\n        return wrap(_nextIndex + _cardinality - 1, _cardinality);\\n    }\\n\\n    /// @notice Computes the ring buffer index that follows the given one, wrapped by cardinality\\n    /// @param _index The index to increment\\n    /// @param _cardinality The number of elements in the Ring Buffer\\n    /// @return The next index relative to the given index.  Will wrap around to 0 if the next index == cardinality\\n    function nextIndex(uint256 _index, uint256 _cardinality)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return wrap(_index + 1, _cardinality);\\n    }\\n}\\n\",\"keccak256\":\"0x052e3bf6bfb30f32950e322c853589a8d153cf34f4b1ee292b17eb46f2ae656c\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/libraries/TwabLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./ExtendedSafeCastLib.sol\\\";\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\nimport \\\"./ObservationLib.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 TwabLib (Library)\\n  * @author PoolTogether Inc Team\\n  * @dev    Time-Weighted Average Balance Library for ERC20 tokens.\\n  * @notice This TwabLib adds on-chain historical lookups to a user(s) time-weighted average balance.\\n            Each user is mapped to an Account struct containing the TWAB history (ring bufffer) and\\n            ring buffer parameters. Every token.transfer() creates a new TWAB checkpoint. The new TWAB\\n            checkpoint is stored in the circular ring buffer, as either a new checkpoint or rewriting\\n            a previous checkpoint with new parameters. The TwabLib (using existing blocktimes 1block/15sec)\\n            guarantees minimum 7.4 years of search history.\\n */\\nlibrary TwabLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using ExtendedSafeCastLib for uint256;\\n\\n    /**\\n      * @notice Sets max ring buffer length in the Account.twabs Observation list.\\n                As users transfer/mint/burn tickets new Observation checkpoints are\\n                recorded. The current max cardinality guarantees a six month minimum,\\n                of historical accurate lookups with current estimates of 1 new block\\n                every 15 seconds - the of course contain a transfer to trigger an\\n                observation write to storage.\\n      * @dev    The user Account.AccountDetails.cardinality parameter can NOT exceed\\n                the max cardinality variable. Preventing \\\"corrupted\\\" ring buffer lookup\\n                pointers and new observation checkpoints.\\n\\n                The MAX_CARDINALITY in fact guarantees at least 7.4 years of records:\\n                If 14 = block time in seconds\\n                (2**24) * 14 = 234881024 seconds of history\\n                234881024 / (365 * 24 * 60 * 60) ~= 7.44 years\\n    */\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /** @notice Struct ring buffer parameters for single user Account\\n      * @param balance       Current balance for an Account\\n      * @param nextTwabIndex Next uninitialized or updatable ring buffer checkpoint storage slot\\n      * @param cardinality   Current total \\\"initialized\\\" ring buffer checkpoints for single user AccountDetails.\\n                             Used to set initial boundary conditions for an efficient binary search.\\n    */\\n    struct AccountDetails {\\n        uint208 balance;\\n        uint24 nextTwabIndex;\\n        uint24 cardinality;\\n    }\\n\\n    /// @notice Combines account details with their twab history\\n    /// @param details The account details\\n    /// @param twabs The history of twabs for this account\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[MAX_CARDINALITY] twabs;\\n    }\\n\\n    /// @notice Increases an account's balance and records a new twab.\\n    /// @param _account The account whose balance will be increased\\n    /// @param _amount The amount to increase the balance by\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new AccountDetails\\n    /// @return twab The user's latest TWAB\\n    /// @return isNew Whether the TWAB is new\\n    function increaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        uint32 _currentTime\\n    )\\n        internal\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        AccountDetails memory _accountDetails = _account.details;\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        accountDetails.balance = _accountDetails.balance + _amount;\\n    }\\n\\n    /** @notice Calculates the next TWAB checkpoint for an account with a decreasing balance.\\n     * @dev    With Account struct and amount decreasing calculates the next TWAB observable checkpoint.\\n     * @param _account        Account whose balance will be decreased\\n     * @param _amount         Amount to decrease the balance by\\n     * @param _revertMessage  Revert message for insufficient balance\\n     * @return accountDetails Updated Account.details struct\\n     * @return twab           TWAB observation (with decreasing average)\\n     * @return isNew          Whether TWAB is new or calling twice in the same block\\n     */\\n    function decreaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        string memory _revertMessage,\\n        uint32 _currentTime\\n    )\\n        internal\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        AccountDetails memory _accountDetails = _account.details;\\n\\n        require(_accountDetails.balance >= _amount, _revertMessage);\\n\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        accountDetails.balance = _accountDetails.balance - _amount;\\n    }\\n\\n    /** @notice Calculates the average balance held by a user for a given time frame.\\n      * @dev    Finds the average balance between start and end timestamp epochs.\\n                Validates the supplied end time is within the range of elapsed time i.e. less then timestamp of now.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _startTime      Start of timestamp range as an epoch\\n      * @param _endTime        End of timestamp range as an epoch\\n      * @param _currentTime    Block.timestamp\\n      * @return Average balance of user held between epoch timestamps start and end\\n    */\\n    function getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 endTime = _endTime > _currentTime ? _currentTime : _endTime;\\n\\n        return\\n            _getAverageBalanceBetween(_twabs, _accountDetails, _startTime, endTime, _currentTime);\\n    }\\n\\n    /// @notice Retrieves the oldest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the oldest TWAB in the twabs array\\n    /// @return twab The oldest TWAB\\n    function oldestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = _accountDetails.nextTwabIndex;\\n        twab = _twabs[index];\\n\\n        // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n        if (twab.timestamp == 0) {\\n            index = 0;\\n            twab = _twabs[0];\\n        }\\n    }\\n\\n    /// @notice Retrieves the newest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the newest TWAB in the twabs array\\n    /// @return twab The newest TWAB\\n    function newestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = uint24(RingBufferLib.newestIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY));\\n        twab = _twabs[index];\\n    }\\n\\n    /// @notice Retrieves amount at `_targetTime` timestamp\\n    /// @param _twabs List of TWABs to search through.\\n    /// @param _accountDetails Accounts details\\n    /// @param _targetTime Timestamp at which the reserved TWAB should be for.\\n    /// @return uint256 TWAB amount at `_targetTime`.\\n    function getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 timeToTarget = _targetTime > _currentTime ? _currentTime : _targetTime;\\n        return _getBalanceAt(_twabs, _accountDetails, timeToTarget, _currentTime);\\n    }\\n\\n    /// @notice Calculates the average balance held by a user for a given time frame.\\n    /// @param _startTime The start time of the time frame.\\n    /// @param _endTime The end time of the time frame.\\n    /// @return The average balance that the user held during the time frame.\\n    function _getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        (uint24 oldestTwabIndex, ObservationLib.Observation memory oldTwab) = oldestTwab(\\n            _twabs,\\n            _accountDetails\\n        );\\n\\n        (uint24 newestTwabIndex, ObservationLib.Observation memory newTwab) = newestTwab(\\n            _twabs,\\n            _accountDetails\\n        );\\n\\n        ObservationLib.Observation memory startTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _startTime,\\n            _currentTime\\n        );\\n\\n        ObservationLib.Observation memory endTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _endTime,\\n            _currentTime\\n        );\\n\\n        // Difference in amount / time\\n        return (endTwab.amount - startTwab.amount) / OverflowSafeComparatorLib.checkedSub(endTwab.timestamp, startTwab.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Searches TWAB history and calculate the difference between amount(s)/timestamp(s) to return average balance\\n                between the Observations closes to the supplied targetTime.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _targetTime     Target timestamp to filter Observations in the ring buffer binary search\\n      * @param _currentTime    Block.timestamp\\n      * @return uint256 Time-weighted average amount between two closest observations.\\n    */\\n    function _getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        uint24 newestTwabIndex;\\n        ObservationLib.Observation memory afterOrAt;\\n        ObservationLib.Observation memory beforeOrAt;\\n        (newestTwabIndex, beforeOrAt) = newestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically after the newest TWAB, we can simply return the current balance\\n        if (beforeOrAt.timestamp.lte(_targetTime, _currentTime)) {\\n            return _accountDetails.balance;\\n        }\\n\\n        uint24 oldestTwabIndex;\\n        // Now, set before to the oldest TWAB\\n        (oldestTwabIndex, beforeOrAt) = oldestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically before the oldest TWAB, we can early return\\n        if (_targetTime.lt(beforeOrAt.timestamp, _currentTime)) {\\n            return 0;\\n        }\\n\\n        // Otherwise, we perform the `binarySearch`\\n        (beforeOrAt, afterOrAt) = ObservationLib.binarySearch(\\n            _twabs,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _targetTime,\\n            _accountDetails.cardinality,\\n            _currentTime\\n        );\\n\\n        // Sum the difference in amounts and divide by the difference in timestamps.\\n        // The time-weighted average balance uses time measured between two epoch timestamps as\\n        // a constaint on the measurement when calculating the time weighted average balance.\\n        return\\n            (afterOrAt.amount - beforeOrAt.amount) / OverflowSafeComparatorLib.checkedSub(afterOrAt.timestamp, beforeOrAt.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Calculates a user TWAB for a target timestamp using the historical TWAB records.\\n                The balance is linearly interpolated: amount differences / timestamp differences\\n                using the simple (after.amount - before.amount / end.timestamp - start.timestamp) formula.\\n    /** @dev    Binary search in _calculateTwab fails when searching out of bounds. Thus, before\\n                searching we exclude target timestamps out of range of newest/oldest TWAB(s).\\n                IF a search is before or after the range we \\\"extrapolate\\\" a Observation from the expected state.\\n      * @param _twabs           Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails  User AccountDetails struct loaded in memory\\n      * @param _newestTwab      Newest TWAB in history (end of ring buffer)\\n      * @param _oldestTwab      Olderst TWAB in history (end of ring buffer)\\n      * @param _newestTwabIndex Pointer in ring buffer to newest TWAB\\n      * @param _oldestTwabIndex Pointer in ring buffer to oldest TWAB\\n      * @param _targetTimestamp Epoch timestamp to calculate for time (T) in the TWAB\\n      * @param _time            Block.timestamp\\n      * @return accountDetails Updated Account.details struct\\n    */\\n    function _calculateTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        ObservationLib.Observation memory _newestTwab,\\n        ObservationLib.Observation memory _oldestTwab,\\n        uint24 _newestTwabIndex,\\n        uint24 _oldestTwabIndex,\\n        uint32 _targetTimestamp,\\n        uint32 _time\\n    ) private view returns (ObservationLib.Observation memory) {\\n        // If `_targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\\n        if (_newestTwab.timestamp.lt(_targetTimestamp, _time)) {\\n            return _computeNextTwab(_newestTwab, _accountDetails.balance, _targetTimestamp);\\n        }\\n\\n        if (_newestTwab.timestamp == _targetTimestamp) {\\n            return _newestTwab;\\n        }\\n\\n        if (_oldestTwab.timestamp == _targetTimestamp) {\\n            return _oldestTwab;\\n        }\\n\\n        // If `_targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\\n        if (_targetTimestamp.lt(_oldestTwab.timestamp, _time)) {\\n            return ObservationLib.Observation({ amount: 0, timestamp: _targetTimestamp });\\n        }\\n\\n        // Otherwise, both timestamps must be surrounded by twabs.\\n        (\\n            ObservationLib.Observation memory beforeOrAtStart,\\n            ObservationLib.Observation memory afterOrAtStart\\n        ) = ObservationLib.binarySearch(\\n                _twabs,\\n                _newestTwabIndex,\\n                _oldestTwabIndex,\\n                _targetTimestamp,\\n                _accountDetails.cardinality,\\n                _time\\n            );\\n\\n        uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) /\\n            OverflowSafeComparatorLib.checkedSub(afterOrAtStart.timestamp, beforeOrAtStart.timestamp, _time);\\n\\n        return _computeNextTwab(beforeOrAtStart, heldBalance, _targetTimestamp);\\n    }\\n\\n    /**\\n     * @notice Calculates the next TWAB using the newestTwab and updated balance.\\n     * @dev    Storage of the TWAB obersation is managed by the calling function and not _computeNextTwab.\\n     * @param _currentTwab    Newest Observation in the Account.twabs list\\n     * @param _currentBalance User balance at time of most recent (newest) checkpoint write\\n     * @param _time           Current block.timestamp\\n     * @return TWAB Observation\\n     */\\n    function _computeNextTwab(\\n        ObservationLib.Observation memory _currentTwab,\\n        uint224 _currentBalance,\\n        uint32 _time\\n    ) private pure returns (ObservationLib.Observation memory) {\\n        // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\\n        return\\n            ObservationLib.Observation({\\n                amount: _currentTwab.amount +\\n                    _currentBalance *\\n                    (_time.checkedSub(_currentTwab.timestamp, _time)),\\n                timestamp: _time\\n            });\\n    }\\n\\n    /// @notice Sets a new TWAB Observation at the next available index and returns the new account details.\\n    /// @dev Note that if _currentTime is before the last observation timestamp, it appears as an overflow\\n    /// @param _twabs The twabs array to insert into\\n    /// @param _accountDetails The current account details\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new account details\\n    /// @return twab The newest twab (may or may not be brand-new)\\n    /// @return isNew Whether the newest twab was created by this call\\n    function _nextTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _currentTime\\n    )\\n        private\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        (, ObservationLib.Observation memory _newestTwab) = newestTwab(_twabs, _accountDetails);\\n\\n        // if we're in the same block, return\\n        if (_newestTwab.timestamp == _currentTime) {\\n            return (_accountDetails, _newestTwab, false);\\n        }\\n\\n        ObservationLib.Observation memory newTwab = _computeNextTwab(\\n            _newestTwab,\\n            _accountDetails.balance,\\n            _currentTime\\n        );\\n\\n        _twabs[_accountDetails.nextTwabIndex] = newTwab;\\n\\n        AccountDetails memory nextAccountDetails = push(_accountDetails);\\n\\n        return (nextAccountDetails, newTwab, true);\\n    }\\n\\n    /// @notice \\\"Pushes\\\" a new element on the AccountDetails ring buffer, and returns the new AccountDetails\\n    /// @param _accountDetails The account details from which to pull the cardinality and next index\\n    /// @return The new AccountDetails\\n    function push(AccountDetails memory _accountDetails)\\n        internal\\n        pure\\n        returns (AccountDetails memory)\\n    {\\n        _accountDetails.nextTwabIndex = uint24(\\n            RingBufferLib.nextIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY)\\n        );\\n\\n        // Prevent the Account specific cardinality from exceeding the MAX_CARDINALITY.\\n        // The ring buffer length is limited by MAX_CARDINALITY. IF the account.cardinality\\n        // exceeds the max cardinality, new observations would be incorrectly set or the\\n        // observation would be out of \\\"bounds\\\" of the ring buffer. Once reached the\\n        // AccountDetails.cardinality will continue to be equal to max cardinality.\\n        if (_accountDetails.cardinality < MAX_CARDINALITY) {\\n            _accountDetails.cardinality += 1;\\n        }\\n\\n        return _accountDetails;\\n    }\\n}\\n\",\"keccak256\":\"0xf2618b9374c4b97de9b834e62d9049645eb5eb16d9d1c70141ad73f67b202750\",\"license\":\"GPL-3.0\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 55,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "_balances",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 61,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "_allowances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 63,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "_totalSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 65,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "_name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 67,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "_symbol",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 711,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "_nonces",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(Counter)1576_storage)"
          },
          {
            "astId": 3085,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "controller",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 6824,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "userTwabs",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(Account)9640_storage)"
          },
          {
            "astId": 6828,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "totalSupplyTwab",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Account)9640_storage"
          },
          {
            "astId": 6833,
            "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
            "label": "delegates",
            "offset": 0,
            "slot": "16777224",
            "type": "t_mapping(t_address,t_address)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Observation)9212_storage)16777215_storage": {
            "base": "t_struct(Observation)9212_storage",
            "encoding": "inplace",
            "label": "struct ObservationLib.Observation[16777215]",
            "numberOfBytes": "536870880"
          },
          "t_mapping(t_address,t_address)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_uint256)"
          },
          "t_mapping(t_address,t_struct(Account)9640_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct TwabLib.Account)",
            "numberOfBytes": "32",
            "value": "t_struct(Account)9640_storage"
          },
          "t_mapping(t_address,t_struct(Counter)1576_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct Counters.Counter)",
            "numberOfBytes": "32",
            "value": "t_struct(Counter)1576_storage"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Account)9640_storage": {
            "encoding": "inplace",
            "label": "struct TwabLib.Account",
            "members": [
              {
                "astId": 9634,
                "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
                "label": "details",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(AccountDetails)9631_storage"
              },
              {
                "astId": 9639,
                "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
                "label": "twabs",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_struct(Observation)9212_storage)16777215_storage"
              }
            ],
            "numberOfBytes": "536870912"
          },
          "t_struct(AccountDetails)9631_storage": {
            "encoding": "inplace",
            "label": "struct TwabLib.AccountDetails",
            "members": [
              {
                "astId": 9626,
                "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
                "label": "balance",
                "offset": 0,
                "slot": "0",
                "type": "t_uint208"
              },
              {
                "astId": 9628,
                "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
                "label": "nextTwabIndex",
                "offset": 26,
                "slot": "0",
                "type": "t_uint24"
              },
              {
                "astId": 9630,
                "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
                "label": "cardinality",
                "offset": 29,
                "slot": "0",
                "type": "t_uint24"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Counter)1576_storage": {
            "encoding": "inplace",
            "label": "struct Counters.Counter",
            "members": [
              {
                "astId": 1575,
                "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
                "label": "_value",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Observation)9212_storage": {
            "encoding": "inplace",
            "label": "struct ObservationLib.Observation",
            "members": [
              {
                "astId": 9209,
                "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
                "label": "amount",
                "offset": 0,
                "slot": "0",
                "type": "t_uint224"
              },
              {
                "astId": 9211,
                "contract": "@pooltogether/v4-core/contracts/Ticket.sol:Ticket",
                "label": "timestamp",
                "offset": 28,
                "slot": "0",
                "type": "t_uint32"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint208": {
            "encoding": "inplace",
            "label": "uint208",
            "numberOfBytes": "26"
          },
          "t_uint224": {
            "encoding": "inplace",
            "label": "uint224",
            "numberOfBytes": "28"
          },
          "t_uint24": {
            "encoding": "inplace",
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "encoding": "inplace",
            "label": "uint32",
            "numberOfBytes": "4"
          }
        }
      },
      "userdoc": {
        "events": {
          "Delegated(address,address)": {
            "notice": "Emitted when TWAB balance has been delegated to another user."
          },
          "NewTotalSupplyTwab((uint224,uint32))": {
            "notice": "Emitted when a new total supply TWAB has been recorded."
          },
          "NewUserTwab(address,(uint224,uint32))": {
            "notice": "Emitted when a new TWAB has been recorded."
          },
          "TicketInitialized(string,string,uint8,address)": {
            "notice": "Emitted when ticket is initialized."
          }
        },
        "kind": "user",
        "methods": {
          "constructor": {
            "notice": "Constructs Ticket with passed parameters."
          },
          "controller()": {
            "notice": "Interface to the contract responsible for controlling mint/burn"
          },
          "controllerBurn(address,uint256)": {
            "notice": "Allows the controller to burn tokens from a user account"
          },
          "controllerBurnFrom(address,address,uint256)": {
            "notice": "Allows an operator via the controller to burn tokens on behalf of a user account"
          },
          "controllerDelegateFor(address,address)": {
            "notice": "Allows the controller to delegate on a users behalf."
          },
          "controllerMint(address,uint256)": {
            "notice": "Allows the controller to mint tokens for a user account"
          },
          "decimals()": {
            "notice": "Returns the ERC20 controlled token decimals."
          },
          "delegate(address)": {
            "notice": "Delegate time-weighted average balances to an alternative address."
          },
          "delegateOf(address)": {
            "notice": "Retrieves the address of the delegate to whom `user` has delegated their tickets."
          },
          "delegateWithSignature(address,address,uint256,uint8,bytes32,bytes32)": {
            "notice": "Allows a user to delegate via signature"
          },
          "getAccountDetails(address)": {
            "notice": "Gets a users twab context.  This is a struct with their balance, next twab index, and cardinality."
          },
          "getAverageBalanceBetween(address,uint64,uint64)": {
            "notice": "Retrieves the average balance held by a user for a given time frame."
          },
          "getAverageBalancesBetween(address,uint64[],uint64[])": {
            "notice": "Retrieves the average balances held by a user for a given time frame."
          },
          "getAverageTotalSuppliesBetween(uint64[],uint64[])": {
            "notice": "Retrieves the average total supply balance for a set of given time frames."
          },
          "getBalanceAt(address,uint64)": {
            "notice": "Retrieves `user` TWAB balance."
          },
          "getBalancesAt(address,uint64[])": {
            "notice": "Retrieves `user` TWAB balances."
          },
          "getTotalSuppliesAt(uint64[])": {
            "notice": "Retrieves the total supply TWAB balance between the given timestamps range."
          },
          "getTotalSupplyAt(uint64)": {
            "notice": "Retrieves the total supply TWAB balance at the given timestamp."
          },
          "getTwab(address,uint16)": {
            "notice": "Gets the TWAB at a specific index for a user."
          }
        },
        "notice": "The Ticket extends the standard ERC20 and ControlledToken interfaces with time-weighted average balance functionality. The average balance held by a user between two timestamps can be calculated, as well as the historic balance.  The  historic total supply is available as well as the average total supply between two timestamps. A user may \"delegate\" their balance; increasing another user's historic balance while retaining their tokens.",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/DrawBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-core/contracts/DrawBeacon.sol';\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/DrawBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\\\";\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IDrawBeacon.sol\\\";\\nimport \\\"./interfaces/IDrawBuffer.sol\\\";\\n\\n\\n/**\\n  * @title  PoolTogether V4 DrawBeacon\\n  * @author PoolTogether Inc Team\\n  * @notice Manages RNG (random number generator) requests and pushing Draws onto DrawBuffer.\\n            The DrawBeacon has 3 major actions for requesting a random number: start, cancel and complete.\\n            To create a new Draw, the user requests a new random number from the RNG service.\\n            When the random number is available, the user can create the draw using the create() method\\n            which will push the draw onto the DrawBuffer.\\n            If the RNG service fails to deliver a rng, when the request timeout elapses, the user can cancel the request.\\n*/\\ncontract DrawBeacon is IDrawBeacon, Ownable {\\n    using SafeCast for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ Variables ============ */\\n\\n    /// @notice RNG contract interface\\n    RNGInterface internal rng;\\n\\n    /// @notice Current RNG Request\\n    RngRequest internal rngRequest;\\n\\n    /// @notice DrawBuffer address\\n    IDrawBuffer internal drawBuffer;\\n\\n    /**\\n     * @notice RNG Request Timeout.  In fact, this is really a \\\"complete draw\\\" timeout.\\n     * @dev If the rng completes the award can still be cancelled.\\n     */\\n    uint32 internal rngTimeout;\\n\\n    /// @notice Seconds between beacon period request\\n    uint32 internal beaconPeriodSeconds;\\n\\n    /// @notice Epoch timestamp when beacon period can start\\n    uint64 internal beaconPeriodStartedAt;\\n\\n    /**\\n     * @notice Next Draw ID to use when pushing a Draw onto DrawBuffer\\n     * @dev Starts at 1. This way we know that no Draw has been recorded at 0.\\n     */\\n    uint32 internal nextDrawId;\\n\\n    /* ============ Structs ============ */\\n\\n    /**\\n     * @notice RNG Request\\n     * @param id          RNG request ID\\n     * @param lockBlock   Block number that the RNG request is locked\\n     * @param requestedAt Time when RNG is requested\\n     */\\n    struct RngRequest {\\n        uint32 id;\\n        uint32 lockBlock;\\n        uint64 requestedAt;\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    /**\\n     * @notice Emit when the DrawBeacon is deployed.\\n     * @param nextDrawId Draw ID at which the DrawBeacon should start. Can't be inferior to 1.\\n     * @param beaconPeriodStartedAt Timestamp when beacon period starts.\\n     */\\n    event Deployed(\\n        uint32 nextDrawId,\\n        uint64 beaconPeriodStartedAt\\n    );\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier requireDrawNotStarted() {\\n        _requireDrawNotStarted();\\n        _;\\n    }\\n\\n    modifier requireCanStartDraw() {\\n        require(_isBeaconPeriodOver(), \\\"DrawBeacon/beacon-period-not-over\\\");\\n        require(!isRngRequested(), \\\"DrawBeacon/rng-already-requested\\\");\\n        _;\\n    }\\n\\n    modifier requireCanCompleteRngRequest() {\\n        require(isRngRequested(), \\\"DrawBeacon/rng-not-requested\\\");\\n        require(isRngCompleted(), \\\"DrawBeacon/rng-not-complete\\\");\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @notice Deploy the DrawBeacon smart contract.\\n     * @param _owner Address of the DrawBeacon owner\\n     * @param _drawBuffer The address of the draw buffer to push draws to\\n     * @param _rng The RNG service to use\\n     * @param _nextDrawId Draw ID at which the DrawBeacon should start. Can't be inferior to 1.\\n     * @param _beaconPeriodStart The starting timestamp of the beacon period.\\n     * @param _beaconPeriodSeconds The duration of the beacon period in seconds\\n     */\\n    constructor(\\n        address _owner,\\n        IDrawBuffer _drawBuffer,\\n        RNGInterface _rng,\\n        uint32 _nextDrawId,\\n        uint64 _beaconPeriodStart,\\n        uint32 _beaconPeriodSeconds,\\n        uint32 _rngTimeout\\n    ) Ownable(_owner) {\\n        require(_beaconPeriodStart > 0, \\\"DrawBeacon/beacon-period-greater-than-zero\\\");\\n        require(address(_rng) != address(0), \\\"DrawBeacon/rng-not-zero\\\");\\n        require(_nextDrawId >= 1, \\\"DrawBeacon/next-draw-id-gte-one\\\");\\n\\n        beaconPeriodStartedAt = _beaconPeriodStart;\\n        nextDrawId = _nextDrawId;\\n\\n        _setBeaconPeriodSeconds(_beaconPeriodSeconds);\\n        _setDrawBuffer(_drawBuffer);\\n        _setRngService(_rng);\\n        _setRngTimeout(_rngTimeout);\\n\\n        emit Deployed(_nextDrawId, _beaconPeriodStart);\\n        emit BeaconPeriodStarted(_beaconPeriodStart);\\n    }\\n\\n    /* ============ Public Functions ============ */\\n\\n    /**\\n     * @notice Returns whether the random number request has completed.\\n     * @return True if a random number request has completed, false otherwise.\\n     */\\n    function isRngCompleted() public view override returns (bool) {\\n        return rng.isRequestComplete(rngRequest.id);\\n    }\\n\\n    /**\\n     * @notice Returns whether a random number has been requested\\n     * @return True if a random number has been requested, false otherwise.\\n     */\\n    function isRngRequested() public view override returns (bool) {\\n        return rngRequest.id != 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether the random number request has timed out.\\n     * @return True if a random number request has timed out, false otherwise.\\n     */\\n    function isRngTimedOut() public view override returns (bool) {\\n        if (rngRequest.requestedAt == 0) {\\n            return false;\\n        } else {\\n            return rngTimeout + rngRequest.requestedAt < _currentTime();\\n        }\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IDrawBeacon\\n    function canStartDraw() external view override returns (bool) {\\n        return _isBeaconPeriodOver() && !isRngRequested();\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function canCompleteDraw() external view override returns (bool) {\\n        return isRngRequested() && isRngCompleted();\\n    }\\n\\n    /// @notice Calculates the next beacon start time, assuming all beacon periods have occurred between the last and now.\\n    /// @return The next beacon period start time\\n    function calculateNextBeaconPeriodStartTimeFromCurrentTime() external view returns (uint64) {\\n        return\\n            _calculateNextBeaconPeriodStartTime(\\n                beaconPeriodStartedAt,\\n                beaconPeriodSeconds,\\n                _currentTime()\\n            );\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function calculateNextBeaconPeriodStartTime(uint256 _time)\\n        external\\n        view\\n        override\\n        returns (uint64)\\n    {\\n        return\\n            _calculateNextBeaconPeriodStartTime(\\n                beaconPeriodStartedAt,\\n                beaconPeriodSeconds,\\n                uint64(_time)\\n            );\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function cancelDraw() external override {\\n        require(isRngTimedOut(), \\\"DrawBeacon/rng-not-timedout\\\");\\n        uint32 requestId = rngRequest.id;\\n        uint32 lockBlock = rngRequest.lockBlock;\\n        delete rngRequest;\\n        emit DrawCancelled(requestId, lockBlock);\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function completeDraw() external override requireCanCompleteRngRequest {\\n        uint256 randomNumber = rng.randomNumber(rngRequest.id);\\n        uint32 _nextDrawId = nextDrawId;\\n        uint64 _beaconPeriodStartedAt = beaconPeriodStartedAt;\\n        uint32 _beaconPeriodSeconds = beaconPeriodSeconds;\\n        uint64 _time = _currentTime();\\n\\n        // create Draw struct\\n        IDrawBeacon.Draw memory _draw = IDrawBeacon.Draw({\\n            winningRandomNumber: randomNumber,\\n            drawId: _nextDrawId,\\n            timestamp: rngRequest.requestedAt, // must use the startAward() timestamp to prevent front-running\\n            beaconPeriodStartedAt: _beaconPeriodStartedAt,\\n            beaconPeriodSeconds: _beaconPeriodSeconds\\n        });\\n\\n        drawBuffer.pushDraw(_draw);\\n\\n        // to avoid clock drift, we should calculate the start time based on the previous period start time.\\n        uint64 nextBeaconPeriodStartedAt = _calculateNextBeaconPeriodStartTime(\\n            _beaconPeriodStartedAt,\\n            _beaconPeriodSeconds,\\n            _time\\n        );\\n        beaconPeriodStartedAt = nextBeaconPeriodStartedAt;\\n        nextDrawId = _nextDrawId + 1;\\n\\n        // Reset the rngReqeust state so Beacon period can start again.\\n        delete rngRequest;\\n\\n        emit DrawCompleted(randomNumber);\\n        emit BeaconPeriodStarted(nextBeaconPeriodStartedAt);\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function beaconPeriodRemainingSeconds() external view override returns (uint64) {\\n        return _beaconPeriodRemainingSeconds();\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function beaconPeriodEndAt() external view override returns (uint64) {\\n        return _beaconPeriodEndAt();\\n    }\\n\\n    function getBeaconPeriodSeconds() external view returns (uint32) {\\n        return beaconPeriodSeconds;\\n    }\\n\\n    function getBeaconPeriodStartedAt() external view returns (uint64) {\\n        return beaconPeriodStartedAt;\\n    }\\n\\n    function getDrawBuffer() external view returns (IDrawBuffer) {\\n        return drawBuffer;\\n    }\\n\\n    function getNextDrawId() external view returns (uint32) {\\n        return nextDrawId;\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function getLastRngLockBlock() external view override returns (uint32) {\\n        return rngRequest.lockBlock;\\n    }\\n\\n    function getLastRngRequestId() external view override returns (uint32) {\\n        return rngRequest.id;\\n    }\\n\\n    function getRngService() external view returns (RNGInterface) {\\n        return rng;\\n    }\\n\\n    function getRngTimeout() external view returns (uint32) {\\n        return rngTimeout;\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function isBeaconPeriodOver() external view override returns (bool) {\\n        return _isBeaconPeriodOver();\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function setDrawBuffer(IDrawBuffer newDrawBuffer)\\n        external\\n        override\\n        onlyOwner\\n        returns (IDrawBuffer)\\n    {\\n        return _setDrawBuffer(newDrawBuffer);\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function startDraw() external override requireCanStartDraw {\\n        (address feeToken, uint256 requestFee) = rng.getRequestFee();\\n\\n        if (feeToken != address(0) && requestFee > 0) {\\n            IERC20(feeToken).safeApprove(address(rng), requestFee);\\n        }\\n\\n        (uint32 requestId, uint32 lockBlock) = rng.requestRandomNumber();\\n        rngRequest.id = requestId;\\n        rngRequest.lockBlock = lockBlock;\\n        rngRequest.requestedAt = _currentTime();\\n\\n        emit DrawStarted(requestId, lockBlock);\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function setBeaconPeriodSeconds(uint32 _beaconPeriodSeconds)\\n        external\\n        override\\n        onlyOwner\\n        requireDrawNotStarted\\n    {\\n        _setBeaconPeriodSeconds(_beaconPeriodSeconds);\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function setRngTimeout(uint32 _rngTimeout) external override onlyOwner requireDrawNotStarted {\\n        _setRngTimeout(_rngTimeout);\\n    }\\n\\n    /// @inheritdoc IDrawBeacon\\n    function setRngService(RNGInterface _rngService)\\n        external\\n        override\\n        onlyOwner\\n        requireDrawNotStarted\\n    {\\n        _setRngService(_rngService);\\n    }\\n\\n    /**\\n     * @notice Sets the RNG service that the Prize Strategy is connected to\\n     * @param _rngService The address of the new RNG service interface\\n     */\\n    function _setRngService(RNGInterface _rngService) internal\\n    {\\n        rng = _rngService;\\n        emit RngServiceUpdated(_rngService);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Calculates when the next beacon period will start\\n     * @param _beaconPeriodStartedAt The timestamp at which the beacon period started\\n     * @param _beaconPeriodSeconds The duration of the beacon period in seconds\\n     * @param _time The timestamp to use as the current time\\n     * @return The timestamp at which the next beacon period would start\\n     */\\n    function _calculateNextBeaconPeriodStartTime(\\n        uint64 _beaconPeriodStartedAt,\\n        uint32 _beaconPeriodSeconds,\\n        uint64 _time\\n    ) internal pure returns (uint64) {\\n        uint64 elapsedPeriods = (_time - _beaconPeriodStartedAt) / _beaconPeriodSeconds;\\n        return _beaconPeriodStartedAt + (elapsedPeriods * _beaconPeriodSeconds);\\n    }\\n\\n    /**\\n     * @notice returns the current time.  Used for testing.\\n     * @return The current time (block.timestamp)\\n     */\\n    function _currentTime() internal view virtual returns (uint64) {\\n        return uint64(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Returns the timestamp at which the beacon period ends\\n     * @return The timestamp at which the beacon period ends\\n     */\\n    function _beaconPeriodEndAt() internal view returns (uint64) {\\n        return beaconPeriodStartedAt + beaconPeriodSeconds;\\n    }\\n\\n    /**\\n     * @notice Returns the number of seconds remaining until the prize can be awarded.\\n     * @return The number of seconds remaining until the prize can be awarded.\\n     */\\n    function _beaconPeriodRemainingSeconds() internal view returns (uint64) {\\n        uint64 endAt = _beaconPeriodEndAt();\\n        uint64 time = _currentTime();\\n\\n        if (endAt <= time) {\\n            return 0;\\n        }\\n\\n        return endAt - time;\\n    }\\n\\n    /**\\n     * @notice Returns whether the beacon period is over.\\n     * @return True if the beacon period is over, false otherwise\\n     */\\n    function _isBeaconPeriodOver() internal view returns (bool) {\\n        return _beaconPeriodEndAt() <= _currentTime();\\n    }\\n\\n    /**\\n     * @notice Check to see draw is in progress.\\n     */\\n    function _requireDrawNotStarted() internal view {\\n        uint256 currentBlock = block.number;\\n\\n        require(\\n            rngRequest.lockBlock == 0 || currentBlock < rngRequest.lockBlock,\\n            \\\"DrawBeacon/rng-in-flight\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Set global DrawBuffer variable.\\n     * @dev    All subsequent Draw requests/completions will be pushed to the new DrawBuffer.\\n     * @param _newDrawBuffer  DrawBuffer address\\n     * @return DrawBuffer\\n     */\\n    function _setDrawBuffer(IDrawBuffer _newDrawBuffer) internal returns (IDrawBuffer) {\\n        IDrawBuffer _previousDrawBuffer = drawBuffer;\\n        require(address(_newDrawBuffer) != address(0), \\\"DrawBeacon/draw-history-not-zero-address\\\");\\n\\n        require(\\n            address(_newDrawBuffer) != address(_previousDrawBuffer),\\n            \\\"DrawBeacon/existing-draw-history-address\\\"\\n        );\\n\\n        drawBuffer = _newDrawBuffer;\\n\\n        emit DrawBufferUpdated(_newDrawBuffer);\\n\\n        return _newDrawBuffer;\\n    }\\n\\n    /**\\n     * @notice Sets the beacon period in seconds.\\n     * @param _beaconPeriodSeconds The new beacon period in seconds.  Must be greater than zero.\\n     */\\n    function _setBeaconPeriodSeconds(uint32 _beaconPeriodSeconds) internal {\\n        require(_beaconPeriodSeconds > 0, \\\"DrawBeacon/beacon-period-greater-than-zero\\\");\\n        beaconPeriodSeconds = _beaconPeriodSeconds;\\n\\n        emit BeaconPeriodSecondsUpdated(_beaconPeriodSeconds);\\n    }\\n\\n    /**\\n     * @notice Sets the RNG request timeout in seconds.  This is the time that must elapsed before the RNG request can be cancelled and the pool unlocked.\\n     * @param _rngTimeout The RNG request timeout in seconds.\\n     */\\n    function _setRngTimeout(uint32 _rngTimeout) internal {\\n        require(_rngTimeout > 60, \\\"DrawBeacon/rng-timeout-gt-60-secs\\\");\\n        rngTimeout = _rngTimeout;\\n\\n        emit RngTimeoutSet(_rngTimeout);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Random Number Generator Interface\\n/// @notice Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\\ninterface RNGInterface {\\n\\n  /// @notice Emitted when a new request for a random number has been submitted\\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\\n  /// @param sender The indexed address of the sender of the request\\n  event RandomNumberRequested(uint32 indexed requestId, address indexed sender);\\n\\n  /// @notice Emitted when an existing request for a random number has been completed\\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\\n  /// @param randomNumber The random number produced by the 3rd-party service\\n  event RandomNumberCompleted(uint32 indexed requestId, uint256 randomNumber);\\n\\n  /// @notice Gets the last request id used by the RNG service\\n  /// @return requestId The last request id used in the last request\\n  function getLastRequestId() external view returns (uint32 requestId);\\n\\n  /// @notice Gets the Fee for making a Request against an RNG service\\n  /// @return feeToken The address of the token that is used to pay fees\\n  /// @return requestFee The fee required to be paid to make a request\\n  function getRequestFee() external view returns (address feeToken, uint256 requestFee);\\n\\n  /// @notice Sends a request for a random number to the 3rd-party service\\n  /// @dev Some services will complete the request immediately, others may have a time-delay\\n  /// @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\\n  /// @return requestId The ID of the request used to get the results of the RNG service\\n  /// @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.  The calling contract\\n  /// should \\\"lock\\\" all activity until the result is available via the `requestId`\\n  function requestRandomNumber() external returns (uint32 requestId, uint32 lockBlock);\\n\\n  /// @notice Checks if the request for randomness from the 3rd-party service has completed\\n  /// @dev For time-delayed requests, this function is used to check/confirm completion\\n  /// @param requestId The ID of the request used to get the results of the RNG service\\n  /// @return isCompleted True if the request has completed and a random number is available, false otherwise\\n  function isRequestComplete(uint32 requestId) external view returns (bool isCompleted);\\n\\n  /// @notice Gets the random number produced by the 3rd-party service\\n  /// @param requestId The ID of the request used to get the results of the RNG service\\n  /// @return randomNum The random number\\n  function randomNumber(uint32 requestId) external returns (uint256 randomNum);\\n}\\n\"\n    },\n    \"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Abstract ownable contract that can be inherited by other contracts\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @dev Emitted when `_pendingOwner` has been changed.\\n     * @param pendingOwner new `_pendingOwner` address.\\n     */\\n    event OwnershipOffered(address indexed pendingOwner);\\n\\n    /**\\n     * @dev Emitted when `_owner` has been changed.\\n     * @param previousOwner previous `_owner` address.\\n     * @param newOwner new `_owner` address.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initializes the contract setting `_initialOwner` as the initial owner.\\n     * @param _initialOwner Initial owner of the contract.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Gets current `_pendingOwner`.\\n     * @return Current `_pendingOwner` address.\\n     */\\n    function pendingOwner() external view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Renounce ownership of the contract.\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n    * @notice Allows current owner to set the `_pendingOwner` address.\\n    * @param _newOwner Address to transfer ownership to.\\n    */\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable/pendingOwner-not-zero-address\\\");\\n\\n        _pendingOwner = _newOwner;\\n\\n        emit OwnershipOffered(_newOwner);\\n    }\\n\\n    /**\\n    * @notice Allows the `_pendingOwner` address to finalize the transfer.\\n    * @dev This function is only callable by the `_pendingOwner`.\\n    */\\n    function claimOwnership() external onlyPendingOwner {\\n        _setOwner(_pendingOwner);\\n        _pendingOwner = address(0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Internal function to set the `_owner` of the contract.\\n     * @param _newOwner New `_owner` address.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable/caller-not-owner\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the `pendingOwner`.\\n    */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == _pendingOwner, \\\"Ownable/caller-not-pendingOwner\\\");\\n        _;\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/interfaces/IDrawBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\\\";\\nimport \\\"./IDrawBuffer.sol\\\";\\n\\n/** @title  IDrawBeacon\\n  * @author PoolTogether Inc Team\\n  * @notice The DrawBeacon interface.\\n*/\\ninterface IDrawBeacon {\\n\\n    /// @notice Draw struct created every draw\\n    /// @param winningRandomNumber The random number returned from the RNG service\\n    /// @param drawId The monotonically increasing drawId for each draw\\n    /// @param timestamp Unix timestamp of the draw. Recorded when the draw is created by the DrawBeacon.\\n    /// @param beaconPeriodStartedAt Unix timestamp of when the draw started\\n    /// @param beaconPeriodSeconds Unix timestamp of the beacon draw period for this draw.\\n    struct Draw {\\n        uint256 winningRandomNumber;\\n        uint32 drawId;\\n        uint64 timestamp;\\n        uint64 beaconPeriodStartedAt;\\n        uint32 beaconPeriodSeconds;\\n    }\\n\\n    /**\\n     * @notice Emit when a new DrawBuffer has been set.\\n     * @param newDrawBuffer       The new DrawBuffer address\\n     */\\n    event DrawBufferUpdated(IDrawBuffer indexed newDrawBuffer);\\n\\n    /**\\n     * @notice Emit when a draw has opened.\\n     * @param startedAt Start timestamp\\n     */\\n    event BeaconPeriodStarted(uint64 indexed startedAt);\\n\\n    /**\\n     * @notice Emit when a draw has started.\\n     * @param rngRequestId  draw id\\n     * @param rngLockBlock  Block when draw becomes invalid\\n     */\\n    event DrawStarted(uint32 indexed rngRequestId, uint32 rngLockBlock);\\n\\n    /**\\n     * @notice Emit when a draw has been cancelled.\\n     * @param rngRequestId  draw id\\n     * @param rngLockBlock  Block when draw becomes invalid\\n     */\\n    event DrawCancelled(uint32 indexed rngRequestId, uint32 rngLockBlock);\\n\\n    /**\\n     * @notice Emit when a draw has been completed.\\n     * @param randomNumber  Random number generated from draw\\n     */\\n    event DrawCompleted(uint256 randomNumber);\\n\\n    /**\\n     * @notice Emit when a RNG service address is set.\\n     * @param rngService  RNG service address\\n     */\\n    event RngServiceUpdated(RNGInterface indexed rngService);\\n\\n    /**\\n     * @notice Emit when a draw timeout param is set.\\n     * @param rngTimeout  draw timeout param in seconds\\n     */\\n    event RngTimeoutSet(uint32 rngTimeout);\\n\\n    /**\\n     * @notice Emit when the drawPeriodSeconds is set.\\n     * @param drawPeriodSeconds Time between draw\\n     */\\n    event BeaconPeriodSecondsUpdated(uint32 drawPeriodSeconds);\\n\\n    /**\\n     * @notice Returns the number of seconds remaining until the beacon period can be complete.\\n     * @return The number of seconds remaining until the beacon period can be complete.\\n     */\\n    function beaconPeriodRemainingSeconds() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the timestamp at which the beacon period ends\\n     * @return The timestamp at which the beacon period ends.\\n     */\\n    function beaconPeriodEndAt() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns whether a Draw can be started.\\n     * @return True if a Draw can be started, false otherwise.\\n     */\\n    function canStartDraw() external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether a Draw can be completed.\\n     * @return True if a Draw can be completed, false otherwise.\\n     */\\n    function canCompleteDraw() external view returns (bool);\\n\\n    /**\\n     * @notice Calculates when the next beacon period will start.\\n     * @param time The timestamp to use as the current time\\n     * @return The timestamp at which the next beacon period would start\\n     */\\n    function calculateNextBeaconPeriodStartTime(uint256 time) external view returns (uint64);\\n\\n    /**\\n     * @notice Can be called by anyone to cancel the draw request if the RNG has timed out.\\n     */\\n    function cancelDraw() external;\\n\\n    /**\\n     * @notice Completes the Draw (RNG) request and pushes a Draw onto DrawBuffer.\\n     */\\n    function completeDraw() external;\\n\\n    /**\\n     * @notice Returns the block number that the current RNG request has been locked to.\\n     * @return The block number that the RNG request is locked to\\n     */\\n    function getLastRngLockBlock() external view returns (uint32);\\n\\n    /**\\n     * @notice Returns the current RNG Request ID.\\n     * @return The current Request ID\\n     */\\n    function getLastRngRequestId() external view returns (uint32);\\n\\n    /**\\n     * @notice Returns whether the beacon period is over\\n     * @return True if the beacon period is over, false otherwise\\n     */\\n    function isBeaconPeriodOver() external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether the random number request has completed.\\n     * @return True if a random number request has completed, false otherwise.\\n     */\\n    function isRngCompleted() external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether a random number has been requested\\n     * @return True if a random number has been requested, false otherwise.\\n     */\\n    function isRngRequested() external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether the random number request has timed out.\\n     * @return True if a random number request has timed out, false otherwise.\\n     */\\n    function isRngTimedOut() external view returns (bool);\\n\\n    /**\\n     * @notice Allows the owner to set the beacon period in seconds.\\n     * @param beaconPeriodSeconds The new beacon period in seconds.  Must be greater than zero.\\n     */\\n    function setBeaconPeriodSeconds(uint32 beaconPeriodSeconds) external;\\n\\n    /**\\n     * @notice Allows the owner to set the RNG request timeout in seconds. This is the time that must elapsed before the RNG request can be cancelled and the pool unlocked.\\n     * @param rngTimeout The RNG request timeout in seconds.\\n     */\\n    function setRngTimeout(uint32 rngTimeout) external;\\n\\n    /**\\n     * @notice Sets the RNG service that the Prize Strategy is connected to\\n     * @param rngService The address of the new RNG service interface\\n     */\\n    function setRngService(RNGInterface rngService) external;\\n\\n    /**\\n     * @notice Starts the Draw process by starting random number request. The previous beacon period must have ended.\\n     * @dev The RNG-Request-Fee is expected to be held within this contract before calling this function\\n     */\\n    function startDraw() external;\\n\\n    /**\\n     * @notice Set global DrawBuffer variable.\\n     * @dev    All subsequent Draw requests/completions will be pushed to the new DrawBuffer.\\n     * @param newDrawBuffer DrawBuffer address\\n     * @return DrawBuffer\\n     */\\n    function setDrawBuffer(IDrawBuffer newDrawBuffer) external returns (IDrawBuffer);\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/interfaces/IDrawBuffer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../interfaces/IDrawBeacon.sol\\\";\\n\\n/** @title  IDrawBuffer\\n  * @author PoolTogether Inc Team\\n  * @notice The DrawBuffer interface.\\n*/\\ninterface IDrawBuffer {\\n    /**\\n     * @notice Emit when a new draw has been created.\\n     * @param drawId Draw id\\n     * @param draw The Draw struct\\n     */\\n    event DrawSet(uint32 indexed drawId, IDrawBeacon.Draw draw);\\n\\n    /**\\n     * @notice Read a ring buffer cardinality\\n     * @return Ring buffer cardinality\\n     */\\n    function getBufferCardinality() external view returns (uint32);\\n\\n    /**\\n     * @notice Read a Draw from the draws ring buffer.\\n     * @dev    Read a Draw using the Draw.drawId to calculate position in the draws ring buffer.\\n     * @param drawId Draw.drawId\\n     * @return IDrawBeacon.Draw\\n     */\\n    function getDraw(uint32 drawId) external view returns (IDrawBeacon.Draw memory);\\n\\n    /**\\n     * @notice Read multiple Draws from the draws ring buffer.\\n     * @dev    Read multiple Draws using each drawId to calculate position in the draws ring buffer.\\n     * @param drawIds Array of drawIds\\n     * @return IDrawBeacon.Draw[]\\n     */\\n    function getDraws(uint32[] calldata drawIds) external view returns (IDrawBeacon.Draw[] memory);\\n\\n    /**\\n     * @notice Gets the number of Draws held in the draw ring buffer.\\n     * @dev If no Draws have been pushed, it will return 0.\\n     * @dev If the ring buffer is full, it will return the cardinality.\\n     * @dev Otherwise, it will return the NewestDraw index + 1.\\n     * @return Number of Draws held in the draw ring buffer.\\n     */\\n    function getDrawCount() external view returns (uint32);\\n\\n    /**\\n     * @notice Read newest Draw from draws ring buffer.\\n     * @dev    Uses the nextDrawIndex to calculate the most recently added Draw.\\n     * @return IDrawBeacon.Draw\\n     */\\n    function getNewestDraw() external view returns (IDrawBeacon.Draw memory);\\n\\n    /**\\n     * @notice Read oldest Draw from draws ring buffer.\\n     * @dev    Finds the oldest Draw by comparing and/or diffing totalDraws with the cardinality.\\n     * @return IDrawBeacon.Draw\\n     */\\n    function getOldestDraw() external view returns (IDrawBeacon.Draw memory);\\n\\n    /**\\n     * @notice Push Draw onto draws ring buffer history.\\n     * @dev    Push new draw onto draws history via authorized manager or owner.\\n     * @param draw IDrawBeacon.Draw\\n     * @return Draw.drawId\\n     */\\n    function pushDraw(IDrawBeacon.Draw calldata draw) external returns (uint32);\\n\\n    /**\\n     * @notice Set existing Draw in draws ring buffer with new parameters.\\n     * @dev    Updating a Draw should be used sparingly and only in the event an incorrect Draw parameter has been stored.\\n     * @param newDraw IDrawBeacon.Draw\\n     * @return Draw.drawId\\n     */\\n    function setDraw(IDrawBeacon.Draw calldata newDraw) external returns (uint32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-timelocks/contracts/L2TimelockTrigger.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\nimport \\\"@pooltogether/v4-core/contracts/interfaces/IDrawBeacon.sol\\\";\\nimport \\\"@pooltogether/v4-core/contracts/interfaces/IPrizeDistributionBuffer.sol\\\";\\nimport \\\"@pooltogether/v4-core/contracts/interfaces/IDrawBuffer.sol\\\";\\nimport \\\"./interfaces/IDrawCalculatorTimelock.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 L2TimelockTrigger\\n  * @author PoolTogether Inc Team\\n  * @notice L2TimelockTrigger(s) acts as an intermediary between multiple V4 smart contracts.\\n            The L2TimelockTrigger is responsible for pushing Draws to a DrawBuffer and routing\\n            claim requests from a PrizeDistributor to a DrawCalculator. The primary objective is\\n            to  include a \\\"cooldown\\\" period for all new Draws. Allowing the correction of a\\n            malicously set Draw in the unfortunate event an Owner is compromised.\\n*/\\ncontract L2TimelockTrigger is Manageable {\\n    \\n    /// @notice Emitted when the contract is deployed.\\n    event Deployed(\\n        IDrawBuffer indexed drawBuffer,\\n        IPrizeDistributionBuffer indexed prizeDistributionBuffer,\\n        IDrawCalculatorTimelock indexed timelock\\n    );\\n\\n    /**\\n     * @notice Emitted when Draw and PrizeDistribution are pushed to external contracts.\\n     * @param drawId            Draw ID\\n     * @param prizeDistribution PrizeDistribution\\n     */\\n    event DrawAndPrizeDistributionPushed(uint32 indexed drawId, IDrawBeacon.Draw draw, IPrizeDistributionBuffer.PrizeDistribution prizeDistribution);\\n\\n    /* ============ Global Variables ============ */\\n\\n    /// @notice The DrawBuffer contract address.\\n    IDrawBuffer public immutable drawBuffer;\\n\\n    /// @notice Internal PrizeDistributionBuffer reference.\\n    IPrizeDistributionBuffer public immutable prizeDistributionBuffer;\\n\\n    /// @notice Timelock struct reference.\\n    IDrawCalculatorTimelock public timelock;\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initialize L2TimelockTrigger smart contract.\\n     * @param _owner                   Address of the L2TimelockTrigger owner.\\n     * @param _prizeDistributionBuffer PrizeDistributionBuffer address\\n     * @param _drawBuffer              DrawBuffer address\\n     * @param _timelock                Elapsed seconds before timelocked Draw is available\\n     */\\n    constructor(\\n        address _owner,\\n        IDrawBuffer _drawBuffer,\\n        IPrizeDistributionBuffer _prizeDistributionBuffer,\\n        IDrawCalculatorTimelock _timelock\\n    ) Ownable(_owner) {\\n        drawBuffer = _drawBuffer;\\n        prizeDistributionBuffer = _prizeDistributionBuffer;\\n        timelock = _timelock;\\n\\n        emit Deployed(_drawBuffer, _prizeDistributionBuffer, _timelock);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Push Draw onto draws ring buffer history.\\n     * @dev    Restricts new draws by forcing a push timelock.\\n     * @param _draw              Draw struct from IDrawBeacon\\n     * @param _prizeDistribution PrizeDistribution struct from IPrizeDistributionBuffer\\n     */\\n    function push(IDrawBeacon.Draw memory _draw, IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution)\\n        external\\n        onlyManagerOrOwner\\n    {\\n        timelock.lock(_draw.drawId);\\n        drawBuffer.pushDraw(_draw);\\n        prizeDistributionBuffer.pushPrizeDistribution(_draw.drawId, _prizeDistribution);\\n        emit DrawAndPrizeDistributionPushed(_draw.drawId, _draw, _prizeDistribution);\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Abstract manageable contract that can be inherited by other contracts\\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\\n * there is an owner and a manager that can be granted exclusive access to specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyManager`, which can be applied to your functions to restrict their use to\\n * the manager.\\n */\\nabstract contract Manageable is Ownable {\\n    address private _manager;\\n\\n    /**\\n     * @dev Emitted when `_manager` has been changed.\\n     * @param previousManager previous `_manager` address.\\n     * @param newManager new `_manager` address.\\n     */\\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Gets current `_manager`.\\n     * @return Current `_manager` address.\\n     */\\n    function manager() public view virtual returns (address) {\\n        return _manager;\\n    }\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @dev Throws if called by any account other than the owner.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function setManager(address _newManager) external onlyOwner returns (bool) {\\n        return _setManager(_newManager);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function _setManager(address _newManager) private returns (bool) {\\n        address _previousManager = _manager;\\n\\n        require(_newManager != _previousManager, \\\"Manageable/existing-manager-address\\\");\\n\\n        _manager = _newManager;\\n\\n        emit ManagerTransferred(_previousManager, _newManager);\\n        return true;\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        require(manager() == msg.sender, \\\"Manageable/caller-not-manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager or the owner.\\n     */\\n    modifier onlyManagerOrOwner() {\\n        require(manager() == msg.sender || owner() == msg.sender, \\\"Manageable/caller-not-manager-or-owner\\\");\\n        _;\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/interfaces/IPrizeDistributionBuffer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/** @title  IPrizeDistributionBuffer\\n  * @author PoolTogether Inc Team\\n  * @notice The PrizeDistributionBuffer interface.\\n*/\\ninterface IPrizeDistributionBuffer {\\n\\n    ///@notice PrizeDistribution struct created every draw\\n    ///@param bitRangeSize Decimal representation of bitRangeSize\\n    ///@param matchCardinality The number of numbers to consider in the 256 bit random number. Must be > 1 and < 256/bitRangeSize.\\n    ///@param startTimestampOffset The starting time offset in seconds from which Ticket balances are calculated.\\n    ///@param endTimestampOffset The end time offset in seconds from which Ticket balances are calculated.\\n    ///@param maxPicksPerUser Maximum number of picks a user can make in this draw\\n    ///@param numberOfPicks Number of picks this draw has (may vary across networks according to how much the network has contributed to the Reserve)\\n    ///@param tiers Array of prize tiers percentages, expressed in fraction form with base 1e9. Ordering: index0: grandPrize, index1: runnerUp, etc.\\n    ///@param prize Total prize amount available in this draw calculator for this draw (may vary from across networks)\\n    struct PrizeDistribution {\\n        uint8 bitRangeSize;\\n        uint8 matchCardinality;\\n        uint32 startTimestampOffset;\\n        uint32 endTimestampOffset;\\n        uint32 maxPicksPerUser;\\n        uint136 numberOfPicks;\\n        uint32[16] tiers;\\n        uint256 prize;\\n    }\\n\\n    /**\\n     * @notice Emit when PrizeDistribution is set.\\n     * @param drawId       Draw id\\n     * @param prizeDistribution IPrizeDistributionBuffer.PrizeDistribution\\n     */\\n    event PrizeDistributionSet(\\n        uint32 indexed drawId,\\n        IPrizeDistributionBuffer.PrizeDistribution prizeDistribution\\n    );\\n\\n    /**\\n     * @notice Read a ring buffer cardinality\\n     * @return Ring buffer cardinality\\n     */\\n    function getBufferCardinality() external view returns (uint32);\\n\\n    /**\\n     * @notice Read newest PrizeDistribution from prize distributions ring buffer.\\n     * @dev    Uses nextDrawIndex to calculate the most recently added PrizeDistribution.\\n     * @return prizeDistribution\\n     * @return drawId\\n     */\\n    function getNewestPrizeDistribution()\\n        external\\n        view\\n        returns (IPrizeDistributionBuffer.PrizeDistribution memory prizeDistribution, uint32 drawId);\\n\\n    /**\\n     * @notice Read oldest PrizeDistribution from prize distributions ring buffer.\\n     * @dev    Finds the oldest Draw by buffer.nextIndex and buffer.lastDrawId\\n     * @return prizeDistribution\\n     * @return drawId\\n     */\\n    function getOldestPrizeDistribution()\\n        external\\n        view\\n        returns (IPrizeDistributionBuffer.PrizeDistribution memory prizeDistribution, uint32 drawId);\\n\\n    /**\\n     * @notice Gets PrizeDistribution list from array of drawIds\\n     * @param drawIds drawIds to get PrizeDistribution for\\n     * @return prizeDistributionList\\n     */\\n    function getPrizeDistributions(uint32[] calldata drawIds)\\n        external\\n        view\\n        returns (IPrizeDistributionBuffer.PrizeDistribution[] memory);\\n\\n    /**\\n     * @notice Gets the PrizeDistributionBuffer for a drawId\\n     * @param drawId drawId\\n     * @return prizeDistribution\\n     */\\n    function getPrizeDistribution(uint32 drawId)\\n        external\\n        view\\n        returns (IPrizeDistributionBuffer.PrizeDistribution memory);\\n\\n    /**\\n     * @notice Gets the number of PrizeDistributions stored in the prize distributions ring buffer.\\n     * @dev If no Draws have been pushed, it will return 0.\\n     * @dev If the ring buffer is full, it will return the cardinality.\\n     * @dev Otherwise, it will return the NewestPrizeDistribution index + 1.\\n     * @return Number of PrizeDistributions stored in the prize distributions ring buffer.\\n     */\\n    function getPrizeDistributionCount() external view returns (uint32);\\n\\n    /**\\n     * @notice Adds new PrizeDistribution record to ring buffer storage.\\n     * @dev    Only callable by the owner or manager\\n     * @param drawId            Draw ID linked to PrizeDistribution parameters\\n     * @param prizeDistribution PrizeDistribution parameters struct\\n     */\\n    function pushPrizeDistribution(\\n        uint32 drawId,\\n        IPrizeDistributionBuffer.PrizeDistribution calldata prizeDistribution\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Sets existing PrizeDistribution with new PrizeDistribution parameters in ring buffer storage.\\n     * @dev    Retroactively updates an existing PrizeDistribution and should be thought of as a \\\"safety\\\"\\n               fallback. If the manager is setting invalid PrizeDistribution parameters the Owner can update\\n               the invalid parameters with correct parameters.\\n     * @return drawId\\n     */\\n    function setPrizeDistribution(uint32 drawId, IPrizeDistributionBuffer.PrizeDistribution calldata draw)\\n        external\\n        returns (uint32);\\n}\\n\"\n    },\n    \"@pooltogether/v4-timelocks/contracts/interfaces/IDrawCalculatorTimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/v4-core/contracts/interfaces/IDrawCalculator.sol\\\";\\n\\ninterface IDrawCalculatorTimelock {\\n    struct Timelock {\\n        uint128 timestamp;\\n        uint32 drawId;\\n    }\\n\\n    /**\\n     * @notice Emitted when target draw id is locked.\\n     * @param drawId    Draw ID\\n     * @param timestamp Block timestamp\\n     */\\n    event LockedDraw(uint32 indexed drawId, uint32 timestamp);\\n\\n    /**\\n     * @notice Emitted event when the timelock struct is updated\\n     * @param timelock Timelock struct set\\n     */\\n    event TimelockSet(Timelock timelock);\\n\\n    /**\\n     * @notice Emitted event when the timelock duration is updated\\n     * @param duration Timelock duration set in seconds\\n     */\\n    event TimelockDurationSet(uint32 duration);\\n\\n    /**\\n     * @notice Routes claim/calculate requests between PrizeDistributor and DrawCalculator.\\n     * @dev    Will enforce a \\\"cooldown\\\" period between when a Draw is pushed and when users can start to claim prizes.\\n     * @param user    User address\\n     * @param drawIds Draw.drawId\\n     * @param data    Encoded pick indices\\n     * @return Prizes awardable array\\n     */\\n    function calculate(\\n        address user,\\n        uint32[] calldata drawIds,\\n        bytes calldata data\\n    ) external view returns (uint256[] memory, bytes memory);\\n\\n    /**\\n     * @notice Lock passed draw id for `timelockDuration` seconds.\\n     * @dev    Restricts new draws by forcing a push timelock.\\n     * @param _drawId Draw id to lock.\\n     * @return True if operation was successful.\\n     */\\n    function lock(uint32 _drawId) external returns (bool);\\n\\n    /**\\n     * @notice Read internal DrawCalculator variable.\\n     * @return IDrawCalculator\\n     */\\n    function getDrawCalculator() external view returns (IDrawCalculator);\\n\\n    /**\\n     * @notice Read internal Timelock struct.\\n     * @return Timelock\\n     */\\n    function getTimelock() external view returns (Timelock memory);\\n\\n    /**\\n     * @notice Read internal timelockDuration variable.\\n     * @return Seconds to pass before Draw is valid.\\n     */\\n    function getTimelockDuration() external view returns (uint32);\\n\\n    /**\\n     * @notice Set the Timelock struct. Only callable by the contract owner.\\n     * @param _timelock Timelock struct to set.\\n     */\\n    function setTimelock(Timelock memory _timelock) external;\\n\\n    /**\\n     * @notice Set new Timelock duration. Only callable by owner\\n     * @param _timelockDuration Duration in seconds.\\n     * @dev    Set new Timelock duration and emit TimelockSet event.\\n     */\\n\\n    function setTimelockDuration(uint32 _timelockDuration) external;\\n\\n    /**\\n     * @notice Returns bool for timelockDuration elapsing.\\n     * @return True if timelockDuration, since last timelock has elapsed, false otherwise.\\n     */\\n    function hasElapsed() external view returns (bool);\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/interfaces/IDrawCalculator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITicket.sol\\\";\\nimport \\\"./IDrawBuffer.sol\\\";\\nimport \\\"../PrizeDistributionBuffer.sol\\\";\\nimport \\\"../PrizeDistributor.sol\\\";\\n\\n/**\\n * @title  PoolTogether V4 IDrawCalculator\\n * @author PoolTogether Inc Team\\n * @notice The DrawCalculator interface.\\n */\\ninterface IDrawCalculator {\\n    struct PickPrize {\\n        bool won;\\n        uint8 tierIndex;\\n    }\\n\\n    ///@notice Emitted when the contract is initialized\\n    event Deployed(\\n        ITicket indexed ticket,\\n        IDrawBuffer indexed drawBuffer,\\n        IPrizeDistributionBuffer indexed prizeDistributionBuffer\\n    );\\n\\n    ///@notice Emitted when the prizeDistributor is set/updated\\n    event PrizeDistributorSet(PrizeDistributor indexed prizeDistributor);\\n\\n    /**\\n     * @notice Calculates the prize amount for a user for Multiple Draws. Typically called by a PrizeDistributor.\\n     * @param user User for which to calculate prize amount.\\n     * @param drawIds drawId array for which to calculate prize amounts for.\\n     * @param data The ABI encoded pick indices for all Draws. Expected to be winning picks. Pick indices must be less than the totalUserPicks.\\n     * @return List of awardable prize amounts ordered by drawId.\\n     */\\n    function calculate(\\n        address user,\\n        uint32[] calldata drawIds,\\n        bytes calldata data\\n    ) external view returns (uint256[] memory, bytes memory);\\n\\n    /**\\n     * @notice Read global DrawBuffer variable.\\n     * @return IDrawBuffer\\n     */\\n    function getDrawBuffer() external view returns (IDrawBuffer);\\n\\n    /**\\n     * @notice Read global DrawBuffer variable.\\n     * @return IDrawBuffer\\n     */\\n    function getPrizeDistributionBuffer() external view returns (IPrizeDistributionBuffer);\\n\\n    /**\\n     * @notice Returns a users balances expressed as a fraction of the total supply over time.\\n     * @param user The users address\\n     * @param drawIds The drawsId to consider\\n     * @return Array of balances\\n     */\\n    function getNormalizedBalancesForDrawIds(address user, uint32[] calldata drawIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/interfaces/ITicket.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../libraries/TwabLib.sol\\\";\\nimport \\\"./IControlledToken.sol\\\";\\n\\ninterface ITicket is IControlledToken {\\n    /**\\n     * @notice A struct containing details for an Account.\\n     * @param balance The current balance for an Account.\\n     * @param nextTwabIndex The next available index to store a new twab.\\n     * @param cardinality The number of recorded twabs (plus one!).\\n     */\\n    struct AccountDetails {\\n        uint224 balance;\\n        uint16 nextTwabIndex;\\n        uint16 cardinality;\\n    }\\n\\n    /**\\n     * @notice Combines account details with their twab history.\\n     * @param details The account details.\\n     * @param twabs The history of twabs for this account.\\n     */\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[65535] twabs;\\n    }\\n\\n    /**\\n     * @notice Emitted when TWAB balance has been delegated to another user.\\n     * @param delegator Address of the delegator.\\n     * @param delegate Address of the delegate.\\n     */\\n    event Delegated(address indexed delegator, address indexed delegate);\\n\\n    /**\\n     * @notice Emitted when ticket is initialized.\\n     * @param name Ticket name (eg: PoolTogether Dai Ticket (Compound)).\\n     * @param symbol Ticket symbol (eg: PcDAI).\\n     * @param decimals Ticket decimals.\\n     * @param controller Token controller address.\\n     */\\n    event TicketInitialized(string name, string symbol, uint8 decimals, address indexed controller);\\n\\n    /**\\n     * @notice Emitted when a new TWAB has been recorded.\\n     * @param delegate The recipient of the ticket power (may be the same as the user).\\n     * @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\\n     */\\n    event NewUserTwab(\\n        address indexed delegate,\\n        ObservationLib.Observation newTwab\\n    );\\n\\n    /**\\n     * @notice Emitted when a new total supply TWAB has been recorded.\\n     * @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\\n     */\\n    event NewTotalSupplyTwab(ObservationLib.Observation newTotalSupplyTwab);\\n\\n    /**\\n     * @notice Retrieves the address of the delegate to whom `user` has delegated their tickets.\\n     * @dev Address of the delegate will be the zero address if `user` has not delegated their tickets.\\n     * @param user Address of the delegator.\\n     * @return Address of the delegate.\\n     */\\n    function delegateOf(address user) external view returns (address);\\n\\n    /**\\n    * @notice Delegate time-weighted average balances to an alternative address.\\n    * @dev    Transfers (including mints) trigger the storage of a TWAB in delegate(s) account, instead of the\\n              targetted sender and/or recipient address(s).\\n    * @dev    To reset the delegate, pass the zero address (0x000.000) as `to` parameter.\\n    * @dev Current delegate address should be different from the new delegate address `to`.\\n    * @param  to Recipient of delegated TWAB.\\n    */\\n    function delegate(address to) external;\\n\\n    /**\\n     * @notice Allows the controller to delegate on a users behalf.\\n     * @param user The user for whom to delegate\\n     * @param delegate The new delegate\\n     */\\n    function controllerDelegateFor(address user, address delegate) external;\\n\\n    /**\\n     * @notice Allows a user to delegate via signature\\n     * @param user The user who is delegating\\n     * @param delegate The new delegate\\n     * @param deadline The timestamp by which this must be submitted\\n     * @param v The v portion of the ECDSA sig\\n     * @param r The r portion of the ECDSA sig\\n     * @param s The s portion of the ECDSA sig\\n     */\\n    function delegateWithSignature(\\n        address user,\\n        address delegate,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Gets a users twab context.  This is a struct with their balance, next twab index, and cardinality.\\n     * @param user The user for whom to fetch the TWAB context.\\n     * @return The TWAB context, which includes { balance, nextTwabIndex, cardinality }\\n     */\\n    function getAccountDetails(address user) external view returns (TwabLib.AccountDetails memory);\\n\\n    /**\\n     * @notice Gets the TWAB at a specific index for a user.\\n     * @param user The user for whom to fetch the TWAB.\\n     * @param index The index of the TWAB to fetch.\\n     * @return The TWAB, which includes the twab amount and the timestamp.\\n     */\\n    function getTwab(address user, uint16 index)\\n        external\\n        view\\n        returns (ObservationLib.Observation memory);\\n\\n    /**\\n     * @notice Retrieves `user` TWAB balance.\\n     * @param user Address of the user whose TWAB is being fetched.\\n     * @param timestamp Timestamp at which we want to retrieve the TWAB balance.\\n     * @return The TWAB balance at the given timestamp.\\n     */\\n    function getBalanceAt(address user, uint64 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves `user` TWAB balances.\\n     * @param user Address of the user whose TWABs are being fetched.\\n     * @param timestamps Timestamps range at which we want to retrieve the TWAB balances.\\n     * @return `user` TWAB balances.\\n     */\\n    function getBalancesAt(address user, uint64[] calldata timestamps)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the average balance held by a user for a given time frame.\\n     * @param user The user whose balance is checked.\\n     * @param startTime The start time of the time frame.\\n     * @param endTime The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function getAverageBalanceBetween(\\n        address user,\\n        uint64 startTime,\\n        uint64 endTime\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the average balances held by a user for a given time frame.\\n     * @param user The user whose balance is checked.\\n     * @param startTimes The start time of the time frame.\\n     * @param endTimes The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function getAverageBalancesBetween(\\n        address user,\\n        uint64[] calldata startTimes,\\n        uint64[] calldata endTimes\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the total supply TWAB balance at the given timestamp.\\n     * @param timestamp Timestamp at which we want to retrieve the total supply TWAB balance.\\n     * @return The total supply TWAB balance at the given timestamp.\\n     */\\n    function getTotalSupplyAt(uint64 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the total supply TWAB balance between the given timestamps range.\\n     * @param timestamps Timestamps range at which we want to retrieve the total supply TWAB balance.\\n     * @return Total supply TWAB balances.\\n     */\\n    function getTotalSuppliesAt(uint64[] calldata timestamps)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the average total supply balance for a set of given time frames.\\n     * @param startTimes Array of start times.\\n     * @param endTimes Array of end times.\\n     * @return The average total supplies held during the time frame.\\n     */\\n    function getAverageTotalSuppliesBetween(\\n        uint64[] calldata startTimes,\\n        uint64[] calldata endTimes\\n    ) external view returns (uint256[] memory);\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/PrizeDistributionBuffer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\n\\nimport \\\"./libraries/DrawRingBufferLib.sol\\\";\\nimport \\\"./interfaces/IPrizeDistributionBuffer.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 PrizeDistributionBuffer\\n  * @author PoolTogether Inc Team\\n  * @notice The PrizeDistributionBuffer contract provides historical lookups of PrizeDistribution struct parameters (linked with a Draw ID) via a\\n            circular ring buffer. Historical PrizeDistribution parameters can be accessed on-chain using a drawId to calculate\\n            ring buffer storage slot. The PrizeDistribution parameters can be created by manager/owner and existing PrizeDistribution\\n            parameters can only be updated the owner. When adding a new PrizeDistribution basic sanity checks will be used to\\n            validate the incoming parameters.\\n*/\\ncontract PrizeDistributionBuffer is IPrizeDistributionBuffer, Manageable {\\n    using DrawRingBufferLib for DrawRingBufferLib.Buffer;\\n\\n    /// @notice The maximum cardinality of the prize distribution ring buffer.\\n    /// @dev even with daily draws, 256 will give us over 8 months of history.\\n    uint256 internal constant MAX_CARDINALITY = 256;\\n\\n    /// @notice The ceiling for prize distributions.  1e9 = 100%.\\n    /// @dev It's fixed point 9 because 1e9 is the largest \\\"1\\\" that fits into 2**32\\n    uint256 internal constant TIERS_CEILING = 1e9;\\n\\n    /// @notice Emitted when the contract is deployed.\\n    /// @param cardinality The maximum number of records in the buffer before they begin to expire.\\n    event Deployed(uint8 cardinality);\\n\\n    /// @notice PrizeDistribution ring buffer history.\\n    IPrizeDistributionBuffer.PrizeDistribution[MAX_CARDINALITY] internal prizeDistributionRingBuffer;\\n\\n    /// @notice Ring buffer metadata (nextIndex, lastId, cardinality)\\n    DrawRingBufferLib.Buffer internal bufferMetadata;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @notice Constructor for PrizeDistributionBuffer\\n     * @param _owner Address of the PrizeDistributionBuffer owner\\n     * @param _cardinality Cardinality of the `bufferMetadata`\\n     */\\n    constructor(address _owner, uint8 _cardinality) Ownable(_owner) {\\n        bufferMetadata.cardinality = _cardinality;\\n        emit Deployed(_cardinality);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IPrizeDistributionBuffer\\n    function getBufferCardinality() external view override returns (uint32) {\\n        return bufferMetadata.cardinality;\\n    }\\n\\n    /// @inheritdoc IPrizeDistributionBuffer\\n    function getPrizeDistribution(uint32 _drawId)\\n        external\\n        view\\n        override\\n        returns (IPrizeDistributionBuffer.PrizeDistribution memory)\\n    {\\n        return _getPrizeDistribution(bufferMetadata, _drawId);\\n    }\\n\\n    /// @inheritdoc IPrizeDistributionBuffer\\n    function getPrizeDistributions(uint32[] calldata _drawIds)\\n        external\\n        view\\n        override\\n        returns (IPrizeDistributionBuffer.PrizeDistribution[] memory)\\n    {\\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\\n        IPrizeDistributionBuffer.PrizeDistribution[] memory _prizeDistributions = new IPrizeDistributionBuffer.PrizeDistribution[](\\n            _drawIds.length\\n        );\\n\\n        for (uint256 i = 0; i < _drawIds.length; i++) {\\n            _prizeDistributions[i] = _getPrizeDistribution(buffer, _drawIds[i]);\\n        }\\n\\n        return _prizeDistributions;\\n    }\\n\\n    /// @inheritdoc IPrizeDistributionBuffer\\n    function getPrizeDistributionCount() external view override returns (uint32) {\\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\\n\\n        if (buffer.lastDrawId == 0) {\\n            return 0;\\n        }\\n\\n        uint32 bufferNextIndex = buffer.nextIndex;\\n\\n        // If the buffer is full return the cardinality, else retun the nextIndex\\n        if (prizeDistributionRingBuffer[bufferNextIndex].matchCardinality != 0) {\\n            return buffer.cardinality;\\n        } else {\\n            return bufferNextIndex;\\n        }\\n    }\\n\\n    /// @inheritdoc IPrizeDistributionBuffer\\n    function getNewestPrizeDistribution()\\n        external\\n        view\\n        override\\n        returns (IPrizeDistributionBuffer.PrizeDistribution memory prizeDistribution, uint32 drawId)\\n    {\\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\\n\\n        return (\\n            prizeDistributionRingBuffer[buffer.getIndex(buffer.lastDrawId)],\\n            buffer.lastDrawId\\n        );\\n    }\\n\\n    /// @inheritdoc IPrizeDistributionBuffer\\n    function getOldestPrizeDistribution()\\n        external\\n        view\\n        override\\n        returns (IPrizeDistributionBuffer.PrizeDistribution memory prizeDistribution, uint32 drawId)\\n    {\\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\\n\\n        // if the ring buffer is full, the oldest is at the nextIndex\\n        prizeDistribution = prizeDistributionRingBuffer[buffer.nextIndex];\\n\\n        // The PrizeDistribution at index 0 IS by default the oldest prizeDistribution.\\n        if (buffer.lastDrawId == 0) {\\n            drawId = 0; // return 0 to indicate no prizeDistribution ring buffer history\\n        } else if (prizeDistribution.bitRangeSize == 0) {\\n            // IF the next PrizeDistribution.bitRangeSize == 0 the ring buffer HAS NOT looped around so the oldest is the first entry.\\n            prizeDistribution = prizeDistributionRingBuffer[0];\\n            drawId = (buffer.lastDrawId + 1) - buffer.nextIndex;\\n        } else {\\n            // Calculates the drawId using the ring buffer cardinality\\n            // Sequential drawIds are gauranteed by DrawRingBufferLib.push()\\n            drawId = (buffer.lastDrawId + 1) - buffer.cardinality;\\n        }\\n    }\\n\\n    /// @inheritdoc IPrizeDistributionBuffer\\n    function pushPrizeDistribution(\\n        uint32 _drawId,\\n        IPrizeDistributionBuffer.PrizeDistribution calldata _prizeDistribution\\n    ) external override onlyManagerOrOwner returns (bool) {\\n        return _pushPrizeDistribution(_drawId, _prizeDistribution);\\n    }\\n\\n    /// @inheritdoc IPrizeDistributionBuffer\\n    function setPrizeDistribution(\\n        uint32 _drawId,\\n        IPrizeDistributionBuffer.PrizeDistribution calldata _prizeDistribution\\n    ) external override onlyOwner returns (uint32) {\\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\\n        uint32 index = buffer.getIndex(_drawId);\\n        prizeDistributionRingBuffer[index] = _prizeDistribution;\\n\\n        emit PrizeDistributionSet(_drawId, _prizeDistribution);\\n\\n        return _drawId;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Gets the PrizeDistributionBuffer for a drawId\\n     * @param _buffer DrawRingBufferLib.Buffer\\n     * @param _drawId drawId\\n     */\\n    function _getPrizeDistribution(DrawRingBufferLib.Buffer memory _buffer, uint32 _drawId)\\n        internal\\n        view\\n        returns (IPrizeDistributionBuffer.PrizeDistribution memory)\\n    {\\n        return prizeDistributionRingBuffer[_buffer.getIndex(_drawId)];\\n    }\\n\\n    /**\\n     * @notice Set newest PrizeDistributionBuffer in ring buffer storage.\\n     * @param _drawId       drawId\\n     * @param _prizeDistribution PrizeDistributionBuffer struct\\n     */\\n    function _pushPrizeDistribution(\\n        uint32 _drawId,\\n        IPrizeDistributionBuffer.PrizeDistribution calldata _prizeDistribution\\n    ) internal returns (bool) {\\n\\n        require(_drawId > 0, \\\"DrawCalc/draw-id-gt-0\\\");\\n        require(_prizeDistribution.matchCardinality > 0, \\\"DrawCalc/matchCardinality-gt-0\\\");\\n        require(\\n            _prizeDistribution.bitRangeSize <= 256 / _prizeDistribution.matchCardinality,\\n            \\\"DrawCalc/bitRangeSize-too-large\\\"\\n        );\\n\\n        require(_prizeDistribution.bitRangeSize > 0, \\\"DrawCalc/bitRangeSize-gt-0\\\");\\n        require(_prizeDistribution.maxPicksPerUser > 0, \\\"DrawCalc/maxPicksPerUser-gt-0\\\");\\n\\n        // ensure that the sum of the tiers are not gt 100% and record number of non-zero tiers entries\\n        uint256 sumTotalTiers = 0;\\n        uint256 nonZeroTiers = 0;\\n        uint256 tiersLength = _prizeDistribution.tiers.length;\\n\\n        for (uint256 index = 0; index < tiersLength; index++) {\\n            sumTotalTiers += _prizeDistribution.tiers[index];\\n\\n            if (_prizeDistribution.tiers[index] > 0) {\\n                nonZeroTiers++;\\n            }\\n        }\\n\\n        // Each tier amount stored as uint32 - summed can't exceed 1e9\\n        require(sumTotalTiers <= TIERS_CEILING, \\\"DrawCalc/tiers-gt-100%\\\");\\n\\n        require(\\n            _prizeDistribution.matchCardinality >= nonZeroTiers,\\n            \\\"DrawCalc/matchCardinality-gte-tiers\\\"\\n        );\\n\\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\\n\\n        // store the PrizeDistribution in the ring buffer\\n        prizeDistributionRingBuffer[buffer.nextIndex] = _prizeDistribution;\\n\\n        // update the ring buffer data\\n        bufferMetadata = buffer.push(_drawId);\\n\\n        emit PrizeDistributionSet(_drawId, _prizeDistribution);\\n\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/PrizeDistributor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IPrizeDistributor.sol\\\";\\nimport \\\"./interfaces/IDrawCalculator.sol\\\";\\nimport \\\"./interfaces/IDrawBeacon.sol\\\";\\n\\n/**\\n    * @title  PoolTogether V4 PrizeDistributor\\n    * @author PoolTogether Inc Team\\n    * @notice The PrizeDistributor contract holds Tickets (captured interest) and distributes tickets to users with winning draw claims.\\n              PrizeDistributor uses an external IDrawCalculator to validate a users draw claim, before awarding payouts. To prevent users \\n              from reclaiming prizes, a payout history for each draw claim is mapped to user accounts. Reclaiming a draw can occur\\n              if an \\\"optimal\\\" prize was not included in previous claim pick indices and the new claims updated payout is greater then\\n              the previous prize distributor claim payout.\\n*/\\ncontract PrizeDistributor is IPrizeDistributor, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ Global Variables ============ */\\n\\n    /// @notice DrawCalculator address\\n    IDrawCalculator internal drawCalculator;\\n\\n    /// @notice Token address\\n    IERC20 internal immutable token;\\n\\n    /// @notice Maps users => drawId => paid out balance\\n    mapping(address => mapping(uint256 => uint256)) internal userDrawPayouts;\\n\\n    /* ============ Initialize ============ */\\n\\n    /**\\n     * @notice Initialize PrizeDistributor smart contract.\\n     * @param _owner          Owner address\\n     * @param _token          Token address\\n     * @param _drawCalculator DrawCalculator address\\n     */\\n    constructor(\\n        address _owner,\\n        IERC20 _token,\\n        IDrawCalculator _drawCalculator\\n    ) Ownable(_owner) {\\n        _setDrawCalculator(_drawCalculator);\\n        require(address(_token) != address(0), \\\"PrizeDistributor/token-not-zero-address\\\");\\n        token = _token;\\n        emit TokenSet(_token);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IPrizeDistributor\\n    function claim(\\n        address _user,\\n        uint32[] calldata _drawIds,\\n        bytes calldata _data\\n    ) external override returns (uint256) {\\n        \\n        uint256 totalPayout;\\n        \\n        (uint256[] memory drawPayouts, ) = drawCalculator.calculate(_user, _drawIds, _data); // neglect the prizeCounts since we are not interested in them here\\n\\n        for (uint256 payoutIndex = 0; payoutIndex < drawPayouts.length; payoutIndex++) {\\n            uint32 drawId = _drawIds[payoutIndex];\\n            uint256 payout = drawPayouts[payoutIndex];\\n            uint256 oldPayout = _getDrawPayoutBalanceOf(_user, drawId);\\n            uint256 payoutDiff = 0;\\n\\n            if (payout > oldPayout) {\\n                payoutDiff = payout - oldPayout;\\n                _setDrawPayoutBalanceOf(_user, drawId, payout);\\n            }\\n\\n            // helpfully short-circuit, in case the user screwed something up.\\n            require(payoutDiff > 0, \\\"PrizeDistributor/zero-payout\\\");\\n\\n            totalPayout += payoutDiff;\\n\\n            emit ClaimedDraw(_user, drawId, payoutDiff);\\n        }\\n\\n        _awardPayout(_user, totalPayout);\\n\\n        return totalPayout;\\n    }\\n\\n    /// @inheritdoc IPrizeDistributor\\n    function withdrawERC20(\\n        IERC20 _erc20Token,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyOwner returns (bool) {\\n        require(_to != address(0), \\\"PrizeDistributor/recipient-not-zero-address\\\");\\n        require(address(_erc20Token) != address(0), \\\"PrizeDistributor/ERC20-not-zero-address\\\");\\n\\n        _erc20Token.safeTransfer(_to, _amount);\\n\\n        emit ERC20Withdrawn(_erc20Token, _to, _amount);\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc IPrizeDistributor\\n    function getDrawCalculator() external view override returns (IDrawCalculator) {\\n        return drawCalculator;\\n    }\\n\\n    /// @inheritdoc IPrizeDistributor\\n    function getDrawPayoutBalanceOf(address _user, uint32 _drawId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _getDrawPayoutBalanceOf(_user, _drawId);\\n    }\\n\\n    /// @inheritdoc IPrizeDistributor\\n    function getToken() external view override returns (IERC20) {\\n        return token;\\n    }\\n\\n    /// @inheritdoc IPrizeDistributor\\n    function setDrawCalculator(IDrawCalculator _newCalculator)\\n        external\\n        override\\n        onlyOwner\\n        returns (IDrawCalculator)\\n    {\\n        _setDrawCalculator(_newCalculator);\\n        return _newCalculator;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _getDrawPayoutBalanceOf(address _user, uint32 _drawId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return userDrawPayouts[_user][_drawId];\\n    }\\n\\n    function _setDrawPayoutBalanceOf(\\n        address _user,\\n        uint32 _drawId,\\n        uint256 _payout\\n    ) internal {\\n        userDrawPayouts[_user][_drawId] = _payout;\\n    }\\n\\n    /**\\n     * @notice Sets DrawCalculator reference for individual draw id.\\n     * @param _newCalculator  DrawCalculator address\\n     */\\n    function _setDrawCalculator(IDrawCalculator _newCalculator) internal {\\n        require(address(_newCalculator) != address(0), \\\"PrizeDistributor/calc-not-zero\\\");\\n        drawCalculator = _newCalculator;\\n\\n        emit DrawCalculatorSet(_newCalculator);\\n    }\\n\\n    /**\\n     * @notice Transfer claimed draw(s) total payout to user.\\n     * @param _to      User address\\n     * @param _amount  Transfer amount\\n     */\\n    function _awardPayout(address _to, uint256 _amount) internal {\\n        token.safeTransfer(_to, _amount);\\n    }\\n\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/libraries/TwabLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./ExtendedSafeCastLib.sol\\\";\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\nimport \\\"./ObservationLib.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 TwabLib (Library)\\n  * @author PoolTogether Inc Team\\n  * @dev    Time-Weighted Average Balance Library for ERC20 tokens.\\n  * @notice This TwabLib adds on-chain historical lookups to a user(s) time-weighted average balance.\\n            Each user is mapped to an Account struct containing the TWAB history (ring bufffer) and\\n            ring buffer parameters. Every token.transfer() creates a new TWAB checkpoint. The new TWAB\\n            checkpoint is stored in the circular ring buffer, as either a new checkpoint or rewriting\\n            a previous checkpoint with new parameters. The TwabLib (using existing blocktimes 1block/15sec)\\n            guarantees minimum 7.4 years of search history.\\n */\\nlibrary TwabLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using ExtendedSafeCastLib for uint256;\\n\\n    /**\\n      * @notice Sets max ring buffer length in the Account.twabs Observation list.\\n                As users transfer/mint/burn tickets new Observation checkpoints are\\n                recorded. The current max cardinality guarantees a six month minimum,\\n                of historical accurate lookups with current estimates of 1 new block\\n                every 15 seconds - the of course contain a transfer to trigger an\\n                observation write to storage.\\n      * @dev    The user Account.AccountDetails.cardinality parameter can NOT exceed\\n                the max cardinality variable. Preventing \\\"corrupted\\\" ring buffer lookup\\n                pointers and new observation checkpoints.\\n\\n                The MAX_CARDINALITY in fact guarantees at least 7.4 years of records:\\n                If 14 = block time in seconds\\n                (2**24) * 14 = 234881024 seconds of history\\n                234881024 / (365 * 24 * 60 * 60) ~= 7.44 years\\n    */\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /** @notice Struct ring buffer parameters for single user Account\\n      * @param balance       Current balance for an Account\\n      * @param nextTwabIndex Next uninitialized or updatable ring buffer checkpoint storage slot\\n      * @param cardinality   Current total \\\"initialized\\\" ring buffer checkpoints for single user AccountDetails.\\n                             Used to set initial boundary conditions for an efficient binary search.\\n    */\\n    struct AccountDetails {\\n        uint208 balance;\\n        uint24 nextTwabIndex;\\n        uint24 cardinality;\\n    }\\n\\n    /// @notice Combines account details with their twab history\\n    /// @param details The account details\\n    /// @param twabs The history of twabs for this account\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[MAX_CARDINALITY] twabs;\\n    }\\n\\n    /// @notice Increases an account's balance and records a new twab.\\n    /// @param _account The account whose balance will be increased\\n    /// @param _amount The amount to increase the balance by\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new AccountDetails\\n    /// @return twab The user's latest TWAB\\n    /// @return isNew Whether the TWAB is new\\n    function increaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        uint32 _currentTime\\n    )\\n        internal\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        AccountDetails memory _accountDetails = _account.details;\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        accountDetails.balance = _accountDetails.balance + _amount;\\n    }\\n\\n    /** @notice Calculates the next TWAB checkpoint for an account with a decreasing balance.\\n     * @dev    With Account struct and amount decreasing calculates the next TWAB observable checkpoint.\\n     * @param _account        Account whose balance will be decreased\\n     * @param _amount         Amount to decrease the balance by\\n     * @param _revertMessage  Revert message for insufficient balance\\n     * @return accountDetails Updated Account.details struct\\n     * @return twab           TWAB observation (with decreasing average)\\n     * @return isNew          Whether TWAB is new or calling twice in the same block\\n     */\\n    function decreaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        string memory _revertMessage,\\n        uint32 _currentTime\\n    )\\n        internal\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        AccountDetails memory _accountDetails = _account.details;\\n\\n        require(_accountDetails.balance >= _amount, _revertMessage);\\n\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        accountDetails.balance = _accountDetails.balance - _amount;\\n    }\\n\\n    /** @notice Calculates the average balance held by a user for a given time frame.\\n      * @dev    Finds the average balance between start and end timestamp epochs.\\n                Validates the supplied end time is within the range of elapsed time i.e. less then timestamp of now.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _startTime      Start of timestamp range as an epoch\\n      * @param _endTime        End of timestamp range as an epoch\\n      * @param _currentTime    Block.timestamp\\n      * @return Average balance of user held between epoch timestamps start and end\\n    */\\n    function getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 endTime = _endTime > _currentTime ? _currentTime : _endTime;\\n\\n        return\\n            _getAverageBalanceBetween(_twabs, _accountDetails, _startTime, endTime, _currentTime);\\n    }\\n\\n    /// @notice Retrieves the oldest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the oldest TWAB in the twabs array\\n    /// @return twab The oldest TWAB\\n    function oldestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = _accountDetails.nextTwabIndex;\\n        twab = _twabs[index];\\n\\n        // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n        if (twab.timestamp == 0) {\\n            index = 0;\\n            twab = _twabs[0];\\n        }\\n    }\\n\\n    /// @notice Retrieves the newest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the newest TWAB in the twabs array\\n    /// @return twab The newest TWAB\\n    function newestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = uint24(RingBufferLib.newestIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY));\\n        twab = _twabs[index];\\n    }\\n\\n    /// @notice Retrieves amount at `_targetTime` timestamp\\n    /// @param _twabs List of TWABs to search through.\\n    /// @param _accountDetails Accounts details\\n    /// @param _targetTime Timestamp at which the reserved TWAB should be for.\\n    /// @return uint256 TWAB amount at `_targetTime`.\\n    function getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 timeToTarget = _targetTime > _currentTime ? _currentTime : _targetTime;\\n        return _getBalanceAt(_twabs, _accountDetails, timeToTarget, _currentTime);\\n    }\\n\\n    /// @notice Calculates the average balance held by a user for a given time frame.\\n    /// @param _startTime The start time of the time frame.\\n    /// @param _endTime The end time of the time frame.\\n    /// @return The average balance that the user held during the time frame.\\n    function _getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        (uint24 oldestTwabIndex, ObservationLib.Observation memory oldTwab) = oldestTwab(\\n            _twabs,\\n            _accountDetails\\n        );\\n\\n        (uint24 newestTwabIndex, ObservationLib.Observation memory newTwab) = newestTwab(\\n            _twabs,\\n            _accountDetails\\n        );\\n\\n        ObservationLib.Observation memory startTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _startTime,\\n            _currentTime\\n        );\\n\\n        ObservationLib.Observation memory endTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _endTime,\\n            _currentTime\\n        );\\n\\n        // Difference in amount / time\\n        return (endTwab.amount - startTwab.amount) / OverflowSafeComparatorLib.checkedSub(endTwab.timestamp, startTwab.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Searches TWAB history and calculate the difference between amount(s)/timestamp(s) to return average balance\\n                between the Observations closes to the supplied targetTime.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _targetTime     Target timestamp to filter Observations in the ring buffer binary search\\n      * @param _currentTime    Block.timestamp\\n      * @return uint256 Time-weighted average amount between two closest observations.\\n    */\\n    function _getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        uint24 newestTwabIndex;\\n        ObservationLib.Observation memory afterOrAt;\\n        ObservationLib.Observation memory beforeOrAt;\\n        (newestTwabIndex, beforeOrAt) = newestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically after the newest TWAB, we can simply return the current balance\\n        if (beforeOrAt.timestamp.lte(_targetTime, _currentTime)) {\\n            return _accountDetails.balance;\\n        }\\n\\n        uint24 oldestTwabIndex;\\n        // Now, set before to the oldest TWAB\\n        (oldestTwabIndex, beforeOrAt) = oldestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically before the oldest TWAB, we can early return\\n        if (_targetTime.lt(beforeOrAt.timestamp, _currentTime)) {\\n            return 0;\\n        }\\n\\n        // Otherwise, we perform the `binarySearch`\\n        (beforeOrAt, afterOrAt) = ObservationLib.binarySearch(\\n            _twabs,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _targetTime,\\n            _accountDetails.cardinality,\\n            _currentTime\\n        );\\n\\n        // Sum the difference in amounts and divide by the difference in timestamps.\\n        // The time-weighted average balance uses time measured between two epoch timestamps as\\n        // a constaint on the measurement when calculating the time weighted average balance.\\n        return\\n            (afterOrAt.amount - beforeOrAt.amount) / OverflowSafeComparatorLib.checkedSub(afterOrAt.timestamp, beforeOrAt.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Calculates a user TWAB for a target timestamp using the historical TWAB records.\\n                The balance is linearly interpolated: amount differences / timestamp differences\\n                using the simple (after.amount - before.amount / end.timestamp - start.timestamp) formula.\\n    /** @dev    Binary search in _calculateTwab fails when searching out of bounds. Thus, before\\n                searching we exclude target timestamps out of range of newest/oldest TWAB(s).\\n                IF a search is before or after the range we \\\"extrapolate\\\" a Observation from the expected state.\\n      * @param _twabs           Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails  User AccountDetails struct loaded in memory\\n      * @param _newestTwab      Newest TWAB in history (end of ring buffer)\\n      * @param _oldestTwab      Olderst TWAB in history (end of ring buffer)\\n      * @param _newestTwabIndex Pointer in ring buffer to newest TWAB\\n      * @param _oldestTwabIndex Pointer in ring buffer to oldest TWAB\\n      * @param _targetTimestamp Epoch timestamp to calculate for time (T) in the TWAB\\n      * @param _time            Block.timestamp\\n      * @return accountDetails Updated Account.details struct\\n    */\\n    function _calculateTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        ObservationLib.Observation memory _newestTwab,\\n        ObservationLib.Observation memory _oldestTwab,\\n        uint24 _newestTwabIndex,\\n        uint24 _oldestTwabIndex,\\n        uint32 _targetTimestamp,\\n        uint32 _time\\n    ) private view returns (ObservationLib.Observation memory) {\\n        // If `_targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\\n        if (_newestTwab.timestamp.lt(_targetTimestamp, _time)) {\\n            return _computeNextTwab(_newestTwab, _accountDetails.balance, _targetTimestamp);\\n        }\\n\\n        if (_newestTwab.timestamp == _targetTimestamp) {\\n            return _newestTwab;\\n        }\\n\\n        if (_oldestTwab.timestamp == _targetTimestamp) {\\n            return _oldestTwab;\\n        }\\n\\n        // If `_targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\\n        if (_targetTimestamp.lt(_oldestTwab.timestamp, _time)) {\\n            return ObservationLib.Observation({ amount: 0, timestamp: _targetTimestamp });\\n        }\\n\\n        // Otherwise, both timestamps must be surrounded by twabs.\\n        (\\n            ObservationLib.Observation memory beforeOrAtStart,\\n            ObservationLib.Observation memory afterOrAtStart\\n        ) = ObservationLib.binarySearch(\\n                _twabs,\\n                _newestTwabIndex,\\n                _oldestTwabIndex,\\n                _targetTimestamp,\\n                _accountDetails.cardinality,\\n                _time\\n            );\\n\\n        uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) /\\n            OverflowSafeComparatorLib.checkedSub(afterOrAtStart.timestamp, beforeOrAtStart.timestamp, _time);\\n\\n        return _computeNextTwab(beforeOrAtStart, heldBalance, _targetTimestamp);\\n    }\\n\\n    /**\\n     * @notice Calculates the next TWAB using the newestTwab and updated balance.\\n     * @dev    Storage of the TWAB obersation is managed by the calling function and not _computeNextTwab.\\n     * @param _currentTwab    Newest Observation in the Account.twabs list\\n     * @param _currentBalance User balance at time of most recent (newest) checkpoint write\\n     * @param _time           Current block.timestamp\\n     * @return TWAB Observation\\n     */\\n    function _computeNextTwab(\\n        ObservationLib.Observation memory _currentTwab,\\n        uint224 _currentBalance,\\n        uint32 _time\\n    ) private pure returns (ObservationLib.Observation memory) {\\n        // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\\n        return\\n            ObservationLib.Observation({\\n                amount: _currentTwab.amount +\\n                    _currentBalance *\\n                    (_time.checkedSub(_currentTwab.timestamp, _time)),\\n                timestamp: _time\\n            });\\n    }\\n\\n    /// @notice Sets a new TWAB Observation at the next available index and returns the new account details.\\n    /// @dev Note that if _currentTime is before the last observation timestamp, it appears as an overflow\\n    /// @param _twabs The twabs array to insert into\\n    /// @param _accountDetails The current account details\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new account details\\n    /// @return twab The newest twab (may or may not be brand-new)\\n    /// @return isNew Whether the newest twab was created by this call\\n    function _nextTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _currentTime\\n    )\\n        private\\n        returns (\\n            AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        )\\n    {\\n        (, ObservationLib.Observation memory _newestTwab) = newestTwab(_twabs, _accountDetails);\\n\\n        // if we're in the same block, return\\n        if (_newestTwab.timestamp == _currentTime) {\\n            return (_accountDetails, _newestTwab, false);\\n        }\\n\\n        ObservationLib.Observation memory newTwab = _computeNextTwab(\\n            _newestTwab,\\n            _accountDetails.balance,\\n            _currentTime\\n        );\\n\\n        _twabs[_accountDetails.nextTwabIndex] = newTwab;\\n\\n        AccountDetails memory nextAccountDetails = push(_accountDetails);\\n\\n        return (nextAccountDetails, newTwab, true);\\n    }\\n\\n    /// @notice \\\"Pushes\\\" a new element on the AccountDetails ring buffer, and returns the new AccountDetails\\n    /// @param _accountDetails The account details from which to pull the cardinality and next index\\n    /// @return The new AccountDetails\\n    function push(AccountDetails memory _accountDetails)\\n        internal\\n        pure\\n        returns (AccountDetails memory)\\n    {\\n        _accountDetails.nextTwabIndex = uint24(\\n            RingBufferLib.nextIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY)\\n        );\\n\\n        // Prevent the Account specific cardinality from exceeding the MAX_CARDINALITY.\\n        // The ring buffer length is limited by MAX_CARDINALITY. IF the account.cardinality\\n        // exceeds the max cardinality, new observations would be incorrectly set or the\\n        // observation would be out of \\\"bounds\\\" of the ring buffer. Once reached the\\n        // AccountDetails.cardinality will continue to be equal to max cardinality.\\n        if (_accountDetails.cardinality < MAX_CARDINALITY) {\\n            _accountDetails.cardinality += 1;\\n        }\\n\\n        return _accountDetails;\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/interfaces/IControlledToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/** @title IControlledToken\\n  * @author PoolTogether Inc Team\\n  * @notice ERC20 Tokens with a controller for minting & burning.\\n*/\\ninterface IControlledToken is IERC20 {\\n\\n    /** \\n        @notice Interface to the contract responsible for controlling mint/burn\\n    */\\n    function controller() external view returns (address);\\n\\n    /** \\n      * @notice Allows the controller to mint tokens for a user account\\n      * @dev May be overridden to provide more granular control over minting\\n      * @param user Address of the receiver of the minted tokens\\n      * @param amount Amount of tokens to mint\\n    */\\n    function controllerMint(address user, uint256 amount) external;\\n\\n    /** \\n      * @notice Allows the controller to burn tokens from a user account\\n      * @dev May be overridden to provide more granular control over burning\\n      * @param user Address of the holder account to burn tokens from\\n      * @param amount Amount of tokens to burn\\n    */\\n    function controllerBurn(address user, uint256 amount) external;\\n\\n    /** \\n      * @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n      * @dev May be overridden to provide more granular control over operator-burning\\n      * @param operator Address of the operator performing the burn action via the controller contract\\n      * @param user Address of the holder account to burn tokens from\\n      * @param amount Amount of tokens to burn\\n    */\\n    function controllerBurnFrom(\\n        address operator,\\n        address user,\\n        uint256 amount\\n    ) external;\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/libraries/ExtendedSafeCastLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary ExtendedSafeCastLib {\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 _value) internal pure returns (uint208) {\\n        require(_value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 _value) internal pure returns (uint224) {\\n        require(_value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(_value);\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/libraries/OverflowSafeComparatorLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/// @title OverflowSafeComparatorLib library to share comparator functions between contracts\\n/// @dev Code taken from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/3e88af408132fc957e3e406f65a0ce2b1ca06c3d/contracts/libraries/Oracle.sol\\n/// @author PoolTogether Inc.\\nlibrary OverflowSafeComparatorLib {\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically < `_b`.\\n    function lt(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (bool) {\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return aAdjusted < bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically <= `_b`.\\n    function lte(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (bool) {\\n\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return aAdjusted <= bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamp subtractor\\n    /// @dev safe for 0 or 1 overflows, where `_a` and `_b` must be chronologically before or equal to time\\n    /// @param _a The subtraction left operand\\n    /// @param _b The subtraction right operand\\n    /// @param _timestamp The current time.  Expected to be chronologically after both.\\n    /// @return The difference between a and b, adjusted for overflow\\n    function checkedSub(\\n        uint32 _a,\\n        uint32 _b,\\n        uint32 _timestamp\\n    ) internal pure returns (uint32) {\\n        // No need to adjust if there hasn't been an overflow\\n\\n        if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n        return uint32(aAdjusted - bAdjusted);\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/libraries/RingBufferLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nlibrary RingBufferLib {\\n    /**\\n    * @notice Returns wrapped TWAB index.\\n    * @dev  In order to navigate the TWAB circular buffer, we need to use the modulo operator.\\n    * @dev  For example, if `_index` is equal to 32 and the TWAB circular buffer is of `_cardinality` 32,\\n    *       it will return 0 and will point to the first element of the array.\\n    * @param _index Index used to navigate through the TWAB circular buffer.\\n    * @param _cardinality TWAB buffer cardinality.\\n    * @return TWAB index.\\n    */\\n    function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n        return _index % _cardinality;\\n    }\\n\\n    /**\\n    * @notice Computes the negative offset from the given index, wrapped by the cardinality.\\n    * @dev  We add `_cardinality` to `_index` to be able to offset even if `_amount` is superior to `_cardinality`.\\n    * @param _index The index from which to offset\\n    * @param _amount The number of indices to offset.  This is subtracted from the given index.\\n    * @param _cardinality The number of elements in the ring buffer\\n    * @return Offsetted index.\\n     */\\n    function offset(\\n        uint256 _index,\\n        uint256 _amount,\\n        uint256 _cardinality\\n    ) internal pure returns (uint256) {\\n        return wrap(_index + _cardinality - _amount, _cardinality);\\n    }\\n\\n    /// @notice Returns the index of the last recorded TWAB\\n    /// @param _nextIndex The next available twab index.  This will be recorded to next.\\n    /// @param _cardinality The cardinality of the TWAB history.\\n    /// @return The index of the last recorded TWAB\\n    function newestIndex(uint256 _nextIndex, uint256 _cardinality)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_cardinality == 0) {\\n            return 0;\\n        }\\n\\n        return wrap(_nextIndex + _cardinality - 1, _cardinality);\\n    }\\n\\n    /// @notice Computes the ring buffer index that follows the given one, wrapped by cardinality\\n    /// @param _index The index to increment\\n    /// @param _cardinality The number of elements in the Ring Buffer\\n    /// @return The next index relative to the given index.  Will wrap around to 0 if the next index == cardinality\\n    function nextIndex(uint256 _index, uint256 _cardinality)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return wrap(_index + 1, _cardinality);\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/libraries/ObservationLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\n\\n/**\\n* @title Observation Library\\n* @notice This library allows one to store an array of timestamped values and efficiently binary search them.\\n* @dev Largely pulled from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/c05a0e2c8c08c460fb4d05cfdda30b3ad8deeaac/contracts/libraries/Oracle.sol\\n* @author PoolTogether Inc.\\n*/\\nlibrary ObservationLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using SafeCast for uint256;\\n\\n    /// @notice The maximum number of observations\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /**\\n    * @notice Observation, which includes an amount and timestamp.\\n    * @param amount `amount` at `timestamp`.\\n    * @param timestamp Recorded `timestamp`.\\n    */\\n    struct Observation {\\n        uint224 amount;\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n    * @notice Fetches Observations `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\\n    * The result may be the same Observation, or adjacent Observations.\\n    * @dev The answer must be contained in the array used when the target is located within the stored Observation.\\n    * boundaries: older than the most recent Observation and younger, or the same age as, the oldest Observation.\\n    * @dev  If `_newestObservationIndex` is less than `_oldestObservationIndex`, it means that we've wrapped around the circular buffer.\\n    *       So the most recent observation will be at `_oldestObservationIndex + _cardinality - 1`, at the beginning of the circular buffer.\\n    * @param _observations List of Observations to search through.\\n    * @param _newestObservationIndex Index of the newest Observation. Right side of the circular buffer.\\n    * @param _oldestObservationIndex Index of the oldest Observation. Left side of the circular buffer.\\n    * @param _target Timestamp at which we are searching the Observation.\\n    * @param _cardinality Cardinality of the circular buffer we are searching through.\\n    * @param _time Timestamp at which we perform the binary search.\\n    * @return beforeOrAt Observation recorded before, or at, the target.\\n    * @return atOrAfter Observation recorded at, or after, the target.\\n    */\\n    function binarySearch(\\n        Observation[MAX_CARDINALITY] storage _observations,\\n        uint24 _newestObservationIndex,\\n        uint24 _oldestObservationIndex,\\n        uint32 _target,\\n        uint24 _cardinality,\\n        uint32 _time\\n    ) internal view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 leftSide = _oldestObservationIndex;\\n        uint256 rightSide = _newestObservationIndex < leftSide\\n            ? leftSide + _cardinality - 1\\n            : _newestObservationIndex;\\n        uint256 currentIndex;\\n\\n        while (true) {\\n            // We start our search in the middle of the `leftSide` and `rightSide`.\\n            // After each iteration, we narrow down the search to the left or the right side while still starting our search in the middle.\\n            currentIndex = (leftSide + rightSide) / 2;\\n\\n            beforeOrAt = _observations[uint24(RingBufferLib.wrap(currentIndex, _cardinality))];\\n            uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\\n\\n            // We've landed on an uninitialized timestamp, keep searching higher (more recently).\\n            if (beforeOrAtTimestamp == 0) {\\n                leftSide = currentIndex + 1;\\n                continue;\\n            }\\n\\n            atOrAfter = _observations[uint24(RingBufferLib.nextIndex(currentIndex, _cardinality))];\\n\\n            bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\\n\\n            // Check if we've found the corresponding Observation.\\n            if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\\n                break;\\n            }\\n\\n            // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower. To the left of the current index.\\n            if (!targetAtOrAfter) {\\n                rightSide = currentIndex - 1;\\n            } else {\\n                // Otherwise, we keep searching higher. To the left of the current index.\\n                leftSide = currentIndex + 1;\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/libraries/DrawRingBufferLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./RingBufferLib.sol\\\";\\n\\n/// @title Library for creating and managing a draw ring buffer.\\nlibrary DrawRingBufferLib {\\n    /// @notice Draw buffer struct.\\n    struct Buffer {\\n        uint32 lastDrawId;\\n        uint32 nextIndex;\\n        uint32 cardinality;\\n    }\\n\\n    /// @notice Helper function to know if the draw ring buffer has been initialized.\\n    /// @dev since draws start at 1 and are monotonically increased, we know we are uninitialized if nextIndex = 0 and lastDrawId = 0.\\n    /// @param _buffer The buffer to check.\\n    function isInitialized(Buffer memory _buffer) internal pure returns (bool) {\\n        return !(_buffer.nextIndex == 0 && _buffer.lastDrawId == 0);\\n    }\\n\\n    /// @notice Push a draw to the buffer.\\n    /// @param _buffer The buffer to push to.\\n    /// @param _drawId The drawID to push.\\n    /// @return The new buffer.\\n    function push(Buffer memory _buffer, uint32 _drawId) internal pure returns (Buffer memory) {\\n        require(!isInitialized(_buffer) || _drawId == _buffer.lastDrawId + 1, \\\"DRB/must-be-contig\\\");\\n\\n        return\\n            Buffer({\\n                lastDrawId: _drawId,\\n                nextIndex: uint32(RingBufferLib.nextIndex(_buffer.nextIndex, _buffer.cardinality)),\\n                cardinality: _buffer.cardinality\\n            });\\n    }\\n\\n    /// @notice Get draw ring buffer index pointer.\\n    /// @param _buffer The buffer to get the `nextIndex` from.\\n    /// @param _drawId The draw id to get the index for.\\n    /// @return The draw ring buffer index pointer.\\n    function getIndex(Buffer memory _buffer, uint32 _drawId) internal pure returns (uint32) {\\n        require(isInitialized(_buffer) && _drawId <= _buffer.lastDrawId, \\\"DRB/future-draw\\\");\\n\\n        uint32 indexOffset = _buffer.lastDrawId - _drawId;\\n        require(indexOffset < _buffer.cardinality, \\\"DRB/expired-draw\\\");\\n\\n        uint256 mostRecent = RingBufferLib.newestIndex(_buffer.nextIndex, _buffer.cardinality);\\n\\n        return uint32(RingBufferLib.offset(uint32(mostRecent), indexOffset, _buffer.cardinality));\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/interfaces/IPrizeDistributor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IDrawBuffer.sol\\\";\\nimport \\\"./IDrawCalculator.sol\\\";\\n\\n/** @title  IPrizeDistributor\\n  * @author PoolTogether Inc Team\\n  * @notice The PrizeDistributor interface.\\n*/\\ninterface IPrizeDistributor {\\n\\n    /**\\n     * @notice Emit when user has claimed token from the PrizeDistributor.\\n     * @param user   User address receiving draw claim payouts\\n     * @param drawId Draw id that was paid out\\n     * @param payout Payout for draw\\n     */\\n    event ClaimedDraw(address indexed user, uint32 indexed drawId, uint256 payout);\\n\\n    /**\\n     * @notice Emit when DrawCalculator is set.\\n     * @param calculator DrawCalculator address\\n     */\\n    event DrawCalculatorSet(IDrawCalculator indexed calculator);\\n\\n    /**\\n     * @notice Emit when Token is set.\\n     * @param token Token address\\n     */\\n    event TokenSet(IERC20 indexed token);\\n\\n    /**\\n     * @notice Emit when ERC20 tokens are withdrawn.\\n     * @param token  ERC20 token transferred.\\n     * @param to     Address that received funds.\\n     * @param amount Amount of tokens transferred.\\n     */\\n    event ERC20Withdrawn(IERC20 indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Claim prize payout(s) by submitting valud drawId(s) and winning pick indice(s). The user address\\n               is used as the \\\"seed\\\" phrase to generate random numbers.\\n     * @dev    The claim function is public and any wallet may execute claim on behalf of another user.\\n               Prizes are always paid out to the designated user account and not the caller (msg.sender).\\n               Claiming prizes is not limited to a single transaction. Reclaiming can be executed\\n               subsequentially if an \\\"optimal\\\" prize was not included in previous claim pick indices. The\\n               payout difference for the new claim is calculated during the award process and transfered to user.\\n     * @param user    Address of user to claim awards for. Does NOT need to be msg.sender\\n     * @param drawIds Draw IDs from global DrawBuffer reference\\n     * @param data    The data to pass to the draw calculator\\n     * @return Total claim payout. May include calcuations from multiple draws.\\n     */\\n    function claim(\\n        address user,\\n        uint32[] calldata drawIds,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    /**\\n        * @notice Read global DrawCalculator address.\\n        * @return IDrawCalculator\\n     */\\n    function getDrawCalculator() external view returns (IDrawCalculator);\\n\\n    /**\\n        * @notice Get the amount that a user has already been paid out for a draw\\n        * @param user   User address\\n        * @param drawId Draw ID\\n     */\\n    function getDrawPayoutBalanceOf(address user, uint32 drawId) external view returns (uint256);\\n\\n    /**\\n        * @notice Read global Ticket address.\\n        * @return IERC20\\n     */\\n    function getToken() external view returns (IERC20);\\n\\n    /**\\n        * @notice Sets DrawCalculator reference contract.\\n        * @param newCalculator DrawCalculator address\\n        * @return New DrawCalculator address\\n     */\\n    function setDrawCalculator(IDrawCalculator newCalculator) external returns (IDrawCalculator);\\n\\n    /**\\n        * @notice Transfer ERC20 tokens out of contract to recipient address.\\n        * @dev    Only callable by contract owner.\\n        * @param token  ERC20 token to transfer.\\n        * @param to     Recipient of the tokens.\\n        * @param amount Amount of tokens to transfer.\\n        * @return true if operation is successful.\\n    */\\n    function withdrawERC20(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\n    },\n    \"@pooltogether/v4-timelocks/contracts/L1TimelockTrigger.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\nimport \\\"@pooltogether/v4-core/contracts/interfaces/IPrizeDistributionBuffer.sol\\\";\\nimport \\\"./interfaces/IDrawCalculatorTimelock.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 L1TimelockTrigger\\n  * @author PoolTogether Inc Team\\n  * @notice L1TimelockTrigger(s) acts as an intermediary between multiple V4 smart contracts.\\n            The L1TimelockTrigger is responsible for pushing Draws to a DrawBuffer and routing\\n            claim requests from a PrizeDistributor to a DrawCalculator. The primary objective is\\n            to  include a \\\"cooldown\\\" period for all new Draws. Allowing the correction of a\\n            malicously set Draw in the unfortunate event an Owner is compromised.\\n*/\\ncontract L1TimelockTrigger is Manageable {\\n    /* ============ Events ============ */\\n\\n    /// @notice Emitted when the contract is deployed.\\n    /// @param prizeDistributionBuffer The address of the prize distribution buffer contract.\\n    /// @param timelock The address of the DrawCalculatorTimelock\\n    event Deployed(\\n        IPrizeDistributionBuffer indexed prizeDistributionBuffer,\\n        IDrawCalculatorTimelock indexed timelock\\n    );\\n\\n    /**\\n     * @notice Emitted when target prize distribution is pushed.\\n     * @param drawId    Draw ID\\n     * @param prizeDistribution PrizeDistribution\\n     */\\n    event PrizeDistributionPushed(uint32 indexed drawId, IPrizeDistributionBuffer.PrizeDistribution prizeDistribution);\\n\\n\\n    /* ============ Global Variables ============ */\\n\\n    /// @notice Internal PrizeDistributionBuffer reference.\\n    IPrizeDistributionBuffer public immutable prizeDistributionBuffer;\\n\\n    /// @notice Timelock struct reference.\\n    IDrawCalculatorTimelock public timelock;\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initialize L1TimelockTrigger smart contract.\\n     * @param _owner                    Address of the L1TimelockTrigger owner.\\n     * @param _prizeDistributionBuffer PrizeDistributionBuffer address\\n     * @param _timelock                 Elapsed seconds before new Draw is available\\n     */\\n    constructor(\\n        address _owner,\\n        IPrizeDistributionBuffer _prizeDistributionBuffer,\\n        IDrawCalculatorTimelock _timelock\\n    ) Ownable(_owner) {\\n        prizeDistributionBuffer = _prizeDistributionBuffer;\\n        timelock = _timelock;\\n\\n        emit Deployed(_prizeDistributionBuffer, _timelock);\\n    }\\n\\n    /**\\n     * @notice Push Draw onto draws ring buffer history.\\n     * @dev    Restricts new draws by forcing a push timelock.\\n     * @param _drawId draw id\\n     * @param _prizeDistribution PrizeDistribution parameters\\n     */\\n    function push(uint32 _drawId, IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution)\\n        external\\n        onlyManagerOrOwner\\n    {\\n        timelock.lock(_drawId);\\n        prizeDistributionBuffer.pushPrizeDistribution(_drawId, _prizeDistribution);\\n        emit PrizeDistributionPushed(_drawId, _prizeDistribution);\\n    }\\n}\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/PrizeDistributionBuffer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-core/contracts/PrizeDistributionBuffer.sol';\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/DrawCalculator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\\\";\\n\\nimport \\\"./PrizeDistributor.sol\\\";\\n\\nimport \\\"./interfaces/IDrawCalculator.sol\\\";\\nimport \\\"./interfaces/ITicket.sol\\\";\\nimport \\\"./interfaces/IDrawBuffer.sol\\\";\\nimport \\\"./interfaces/IPrizeDistributionBuffer.sol\\\";\\nimport \\\"./interfaces/IDrawBeacon.sol\\\";\\nimport \\\"./libraries/DrawRingBufferLib.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 DrawCalculator\\n  * @author PoolTogether Inc Team\\n  * @notice The DrawCalculator calculates a user's prize by matching a winning random number against\\n            their picks. A users picks are generated deterministically based on their address and balance\\n            of tickets held. Prize payouts are divided into multiple tiers: grand prize, second place, etc...\\n            A user with a higher average weighted balance (during each draw period) will be given a large number of\\n            picks to choose from, and thus a higher chance to match the winning numbers.\\n*/\\ncontract DrawCalculator is IDrawCalculator, Ownable {\\n\\n    /// @notice DrawBuffer address\\n    IDrawBuffer public immutable drawBuffer;\\n\\n    /// @notice Ticket associated with DrawCalculator\\n    ITicket public immutable ticket;\\n\\n    /// @notice The stored history of draw settings.  Stored as ring buffer.\\n    IPrizeDistributionBuffer public immutable prizeDistributionBuffer;\\n\\n    /// @notice The tiers array length\\n    uint8 public constant TIERS_LENGTH = 16;\\n\\n    /* ============ Constructor ============ */\\n\\n    /// @notice Constructor for DrawCalculator\\n    /// @param _owner Address of the DrawCalculator owner\\n    /// @param _ticket Ticket associated with this DrawCalculator\\n    /// @param _drawBuffer The address of the draw buffer to push draws to\\n    /// @param _prizeDistributionBuffer PrizeDistributionBuffer address\\n    constructor(\\n        address _owner,\\n        ITicket _ticket,\\n        IDrawBuffer _drawBuffer,\\n        IPrizeDistributionBuffer _prizeDistributionBuffer\\n    ) Ownable(_owner) {\\n        require(address(_ticket) != address(0), \\\"DrawCalc/ticket-not-zero\\\");\\n        require(address(_prizeDistributionBuffer) != address(0), \\\"DrawCalc/pdb-not-zero\\\");\\n        require(address(_drawBuffer) != address(0), \\\"DrawCalc/dh-not-zero\\\");\\n\\n        ticket = _ticket;\\n        drawBuffer = _drawBuffer;\\n        prizeDistributionBuffer = _prizeDistributionBuffer;\\n\\n        emit Deployed(_ticket, _drawBuffer, _prizeDistributionBuffer);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IDrawCalculator\\n    function calculate(\\n        address _user,\\n        uint32[] calldata _drawIds,\\n        bytes calldata _pickIndicesForDraws\\n    ) external view override returns (uint256[] memory, bytes memory) {\\n        uint64[][] memory pickIndices = abi.decode(_pickIndicesForDraws, (uint64 [][]));\\n        require(pickIndices.length == _drawIds.length, \\\"DrawCalc/invalid-pick-indices-length\\\");\\n\\n        // READ list of IDrawBeacon.Draw using the drawIds from drawBuffer\\n        IDrawBeacon.Draw[] memory draws = drawBuffer.getDraws(_drawIds);\\n\\n        // READ list of IPrizeDistributionBuffer.PrizeDistribution using the drawIds\\n        IPrizeDistributionBuffer.PrizeDistribution[] memory _prizeDistributions = prizeDistributionBuffer\\n            .getPrizeDistributions(_drawIds);\\n\\n        // The userBalances are fractions representing their portion of the liquidity for a draw.\\n        uint256[] memory userBalances = _getNormalizedBalancesAt(_user, draws, _prizeDistributions);\\n\\n        // The users address is hashed once.\\n        bytes32 _userRandomNumber = keccak256(abi.encodePacked(_user));\\n\\n        return _calculatePrizesAwardable(\\n                userBalances,\\n                _userRandomNumber,\\n                draws,\\n                pickIndices,\\n                _prizeDistributions\\n            );\\n    }\\n\\n    /// @inheritdoc IDrawCalculator\\n    function getDrawBuffer() external view override returns (IDrawBuffer) {\\n        return drawBuffer;\\n    }\\n\\n    /// @inheritdoc IDrawCalculator\\n    function getPrizeDistributionBuffer()\\n        external\\n        view\\n        override\\n        returns (IPrizeDistributionBuffer)\\n    {\\n        return prizeDistributionBuffer;\\n    }\\n\\n    /// @inheritdoc IDrawCalculator\\n    function getNormalizedBalancesForDrawIds(address _user, uint32[] calldata _drawIds)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        IDrawBeacon.Draw[] memory _draws = drawBuffer.getDraws(_drawIds);\\n        IPrizeDistributionBuffer.PrizeDistribution[] memory _prizeDistributions = prizeDistributionBuffer\\n            .getPrizeDistributions(_drawIds);\\n\\n        return _getNormalizedBalancesAt(_user, _draws, _prizeDistributions);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Calculates the prizes awardable for each Draw passed.\\n     * @param _normalizedUserBalances Fractions representing the user's portion of the liquidity for each draw.\\n     * @param _userRandomNumber       Random number of the user to consider over draws\\n     * @param _draws                  List of Draws\\n     * @param _pickIndicesForDraws    Pick indices for each Draw\\n     * @param _prizeDistributions     PrizeDistribution for each Draw\\n\\n     */\\n    function _calculatePrizesAwardable(\\n        uint256[] memory _normalizedUserBalances,\\n        bytes32 _userRandomNumber,\\n        IDrawBeacon.Draw[] memory _draws,\\n        uint64[][] memory _pickIndicesForDraws,\\n        IPrizeDistributionBuffer.PrizeDistribution[] memory _prizeDistributions\\n    ) internal pure returns (uint256[] memory prizesAwardable, bytes memory prizeCounts) {\\n        \\n        uint256[] memory _prizesAwardable = new uint256[](_normalizedUserBalances.length);\\n        uint256[][] memory _prizeCounts = new uint256[][](_normalizedUserBalances.length);\\n\\n        // calculate prizes awardable for each Draw passed\\n        for (uint32 drawIndex = 0; drawIndex < _draws.length; drawIndex++) {\\n            uint64 totalUserPicks = _calculateNumberOfUserPicks(\\n                _prizeDistributions[drawIndex],\\n                _normalizedUserBalances[drawIndex]\\n            );\\n\\n            (_prizesAwardable[drawIndex], _prizeCounts[drawIndex]) = _calculate(\\n                _draws[drawIndex].winningRandomNumber,\\n                totalUserPicks,\\n                _userRandomNumber,\\n                _pickIndicesForDraws[drawIndex],\\n                _prizeDistributions[drawIndex]\\n            );\\n        }\\n        prizeCounts = abi.encode(_prizeCounts);\\n        prizesAwardable = _prizesAwardable;\\n    }\\n\\n    /**\\n     * @notice Calculates the number of picks a user gets for a Draw, considering the normalized user balance and the PrizeDistribution.\\n     * @dev Divided by 1e18 since the normalized user balance is stored as a fixed point 18 number\\n     * @param _prizeDistribution The PrizeDistribution to consider\\n     * @param _normalizedUserBalance The normalized user balances to consider\\n     * @return The number of picks a user gets for a Draw\\n     */\\n    function _calculateNumberOfUserPicks(\\n        IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution,\\n        uint256 _normalizedUserBalance\\n    ) internal pure returns (uint64) {\\n        return uint64((_normalizedUserBalance * _prizeDistribution.numberOfPicks) / 1 ether);\\n    }\\n\\n    /**\\n     * @notice Calculates the normalized balance of a user against the total supply for timestamps\\n     * @param _user The user to consider\\n     * @param _draws The draws we are looking at\\n     * @param _prizeDistributions The prize tiers to consider (needed for draw timestamp offsets)\\n     * @return An array of normalized balances\\n     */\\n    function _getNormalizedBalancesAt(\\n        address _user,\\n        IDrawBeacon.Draw[] memory _draws,\\n        IPrizeDistributionBuffer.PrizeDistribution[] memory _prizeDistributions\\n    ) internal view returns (uint256[] memory) {\\n        uint64[] memory _timestampsWithStartCutoffTimes = new uint64[](_draws.length);\\n        uint64[] memory _timestampsWithEndCutoffTimes = new uint64[](_draws.length);\\n\\n        // generate timestamps with draw cutoff offsets included\\n        for (uint32 i = 0; i < _draws.length; i++) {\\n            unchecked {\\n                _timestampsWithStartCutoffTimes[i] =\\n                    _draws[i].timestamp - _prizeDistributions[i].startTimestampOffset;\\n                _timestampsWithEndCutoffTimes[i] =\\n                    _draws[i].timestamp - _prizeDistributions[i].endTimestampOffset;\\n            }\\n        }\\n\\n        uint256[] memory balances = ticket.getAverageBalancesBetween(\\n            _user,\\n            _timestampsWithStartCutoffTimes,\\n            _timestampsWithEndCutoffTimes\\n        );\\n\\n        uint256[] memory totalSupplies = ticket.getAverageTotalSuppliesBetween(\\n            _timestampsWithStartCutoffTimes,\\n            _timestampsWithEndCutoffTimes\\n        );\\n\\n        uint256[] memory normalizedBalances = new uint256[](_draws.length);\\n\\n        // divide balances by total supplies (normalize)\\n        for (uint256 i = 0; i < _draws.length; i++) {\\n            require(totalSupplies[i] > 0, \\\"DrawCalc/total-supply-zero\\\");\\n            normalizedBalances[i] = (balances[i] * 1 ether) / totalSupplies[i];\\n        }\\n\\n        return normalizedBalances;\\n    }\\n\\n    /**\\n     * @notice Calculates the prize amount for a PrizeDistribution over given picks\\n     * @param _winningRandomNumber Draw's winningRandomNumber\\n     * @param _totalUserPicks      number of picks the user gets for the Draw\\n     * @param _userRandomNumber    users randomNumber for that draw\\n     * @param _picks               users picks for that draw\\n     * @param _prizeDistribution   PrizeDistribution for that draw\\n     * @return prize (if any), prizeCounts (if any)\\n     */\\n    function _calculate(\\n        uint256 _winningRandomNumber,\\n        uint256 _totalUserPicks,\\n        bytes32 _userRandomNumber,\\n        uint64[] memory _picks,\\n        IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution\\n    ) internal pure returns (uint256 prize, uint256[] memory prizeCounts) {\\n        \\n        // create bitmasks for the PrizeDistribution\\n        uint256[] memory masks = _createBitMasks(_prizeDistribution);\\n        uint32 picksLength = uint32(_picks.length);\\n        uint256[] memory _prizeCounts = new uint256[](_prizeDistribution.tiers.length);\\n\\n        uint8 maxWinningTierIndex = 0;\\n\\n        require(\\n            picksLength <= _prizeDistribution.maxPicksPerUser,\\n            \\\"DrawCalc/exceeds-max-user-picks\\\"\\n        );\\n\\n        // for each pick, find number of matching numbers and calculate prize distributions index\\n        for (uint32 index = 0; index < picksLength; index++) {\\n            require(_picks[index] < _totalUserPicks, \\\"DrawCalc/insufficient-user-picks\\\");\\n\\n            if (index > 0) {\\n                require(_picks[index] > _picks[index - 1], \\\"DrawCalc/picks-ascending\\\");\\n            }\\n\\n            // hash the user random number with the pick value\\n            uint256 randomNumberThisPick = uint256(\\n                keccak256(abi.encode(_userRandomNumber, _picks[index]))\\n            );\\n\\n            uint8 tiersIndex = _calculateTierIndex(\\n                randomNumberThisPick,\\n                _winningRandomNumber,\\n                masks\\n            );\\n\\n            // there is prize for this tier index\\n            if (tiersIndex < TIERS_LENGTH) {\\n                if (tiersIndex > maxWinningTierIndex) {\\n                    maxWinningTierIndex = tiersIndex;\\n                }\\n                _prizeCounts[tiersIndex]++;\\n            }\\n        }\\n\\n        // now calculate prizeFraction given prizeCounts\\n        uint256 prizeFraction = 0;\\n        uint256[] memory prizeTiersFractions = _calculatePrizeTierFractions(\\n            _prizeDistribution,\\n            maxWinningTierIndex\\n        );\\n\\n        // multiple the fractions by the prizeCounts and add them up\\n        for (\\n            uint256 prizeCountIndex = 0;\\n            prizeCountIndex <= maxWinningTierIndex;\\n            prizeCountIndex++\\n        ) {\\n            if (_prizeCounts[prizeCountIndex] > 0) {\\n                prizeFraction +=\\n                    prizeTiersFractions[prizeCountIndex] *\\n                    _prizeCounts[prizeCountIndex];\\n            }\\n        }\\n\\n        // return the absolute amount of prize awardable\\n        // div by 1e9 as prize tiers are base 1e9\\n        prize = (prizeFraction * _prizeDistribution.prize) / 1e9; \\n        prizeCounts = _prizeCounts;\\n    }\\n\\n    ///@notice Calculates the tier index given the random numbers and masks\\n    ///@param _randomNumberThisPick users random number for this Pick\\n    ///@param _winningRandomNumber The winning number for this draw\\n    ///@param _masks The pre-calculate bitmasks for the prizeDistributions\\n    ///@return The position within the prize tier array (0 = top prize, 1 = runner-up prize, etc)\\n    function _calculateTierIndex(\\n        uint256 _randomNumberThisPick,\\n        uint256 _winningRandomNumber,\\n        uint256[] memory _masks\\n    ) internal pure returns (uint8) {\\n        uint8 numberOfMatches = 0;\\n        uint8 masksLength = uint8(_masks.length);\\n\\n        // main number matching loop\\n        for (uint8 matchIndex = 0; matchIndex < masksLength; matchIndex++) {\\n            uint256 mask = _masks[matchIndex];\\n\\n            if ((_randomNumberThisPick & mask) != (_winningRandomNumber & mask)) {\\n                // there are no more sequential matches since this comparison is not a match\\n                return masksLength - numberOfMatches;\\n            }\\n\\n            // else there was a match\\n            numberOfMatches++;\\n        }\\n\\n        return masksLength - numberOfMatches;\\n    }\\n\\n    /**\\n     * @notice Create an array of bitmasks equal to the PrizeDistribution.matchCardinality length\\n     * @param _prizeDistribution The PrizeDistribution to use to calculate the masks\\n     * @return An array of bitmasks\\n     */\\n    function _createBitMasks(IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory masks = new uint256[](_prizeDistribution.matchCardinality);\\n        uint256 _bitRangeMaskValue = (2**_prizeDistribution.bitRangeSize) - 1; // get a decimal representation of bitRangeSize\\n\\n        for (uint8 maskIndex = 0; maskIndex < _prizeDistribution.matchCardinality; maskIndex++) {\\n            // create mask of width bitRangeSize bits at index\\n            uint256 _matchIndexOffset = uint256(maskIndex) * uint256(_prizeDistribution.bitRangeSize);\\n            // shift mask bits to correct position and insert in result mask array\\n            masks[maskIndex] = _bitRangeMaskValue << _matchIndexOffset;\\n        }\\n\\n        return masks;\\n    }\\n\\n    /**\\n     * @notice Calculates the expected prize fraction per PrizeDistributions and distributionIndex\\n     * @param _prizeDistribution prizeDistribution struct for Draw\\n     * @param _prizeTierIndex Index of the prize tiers array to calculate\\n     * @return returns the fraction of the total prize (base 1e18)\\n     */\\n    function _calculatePrizeTierFraction(\\n        IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution,\\n        uint256 _prizeTierIndex\\n    ) internal pure returns (uint256) {\\n         // get the prize fraction at that index\\n        uint256 prizeFraction = _prizeDistribution.tiers[_prizeTierIndex];\\n\\n        // calculate number of prizes for that index\\n        uint256 numberOfPrizesForIndex = _numberOfPrizesForIndex(\\n            _prizeDistribution.bitRangeSize,\\n            _prizeTierIndex\\n        );\\n\\n        return prizeFraction / numberOfPrizesForIndex;\\n    }\\n\\n    /**\\n     * @notice Generates an array of prize tiers fractions\\n     * @param _prizeDistribution prizeDistribution struct for Draw\\n     * @param maxWinningTierIndex Max length of the prize tiers array\\n     * @return returns an array of prize tiers fractions\\n     */\\n    function _calculatePrizeTierFractions(\\n        IPrizeDistributionBuffer.PrizeDistribution memory _prizeDistribution,\\n        uint8 maxWinningTierIndex\\n    ) internal pure returns (uint256[] memory) {\\n        uint256[] memory prizeDistributionFractions = new uint256[](\\n            maxWinningTierIndex + 1\\n        );\\n\\n        for (uint8 i = 0; i <= maxWinningTierIndex; i++) {\\n            prizeDistributionFractions[i] = _calculatePrizeTierFraction(\\n                _prizeDistribution,\\n                i\\n            );\\n        }\\n\\n        return prizeDistributionFractions;\\n    }\\n\\n    /**\\n     * @notice Calculates the number of prizes for a given prizeDistributionIndex\\n     * @param _bitRangeSize Bit range size for Draw\\n     * @param _prizeTierIndex Index of the prize tier array to calculate\\n     * @return returns the fraction of the total prize (base 1e18)\\n     */\\n    function _numberOfPrizesForIndex(uint8 _bitRangeSize, uint256 _prizeTierIndex)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 bitRangeDecimal = 2**uint256(_bitRangeSize);\\n        uint256 numberOfPrizesForIndex = bitRangeDecimal**_prizeTierIndex;\\n\\n        while (_prizeTierIndex > 0) {\\n            numberOfPrizesForIndex -= bitRangeDecimal**(_prizeTierIndex - 1);\\n            _prizeTierIndex--;\\n        }\\n\\n        return numberOfPrizesForIndex;\\n    }\\n}\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/PrizeDistributor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-core/contracts/PrizeDistributor.sol';\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/Ticket.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./libraries/ExtendedSafeCastLib.sol\\\";\\nimport \\\"./libraries/TwabLib.sol\\\";\\nimport \\\"./interfaces/ITicket.sol\\\";\\nimport \\\"./ControlledToken.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 Ticket\\n  * @author PoolTogether Inc Team\\n  * @notice The Ticket extends the standard ERC20 and ControlledToken interfaces with time-weighted average balance functionality.\\n            The average balance held by a user between two timestamps can be calculated, as well as the historic balance.  The \\n            historic total supply is available as well as the average total supply between two timestamps.\\n\\n            A user may \\\"delegate\\\" their balance; increasing another user's historic balance while retaining their tokens.\\n*/\\ncontract Ticket is ControlledToken, ITicket {\\n    using SafeERC20 for IERC20;\\n    using ExtendedSafeCastLib for uint256;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DELEGATE_TYPEHASH =\\n        keccak256(\\\"Delegate(address user,address delegate,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice Record of token holders TWABs for each account.\\n    mapping(address => TwabLib.Account) internal userTwabs;\\n\\n    /// @notice Record of tickets total supply and ring buff parameters used for observation.\\n    TwabLib.Account internal totalSupplyTwab;\\n\\n    /// @notice Mapping of delegates.  Each address can delegate their ticket power to another.\\n    mapping(address => address) internal delegates;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @notice Constructs Ticket with passed parameters.\\n     * @param _name ERC20 ticket token name.\\n     * @param _symbol ERC20 ticket token symbol.\\n     * @param decimals_ ERC20 ticket token decimals.\\n     * @param _controller ERC20 ticket controller address (ie: Prize Pool address).\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 decimals_,\\n        address _controller\\n    ) ControlledToken(_name, _symbol, decimals_, _controller) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc ITicket\\n    function getAccountDetails(address _user)\\n        external\\n        view\\n        override\\n        returns (TwabLib.AccountDetails memory)\\n    {\\n        return userTwabs[_user].details;\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getTwab(address _user, uint16 _index)\\n        external\\n        view\\n        override\\n        returns (ObservationLib.Observation memory)\\n    {\\n        return userTwabs[_user].twabs[_index];\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getBalanceAt(address _user, uint64 _target) external view override returns (uint256) {\\n        TwabLib.Account storage account = userTwabs[_user];\\n\\n        return\\n            TwabLib.getBalanceAt(\\n                account.twabs,\\n                account.details,\\n                uint32(_target),\\n                uint32(block.timestamp)\\n            );\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getAverageBalancesBetween(\\n        address _user,\\n        uint64[] calldata _startTimes,\\n        uint64[] calldata _endTimes\\n    ) external view override returns (uint256[] memory) {\\n        return _getAverageBalancesBetween(userTwabs[_user], _startTimes, _endTimes);\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getAverageTotalSuppliesBetween(\\n        uint64[] calldata _startTimes,\\n        uint64[] calldata _endTimes\\n    ) external view override returns (uint256[] memory) {\\n        return _getAverageBalancesBetween(totalSupplyTwab, _startTimes, _endTimes);\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getAverageBalanceBetween(\\n        address _user,\\n        uint64 _startTime,\\n        uint64 _endTime\\n    ) external view override returns (uint256) {\\n        TwabLib.Account storage account = userTwabs[_user];\\n\\n        return\\n            TwabLib.getAverageBalanceBetween(\\n                account.twabs,\\n                account.details,\\n                uint32(_startTime),\\n                uint32(_endTime),\\n                uint32(block.timestamp)\\n            );\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getBalancesAt(address _user, uint64[] calldata _targets)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256 length = _targets.length;\\n        uint256[] memory _balances = new uint256[](length);\\n\\n        TwabLib.Account storage twabContext = userTwabs[_user];\\n        TwabLib.AccountDetails memory details = twabContext.details;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _balances[i] = TwabLib.getBalanceAt(\\n                twabContext.twabs,\\n                details,\\n                uint32(_targets[i]),\\n                uint32(block.timestamp)\\n            );\\n        }\\n\\n        return _balances;\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getTotalSupplyAt(uint64 _target) external view override returns (uint256) {\\n        return\\n            TwabLib.getBalanceAt(\\n                totalSupplyTwab.twabs,\\n                totalSupplyTwab.details,\\n                uint32(_target),\\n                uint32(block.timestamp)\\n            );\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function getTotalSuppliesAt(uint64[] calldata _targets)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256 length = _targets.length;\\n        uint256[] memory totalSupplies = new uint256[](length);\\n\\n        TwabLib.AccountDetails memory details = totalSupplyTwab.details;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            totalSupplies[i] = TwabLib.getBalanceAt(\\n                totalSupplyTwab.twabs,\\n                details,\\n                uint32(_targets[i]),\\n                uint32(block.timestamp)\\n            );\\n        }\\n\\n        return totalSupplies;\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function delegateOf(address _user) external view override returns (address) {\\n        return delegates[_user];\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function controllerDelegateFor(address _user, address _to) external override onlyController {\\n        _delegate(_user, _to);\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function delegateWithSignature(\\n        address _user,\\n        address _newDelegate,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external virtual override {\\n        require(block.timestamp <= _deadline, \\\"Ticket/delegate-expired-deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_DELEGATE_TYPEHASH, _user, _newDelegate, _useNonce(_user), _deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, _v, _r, _s);\\n        require(signer == _user, \\\"Ticket/delegate-invalid-signature\\\");\\n\\n        _delegate(_user, _newDelegate);\\n    }\\n\\n    /// @inheritdoc ITicket\\n    function delegate(address _to) external virtual override {\\n        _delegate(msg.sender, _to);\\n    }\\n\\n    /// @notice Delegates a users chance to another\\n    /// @param _user The user whose balance should be delegated\\n    /// @param _to The delegate\\n    function _delegate(address _user, address _to) internal {\\n        uint256 balance = balanceOf(_user);\\n        address currentDelegate = delegates[_user];\\n\\n        if (currentDelegate == _to) {\\n            return;\\n        }\\n\\n        delegates[_user] = _to;\\n\\n        _transferTwab(currentDelegate, _to, balance);\\n\\n        emit Delegated(_user, _to);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Retrieves the average balances held by a user for a given time frame.\\n     * @param _account The user whose balance is checked.\\n     * @param _startTimes The start time of the time frame.\\n     * @param _endTimes The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function _getAverageBalancesBetween(\\n        TwabLib.Account storage _account,\\n        uint64[] calldata _startTimes,\\n        uint64[] calldata _endTimes\\n    ) internal view returns (uint256[] memory) {\\n        require(_startTimes.length == _endTimes.length, \\\"Ticket/start-end-times-length-match\\\");\\n\\n        TwabLib.AccountDetails memory accountDetails = _account.details;\\n\\n        uint256[] memory averageBalances = new uint256[](_startTimes.length);\\n        uint32 currentTimestamp = uint32(block.timestamp);\\n\\n        for (uint256 i = 0; i < _startTimes.length; i++) {\\n            averageBalances[i] = TwabLib.getAverageBalanceBetween(\\n                _account.twabs,\\n                accountDetails,\\n                uint32(_startTimes[i]),\\n                uint32(_endTimes[i]),\\n                currentTimestamp\\n            );\\n        }\\n\\n        return averageBalances;\\n    }\\n\\n    // @inheritdoc ERC20\\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override {\\n        if (_from == _to) {\\n            return;\\n        }\\n\\n        address _fromDelegate;\\n        if (_from != address(0)) {\\n            _fromDelegate = delegates[_from];\\n        }\\n\\n        address _toDelegate;\\n        if (_to != address(0)) {\\n            _toDelegate = delegates[_to];\\n        }\\n\\n        _transferTwab(_fromDelegate, _toDelegate, _amount);\\n    }\\n\\n    /// @notice Transfers the given TWAB balance from one user to another\\n    /// @param _from The user to transfer the balance from.  May be zero in the event of a mint.\\n    /// @param _to The user to transfer the balance to.  May be zero in the event of a burn.\\n    /// @param _amount The balance that is being transferred.\\n    function _transferTwab(address _from, address _to, uint256 _amount) internal {\\n        // If we are transferring tokens from an undelegated account to a delegated account\\n        if (_from == address(0) && _to != address(0)) {\\n            _increaseTotalSupplyTwab(_amount);\\n        } else // if we are transferring tokens from a delegated account to an undelegated account\\n        if (_from != address(0) && _to == address(0)) {\\n            _decreaseTotalSupplyTwab(_amount);\\n        } // otherwise if the to delegate is set, then increase their twab\\n\\n        if (_from != address(0)) {\\n            _decreaseUserTwab(_from, _amount);\\n        }\\n        \\n        if (_to != address(0)) {\\n            _increaseUserTwab(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Increase `_to` TWAB balance.\\n     * @param _to Address of the delegate.\\n     * @param _amount Amount of tokens to be added to `_to` TWAB balance.\\n     */\\n    function _increaseUserTwab(\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        TwabLib.Account storage _account = userTwabs[_to];\\n\\n        (\\n            TwabLib.AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        ) = TwabLib.increaseBalance(_account, _amount.toUint208(), uint32(block.timestamp));\\n\\n        _account.details = accountDetails;\\n\\n        if (isNew) {\\n            emit NewUserTwab(_to, twab);\\n        }\\n    }\\n\\n    /**\\n     * @notice Decrease `_to` TWAB balance.\\n     * @param _to Address of the delegate.\\n     * @param _amount Amount of tokens to be added to `_to` TWAB balance.\\n     */\\n    function _decreaseUserTwab(\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        TwabLib.Account storage _account = userTwabs[_to];\\n\\n        (\\n            TwabLib.AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory twab,\\n            bool isNew\\n        ) = TwabLib.decreaseBalance(\\n                _account,\\n                _amount.toUint208(),\\n                \\\"ERC20: burn amount exceeds balance\\\",\\n                uint32(block.timestamp)\\n            );\\n\\n        _account.details = accountDetails;\\n\\n        if (isNew) {\\n            emit NewUserTwab(_to, twab);\\n        }\\n    }\\n\\n    /// @notice Decreases the total supply twab.  Should be called anytime a balance moves from delegated to undelegated\\n    /// @param _amount The amount to decrease the total by\\n    function _decreaseTotalSupplyTwab(uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        (\\n            TwabLib.AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory tsTwab,\\n            bool tsIsNew\\n        ) = TwabLib.decreaseBalance(\\n                totalSupplyTwab,\\n                _amount.toUint208(),\\n                \\\"Ticket/burn-amount-exceeds-total-supply-twab\\\",\\n                uint32(block.timestamp)\\n            );\\n\\n        totalSupplyTwab.details = accountDetails;\\n\\n        if (tsIsNew) {\\n            emit NewTotalSupplyTwab(tsTwab);\\n        }\\n    }\\n\\n    /// @notice Increases the total supply twab.  Should be called anytime a balance moves from undelegated to delegated\\n    /// @param _amount The amount to increase the total by\\n    function _increaseTotalSupplyTwab(uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        (\\n            TwabLib.AccountDetails memory accountDetails,\\n            ObservationLib.Observation memory _totalSupply,\\n            bool tsIsNew\\n        ) = TwabLib.increaseBalance(totalSupplyTwab, _amount.toUint208(), uint32(block.timestamp));\\n\\n        totalSupplyTwab.details = accountDetails;\\n\\n        if (tsIsNew) {\\n            emit NewTotalSupplyTwab(_totalSupply);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/ControlledToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\nimport \\\"./interfaces/IControlledToken.sol\\\";\\n\\n/**\\n * @title  PoolTogether V4 Controlled ERC20 Token\\n * @author PoolTogether Inc Team\\n * @notice  ERC20 Tokens with a controller for minting & burning\\n */\\ncontract ControlledToken is ERC20Permit, IControlledToken {\\n    /* ============ Global Variables ============ */\\n\\n    /// @notice Interface to the contract responsible for controlling mint/burn\\n    address public override controller;\\n\\n    /// @notice ERC20 controlled token decimals.\\n    uint8 private immutable _decimals;\\n\\n    /* ============ Events ============ */\\n\\n    /// @dev Emitted when contract is deployed\\n    event Deployed(string name, string symbol, uint8 decimals, address indexed controller);\\n\\n    /* ============ Modifiers ============ */\\n\\n    /// @dev Function modifier to ensure that the caller is the controller contract\\n    modifier onlyController() {\\n        require(msg.sender == address(controller), \\\"ControlledToken/only-controller\\\");\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /// @notice Deploy the Controlled Token with Token Details and the Controller\\n    /// @param _name The name of the Token\\n    /// @param _symbol The symbol for the Token\\n    /// @param decimals_ The number of decimals for the Token\\n    /// @param _controller Address of the Controller contract for minting & burning\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 decimals_,\\n        address _controller\\n    ) ERC20Permit(\\\"PoolTogether ControlledToken\\\") ERC20(_name, _symbol) {\\n        require(address(_controller) != address(0), \\\"ControlledToken/controller-not-zero-address\\\");\\n        controller = _controller;\\n\\n        require(decimals_ > 0, \\\"ControlledToken/decimals-gt-zero\\\");\\n        _decimals = decimals_;\\n\\n        emit Deployed(_name, _symbol, decimals_, _controller);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @notice Allows the controller to mint tokens for a user account\\n    /// @dev May be overridden to provide more granular control over minting\\n    /// @param _user Address of the receiver of the minted tokens\\n    /// @param _amount Amount of tokens to mint\\n    function controllerMint(address _user, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        onlyController\\n    {\\n        _mint(_user, _amount);\\n    }\\n\\n    /// @notice Allows the controller to burn tokens from a user account\\n    /// @dev May be overridden to provide more granular control over burning\\n    /// @param _user Address of the holder account to burn tokens from\\n    /// @param _amount Amount of tokens to burn\\n    function controllerBurn(address _user, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        onlyController\\n    {\\n        _burn(_user, _amount);\\n    }\\n\\n    /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n    /// @dev May be overridden to provide more granular control over operator-burning\\n    /// @param _operator Address of the operator performing the burn action via the controller contract\\n    /// @param _user Address of the holder account to burn tokens from\\n    /// @param _amount Amount of tokens to burn\\n    function controllerBurnFrom(\\n        address _operator,\\n        address _user,\\n        uint256 _amount\\n    ) external virtual override onlyController {\\n        if (_operator != _user) {\\n            _approve(_user, _operator, allowance(_user, _operator) - _amount);\\n        }\\n\\n        _burn(_user, _amount);\\n    }\\n\\n    /// @notice Returns the ERC20 controlled token decimals.\\n    /// @dev This value should be equal to the decimals of the token used to deposit into the pool.\\n    /// @return uint8 decimals.\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/interfaces/IPrizeSplit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./IControlledToken.sol\\\";\\nimport \\\"./IPrizePool.sol\\\";\\n\\n/**\\n * @title Abstract prize split contract for adding unique award distribution to static addresses.\\n * @author PoolTogether Inc Team\\n */\\ninterface IPrizeSplit {\\n    /**\\n     * @notice Emit when an individual prize split is awarded.\\n     * @param user          User address being awarded\\n     * @param prizeAwarded  Awarded prize amount\\n     * @param token         Token address\\n     */\\n    event PrizeSplitAwarded(\\n        address indexed user,\\n        uint256 prizeAwarded,\\n        IControlledToken indexed token\\n    );\\n\\n    /**\\n     * @notice The prize split configuration struct.\\n     * @dev    The prize split configuration struct used to award prize splits during distribution.\\n     * @param target     Address of recipient receiving the prize split distribution\\n     * @param percentage Percentage of prize split using a 0-1000 range for single decimal precision i.e. 125 = 12.5%\\n     */\\n    struct PrizeSplitConfig {\\n        address target;\\n        uint16 percentage;\\n    }\\n\\n    /**\\n     * @notice Emitted when a PrizeSplitConfig config is added or updated.\\n     * @dev    Emitted when a PrizeSplitConfig config is added or updated in setPrizeSplits or setPrizeSplit.\\n     * @param target     Address of prize split recipient\\n     * @param percentage Percentage of prize split. Must be between 0 and 1000 for single decimal precision\\n     * @param index      Index of prize split in the prizeSplts array\\n     */\\n    event PrizeSplitSet(address indexed target, uint16 percentage, uint256 index);\\n\\n    /**\\n     * @notice Emitted when a PrizeSplitConfig config is removed.\\n     * @dev    Emitted when a PrizeSplitConfig config is removed from the prizeSplits array.\\n     * @param target Index of a previously active prize split config\\n     */\\n    event PrizeSplitRemoved(uint256 indexed target);\\n\\n    /**\\n     * @notice Read prize split config from active PrizeSplits.\\n     * @dev    Read PrizeSplitConfig struct from prizeSplits array.\\n     * @param prizeSplitIndex Index position of PrizeSplitConfig\\n     * @return PrizeSplitConfig Single prize split config\\n     */\\n    function getPrizeSplit(uint256 prizeSplitIndex) external view returns (PrizeSplitConfig memory);\\n\\n    /**\\n     * @notice Read all prize splits configs.\\n     * @dev    Read all PrizeSplitConfig structs stored in prizeSplits.\\n     * @return Array of PrizeSplitConfig structs\\n     */\\n    function getPrizeSplits() external view returns (PrizeSplitConfig[] memory);\\n\\n    /**\\n     * @notice Get PrizePool address\\n     * @return IPrizePool\\n     */\\n    function getPrizePool() external view returns (IPrizePool);\\n\\n    /**\\n     * @notice Set and remove prize split(s) configs. Only callable by owner.\\n     * @dev Set and remove prize split configs by passing a new PrizeSplitConfig structs array. Will remove existing PrizeSplitConfig(s) if passed array length is less than existing prizeSplits length.\\n     * @param newPrizeSplits Array of PrizeSplitConfig structs\\n     */\\n    function setPrizeSplits(PrizeSplitConfig[] calldata newPrizeSplits) external;\\n\\n    /**\\n     * @notice Updates a previously set prize split config.\\n     * @dev Updates a prize split config by passing a new PrizeSplitConfig struct and current index position. Limited to contract owner.\\n     * @param prizeStrategySplit PrizeSplitConfig config struct\\n     * @param prizeSplitIndex Index position of PrizeSplitConfig to update\\n     */\\n    function setPrizeSplit(PrizeSplitConfig memory prizeStrategySplit, uint8 prizeSplitIndex)\\n        external;\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/interfaces/IPrizePool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../external/compound/ICompLike.sol\\\";\\nimport \\\"../interfaces/ITicket.sol\\\";\\n\\ninterface IPrizePool {\\n    /// @dev Event emitted when controlled token is added\\n    event ControlledTokenAdded(ITicket indexed token);\\n\\n    event AwardCaptured(uint256 amount);\\n\\n    /// @dev Event emitted when assets are deposited\\n    event Deposited(\\n        address indexed operator,\\n        address indexed to,\\n        ITicket indexed token,\\n        uint256 amount\\n    );\\n\\n    /// @dev Event emitted when interest is awarded to a winner\\n    event Awarded(address indexed winner, ITicket indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when external ERC20s are awarded to a winner\\n    event AwardedExternalERC20(address indexed winner, address indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when external ERC20s are transferred out\\n    event TransferredExternalERC20(address indexed to, address indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when external ERC721s are awarded to a winner\\n    event AwardedExternalERC721(address indexed winner, address indexed token, uint256[] tokenIds);\\n\\n    /// @dev Event emitted when assets are withdrawn\\n    event Withdrawal(\\n        address indexed operator,\\n        address indexed from,\\n        ITicket indexed token,\\n        uint256 amount,\\n        uint256 redeemed\\n    );\\n\\n    /// @dev Event emitted when the Balance Cap is set\\n    event BalanceCapSet(uint256 balanceCap);\\n\\n    /// @dev Event emitted when the Liquidity Cap is set\\n    event LiquidityCapSet(uint256 liquidityCap);\\n\\n    /// @dev Event emitted when the Prize Strategy is set\\n    event PrizeStrategySet(address indexed prizeStrategy);\\n\\n    /// @dev Event emitted when the Ticket is set\\n    event TicketSet(ITicket indexed ticket);\\n\\n    /// @dev Emitted when there was an error thrown awarding an External ERC721\\n    event ErrorAwardingExternalERC721(bytes error);\\n\\n    /// @notice Deposit assets into the Prize Pool in exchange for tokens\\n    /// @param to The address receiving the newly minted tokens\\n    /// @param amount The amount of assets to deposit\\n    function depositTo(address to, uint256 amount) external;\\n\\n    /// @notice Deposit assets into the Prize Pool in exchange for tokens,\\n    /// then sets the delegate on behalf of the caller.\\n    /// @param to The address receiving the newly minted tokens\\n    /// @param amount The amount of assets to deposit\\n    /// @param delegate The address to delegate to for the caller\\n    function depositToAndDelegate(address to, uint256 amount, address delegate) external;\\n\\n    /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\\n    /// @param from The address to redeem tokens from.\\n    /// @param amount The amount of tokens to redeem for assets.\\n    /// @return The actual amount withdrawn\\n    function withdrawFrom(address from, uint256 amount) external returns (uint256);\\n\\n    /// @notice Called by the prize strategy to award prizes.\\n    /// @dev The amount awarded must be less than the awardBalance()\\n    /// @param to The address of the winner that receives the award\\n    /// @param amount The amount of assets to be awarded\\n    function award(address to, uint256 amount) external;\\n\\n    /// @notice Returns the balance that is available to award.\\n    /// @dev captureAwardBalance() should be called first\\n    /// @return The total amount of assets to be awarded for the current prize\\n    function awardBalance() external view returns (uint256);\\n\\n    /// @notice Captures any available interest as award balance.\\n    /// @dev This function also captures the reserve fees.\\n    /// @return The total amount of assets to be awarded for the current prize\\n    function captureAwardBalance() external returns (uint256);\\n\\n    /// @dev Checks with the Prize Pool if a specific token type may be awarded as an external prize\\n    /// @param externalToken The address of the token to check\\n    /// @return True if the token may be awarded, false otherwise\\n    function canAwardExternal(address externalToken) external view returns (bool);\\n\\n    // @dev Returns the total underlying balance of all assets. This includes both principal and interest.\\n    /// @return The underlying balance of assets\\n    function balance() external returns (uint256);\\n\\n    /**\\n     * @notice Read internal Ticket accounted balance.\\n     * @return uint256 accountBalance\\n     */\\n    function getAccountedBalance() external view returns (uint256);\\n\\n    /**\\n     * @notice Read internal balanceCap variable\\n     */\\n    function getBalanceCap() external view returns (uint256);\\n\\n    /**\\n     * @notice Read internal liquidityCap variable\\n     */\\n    function getLiquidityCap() external view returns (uint256);\\n\\n    /**\\n     * @notice Read ticket variable\\n     */\\n    function getTicket() external view returns (ITicket);\\n\\n    /**\\n     * @notice Read token variable\\n     */\\n    function getToken() external view returns (address);\\n\\n    /**\\n     * @notice Read prizeStrategy variable\\n     */\\n    function getPrizeStrategy() external view returns (address);\\n\\n    /// @dev Checks if a specific token is controlled by the Prize Pool\\n    /// @param controlledToken The address of the token to check\\n    /// @return True if the token is a controlled token, false otherwise\\n    function isControlled(ITicket controlledToken) external view returns (bool);\\n\\n    /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\\n    /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\\n    /// @param to The address of the winner that receives the award\\n    /// @param externalToken The address of the external asset token being awarded\\n    /// @param amount The amount of external assets to be awarded\\n    function transferExternalERC20(\\n        address to,\\n        address externalToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Called by the Prize-Strategy to award external ERC20 prizes\\n    /// @dev Used to award any arbitrary tokens held by the Prize Pool\\n    /// @param to The address of the winner that receives the award\\n    /// @param amount The amount of external assets to be awarded\\n    /// @param externalToken The address of the external asset token being awarded\\n    function awardExternalERC20(\\n        address to,\\n        address externalToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Called by the prize strategy to award external ERC721 prizes\\n    /// @dev Used to award any arbitrary NFTs held by the Prize Pool\\n    /// @param to The address of the winner that receives the award\\n    /// @param externalToken The address of the external NFT token being awarded\\n    /// @param tokenIds An array of NFT Token IDs to be transferred\\n    function awardExternalERC721(\\n        address to,\\n        address externalToken,\\n        uint256[] calldata tokenIds\\n    ) external;\\n\\n    /// @notice Allows the owner to set a balance cap per `token` for the pool.\\n    /// @dev If a user wins, his balance can go over the cap. He will be able to withdraw the excess but not deposit.\\n    /// @dev Needs to be called after deploying a prize pool to be able to deposit into it.\\n    /// @param balanceCap New balance cap.\\n    /// @return True if new balance cap has been successfully set.\\n    function setBalanceCap(uint256 balanceCap) external returns (bool);\\n\\n    /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\\n    /// @param liquidityCap The new liquidity cap for the prize pool\\n    function setLiquidityCap(uint256 liquidityCap) external;\\n\\n    /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\\n    /// @param _prizeStrategy The new prize strategy.\\n    function setPrizeStrategy(address _prizeStrategy) external;\\n\\n    /// @notice Set prize pool ticket.\\n    /// @param ticket Address of the ticket to set.\\n    /// @return True if ticket has been successfully set.\\n    function setTicket(ITicket ticket) external returns (bool);\\n\\n    /// @notice Delegate the votes for a Compound COMP-like token held by the prize pool\\n    /// @param compLike The COMP-like token held by the prize pool that should be delegated\\n    /// @param to The address to delegate to\\n    function compLikeDelegate(ICompLike compLike, address to) external;\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/external/compound/ICompLike.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICompLike is IERC20 {\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    function delegate(address delegate) external;\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/prize-strategy/PrizeSplitStrategy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./PrizeSplit.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IPrizePool.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 PrizeSplitStrategy\\n  * @author PoolTogether Inc Team\\n  * @notice Captures PrizePool interest for PrizeReserve and additional PrizeSplit recipients.\\n            The PrizeSplitStrategy will have at minimum a single PrizeSplit with 100% of the captured\\n            interest transfered to the PrizeReserve. Additional PrizeSplits can be added, depending on\\n            the deployers requirements (i.e. percentage to charity). In contrast to previous PoolTogether\\n            iterations, interest can be captured independent of a new Draw. Ideally (to save gas) interest\\n            is only captured when also distributing the captured prize(s) to applicable ClaimbableDraw(s).\\n*/\\ncontract PrizeSplitStrategy is PrizeSplit, IStrategy {\\n    /**\\n     * @notice PrizePool address\\n     */\\n    IPrizePool internal prizePool;\\n\\n    /**\\n     * @notice Deployed Event\\n     * @param owner Contract owner\\n     * @param prizePool Linked PrizePool contract\\n     */\\n    event Deployed(address indexed owner, IPrizePool prizePool);\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @notice Deploy the PrizeSplitStrategy smart contract.\\n     * @param _owner     Owner address\\n     * @param _prizePool PrizePool address\\n     */\\n    constructor(address _owner, IPrizePool _prizePool) Ownable(_owner) {\\n        require(\\n            address(_prizePool) != address(0),\\n            \\\"PrizeSplitStrategy/prize-pool-not-zero-address\\\"\\n        );\\n        prizePool = _prizePool;\\n        emit Deployed(_owner, _prizePool);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IStrategy\\n    function distribute() external override returns (uint256) {\\n        uint256 prize = prizePool.captureAwardBalance();\\n\\n        if (prize == 0) return 0;\\n\\n        _distributePrizeSplits(prize);\\n\\n        emit Distributed(prize);\\n\\n        return prize;\\n    }\\n\\n    /// @inheritdoc IPrizeSplit\\n    function getPrizePool() external view override returns (IPrizePool) {\\n        return prizePool;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Award ticket tokens to prize split recipient.\\n     * @dev Award ticket tokens to prize split recipient via the linked PrizePool contract.\\n     * @param _to Recipient of minted tokens.\\n     * @param _amount Amount of minted tokens.\\n     */\\n    function _awardPrizeSplitAmount(address _to, uint256 _amount) internal override {\\n        IControlledToken _ticket = prizePool.getTicket();\\n        prizePool.award(_to, _amount);\\n        emit PrizeSplitAwarded(_to, _amount, _ticket);\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/prize-strategy/PrizeSplit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/IPrizeSplit.sol\\\";\\n\\n/**\\n * @title PrizeSplit Interface\\n * @author PoolTogether Inc Team\\n */\\nabstract contract PrizeSplit is IPrizeSplit, Ownable {\\n    /* ============ Global Variables ============ */\\n    PrizeSplitConfig[] internal _prizeSplits;\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IPrizeSplit\\n    function getPrizeSplit(uint256 _prizeSplitIndex)\\n        external\\n        view\\n        override\\n        returns (PrizeSplitConfig memory)\\n    {\\n        return _prizeSplits[_prizeSplitIndex];\\n    }\\n\\n    /// @inheritdoc IPrizeSplit\\n    function getPrizeSplits() external view override returns (PrizeSplitConfig[] memory) {\\n        return _prizeSplits;\\n    }\\n\\n    /// @inheritdoc IPrizeSplit\\n    function setPrizeSplits(PrizeSplitConfig[] calldata _newPrizeSplits)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        uint256 newPrizeSplitsLength = _newPrizeSplits.length;\\n\\n        // Add and/or update prize split configs using _newPrizeSplits PrizeSplitConfig structs array.\\n        for (uint256 index = 0; index < newPrizeSplitsLength; index++) {\\n            PrizeSplitConfig memory split = _newPrizeSplits[index];\\n\\n            // REVERT when setting the canonical burn address.\\n            require(split.target != address(0), \\\"PrizeSplit/invalid-prizesplit-target\\\");\\n\\n            // IF the CURRENT prizeSplits length is below the NEW prizeSplits\\n            // PUSH the PrizeSplit struct to end of the list.\\n            if (_prizeSplits.length <= index) {\\n                _prizeSplits.push(split);\\n            } else {\\n                // ELSE update an existing PrizeSplit struct with new parameters\\n                PrizeSplitConfig memory currentSplit = _prizeSplits[index];\\n\\n                // IF new PrizeSplit DOES NOT match the current PrizeSplit\\n                // WRITE to STORAGE with the new PrizeSplit\\n                if (\\n                    split.target != currentSplit.target ||\\n                    split.percentage != currentSplit.percentage\\n                ) {\\n                    _prizeSplits[index] = split;\\n                } else {\\n                    continue;\\n                }\\n            }\\n\\n            // Emit the added/updated prize split config.\\n            emit PrizeSplitSet(split.target, split.percentage, index);\\n        }\\n\\n        // Remove old prize splits configs. Match storage _prizesSplits.length with the passed newPrizeSplits.length\\n        while (_prizeSplits.length > newPrizeSplitsLength) {\\n            uint256 _index = _prizeSplits.length - 1;\\n            _prizeSplits.pop();\\n            emit PrizeSplitRemoved(_index);\\n        }\\n\\n        // Total prize split do not exceed 100%\\n        uint256 totalPercentage = _totalPrizeSplitPercentageAmount();\\n        require(totalPercentage <= 1000, \\\"PrizeSplit/invalid-prizesplit-percentage-total\\\");\\n    }\\n\\n    /// @inheritdoc IPrizeSplit\\n    function setPrizeSplit(PrizeSplitConfig memory _prizeSplit, uint8 _prizeSplitIndex)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(_prizeSplitIndex < _prizeSplits.length, \\\"PrizeSplit/nonexistent-prizesplit\\\");\\n        require(_prizeSplit.target != address(0), \\\"PrizeSplit/invalid-prizesplit-target\\\");\\n\\n        // Update the prize split config\\n        _prizeSplits[_prizeSplitIndex] = _prizeSplit;\\n\\n        // Total prize split do not exceed 100%\\n        uint256 totalPercentage = _totalPrizeSplitPercentageAmount();\\n        require(totalPercentage <= 1000, \\\"PrizeSplit/invalid-prizesplit-percentage-total\\\");\\n\\n        // Emit updated prize split config\\n        emit PrizeSplitSet(\\n            _prizeSplit.target,\\n            _prizeSplit.percentage,\\n            _prizeSplitIndex\\n        );\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Calculate single prize split distribution amount.\\n     * @dev Calculate single prize split distribution amount using the total prize amount and prize split percentage.\\n     * @param _amount Total prize award distribution amount\\n     * @param _percentage Percentage with single decimal precision using 0-1000 ranges\\n     */\\n    function _getPrizeSplitAmount(uint256 _amount, uint16 _percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_amount * _percentage) / 1000;\\n    }\\n\\n    /**\\n     * @notice Calculates total prize split percentage amount.\\n     * @dev Calculates total PrizeSplitConfig percentage(s) amount. Used to check the total does not exceed 100% of award distribution.\\n     * @return Total prize split(s) percentage amount\\n     */\\n    function _totalPrizeSplitPercentageAmount() internal view returns (uint256) {\\n        uint256 _tempTotalPercentage;\\n        uint256 prizeSplitsLength = _prizeSplits.length;\\n\\n        for (uint8 index = 0; index < prizeSplitsLength; index++) {\\n            PrizeSplitConfig memory split = _prizeSplits[index];\\n            _tempTotalPercentage = _tempTotalPercentage + split.percentage;\\n        }\\n\\n        return _tempTotalPercentage;\\n    }\\n\\n    /**\\n     * @notice Distributes prize split(s).\\n     * @dev Distributes prize split(s) by awarding ticket or sponsorship tokens.\\n     * @param _prize Starting prize award amount\\n     * @return Total prize award distribution amount exlcuding the awarded prize split(s)\\n     */\\n    function _distributePrizeSplits(uint256 _prize) internal returns (uint256) {\\n        // Store temporary total prize amount for multiple calculations using initial prize amount.\\n        uint256 _prizeTemp = _prize;\\n        uint256 prizeSplitsLength = _prizeSplits.length;\\n        for (uint256 index = 0; index < prizeSplitsLength; index++) {\\n            PrizeSplitConfig memory split = _prizeSplits[index];\\n            uint256 _splitAmount = _getPrizeSplitAmount(_prize, split.percentage);\\n\\n            // Award the prize split distribution amount.\\n            _awardPrizeSplitAmount(split.target, _splitAmount);\\n\\n            // Update the remaining prize amount after distributing the prize split percentage.\\n            _prizeTemp = _prizeTemp - _splitAmount;\\n        }\\n\\n        return _prize;\\n    }\\n\\n    /**\\n     * @notice Mints ticket or sponsorship tokens to prize split recipient.\\n     * @dev Mints ticket or sponsorship tokens to prize split recipient via the linked PrizePool contract.\\n     * @param _target Recipient of minted tokens\\n     * @param _amount Amount of minted tokens\\n     */\\n    function _awardPrizeSplitAmount(address _target, uint256 _amount) internal virtual;\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/interfaces/IStrategy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\ninterface IStrategy {\\n    /**\\n     * @notice Emit when a strategy captures award amount from PrizePool.\\n     * @param totalPrizeCaptured  Total prize captured from the PrizePool\\n     */\\n    event Distributed(uint256 totalPrizeCaptured);\\n\\n    /**\\n     * @notice Capture the award balance and distribute to prize splits.\\n     * @dev    Permissionless function to initialize distribution of interst\\n     * @return Prize captured from PrizePool\\n     */\\n    function distribute() external returns (uint256);\\n}\\n\"\n    },\n    \"@pooltogether/v4-periphery/contracts/interfaces/IPrizeFlush.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/v4-core/contracts/interfaces/IReserve.sol\\\";\\nimport \\\"@pooltogether/v4-core/contracts/interfaces/IStrategy.sol\\\";\\n\\ninterface IPrizeFlush {\\n    /**\\n     * @notice Emit when the flush function has executed.\\n     * @param destination Address receiving funds\\n     * @param amount      Amount of tokens transferred\\n     */\\n    event Flushed(address indexed destination, uint256 amount);\\n\\n    /**\\n     * @notice Emit when destination is set.\\n     * @param destination Destination address\\n     */\\n    event DestinationSet(address destination);\\n\\n    /**\\n     * @notice Emit when strategy is set.\\n     * @param strategy Strategy address\\n     */\\n    event StrategySet(IStrategy strategy);\\n\\n    /**\\n     * @notice Emit when reserve is set.\\n     * @param reserve Reserve address\\n     */\\n    event ReserveSet(IReserve reserve);\\n\\n    /// @notice Read global destination variable.\\n    function getDestination() external view returns (address);\\n\\n    /// @notice Read global reserve variable.\\n    function getReserve() external view returns (IReserve);\\n\\n    /// @notice Read global strategy variable.\\n    function getStrategy() external view returns (IStrategy);\\n\\n    /// @notice Set global destination variable.\\n    function setDestination(address _destination) external returns (address);\\n\\n    /// @notice Set global reserve variable.\\n    function setReserve(IReserve _reserve) external returns (IReserve);\\n\\n    /// @notice Set global strategy variable.\\n    function setStrategy(IStrategy _strategy) external returns (IStrategy);\\n\\n    /**\\n     * @notice Migrate interest from PrizePool to DrawPrizes in single transaction.\\n     * @dev    Captures interest, checkpoint data and transfers tokens to final destination.\\n     * @return True if operation is successful.\\n     */\\n    function flush() external returns (bool);\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/interfaces/IReserve.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IReserve {\\n    /**\\n     * @notice Emit when checkpoint is created.\\n     * @param reserveAccumulated  Total depsosited\\n     * @param withdrawAccumulated Total withdrawn\\n     */\\n\\n    event Checkpoint(uint256 reserveAccumulated, uint256 withdrawAccumulated);\\n    /**\\n     * @notice Emit when the withdrawTo function has executed.\\n     * @param recipient Address receiving funds\\n     * @param amount    Amount of tokens transfered.\\n     */\\n    event Withdrawn(address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @notice Create observation checkpoint in ring bufferr.\\n     * @dev    Calculates total desposited tokens since last checkpoint and creates new accumulator checkpoint.\\n     */\\n    function checkpoint() external;\\n\\n    /**\\n     * @notice Read global token value.\\n     * @return IERC20\\n     */\\n    function getToken() external view returns (IERC20);\\n\\n    /**\\n     * @notice Calculate token accumulation beween timestamp range.\\n     * @dev    Search the ring buffer for two checkpoint observations and diffs accumulator amount.\\n     * @param startTimestamp Account address\\n     * @param endTimestamp   Transfer amount\\n     */\\n    function getReserveAccumulatedBetween(uint32 startTimestamp, uint32 endTimestamp)\\n        external\\n        returns (uint224);\\n\\n    /**\\n     * @notice Transfer Reserve token balance to recipient address.\\n     * @dev    Creates checkpoint before token transfer. Increments withdrawAccumulator with amount.\\n     * @param recipient Account address\\n     * @param amount    Transfer amount\\n     */\\n    function withdrawTo(address recipient, uint256 amount) external;\\n}\\n\"\n    },\n    \"@pooltogether/v4-periphery/contracts/PrizeFlush.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IPrizeFlush.sol\\\";\\n\\n/**\\n * @title  PoolTogether V4 PrizeFlush\\n * @author PoolTogether Inc Team\\n * @notice The PrizeFlush contract helps capture interest from the PrizePool and move collected funds\\n           to a designated PrizeDistributor contract. When deployed, the destination, reserve and strategy\\n           addresses are set and used as static parameters during every \\\"flush\\\" execution. The parameters can be\\n           reset by the Owner if necessary.\\n */\\ncontract PrizeFlush is IPrizeFlush, Manageable {\\n    /**\\n     * @notice Destination address for captured interest.\\n     * @dev Should be set to the PrizeDistributor address.\\n     */\\n    address internal destination;\\n\\n    /// @notice Reserve address.\\n    IReserve internal reserve;\\n\\n    /// @notice Strategy address.\\n    IStrategy internal strategy;\\n\\n    /* ============ Events ============ */\\n\\n    /**\\n     * @notice Emitted when contract has been deployed.\\n     * @param destination Destination address\\n     * @param reserve Strategy address\\n     * @param strategy Reserve address\\n     *\\n     */\\n    event Deployed(\\n        address indexed destination,\\n        IReserve indexed reserve,\\n        IStrategy indexed strategy\\n    );\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @notice Deploy Prize Flush.\\n     * @param _owner Prize Flush owner address\\n     * @param _destination Destination address\\n     * @param _strategy Strategy address\\n     * @param _reserve Reserve address\\n     *\\n     */\\n    constructor(\\n        address _owner,\\n        address _destination,\\n        IStrategy _strategy,\\n        IReserve _reserve\\n    ) Ownable(_owner) {\\n        _setDestination(_destination);\\n        _setReserve(_reserve);\\n        _setStrategy(_strategy);\\n\\n        emit Deployed(_destination, _reserve, _strategy);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IPrizeFlush\\n    function getDestination() external view override returns (address) {\\n        return destination;\\n    }\\n\\n    /// @inheritdoc IPrizeFlush\\n    function getReserve() external view override returns (IReserve) {\\n        return reserve;\\n    }\\n\\n    /// @inheritdoc IPrizeFlush\\n    function getStrategy() external view override returns (IStrategy) {\\n        return strategy;\\n    }\\n\\n    /// @inheritdoc IPrizeFlush\\n    function setDestination(address _destination) external override onlyOwner returns (address) {\\n        _setDestination(_destination);\\n        emit DestinationSet(_destination);\\n        return _destination;\\n    }\\n\\n    /// @inheritdoc IPrizeFlush\\n    function setReserve(IReserve _reserve) external override onlyOwner returns (IReserve) {\\n        _setReserve(_reserve);\\n        emit ReserveSet(_reserve);\\n        return _reserve;\\n    }\\n\\n    /// @inheritdoc IPrizeFlush\\n    function setStrategy(IStrategy _strategy) external override onlyOwner returns (IStrategy) {\\n        _setStrategy(_strategy);\\n        emit StrategySet(_strategy);\\n        return _strategy;\\n    }\\n\\n    /// @inheritdoc IPrizeFlush\\n    function flush() external override onlyManagerOrOwner returns (bool) {\\n        // Captures interest from PrizePool and distributes funds using a PrizeSplitStrategy.\\n        strategy.distribute();\\n\\n        // After funds are distributed using PrizeSplitStrategy we EXPECT funds to be located in the Reserve.\\n        IReserve _reserve = reserve;\\n        IERC20 _token = _reserve.getToken();\\n        uint256 _amount = _token.balanceOf(address(_reserve));\\n\\n        // IF the tokens were succesfully moved to the Reserve, now move them to the destination (PrizeDistributor) address.\\n        if (_amount > 0) {\\n            address _destination = destination;\\n\\n            // Create checkpoint and transfers new total balance to PrizeDistributor\\n            _reserve.withdrawTo(_destination, _amount);\\n\\n            emit Flushed(_destination, _amount);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Set global destination variable.\\n     * @dev `_destination` cannot be the zero address.\\n     * @param _destination Destination address\\n     */\\n    function _setDestination(address _destination) internal {\\n        require(_destination != address(0), \\\"Flush/destination-not-zero-address\\\");\\n        destination = _destination;\\n    }\\n\\n    /**\\n     * @notice Set global reserve variable.\\n     * @dev `_reserve` cannot be the zero address.\\n     * @param _reserve Reserve address\\n     */\\n    function _setReserve(IReserve _reserve) internal {\\n        require(address(_reserve) != address(0), \\\"Flush/reserve-not-zero-address\\\");\\n        reserve = _reserve;\\n    }\\n\\n    /**\\n     * @notice Set global strategy variable.\\n     * @dev `_strategy` cannot be the zero address.\\n     * @param _strategy Strategy address\\n     */\\n    function _setStrategy(IStrategy _strategy) internal {\\n        require(address(_strategy) != address(0), \\\"Flush/strategy-not-zero-address\\\");\\n        strategy = _strategy;\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-timelocks/contracts/DrawCalculatorTimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\n\\nimport \\\"./interfaces/IDrawCalculatorTimelock.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 OracleTimelock\\n  * @author PoolTogether Inc Team\\n  * @notice OracleTimelock(s) acts as an intermediary between multiple V4 smart contracts.\\n            The OracleTimelock is responsible for pushing Draws to a DrawBuffer and routing\\n            claim requests from a PrizeDistributor to a DrawCalculator. The primary objective is\\n            to include a \\\"cooldown\\\" period for all new Draws. Allowing the correction of a\\n            maliciously set Draw in the unfortunate event an Owner is compromised.\\n*/\\ncontract DrawCalculatorTimelock is IDrawCalculatorTimelock, Manageable {\\n    /* ============ Global Variables ============ */\\n\\n    /// @notice Internal DrawCalculator reference.\\n    IDrawCalculator internal immutable calculator;\\n\\n    /// @notice Seconds required to elapse before newest Draw is available.\\n    uint32 internal timelockDuration;\\n\\n    /// @notice Internal Timelock struct reference.\\n    Timelock internal timelock;\\n\\n    /* ============ Events ============ */\\n\\n    /**\\n     * @notice Deployed event when the constructor is called\\n     * @param drawCalculator DrawCalculator address bound to this timelock\\n     * @param timelockDuration Initial timelock duration\\n     */\\n    event Deployed(IDrawCalculator indexed drawCalculator, uint32 timelockDuration);\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initialize DrawCalculatorTimelockTrigger smart contract.\\n     * @param _owner                       Address of the DrawCalculator owner.\\n     * @param _calculator                 DrawCalculator address.\\n     * @param _timelockDuration           Elapsed seconds before new Draw is available.\\n     */\\n    constructor(\\n        address _owner,\\n        IDrawCalculator _calculator,\\n        uint32 _timelockDuration\\n    ) Ownable(_owner) {\\n        calculator = _calculator;\\n        _setTimelockDuration(_timelockDuration);\\n\\n        emit Deployed(_calculator, _timelockDuration);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IDrawCalculatorTimelock\\n    function calculate(\\n        address user,\\n        uint32[] calldata drawIds,\\n        bytes calldata data\\n    ) external view override returns (uint256[] memory, bytes memory) {\\n        Timelock memory _timelock = timelock;\\n\\n        for (uint256 i = 0; i < drawIds.length; i++) {\\n            // if draw id matches timelock and not expired, revert\\n            if (drawIds[i] == _timelock.drawId) {\\n                _requireTimelockElapsed(_timelock);\\n            }\\n        }\\n\\n        return calculator.calculate(user, drawIds, data);\\n    }\\n\\n    /// @inheritdoc IDrawCalculatorTimelock\\n    function lock(uint32 _drawId) external override onlyManagerOrOwner returns (bool) {\\n        Timelock memory _timelock = timelock;\\n        require(_drawId == _timelock.drawId + 1, \\\"OM/not-drawid-plus-one\\\");\\n\\n        _requireTimelockElapsed(_timelock);\\n\\n        uint128 _timestamp = uint128(block.timestamp);\\n        timelock = Timelock({ drawId: _drawId, timestamp: _timestamp });\\n        emit LockedDraw(_drawId, uint32(_timestamp));\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc IDrawCalculatorTimelock\\n    function getDrawCalculator() external view override returns (IDrawCalculator) {\\n        return calculator;\\n    }\\n\\n    /// @inheritdoc IDrawCalculatorTimelock\\n    function getTimelock() external view override returns (Timelock memory) {\\n        return timelock;\\n    }\\n\\n    /// @inheritdoc IDrawCalculatorTimelock\\n    function getTimelockDuration() external view override returns (uint32) {\\n        return timelockDuration;\\n    }\\n\\n    /// @inheritdoc IDrawCalculatorTimelock\\n    function setTimelock(Timelock memory _timelock) external override onlyOwner {\\n        timelock = _timelock;\\n\\n        emit TimelockSet(_timelock);\\n    }\\n\\n    /// @inheritdoc IDrawCalculatorTimelock\\n    function setTimelockDuration(uint32 _timelockDuration) external override onlyOwner {\\n        _setTimelockDuration(_timelockDuration);\\n    }\\n\\n    /// @inheritdoc IDrawCalculatorTimelock\\n    function hasElapsed() external view override returns (bool) {\\n        return _timelockHasElapsed(timelock);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Set global timelockDuration variable.\\n     */\\n    function _setTimelockDuration(uint32 _timelockDuration) internal {\\n        timelockDuration = _timelockDuration;\\n        emit TimelockDurationSet(_timelockDuration);\\n    }\\n\\n    /**\\n     * @notice Read global DrawCalculator variable.\\n     * @return IDrawCalculator\\n     */\\n    function _timelockHasElapsed(Timelock memory _timelock) internal view returns (bool) {\\n        // If the timelock hasn't been initialized, then it's elapsed\\n        if (_timelock.timestamp == 0) {\\n            return true;\\n        }\\n\\n        // Otherwise if the timelock has expired, we're good.\\n        return (block.timestamp > _timelock.timestamp + timelockDuration);\\n    }\\n\\n    /**\\n     * @notice Require the timelock \\\"cooldown\\\" period has elapsed\\n     * @param _timelock the Timelock to check\\n     */\\n    function _requireTimelockElapsed(Timelock memory _timelock) internal view {\\n        require(_timelockHasElapsed(_timelock), \\\"OM/timelock-not-expired\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-timelocks/contracts/DrawCalculatorTimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-timelocks/contracts/DrawCalculatorTimelock.sol';\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/Reserve.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IReserve.sol\\\";\\nimport \\\"./libraries/ObservationLib.sol\\\";\\n\\n/**\\n    * @title  PoolTogether V4 Reserve\\n    * @author PoolTogether Inc Team\\n    * @notice The Reserve contract provides historical lookups of a token balance increase during a target timerange.\\n              As the Reserve contract transfers OUT tokens, the withdraw accumulator is increased. When tokens are\\n              transfered IN new checkpoint *can* be created if checkpoint() is called after transfering tokens.\\n              By using the reserve and withdraw accumulators to create a new checkpoint, any contract or account\\n              can lookup the balance increase of the reserve for a target timerange.   \\n    * @dev    By calculating the total held tokens in a speicific time range, contracts that require knowledge \\n              of captured interest during a draw period, can easily call into the Reserve and determininstially\\n              determine the newly aqcuired tokens for that time range. \\n */\\ncontract Reserve is IReserve, Manageable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice ERC20 token\\n    IERC20 public immutable token;\\n\\n    /// @notice Total withdraw amount from reserve\\n    uint224 public withdrawAccumulator;\\n\\n    /// @notice The maximum number of twab entries\\n    uint24 internal constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    ObservationLib.Observation[MAX_CARDINALITY] internal reserveAccumulators;\\n\\n    uint24 internal cardinality;\\n\\n    /* ============ Events ============ */\\n\\n    event Deployed(IERC20 indexed token);\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @notice Constructs Ticket with passed parameters.\\n     * @param _owner Owner address\\n     * @param _token ERC20 address\\n     */\\n    constructor(address _owner, IERC20 _token) Ownable(_owner) {\\n        token = _token;\\n        emit Deployed(_token);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IReserve\\n    function checkpoint() external override {\\n        _checkpoint();\\n    }\\n\\n    /// @inheritdoc IReserve\\n    function getToken() external view override returns (IERC20) {\\n        return token;\\n    }\\n\\n    /// @inheritdoc IReserve\\n    function getReserveAccumulatedBetween(uint32 _startTimestamp, uint32 _endTimestamp)\\n        external\\n        view\\n        override\\n        returns (uint224)\\n    {\\n        require(_startTimestamp < _endTimestamp, \\\"Reserve/start-less-then-end\\\");\\n        uint24 _cardinality = cardinality;\\n\\n        ObservationLib.Observation memory _newestObservation;\\n\\n        if (_cardinality > 0) {\\n            _newestObservation = reserveAccumulators[_cardinality - 1];\\n        }\\n\\n        ObservationLib.Observation memory _oldestObservation = reserveAccumulators[0];\\n\\n        uint224 _start = _getReserveAccumulatedAt(\\n            _newestObservation,\\n            _oldestObservation,\\n            _cardinality,\\n            _startTimestamp\\n        );\\n\\n        uint224 _end = _getReserveAccumulatedAt(\\n            _newestObservation,\\n            _oldestObservation,\\n            _cardinality,\\n            _endTimestamp\\n        );\\n\\n        return _end - _start;\\n    }\\n\\n    /// @inheritdoc IReserve\\n    function withdrawTo(address _recipient, uint256 _amount) external override onlyManagerOrOwner {\\n        _checkpoint();\\n\\n        withdrawAccumulator += uint224(_amount);\\n        \\n        token.safeTransfer(_recipient, _amount);\\n\\n        emit Withdrawn(_recipient, _amount);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Find optimal observation checkpoint using target timestamp\\n     * @dev    Uses binary search if target timestamp is within ring buffer range.\\n     * @param _newestObservation ObservationLib.Observation\\n     * @param _oldestObservation ObservationLib.Observation\\n     * @param _cardinality       RingBuffer Range\\n     * @param _timestamp          Timestamp target\\n     *\\n     * @return Optimal reserveAccumlator for timestamp.\\n     */\\n    function _getReserveAccumulatedAt(\\n        ObservationLib.Observation memory _newestObservation,\\n        ObservationLib.Observation memory _oldestObservation,\\n        uint24 _cardinality,\\n        uint32 _timestamp\\n    ) internal view returns (uint224) {\\n        uint32 timeNow = uint32(block.timestamp);\\n\\n        // IF empty ring buffer exit early.\\n        if (_cardinality == 0) return 0;\\n\\n        /**\\n         * Ring Buffer Search Optimization\\n         * Before performing binary search on the ring buffer check\\n         * to see if timestamp is within range of [o T n] by comparing\\n         * the target timestamp to the oldest/newest observation.timestamps\\n         * IF the timestamp is out of the ring buffer range avoid starting\\n         * a binary search, because we can return NULL or oldestObservation.amount\\n         */\\n\\n        /**\\n         * IF oldestObservation.timestamp is after timestamp: T[old ]\\n         * the Reserve did NOT have a balance or the ring buffer\\n         * no longer contains that timestamp checkpoint.\\n         */\\n        if (_oldestObservation.timestamp > _timestamp) {\\n            return 0;\\n        }\\n\\n        /**\\n         * IF newestObservation.timestamp is before timestamp: [ new]T\\n         * return _newestObservation.amount since observation\\n         * contains the highest checkpointed reserveAccumulator.\\n         */\\n        if (_newestObservation.timestamp <= _timestamp) {\\n            return _newestObservation.amount;\\n        }\\n\\n        // IF the timestamp is witin range of ring buffer start/end: [new T old]\\n        // FIND the closest observation to the left(or exact) of timestamp: [OT ]\\n        (\\n            ObservationLib.Observation memory beforeOrAt,\\n            ObservationLib.Observation memory atOrAfter\\n        ) = ObservationLib.binarySearch(\\n                reserveAccumulators,\\n                _cardinality - 1,\\n                0,\\n                _timestamp,\\n                _cardinality,\\n                timeNow\\n            );\\n\\n        // IF target timestamp is EXACT match for atOrAfter.timestamp observation return amount.\\n        // NOT having an exact match with atOrAfter means values will contain accumulator value AFTER the searchable range.\\n        // ELSE return observation.totalDepositedAccumulator closest to LEFT of target timestamp.\\n        if (atOrAfter.timestamp == _timestamp) {\\n            return atOrAfter.amount;\\n        } else {\\n            return beforeOrAt.amount;\\n        }\\n    }\\n\\n    /// @notice Records the currently accrued reserve amount.\\n    function _checkpoint() internal {\\n        uint24 _cardinality = cardinality;\\n        uint256 _balanceOfReserve = token.balanceOf(address(this));\\n        uint224 _withdrawAccumulator = withdrawAccumulator; //sload\\n        ObservationLib.Observation memory _newestObservation = _getNewestObservation(_cardinality);\\n\\n        /**\\n         * IF tokens have been deposited into Reserve contract since the last checkpoint\\n         * create a new Reserve balance checkpoint. The will will update multiple times in a single block.\\n         */\\n        if (_balanceOfReserve + _withdrawAccumulator > _newestObservation.amount) {\\n            uint32 nowTime = uint32(block.timestamp);\\n\\n            // checkpointAccumulator = currentBalance + totalWithdraws\\n            uint224 newReserveAccumulator = uint224(_balanceOfReserve) + _withdrawAccumulator;\\n\\n            // IF _newestObservation IS NOT in the current block.\\n            // CREATE observation in the accumulators ring buffer.\\n            if (_newestObservation.timestamp != nowTime) {\\n                reserveAccumulators[_cardinality] = ObservationLib.Observation({\\n                    amount: newReserveAccumulator,\\n                    timestamp: nowTime\\n                });\\n\\n                cardinality++;\\n            }\\n            // ELSE IF _newestObservation IS in the current block.\\n            // UPDATE the checkpoint previously created in block history.\\n            else {\\n                reserveAccumulators[_cardinality - 1] = ObservationLib.Observation({\\n                    amount: newReserveAccumulator,\\n                    timestamp: nowTime\\n                });\\n            }\\n\\n            emit Checkpoint(newReserveAccumulator, _withdrawAccumulator);\\n        }\\n    }\\n\\n    /// @notice Retrieves the newest observation\\n    function _getNewestObservation(uint24 _cardinality)\\n        internal\\n        view\\n        returns (ObservationLib.Observation memory _observation)\\n    {\\n        if (_cardinality > 0) _observation = reserveAccumulators[_cardinality - 1];\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/prize-pool/PrizePool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\\\";\\n\\nimport \\\"../external/compound/ICompLike.sol\\\";\\nimport \\\"../interfaces/IPrizePool.sol\\\";\\nimport \\\"../interfaces/ITicket.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 PrizePool\\n  * @author PoolTogether Inc Team\\n  * @notice Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.\\n            Users deposit and withdraw from this contract to participate in Prize Pool.\\n            Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\\n            Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\\n*/\\nabstract contract PrizePool is IPrizePool, Ownable, ReentrancyGuard, IERC721Receiver {\\n    using SafeCast for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC721;\\n    using ERC165Checker for address;\\n\\n    /// @notice Semver Version\\n    string public constant VERSION = \\\"4.0.0\\\";\\n\\n    /// @notice Prize Pool ticket. Can only be set once by calling `setTicket()`.\\n    ITicket internal ticket;\\n\\n    /// @notice The Prize Strategy that this Prize Pool is bound to.\\n    address internal prizeStrategy;\\n\\n    /// @notice The total amount of tickets a user can hold.\\n    uint256 internal balanceCap;\\n\\n    /// @notice The total amount of funds that the prize pool can hold.\\n    uint256 internal liquidityCap;\\n\\n    /// @notice the The awardable balance\\n    uint256 internal _currentAwardBalance;\\n\\n    /* ============ Modifiers ============ */\\n\\n    /// @dev Function modifier to ensure caller is the prize-strategy\\n    modifier onlyPrizeStrategy() {\\n        require(msg.sender == prizeStrategy, \\\"PrizePool/only-prizeStrategy\\\");\\n        _;\\n    }\\n\\n    /// @dev Function modifier to ensure the deposit amount does not exceed the liquidity cap (if set)\\n    modifier canAddLiquidity(uint256 _amount) {\\n        require(_canAddLiquidity(_amount), \\\"PrizePool/exceeds-liquidity-cap\\\");\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /// @notice Deploy the Prize Pool\\n    /// @param _owner Address of the Prize Pool owner\\n    constructor(address _owner) Ownable(_owner) ReentrancyGuard() {\\n        _setLiquidityCap(type(uint256).max);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IPrizePool\\n    function balance() external override returns (uint256) {\\n        return _balance();\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function awardBalance() external view override returns (uint256) {\\n        return _currentAwardBalance;\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function canAwardExternal(address _externalToken) external view override returns (bool) {\\n        return _canAwardExternal(_externalToken);\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function isControlled(ITicket _controlledToken) external view override returns (bool) {\\n        return _isControlled(_controlledToken);\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function getAccountedBalance() external view override returns (uint256) {\\n        return _ticketTotalSupply();\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function getBalanceCap() external view override returns (uint256) {\\n        return balanceCap;\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function getLiquidityCap() external view override returns (uint256) {\\n        return liquidityCap;\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function getTicket() external view override returns (ITicket) {\\n        return ticket;\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function getPrizeStrategy() external view override returns (address) {\\n        return prizeStrategy;\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function getToken() external view override returns (address) {\\n        return address(_token());\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function captureAwardBalance() external override nonReentrant returns (uint256) {\\n        uint256 ticketTotalSupply = _ticketTotalSupply();\\n        uint256 currentAwardBalance = _currentAwardBalance; //sload\\n\\n        // it's possible for the balance to be slightly less due to rounding errors in the underlying yield source\\n        uint256 currentBalance = _balance();\\n        uint256 totalInterest = (currentBalance > ticketTotalSupply)\\n            ? currentBalance - ticketTotalSupply\\n            : 0;\\n\\n        uint256 unaccountedPrizeBalance = (totalInterest > currentAwardBalance)\\n            ? totalInterest - currentAwardBalance\\n            : 0;\\n\\n        if (unaccountedPrizeBalance > 0) {\\n            currentAwardBalance = currentAwardBalance + unaccountedPrizeBalance;\\n            _currentAwardBalance = currentAwardBalance; //sstore\\n\\n            emit AwardCaptured(unaccountedPrizeBalance);\\n        }\\n\\n        return currentAwardBalance;\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function depositTo(address _to, uint256 _amount)\\n        external\\n        override\\n        nonReentrant\\n        canAddLiquidity(_amount)\\n    {\\n        _depositTo(msg.sender, _to, _amount);\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function depositToAndDelegate(address _to, uint256 _amount, address _delegate)\\n        external\\n        override\\n        nonReentrant\\n        canAddLiquidity(_amount)\\n    {\\n        _depositTo(msg.sender, _to, _amount);\\n        ticket.controllerDelegateFor(msg.sender, _delegate);\\n    }\\n\\n    /// @notice Transfers tokens in from one user and mints tickets to another\\n    /// @notice _operator The user to transfer tokens from\\n    /// @notice _to The user to mint tickets to\\n    /// @notice _amount The amount to transfer and mint\\n    function _depositTo(address _operator, address _to, uint256 _amount) internal\\n    {\\n        require(_canDeposit(_to, _amount), \\\"PrizePool/exceeds-balance-cap\\\");\\n\\n        ITicket _ticket = ticket;\\n\\n        _mint(_to, _amount, _ticket);\\n\\n        _token().safeTransferFrom(_operator, address(this), _amount);\\n        _supply(_amount);\\n\\n        emit Deposited(_operator, _to, _ticket, _amount);\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function withdrawFrom(address _from, uint256 _amount)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        ITicket _ticket = ticket;\\n\\n        // burn the tickets\\n        _ticket.controllerBurnFrom(msg.sender, _from, _amount);\\n\\n        // redeem the tickets\\n        uint256 _redeemed = _redeem(_amount);\\n\\n        _token().safeTransfer(_from, _redeemed);\\n\\n        emit Withdrawal(msg.sender, _from, _ticket, _amount, _redeemed);\\n\\n        return _redeemed;\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function award(address _to, uint256 _amount) external override onlyPrizeStrategy {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        uint256 currentAwardBalance = _currentAwardBalance;\\n\\n        require(_amount <= currentAwardBalance, \\\"PrizePool/award-exceeds-avail\\\");\\n        _currentAwardBalance = currentAwardBalance - _amount;\\n\\n        ITicket _ticket = ticket;\\n\\n        _mint(_to, _amount, _ticket);\\n\\n        emit Awarded(_to, _ticket, _amount);\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function transferExternalERC20(\\n        address _to,\\n        address _externalToken,\\n        uint256 _amount\\n    ) external override onlyPrizeStrategy {\\n        if (_transferOut(_to, _externalToken, _amount)) {\\n            emit TransferredExternalERC20(_to, _externalToken, _amount);\\n        }\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function awardExternalERC20(\\n        address _to,\\n        address _externalToken,\\n        uint256 _amount\\n    ) external override onlyPrizeStrategy {\\n        if (_transferOut(_to, _externalToken, _amount)) {\\n            emit AwardedExternalERC20(_to, _externalToken, _amount);\\n        }\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function awardExternalERC721(\\n        address _to,\\n        address _externalToken,\\n        uint256[] calldata _tokenIds\\n    ) external override onlyPrizeStrategy {\\n        require(_canAwardExternal(_externalToken), \\\"PrizePool/invalid-external-token\\\");\\n\\n        if (_tokenIds.length == 0) {\\n            return;\\n        }\\n\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            try IERC721(_externalToken).safeTransferFrom(address(this), _to, _tokenIds[i]) {} catch (\\n                bytes memory error\\n            ) {\\n                emit ErrorAwardingExternalERC721(error);\\n            }\\n        }\\n\\n        emit AwardedExternalERC721(_to, _externalToken, _tokenIds);\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function setBalanceCap(uint256 _balanceCap) external override onlyOwner returns (bool) {\\n        _setBalanceCap(_balanceCap);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function setLiquidityCap(uint256 _liquidityCap) external override onlyOwner {\\n        _setLiquidityCap(_liquidityCap);\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function setTicket(ITicket _ticket) external override onlyOwner returns (bool) {\\n        address _ticketAddress = address(_ticket);\\n\\n        require(_ticketAddress != address(0), \\\"PrizePool/ticket-not-zero-address\\\");\\n        require(address(ticket) == address(0), \\\"PrizePool/ticket-already-set\\\");\\n\\n        ticket = _ticket;\\n\\n        emit TicketSet(_ticket);\\n\\n        _setBalanceCap(type(uint256).max);\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function setPrizeStrategy(address _prizeStrategy) external override onlyOwner {\\n        _setPrizeStrategy(_prizeStrategy);\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function compLikeDelegate(ICompLike _compLike, address _to) external override onlyOwner {\\n        if (_compLike.balanceOf(address(this)) > 0) {\\n            _compLike.delegate(_to);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721Receiver\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /// @notice Transfer out `amount` of `externalToken` to recipient `to`\\n    /// @dev Only awardable `externalToken` can be transferred out\\n    /// @param _to Recipient address\\n    /// @param _externalToken Address of the external asset token being transferred\\n    /// @param _amount Amount of external assets to be transferred\\n    /// @return True if transfer is successful\\n    function _transferOut(\\n        address _to,\\n        address _externalToken,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        require(_canAwardExternal(_externalToken), \\\"PrizePool/invalid-external-token\\\");\\n\\n        if (_amount == 0) {\\n            return false;\\n        }\\n\\n        IERC20(_externalToken).safeTransfer(_to, _amount);\\n\\n        return true;\\n    }\\n\\n    /// @notice Called to mint controlled tokens.  Ensures that token listener callbacks are fired.\\n    /// @param _to The user who is receiving the tokens\\n    /// @param _amount The amount of tokens they are receiving\\n    /// @param _controlledToken The token that is going to be minted\\n    function _mint(\\n        address _to,\\n        uint256 _amount,\\n        ITicket _controlledToken\\n    ) internal {\\n        _controlledToken.controllerMint(_to, _amount);\\n    }\\n\\n    /// @dev Checks if `user` can deposit in the Prize Pool based on the current balance cap.\\n    /// @param _user Address of the user depositing.\\n    /// @param _amount The amount of tokens to be deposited into the Prize Pool.\\n    /// @return True if the Prize Pool can receive the specified `amount` of tokens.\\n    function _canDeposit(address _user, uint256 _amount) internal view returns (bool) {\\n        ITicket _ticket = ticket;\\n        uint256 _balanceCap = balanceCap;\\n\\n        if (_balanceCap == type(uint256).max) return true;\\n\\n        return (_ticket.balanceOf(_user) + _amount <= _balanceCap);\\n    }\\n\\n    /// @dev Checks if the Prize Pool can receive liquidity based on the current cap\\n    /// @param _amount The amount of liquidity to be added to the Prize Pool\\n    /// @return True if the Prize Pool can receive the specified amount of liquidity\\n    function _canAddLiquidity(uint256 _amount) internal view returns (bool) {\\n        uint256 _liquidityCap = liquidityCap;\\n        if (_liquidityCap == type(uint256).max) return true;\\n        return (_ticketTotalSupply() + _amount <= _liquidityCap);\\n    }\\n\\n    /// @dev Checks if a specific token is controlled by the Prize Pool\\n    /// @param _controlledToken The address of the token to check\\n    /// @return True if the token is a controlled token, false otherwise\\n    function _isControlled(ITicket _controlledToken) internal view returns (bool) {\\n        if (ticket == _controlledToken) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Allows the owner to set a balance cap per `token` for the pool.\\n    /// @param _balanceCap New balance cap.\\n    function _setBalanceCap(uint256 _balanceCap) internal {\\n        balanceCap = _balanceCap;\\n        emit BalanceCapSet(_balanceCap);\\n    }\\n\\n    /// @notice Allows the owner to set a liquidity cap for the pool\\n    /// @param _liquidityCap New liquidity cap\\n    function _setLiquidityCap(uint256 _liquidityCap) internal {\\n        liquidityCap = _liquidityCap;\\n        emit LiquidityCapSet(_liquidityCap);\\n    }\\n\\n    /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\\n    /// @param _prizeStrategy The new prize strategy\\n    function _setPrizeStrategy(address _prizeStrategy) internal {\\n        require(_prizeStrategy != address(0), \\\"PrizePool/prizeStrategy-not-zero\\\");\\n\\n        prizeStrategy = _prizeStrategy;\\n\\n        emit PrizeStrategySet(_prizeStrategy);\\n    }\\n\\n    /// @notice The current total of tickets.\\n    /// @return Ticket total supply.\\n    function _ticketTotalSupply() internal view returns (uint256) {\\n        return ticket.totalSupply();\\n    }\\n\\n    /// @dev Gets the current time as represented by the current block\\n    /// @return The timestamp of the current block\\n    function _currentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /* ============ Abstract Contract Implementatiton ============ */\\n\\n    /// @notice Determines whether the passed token can be transferred out as an external award.\\n    /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\\n    /// prize strategy should not be allowed to move those tokens.\\n    /// @param _externalToken The address of the token to check\\n    /// @return True if the token may be awarded, false otherwise\\n    function _canAwardExternal(address _externalToken) internal view virtual returns (bool);\\n\\n    /// @notice Returns the ERC20 asset token used for deposits.\\n    /// @return The ERC20 asset token\\n    function _token() internal view virtual returns (IERC20);\\n\\n    /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\\n    /// @return The underlying balance of asset tokens\\n    function _balance() internal virtual returns (uint256);\\n\\n    /// @notice Supplies asset tokens to the yield source.\\n    /// @param _mintAmount The amount of asset tokens to be supplied\\n    function _supply(uint256 _mintAmount) internal virtual;\\n\\n    /// @notice Redeems asset tokens from the yield source.\\n    /// @param _redeemAmount The amount of yield-bearing tokens to be redeemed\\n    /// @return The actual amount of tokens that were redeemed.\\n    function _redeem(uint256 _redeemAmount) internal virtual returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/prize-pool/YieldSourcePrizePool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@pooltogether/yield-source-interface/contracts/IYieldSource.sol\\\";\\n\\nimport \\\"./PrizePool.sol\\\";\\n\\n/**\\n * @title  PoolTogether V4 YieldSourcePrizePool\\n * @author PoolTogether Inc Team\\n * @notice The Yield Source Prize Pool uses a yield source contract to generate prizes.\\n *         Funds that are deposited into the prize pool are then deposited into a yield source. (i.e. Aave, Compound, etc...)\\n */\\ncontract YieldSourcePrizePool is PrizePool {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    /// @notice Address of the yield source.\\n    IYieldSource public yieldSource;\\n\\n    /// @dev Emitted when yield source prize pool is deployed.\\n    /// @param yieldSource Address of the yield source.\\n    event Deployed(address indexed yieldSource);\\n\\n    /// @notice Deploy the Prize Pool and Yield Service with the required contract connections\\n    /// @param _owner Address of the Yield Source Prize Pool owner\\n    /// @param _yieldSource Address of the yield source\\n    constructor(address _owner, IYieldSource _yieldSource) PrizePool(_owner) {\\n        require(\\n            address(_yieldSource) != address(0),\\n            \\\"YieldSourcePrizePool/yield-source-not-zero-address\\\"\\n        );\\n\\n        yieldSource = _yieldSource;\\n\\n        // A hack to determine whether it's an actual yield source\\n        (bool succeeded, ) = address(_yieldSource).staticcall(\\n            abi.encodePacked(_yieldSource.depositToken.selector)\\n        );\\n\\n        require(succeeded, \\\"YieldSourcePrizePool/invalid-yield-source\\\");\\n\\n        emit Deployed(address(_yieldSource));\\n    }\\n\\n    /// @notice Determines whether the passed token can be transferred out as an external award.\\n    /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The\\n    /// prize strategy should not be allowed to move those tokens.\\n    /// @param _externalToken The address of the token to check\\n    /// @return True if the token may be awarded, false otherwise\\n    function _canAwardExternal(address _externalToken) internal view override returns (bool) {\\n        return _externalToken != address(yieldSource);\\n    }\\n\\n    /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\\n    /// @return The underlying balance of asset tokens\\n    function _balance() internal override returns (uint256) {\\n        return yieldSource.balanceOfToken(address(this));\\n    }\\n\\n    /// @notice Returns the address of the ERC20 asset token used for deposits.\\n    /// @return Address of the ERC20 asset token.\\n    function _token() internal view override returns (IERC20) {\\n        return IERC20(yieldSource.depositToken());\\n    }\\n\\n    /// @notice Supplies asset tokens to the yield source.\\n    /// @param _mintAmount The amount of asset tokens to be supplied\\n    function _supply(uint256 _mintAmount) internal override {\\n        _token().safeApprove(address(yieldSource), _mintAmount);\\n        yieldSource.supplyTokenTo(_mintAmount, address(this));\\n    }\\n\\n    /// @notice Redeems asset tokens from the yield source.\\n    /// @param _redeemAmount The amount of yield-bearing tokens to be redeemed\\n    /// @return The actual amount of tokens that were redeemed.\\n    function _redeem(uint256 _redeemAmount) internal override returns (uint256) {\\n        return yieldSource.redeemToken(_redeemAmount);\\n    }\\n}\\n\"\n    },\n    \"@pooltogether/yield-source-interface/contracts/IYieldSource.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\n/// @title Defines the functions used to interact with a yield source.  The Prize Pool inherits this contract.\\n/// @notice Prize Pools subclasses need to implement this interface so that yield can be generated.\\ninterface IYieldSource {\\n\\n  /// @notice Returns the ERC20 asset token used for deposits.\\n  /// @return The ERC20 asset token address.\\n  function depositToken() external view returns (address);\\n\\n  /// @notice Returns the total balance (in asset tokens).  This includes the deposits and interest.\\n  /// @return The underlying balance of asset tokens.\\n  function balanceOfToken(address addr) external returns (uint256);\\n\\n  /// @notice Supplies tokens to the yield source.  Allows assets to be supplied on other user's behalf using the `to` param.\\n  /// @param amount The amount of asset tokens to be supplied.  Denominated in `depositToken()` as above.\\n  /// @param to The user whose balance will receive the tokens\\n  function supplyTokenTo(uint256 amount, address to) external;\\n\\n  /// @notice Redeems tokens from the yield source.\\n  /// @param amount The amount of asset tokens to withdraw.  Denominated in `depositToken()` as above.\\n  /// @return The actual amount of interst bearing tokens that were redeemed.\\n  function redeemToken(uint256 amount) external returns (uint256);\\n\\n}\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/prize-pool/YieldSourcePrizePool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-core/contracts/prize-pool/YieldSourcePrizePool.sol';\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/Reserve.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-core/contracts/Reserve.sol';\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/DrawBuffer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\n\\nimport \\\"./interfaces/IDrawBuffer.sol\\\";\\nimport \\\"./interfaces/IDrawBeacon.sol\\\";\\nimport \\\"./interfaces/IDrawBeacon.sol\\\";\\nimport \\\"./libraries/DrawRingBufferLib.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 DrawBuffer\\n  * @author PoolTogether Inc Team\\n  * @notice The DrawBuffer provides historical lookups of Draws via a circular ring buffer.\\n            Historical Draws can be accessed on-chain using a drawId to calculate ring buffer storage slot.\\n            The Draw settings can be created by manager/owner and existing Draws can only be updated the owner.\\n            Once a starting Draw has been added to the ring buffer, all following draws must have a sequential Draw ID.\\n    @dev    A DrawBuffer store a limited number of Draws before beginning to overwrite (managed via the cardinality) previous Draws.\\n    @dev    All mainnet DrawBuffer(s) are updated directly from a DrawBeacon, but non-mainnet DrawBuffer(s) (Matic, Optimism, Arbitrum, etc...)\\n            will receive a cross-chain message, duplicating the mainnet Draw configuration - enabling a prize savings liquidity network.\\n*/\\ncontract DrawBuffer is IDrawBuffer, Manageable {\\n    using DrawRingBufferLib for DrawRingBufferLib.Buffer;\\n\\n    /// @notice Draws ring buffer max length.\\n    uint16 public constant MAX_CARDINALITY = 256;\\n\\n    /// @notice Draws ring buffer array.\\n    IDrawBeacon.Draw[MAX_CARDINALITY] private drawRingBuffer;\\n\\n    /// @notice Holds ring buffer information\\n    DrawRingBufferLib.Buffer internal bufferMetadata;\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Deploy DrawBuffer smart contract.\\n     * @param _owner Address of the owner of the DrawBuffer.\\n     * @param _cardinality Draw ring buffer cardinality.\\n     */\\n    constructor(address _owner, uint8 _cardinality) Ownable(_owner) {\\n        bufferMetadata.cardinality = _cardinality;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IDrawBuffer\\n    function getBufferCardinality() external view override returns (uint32) {\\n        return bufferMetadata.cardinality;\\n    }\\n\\n    /// @inheritdoc IDrawBuffer\\n    function getDraw(uint32 drawId) external view override returns (IDrawBeacon.Draw memory) {\\n        return drawRingBuffer[_drawIdToDrawIndex(bufferMetadata, drawId)];\\n    }\\n\\n    /// @inheritdoc IDrawBuffer\\n    function getDraws(uint32[] calldata _drawIds)\\n        external\\n        view\\n        override\\n        returns (IDrawBeacon.Draw[] memory)\\n    {\\n        IDrawBeacon.Draw[] memory draws = new IDrawBeacon.Draw[](_drawIds.length);\\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\\n\\n        for (uint256 index = 0; index < _drawIds.length; index++) {\\n            draws[index] = drawRingBuffer[_drawIdToDrawIndex(buffer, _drawIds[index])];\\n        }\\n\\n        return draws;\\n    }\\n\\n    /// @inheritdoc IDrawBuffer\\n    function getDrawCount() external view override returns (uint32) {\\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\\n\\n        if (buffer.lastDrawId == 0) {\\n            return 0;\\n        }\\n\\n        uint32 bufferNextIndex = buffer.nextIndex;\\n\\n        if (drawRingBuffer[bufferNextIndex].timestamp != 0) {\\n            return buffer.cardinality;\\n        } else {\\n            return bufferNextIndex;\\n        }\\n    }\\n\\n    /// @inheritdoc IDrawBuffer\\n    function getNewestDraw() external view override returns (IDrawBeacon.Draw memory) {\\n        return _getNewestDraw(bufferMetadata);\\n    }\\n\\n    /// @inheritdoc IDrawBuffer\\n    function getOldestDraw() external view override returns (IDrawBeacon.Draw memory) {\\n        // oldest draw should be next available index, otherwise it's at 0\\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\\n        IDrawBeacon.Draw memory draw = drawRingBuffer[buffer.nextIndex];\\n\\n        if (draw.timestamp == 0) {\\n            // if draw is not init, then use draw at 0\\n            draw = drawRingBuffer[0];\\n        }\\n\\n        return draw;\\n    }\\n\\n    /// @inheritdoc IDrawBuffer\\n    function pushDraw(IDrawBeacon.Draw memory _draw)\\n        external\\n        override\\n        onlyManagerOrOwner\\n        returns (uint32)\\n    {\\n        return _pushDraw(_draw);\\n    }\\n\\n    /// @inheritdoc IDrawBuffer\\n    function setDraw(IDrawBeacon.Draw memory _newDraw) external override onlyOwner returns (uint32) {\\n        DrawRingBufferLib.Buffer memory buffer = bufferMetadata;\\n        uint32 index = buffer.getIndex(_newDraw.drawId);\\n        drawRingBuffer[index] = _newDraw;\\n        emit DrawSet(_newDraw.drawId, _newDraw);\\n        return _newDraw.drawId;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Convert a Draw.drawId to a Draws ring buffer index pointer.\\n     * @dev    The getNewestDraw.drawId() is used to calculate a Draws ID delta position.\\n     * @param _drawId Draw.drawId\\n     * @return Draws ring buffer index pointer\\n     */\\n    function _drawIdToDrawIndex(DrawRingBufferLib.Buffer memory _buffer, uint32 _drawId)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        return _buffer.getIndex(_drawId);\\n    }\\n\\n    /**\\n     * @notice Read newest Draw from the draws ring buffer.\\n     * @dev    Uses the lastDrawId to calculate the most recently added Draw.\\n     * @param _buffer Draw ring buffer\\n     * @return IDrawBeacon.Draw\\n     */\\n    function _getNewestDraw(DrawRingBufferLib.Buffer memory _buffer)\\n        internal\\n        view\\n        returns (IDrawBeacon.Draw memory)\\n    {\\n        return drawRingBuffer[_buffer.getIndex(_buffer.lastDrawId)];\\n    }\\n\\n    /**\\n     * @notice Push Draw onto draws ring buffer history.\\n     * @dev    Push new draw onto draws list via authorized manager or owner.\\n     * @param _newDraw IDrawBeacon.Draw\\n     * @return Draw.drawId\\n     */\\n    function _pushDraw(IDrawBeacon.Draw memory _newDraw) internal returns (uint32) {\\n        DrawRingBufferLib.Buffer memory _buffer = bufferMetadata;\\n        drawRingBuffer[_buffer.nextIndex] = _newDraw;\\n        bufferMetadata = _buffer.push(_newDraw.drawId);\\n\\n        emit DrawSet(_newDraw.drawId, _newDraw);\\n\\n        return _newDraw.drawId;\\n    }\\n}\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/DrawBuffer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-core/contracts/DrawBuffer.sol';\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-periphery/contracts/PrizeFlush.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-periphery/contracts/PrizeFlush.sol';\\n\"\n    },\n    \"@pooltogether/v4-core/contracts/test/ERC20Mintable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\\n * which have permission to mint (create) new tokens as they see fit.\\n *\\n * At construction, the deployer of the contract is the only minter.\\n */\\ncontract ERC20Mintable is ERC20 {\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the {MinterRole}.\\n     */\\n    function mint(address account, uint256 amount) public returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) public returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function masterTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        _transfer(from, to, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/test/ERC20Mintable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-core/contracts/test/ERC20Mintable.sol';\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/prize-strategy/PrizeSplitStrategy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-core/contracts/prize-strategy/PrizeSplitStrategy.sol';\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/Ticket.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-core/contracts/Ticket.sol';\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-core/contracts/DrawCalculator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-core/contracts/DrawCalculator.sol';\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-timelocks/contracts/L1TimelockTrigger.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-timelocks/contracts/L1TimelockTrigger.sol';\\n\"\n    },\n    \"contracts/hardhat-dependency-compiler/@pooltogether/v4-timelocks/contracts/L2TimelockTrigger.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >0.0.0;\\nimport '@pooltogether/v4-timelocks/contracts/L2TimelockTrigger.sol';\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 2000\n    },\n    \"evmVersion\": \"berlin\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "b38b280a3078e62343712fc4d2984c40",
      "transactionHash": "0xe96e02f3ead9993b33d139ff83ea7bf704defef465cab608a33b93a722deb82e",
      "args": [
        "Ticket",
        "TICK",
        6,
        "0x35522939af8c6088f5b25b99E03d3733b7e27B44"
      ]
    },
    "decoded": {
      "from": "0x94996399E8c5667f377460D0f3A5037BfC6c1275",
      "gasPrice": "1000000011",
      "maxFeePerGas": "1000000011",
      "maxPriorityFeePerGas": "1000000000",
      "gasLimit": "3144439",
      "to": null,
      "value": "0",
      "nonce": 166,
      "data": "0x6101806040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120527f94019368dc6b2ee4ac32010c9d0081ec29874325b541829d001d22c296b5246c610160523480156200005c57600080fd5b5060405162003c7438038062003c748339810160408190526200007f9162000427565b838383836040518060400160405280601c81526020017f506f6f6c546f67657468657220436f6e74726f6c6c6564546f6b656e0000000081525080604051806040016040528060018152602001603160f81b81525086868160039080519060200190620000ee929190620002f0565b50805162000104906004906020840190620002f0565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a018190528183019890985260608101959095526080808601939093523085830152805180860390920182529390920190925280519401939093209092526101005250506001600160a01b038116620002015760405162461bcd60e51b815260206004820152602b60248201527f436f6e74726f6c6c6564546f6b656e2f636f6e74726f6c6c65722d6e6f742d7a60448201526a65726f2d6164647265737360a81b60648201526084015b60405180910390fd5b600680546001600160a01b0319166001600160a01b03831617905560ff82166200026e5760405162461bcd60e51b815260206004820181905260248201527f436f6e74726f6c6c6564546f6b656e2f646563696d616c732d67742d7a65726f6044820152606401620001f8565b7fff0000000000000000000000000000000000000000000000000000000000000060f883901b16610140526040516001600160a01b038216907fde72fc29218361f33503847e6f32be813f9ec92fc7c772bb59e46675c890fd0e90620002da90879087908790620004f9565b60405180910390a25050505050505050620005bc565b828054620002fe9062000569565b90600052602060002090601f0160209004810192826200032257600085556200036d565b82601f106200033d57805160ff19168380011785556200036d565b828001600101855582156200036d579182015b828111156200036d57825182559160200191906001019062000350565b506200037b9291506200037f565b5090565b5b808211156200037b576000815560010162000380565b600082601f830112620003a857600080fd5b81516001600160401b0380821115620003c557620003c5620005a6565b604051601f8301601f19908116603f01168101908282118183101715620003f057620003f0620005a6565b816040528381528660208588010111156200040a57600080fd5b6200041d84602083016020890162000536565b9695505050505050565b600080600080608085870312156200043e57600080fd5b84516001600160401b03808211156200045657600080fd5b620004648883890162000396565b955060208701519150808211156200047b57600080fd5b506200048a8782880162000396565b935050604085015160ff81168114620004a257600080fd5b60608601519092506001600160a01b0381168114620004c057600080fd5b939692955090935050565b60008151808452620004e581602086016020860162000536565b601f01601f19169290920160200192915050565b6060815260006200050e6060830186620004cb565b8281036020840152620005228186620004cb565b91505060ff83166040830152949350505050565b60005b838110156200055357818101518382015260200162000539565b8381111562000563576000848401525b50505050565b600181811c908216806200057e57607f821691505b60208210811415620005a057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e05161010051610120516101405160f81c6101605161364f620006256000396000610cd40152600061031b01526000610ff9015260006115dd0152600061162c015260006116070152600061158b015260006115b4015261364f6000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806368c7fd571161010f57806395d89b41116100a2578063a9059cbb11610071578063a9059cbb1461052e578063d505accf14610541578063dd62ed3e14610554578063f77c47911461058d57600080fd5b806395d89b41146104ed57806398b16f36146104f55780639ecb037014610508578063a457c2d71461051b57600080fd5b80638d22ea2a116100de5780638d22ea2a1461046d5780638e6d536a146104b457806390596dd1146104c7578063919974dc146104da57600080fd5b806368c7fd571461040b57806370a082311461041e5780637ecebe001461044757806385beb5f11461045a57600080fd5b806333e39b61116101875780635c19a95c116101565780635c19a95c146103b25780635d7b0758146103c5578063613ed6bd146103d8578063631b5dfb146103f857600080fd5b806333e39b61146103455780633644e5151461035a57806336bb2a3814610362578063395093511461039f57600080fd5b806323b872dd116101c357806323b872dd1461023d5780632aceb534146102505780632d0dd68614610301578063313ce5671461031457600080fd5b806306fdde03146101ea578063095ea7b31461020857806318160ddd1461022b575b600080fd5b6101f26105a0565b6040516101ff91906132fe565b60405180910390f35b61021b61021636600461315a565b610632565b60405190151581526020016101ff565b6002545b6040519081526020016101ff565b61021b61024b366004612f43565b610649565b6102c961025e366004612ef5565b6040805160608082018352600080835260208084018290529284018190526001600160a01b03949094168452600782529282902082519384018352546001600160d01b038116845262ffffff600160d01b8204811692850192909252600160e81b9004169082015290565b6040805182516001600160d01b0316815260208084015162ffffff9081169183019190915292820151909216908201526060016101ff565b61022f61030f36600461329f565b61070f565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101ff565b610358610353366004612f10565b61075b565b005b61022f6107c3565b61037561037036600461311c565b6107d2565b6040805182516001600160e01b0316815260209283015163ffffffff1692810192909252016101ff565b61021b6103ad36600461315a565b61084a565b6103586103c0366004612ef5565b610886565b6103586103d336600461315a565b610893565b6103eb6103e6366004613048565b6108f7565b6040516101ff91906132ba565b610358610406366004612f43565b610a13565b6103eb61041936600461309b565b610ace565b61022f61042c366004612ef5565b6001600160a01b031660009081526020819052604090205490565b61022f610455366004612ef5565b610b00565b6103eb6104683660046131f1565b610b1e565b61049c61047b366004612ef5565b6001600160a01b039081166000908152630100000860205260409020541690565b6040516001600160a01b0390911681526020016101ff565b6103eb6104c2366004613233565b610c01565b6103586104d536600461315a565b610c1c565b6103586104e8366004612fe9565b610c80565b6101f2610e00565b61022f6105033660046131ae565b610e0f565b61022f610516366004613184565b610e80565b61021b61052936600461315a565b610ee7565b61021b61053c36600461315a565b610f98565b61035861054f366004612f7f565b610fa5565b61022f610562366004612f10565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60065461049c906001600160a01b031681565b6060600380546105af906134db565b80601f01602080910402602001604051908101604052809291908181526020018280546105db906134db565b80156106285780601f106105fd57610100808354040283529160200191610628565b820191906000526020600020905b81548152906001019060200180831161060b57829003601f168201915b5050505050905090565b600061063f338484611109565b5060015b92915050565b6000610656848484611261565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106f55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6107028533858403611109565b60019150505b9392505050565b604080516060810182526008546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b9091041691810191909152600090610643906009908442611485565b6006546001600160a01b031633146107b55760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf82826114b1565b5050565b60006107cd611587565b905090565b60408051808201909152600080825260208201526001600160a01b038316600090815260076020526040902060010161ffff831662ffffff81106108185761081861359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201529392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161063f9185906108819086906133be565b611109565b61089033826114b1565b50565b6006546001600160a01b031633146108ed5760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf828261167a565b60608160008167ffffffffffffffff811115610915576109156135b5565b60405190808252806020026020018201604052801561093e578160200160208202803683370190505b506001600160a01b0387166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b900490931691830191909152929350905b84811015610a06576109d783600101838a8a858181106109bc576109bc61359f565b90506020020160208101906109d1919061329f565b42611485565b8482815181106109e9576109e961359f565b6020908102919091010152806109fe81613510565b91505061099a565b5091979650505050505050565b6006546001600160a01b03163314610a6d5760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b816001600160a01b0316836001600160a01b031614610abf576001600160a01b03828116600090815260016020908152604080832093871683529290522054610abf90839085906108819085906134a7565b610ac98282611765565b505050565b6001600160a01b0385166000908152600760205260409020606090610af690868686866118f6565b9695505050505050565b6001600160a01b038116600090815260056020526040812054610643565b60608160008167ffffffffffffffff811115610b3c57610b3c6135b5565b604051908082528060200260200182016040528015610b65578160200160208202803683370190505b50604080516060810182526008546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915290915060005b83811015610bf657610bc76009838989858181106109bc576109bc61359f565b838281518110610bd957610bd961359f565b602090810291909101015280610bee81613510565b915050610ba7565b509095945050505050565b6060610c116008868686866118f6565b90505b949350505050565b6006546001600160a01b03163314610c765760405162461bcd60e51b815260206004820152601f60248201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c65720060448201526064016106ec565b6107bf8282611765565b83421115610cd05760405162461bcd60e51b815260206004820181905260248201527f5469636b65742f64656c65676174652d657870697265642d646561646c696e6560448201526064016106ec565b60007f00000000000000000000000000000000000000000000000000000000000000008787610cfe8a611a93565b6040805160208101959095526001600160a01b039384169085015291166060830152608082015260a0810186905260c0016040516020818303038152906040528051906020012090506000610d5282611abb565b90506000610d6282878787611b24565b9050886001600160a01b0316816001600160a01b031614610deb5760405162461bcd60e51b815260206004820152602160248201527f5469636b65742f64656c65676174652d696e76616c69642d7369676e6174757260448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b610df589896114b1565b505050505050505050565b6060600480546105af906134db565b6001600160a01b0383166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b90049093169183019190915290610e77906001830190868642611b4c565b95945050505050565b6001600160a01b0382166000908152600760209081526040808320815160608101835281546001600160d01b038116825262ffffff600160d01b8204811695830195909552600160e81b90049093169183019190915290610c149060018301908542611485565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610f815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106ec565b610f8e3385858403611109565b5060019392505050565b600061063f338484611261565b83421115610ff55760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016106ec565b60007f00000000000000000000000000000000000000000000000000000000000000008888886110248c611a93565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061107f82611abb565b9050600061108f82878787611b24565b9050896001600160a01b0316816001600160a01b0316146110f25760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016106ec565b6110fd8a8a8a611109565b50505050505050505050565b6001600160a01b0383166111845760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0382166112005760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166112dd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0382166113595760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b611364838383611b84565b6001600160a01b038316600090815260208190526040902054818110156113f35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061142a9084906133be565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161147691815260200190565b60405180910390a35b50505050565b6000808263ffffffff168463ffffffff16116114a157836114a3565b825b9050610af686868386611c17565b6001600160a01b038281166000908152602081815260408083205463010000089092529091205490919081169083168114156114ed5750505050565b6001600160a01b03848116600090815263010000086020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918516919091179055611541818484611d30565b826001600160a01b0316846001600160a01b03167f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea260405160405180910390a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614156115d657507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b0382166116d05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106ec565b6116dc60008383611b84565b80600260008282546116ee91906133be565b90915550506001600160a01b0382166000908152602081905260408120805483929061171b9084906133be565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166117e15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6117ed82600083611b84565b6001600160a01b0382166000908152602081905260409020548181101561187c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6001600160a01b03831660009081526020819052604081208383039055600280548492906118ab9084906134a7565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b606083821461196d5760405162461bcd60e51b815260206004820152602360248201527f5469636b65742f73746172742d656e642d74696d65732d6c656e6774682d6d6160448201527f746368000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b6040805160608101825287546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b909104169181019190915260008567ffffffffffffffff8111156119c2576119c26135b5565b6040519080825280602002602001820160405280156119eb578160200160208202803683370190505b5090504260005b87811015611a8557611a568a600101858b8b85818110611a1457611a1461359f565b9050602002016020810190611a29919061329f565b8a8a86818110611a3b57611a3b61359f565b9050602002016020810190611a50919061329f565b86611b4c565b838281518110611a6857611a6861359f565b602090810291909101015280611a7d81613510565b9150506119f2565b509098975050505050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6000610643611ac8611587565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611b3587878787611dc1565b91509150611b4281611eae565b5095945050505050565b6000808263ffffffff168463ffffffff1611611b685783611b6a565b825b9050611b79878787848761209f565b979650505050505050565b816001600160a01b0316836001600160a01b03161415611ba357505050565b60006001600160a01b03841615611bd457506001600160a01b03808416600090815263010000086020526040902054165b60006001600160a01b03841615611c0557506001600160a01b03808416600090815263010000086020526040902054165b611c10828285611d30565b5050505050565b604080518082019091526000808252602082018190529081906040805180820190915260008082526020820152611c4e888861213b565b60208101519194509150611c6f9063ffffffff90811690889088906121bb16565b15611c8a57505084516001600160d01b03169150610c149050565b6000611c96898961228c565b6020810151909350909150611cb79063ffffffff808a169190899061230916565b15611cc9576000945050505050610c14565b611cdb8985838a8c604001518b6123d8565b8094508193505050611cf683602001518360200151886125a5565b63ffffffff1682600001518460000151611d109190613487565b611d1a91906133f6565b6001600160e01b03169998505050505050505050565b6001600160a01b038316158015611d4f57506001600160a01b03821615155b15611d6257611d5d8161266f565b611d8f565b6001600160a01b03831615801590611d8157506001600160a01b038216155b15611d8f57611d8f8161276f565b6001600160a01b03831615611da857611da883826127a9565b6001600160a01b03821615610ac957610ac982826128e1565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611df85750600090506003611ea5565b8460ff16601b14158015611e1057508460ff16601c14155b15611e215750600090506004611ea5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611e75573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611e9e57600060019250925050611ea5565b9150600090505b94509492505050565b6000816004811115611ec257611ec2613589565b1415611ecb5750565b6001816004811115611edf57611edf613589565b1415611f2d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106ec565b6002816004811115611f4157611f41613589565b1415611f8f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106ec565b6003816004811115611fa357611fa3613589565b14156120175760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b600481600481111561202b5761202b613589565b14156108905760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106ec565b60008060006120ae888861228c565b915091506000806120bf8a8a61213b565b9150915060006120d58b8b8487878a8f8e612912565b905060006120e98c8c8588888b8f8f612912565b90506120fe816020015183602001518a6125a5565b63ffffffff16826000015182600001516121189190613487565b61212291906133f6565b6001600160e01b03169c9b505050505050505050505050565b604080518082019091526000808252602082018190529061216a836020015162ffffff1662ffffff8016612a5c565b9150838262ffffff1662ffffff81106121855761218561359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820152919491935090915050565b60008163ffffffff168463ffffffff16111580156121e557508163ffffffff168363ffffffff1611155b15612201578263ffffffff168463ffffffff1611159050610708565b60008263ffffffff168563ffffffff16116122305761222b63ffffffff86166401000000006133d6565b612238565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116122705761226b63ffffffff86166401000000006133d6565b612278565b8463ffffffff165b64ffffffffff169091111595945050505050565b604080518082019091526000808252602082018190529082602001519150838262ffffff1662ffffff81106122c3576122c361359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff166020820181905290915061230257600091508382612185565b9250929050565b60008163ffffffff168463ffffffff161115801561233357508163ffffffff168363ffffffff1611155b1561234e578263ffffffff168463ffffffff16109050610708565b60008263ffffffff168563ffffffff161161237d5761237863ffffffff86166401000000006133d6565b612385565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116123bd576123b863ffffffff86166401000000006133d6565b6123c5565b8463ffffffff165b64ffffffffff1690911095945050505050565b6040805180820190915260008082526020820152604080518082019091526000808252602082015260008662ffffff1690506000818962ffffff1610612423578862ffffff1661243e565b600161243462ffffff8816846133be565b61243e91906134a7565b905060005b600261244f83856133be565b612459919061341c565b90508a61246b828962ffffff16612a86565b62ffffff1662ffffff81106124825761248261359f565b604080518082019091529101546001600160e01b0381168252600160e01b900463ffffffff1660208201819052909550806124ca576124c28260016133be565b935050612443565b8b6124da838a62ffffff16612a92565b62ffffff1662ffffff81106124f1576124f161359f565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b9091048116602083015290955060009061253690838116908c908b906121bb16565b905080801561255f575061255f8660200151898c63ffffffff166121bb9092919063ffffffff16565b1561256b575050612597565b806125825761257b6001846134a7565b9350612590565b61258d8360016133be565b94505b5050612443565b505050965096945050505050565b60008163ffffffff168463ffffffff16111580156125cf57508163ffffffff168363ffffffff1611155b156125e5576125de83856134be565b9050610708565b60008263ffffffff168563ffffffff16116126145761260f63ffffffff86166401000000006133d6565b61261c565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116126545761264f63ffffffff86166401000000006133d6565b61265c565b8463ffffffff165b64ffffffffff169050610af681836134a7565b806126775750565b6000806000612690600861268a86612aa2565b42612b25565b825160088054602086015160408701516001600160d01b039094167fffffff000000000000000000000000000000000000000000000000000000000090921691909117600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b919093160291909117905591945092509050801561147f576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a150505050565b806127775750565b6000806000612690600861278a86612aa2565b6040518060600160405280602c81526020016135ee602c913942612bce565b806127b2575050565b6001600160a01b03821660009081526007602052604081209080806127f9846127da87612aa2565b6040518060600160405280602281526020016135cc6022913942612bce565b82518754602085015160408601516001600160d01b039093167fffffff000000000000000000000000000000000000000000000000000000000090921691909117600160d01b62ffffff92831602177cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e81b91909216021787559194509250905080156128d9576040805183516001600160e01b0316815260208085015163ffffffff16908201526001600160a01b038816917fdd3e7cd3a260a292b0b3306b2ca62f30a7349619a9d09c58109318774c6b627d910160405180910390a25b505050505050565b806128ea575050565b6001600160a01b03821660009081526007602052604081209080806127f98461268a87612aa2565b60408051808201909152600080825260208201526129458383896020015163ffffffff166123099092919063ffffffff16565b15612969576129628789600001516001600160d01b031685612ca1565b9050612a50565b8263ffffffff16876020015163ffffffff161415612988575085612a50565b8263ffffffff16866020015163ffffffff1614156129a7575084612a50565b6129c68660200151838563ffffffff166123099092919063ffffffff16565b156129eb5750604080518082019091526000815263ffffffff83166020820152612a50565b600080612a008b8888888e60400151896123d8565b915091506000612a1982602001518460200151876125a5565b63ffffffff1683600001518360000151612a339190613487565b612a3d91906133f6565b9050612a4a838288612ca1565b93505050505b98975050505050505050565b600081612a6b57506000610643565b6107086001612a7a84866133be565b612a8491906134a7565b835b60006107088284613549565b6000610708612a848460016133be565b60006001600160d01b03821115612b215760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f303820626974730000000000000000000000000000000000000000000000000060648201526084016106ec565b5090565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825286546001600160d01b038116825262ffffff600160d01b820481166020840152600160e81b9091041691810191909152600090612ba1600188018287612d1c565b83519296509094509250612bb6908790613353565b6001600160d01b031684525091959094509092509050565b604080516060810182526000808252602082018190529181019190915260408051808201909152600080825260208201526040805160608101825287546001600160d01b0380821680845262ffffff600160d01b840481166020860152600160e81b9093049092169383019390935260009287919089161115612c645760405162461bcd60e51b81526004016106ec91906132fe565b50612c73886001018287612d1c565b83519296509094509250612c8890889061345f565b6001600160d01b03168452509196909550909350915050565b60408051808201909152600080825260208201526040518060400160405280612cdf8660200151858663ffffffff166125a59092919063ffffffff16565b612cef9063ffffffff1686613430565b8651612cfb919061337e565b6001600160e01b031681526020018363ffffffff1681525090509392505050565b60408051606081018252600080825260208201819052918101919091526040805180820190915260008082526020820152600080612d5a878761213b565b9150508463ffffffff16816020015163ffffffff161415612d8357859350915060009050612dfa565b6000612d9d8288600001516001600160d01b031688612ca1565b90508088886020015162ffffff1662ffffff8110612dbd57612dbd61359f565b825160209093015163ffffffff16600160e01b026001600160e01b03909316929092179101556000612dee88612e03565b95509093506001925050505b93509350939050565b60408051606081018252600080825260208083018290529282015290820151612e339062ffffff90811690612a92565b62ffffff9081166020840152604083015181161015612b2157600182604001818151612e5f91906133a0565b62ffffff169052505090565b80356001600160a01b0381168114612e8257600080fd5b919050565b60008083601f840112612e9957600080fd5b50813567ffffffffffffffff811115612eb157600080fd5b6020830191508360208260051b850101111561230257600080fd5b803567ffffffffffffffff81168114612e8257600080fd5b803560ff81168114612e8257600080fd5b600060208284031215612f0757600080fd5b61070882612e6b565b60008060408385031215612f2357600080fd5b612f2c83612e6b565b9150612f3a60208401612e6b565b90509250929050565b600080600060608486031215612f5857600080fd5b612f6184612e6b565b9250612f6f60208501612e6b565b9150604084013590509250925092565b600080600080600080600060e0888a031215612f9a57600080fd5b612fa388612e6b565b9650612fb160208901612e6b565b95506040880135945060608801359350612fcd60808901612ee4565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060c0878903121561300257600080fd5b61300b87612e6b565b955061301960208801612e6b565b94506040870135935061302e60608801612ee4565b92506080870135915060a087013590509295509295509295565b60008060006040848603121561305d57600080fd5b61306684612e6b565b9250602084013567ffffffffffffffff81111561308257600080fd5b61308e86828701612e87565b9497909650939450505050565b6000806000806000606086880312156130b357600080fd5b6130bc86612e6b565b9450602086013567ffffffffffffffff808211156130d957600080fd5b6130e589838a01612e87565b909650945060408801359150808211156130fe57600080fd5b5061310b88828901612e87565b969995985093965092949392505050565b6000806040838503121561312f57600080fd5b61313883612e6b565b9150602083013561ffff8116811461314f57600080fd5b809150509250929050565b6000806040838503121561316d57600080fd5b61317683612e6b565b946020939093013593505050565b6000806040838503121561319757600080fd5b6131a083612e6b565b9150612f3a60208401612ecc565b6000806000606084860312156131c357600080fd5b6131cc84612e6b565b92506131da60208501612ecc565b91506131e860408501612ecc565b90509250925092565b6000806020838503121561320457600080fd5b823567ffffffffffffffff81111561321b57600080fd5b61322785828601612e87565b90969095509350505050565b6000806000806040858703121561324957600080fd5b843567ffffffffffffffff8082111561326157600080fd5b61326d88838901612e87565b9096509450602087013591508082111561328657600080fd5b5061329387828801612e87565b95989497509550505050565b6000602082840312156132b157600080fd5b61070882612ecc565b6020808252825182820181905260009190848201906040850190845b818110156132f2578351835292840192918401916001016132d6565b50909695505050505050565b600060208083528351808285015260005b8181101561332b5785810183015185820160400152820161330f565b8181111561333d576000604083870101525b50601f01601f1916929092016040019392505050565b60006001600160d01b038083168185168083038211156133755761337561355d565b01949350505050565b60006001600160e01b038083168185168083038211156133755761337561355d565b600062ffffff8083168185168083038211156133755761337561355d565b600082198211156133d1576133d161355d565b500190565b600064ffffffffff8083168185168083038211156133755761337561355d565b60006001600160e01b038084168061341057613410613573565b92169190910492915050565b60008261342b5761342b613573565b500490565b60006001600160e01b03808316818516818304811182151516156134565761345661355d565b02949350505050565b60006001600160d01b038381169083168181101561347f5761347f61355d565b039392505050565b60006001600160e01b038381169083168181101561347f5761347f61355d565b6000828210156134b9576134b961355d565b500390565b600063ffffffff8381169083168181101561347f5761347f61355d565b600181811c908216806134ef57607f821691505b60208210811415611ab557634e487b7160e01b600052602260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135425761354261355d565b5060010190565b60008261355857613558613573565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e63655469636b65742f6275726e2d616d6f756e742d657863656564732d746f74616c2d737570706c792d74776162a26469706673582212207222193ed5d2d8f5956c3459884b91b0e3292657da8569928c1d5de06432574764736f6c63430008060033000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000600000000000000000000000035522939af8c6088f5b25b99e03d3733b7e27b4400000000000000000000000000000000000000000000000000000000000000065469636b6574000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045449434b00000000000000000000000000000000000000000000000000000000",
      "r": "0x7fb530d4db54212fd65824e88e2a0753ac64f3d2b460a5157bec9b98dc3b6c33",
      "s": "0x0bbb595841e09d1927634dc54c6df6a92afc67df692c5d2daf5510b477be4cd7",
      "v": 0,
      "chainId": 4
    }
  }
}